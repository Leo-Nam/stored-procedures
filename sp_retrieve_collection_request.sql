CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_collection_request`(
	IN IN_USER_ID							BIGINT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_collection_request
Input param 	: 1개
Job 			: 수거자가 배출자의 수거요청목록을 열람한다
Update 			: 2022.04.12
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_TRANSACTION_ID					BIGINT; 
    DECLARE CUR_USER_ID							BIGINT;
    DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;
    DECLARE CUR_DISPOSER_USER_ID				BIGINT;
    DECLARE CUR_DISPOSER_SITE_ID				BIGINT;
    DECLARE CUR_STATE							VARCHAR(20);
    DECLARE CUR_STATE_CODE						INT;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
        B.ID, 
        A.COLLECTOR_SITE_ID, 
        A.DISPOSAL_ORDER_ID, 
        E.ID, 
        E.AFFILIATED_SITE,
        C.STATE,
        C.STATE_CODE
    FROM WSTE_CLCT_TRMT_TRANSACTION A
    LEFT JOIN USERS B ON A.COLLECTOR_SITE_ID = B.AFFILIATED_SITE
    LEFT JOIN V_TRANSACTION_STATE_NAME C ON A.ID = C.TRANSACTION_ID
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER D ON A.DISPOSAL_ORDER_ID = D.ID
    LEFT JOIN USERS E ON D.DISPOSER_ID = E.ID
	WHERE 
        A.IN_PROGRESS = TRUE AND
        (B.CLASS = 201 OR B.CLASS = 202) AND
        B.ACTIVE = TRUE AND
        C.STATE_CODE NOT IN (246, 250, 251) AND
        B.ID = IN_USER_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
            
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS RETRIEVE_COLLECTION_REQUEST_TEMP;
		SET @json_data 		= NULL;
		CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
	END;        
	START TRANSACTION;	   
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS RETRIEVE_COLLECTION_REQUEST_TEMP (
		TRANSACTION_ID							BIGINT,
		USER_ID									BIGINT,
		COLLECTOR_SITE_ID						BIGINT,
        DISPOSER_ORDER_ID						BIGINT,
        DISPOSER_USER_ID						BIGINT,
        DISPOSER_SITE_ID						BIGINT,
        STATE									VARCHAR(20),
        STATE_CODE								BIGINT,
        IMG_PATH								JSON,
        WSTE_LIST								JSON,
        DISPOSER_ORDER_INFO						JSON,
        TRANSACTION_INFO						JSON,
        WSTE_GEO_INFO							JSON,
        DISPLAY_DATE							DATETIME,
        CHECK_STATE								TINYINT
        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_TRANSACTION_ID,
			CUR_USER_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_USER_ID,
			CUR_DISPOSER_SITE_ID,
            CUR_STATE,
            CUR_STATE_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		RETRIEVE_COLLECTION_REQUEST_TEMP(
			TRANSACTION_ID, 
			USER_ID, 
			COLLECTOR_SITE_ID,
			DISPOSER_ORDER_ID,
			DISPOSER_USER_ID,
			DISPOSER_SITE_ID,
            STATE,
            STATE_CODE
		)
		VALUES(
			CUR_TRANSACTION_ID,
			CUR_USER_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_USER_ID,
			CUR_DISPOSER_SITE_ID,
            CUR_STATE,
            CUR_STATE_CODE
		);
        
        CALL sp_get_disposal_img_lists(
			CUR_DISPOSER_ORDER_ID,
            '입찰',
            @IMG_PATH
        );
        
        CALL sp_get_disposal_wste_lists(
			CUR_DISPOSER_ORDER_ID,
            @WSTE_LIST
        );
        
        CALL sp_get_disposal_order_info(
			CUR_DISPOSER_ORDER_ID,
            @DISPOSER_ORDER_INFO
        );
            
		CALL sp_set_display_time_for_transaction(
			CUR_TRANSACTION_ID,
            CUR_STATE_CODE,
			@DISPLAY_DATE
		);
        
        CALL sp_get_transaction_info_2(
			CUR_TRANSACTION_ID,
			@TRANSACTION_INFO
        );
		
        CALL sp_get_disposer_wste_geo_info(
			CUR_DISPOSER_ORDER_ID,
            @WSTE_GEO_INFO
        );
                
        SELECT TRANSACTION_STATE_CODE INTO @TRANSACTION_STATE_CODE
        FROM V_TRANSACTION_STATE
        WHERE DISPOSAL_ORDER_ID = CUR_DISPOSER_ORDER_ID;
        
        SELECT COUNT(ID) INTO @RECORD_COUNT
        FROM STATE_CONTROLLER
        WHERE 
			ORDER_ID = CUR_DISPOSER_ORDER_ID AND
            USER_TYPE = 3 AND
            SITE_ID = CUR_COLLECTOR_SITE_ID;
        IF @RECORD_COUNT > 0 THEN
			SELECT TRANSACTION_STATE INTO @TRANSACTION_STATE
			FROM STATE_CONTROLLER
			WHERE 
				ORDER_ID = CUR_DISPOSER_ORDER_ID AND
				USER_TYPE = 3 AND
				SITE_ID = CUR_COLLECTOR_SITE_ID;
			
			IF @TRANSACTION_STATE_CODE = @TRANSACTION_STATE THEN
				SET @CHECK_STATE = TRUE;
			ELSE
				SET @CHECK_STATE = FALSE;
			END IF;
        ELSE
			SET @CHECK_STATE = FALSE;
        END IF;
        
        UPDATE RETRIEVE_COLLECTION_REQUEST_TEMP
        SET 
			IMG_PATH 					= @IMG_PATH,
			WSTE_LIST					= @WSTE_LIST,
			DISPOSER_ORDER_INFO			= @DISPOSER_ORDER_INFO,
			TRANSACTION_INFO 			= @TRANSACTION_INFO,
			DISPLAY_DATE 				= @DISPLAY_DATE,
            CHECK_STATE					= @CHECK_STATE,
            WSTE_GEO_INFO				= @WSTE_GEO_INFO 
        WHERE TRANSACTION_ID 			= CUR_TRANSACTION_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'TRANSACTION_ID'				, TRANSACTION_ID, 
        'USER_ID'						, USER_ID, 
        'COLLECTOR_SITE_ID'				, COLLECTOR_SITE_ID, 
        'DISPOSER_ORDER_ID'				, DISPOSER_ORDER_ID, 
        'DISPOSER_USER_ID'				, DISPOSER_USER_ID, 
        'DISPOSER_SITE_ID'				, DISPOSER_SITE_ID, 
        'STATE'							, STATE, 
        'STATE_CODE'					, STATE_CODE, 
        'IMG_PATH'						, IMG_PATH, 
        'WSTE_LIST'						, WSTE_LIST, 
        'DISPOSER_ORDER_INFO'			, DISPOSER_ORDER_INFO, 
        'TRANSACTION_INFO'				, TRANSACTION_INFO, 
        'DISPLAY_DATE'					, DISPLAY_DATE, 
        'CHECK_STATE'					, CHECK_STATE, 
        'WSTE_GEO_INFO'					, WSTE_GEO_INFO
	)) 
    INTO @json_data FROM RETRIEVE_COLLECTION_REQUEST_TEMP;
    
    IF vRowCount = 0 THEN
		SET @rtn_val = 37401;
		SET @msg_txt = 'No data found';
		SIGNAL SQLSTATE '23000';
    ELSE
		SET @rtn_val = 0;
		SET @msg_txt = 'Success';
    END IF;
	DROP TABLE IF EXISTS RETRIEVE_COLLECTION_REQUEST_TEMP;
    COMMIT;
	CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
END