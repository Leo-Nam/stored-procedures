CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_chat_rooms_for_disposer_without_handler`(
    IN IN_USER_ID					BIGINT,
    OUT OUT_ROOM_INFO				JSON
)
BEGIN

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT; 
    DECLARE CUR_ORDER_CODE						VARCHAR(10); 
    DECLARE CUR_SITE_ID							BIGINT; 
    DECLARE CUR_USER_ID							BIGINT; 
    DECLARE CUR_SITE_NAME						VARCHAR(255); 
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
		A.ORDER_CODE,
        C.COLLECTOR_ID,
        D.SITE_NAME
	FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN V_ORDER_STATE B ON A.ID = B.DISPOSER_ORDER_ID
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION C ON A.ID = C.DISPOSAL_ORDER_ID
    LEFT JOIN COMP_SITE D ON C.COLLECTOR_ID = D.ID
	WHERE 
		B.STATE_CODE IN (118) AND
        C.COLLECTOR_ID IS NOT NULL AND
        D.ACTIVE = TRUE AND
        A.SITE_ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE ID = IN_USER_ID);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP (
		ORDER_ID						BIGINT,
		ORDER_CODE						VARCHAR(10),
		SITE_ID							BIGINT,
		USER_ID							BIGINT,
		SITE_NAME						VARCHAR(255),
        AVATAR_PATH						VARCHAR(255),
        CHAT_ID							BIGINT,
        MESSAGE							VARCHAR(255),
        UNREAD							INT,
        CREATED_AT						DATETIME
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_SITE_ID,
			CUR_SITE_NAME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
        INSERT INTO ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP (
			ORDER_ID,
            ORDER_CODE,
            SITE_ID,
            SITE_NAME
        ) VALUES (
			CUR_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_SITE_ID,
			CUR_SITE_NAME
        );
        
        SELECT AVATAR_PATH INTO @AVATAR_PATH
        FROM USERS 
        WHERE 
			AFFILIATED_SITE = CUR_SITE_ID AND
            CLASS = 201 AND
            ACTIVE = TRUE;
        
        SELECT MAX(ID) INTO @MAX_ID
		FROM CHATS 
		WHERE ROOM_ID = CUR_ORDER_ID;
        
        IF @MAX_ID IS NOT NULL THEN
			SELECT 
				ID, 
                IF(DELETED = TRUE, '삭제된 메시지입니다.', MESSAGE), 
                CREATED_AT 
			INTO @CHAT_ID, @MESSAGE, @CREATED_AT 
			FROM CHATS 
			WHERE ROOM_ID = CUR_ORDER_ID 
			ORDER BY ID DESC 
			LIMIT 0, 1;
        ELSE
			SET @CHAT_ID = NULL;
            SET @MESSAGE = NULL;
        END IF;
            
		SELECT COUNT(ID) INTO @UNREAD
		FROM CHATS
		WHERE 
			ROOM_ID = CUR_ORDER_ID AND
			USER_ID <> IN_USER_ID AND
			IS_READ = FALSE;
        
        SELECT USER_ID INTO @USER_ID
        FROM CHATS
        WHERE 
			ROOM_ID = CUR_ORDER_ID AND
            USER_ID <> IN_USER_ID
        GROUP BY USER_ID, ROOM_ID;        
        
        UPDATE ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP
        SET 
			AVATAR_PATH 		= @AVATAR_PATH,
			MESSAGE			 	= @MESSAGE,
			CHAT_ID 			= @CHAT_ID,
			UNREAD	 			= @UNREAD,
			CREATED_AT	 		= @CREATED_AT,
			USER_ID	 			= @USER_ID
        WHERE ORDER_ID 			= CUR_ORDER_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
        'ORDER_CODE'				, ORDER_CODE, 
        'SITE_ID'					, SITE_ID, 
        'USER_ID'					, USER_ID, 
        'SITE_NAME'					, SITE_NAME, 
        'AVATAR_PATH'				, AVATAR_PATH, 
        'CHAT_ID'					, CHAT_ID, 
        'MESSAGE'					, MESSAGE, 
        'UNREAD'					, UNREAD, 
        'CREATED_AT'				, CREATED_AT
	)) 
    INTO OUT_ROOM_INFO FROM ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP;    
	DROP TABLE IF EXISTS ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP;
END