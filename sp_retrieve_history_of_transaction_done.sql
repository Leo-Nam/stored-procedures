CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_history_of_transaction_done`(
	IN IN_USER_ID							BIGINT,
    IN IN_COLLECTOR_SITE_ID					BIGINT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_history_of_transaction_done
Input param 	: 1개
Job 			: 배출자가 이전거래(트랜잭션 리포트가 최종적으로 확정된 거래)를 불러온다
Update 			: 2022.04.05
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_TRANSACTION_REPORT_ID			BIGINT; 
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;
    DECLARE CUR_ORDER_CODE						VARCHAR(10);
    DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
    DECLARE CUR_TRANSACTION_ID					BIGINT;
    DECLARE CUR_WSTE_CODE						VARCHAR(8);
    DECLARE CUR_WSTE_NAME						VARCHAR(255);
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
        B.ID, 
        B.ORDER_CODE, 
        A.COLLECTOR_SITE_ID, 
        A.TRANSACTION_ID, 
        A.WSTE_CODE, 
        C.NAME
    FROM TRANSACTION_REPORT A
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSER_ORDER_ID = B.ID
    LEFT JOIN WSTE_CODE C ON A.WSTE_CODE = C.CODE
    LEFT JOIN USERS D ON IF(B.SITE_ID = 0, B.DISPOSER_ID = D.ID, B.SITE_ID = D.AFFILIATED_SITE)
	WHERE 
        D.ID = IN_USER_ID AND
        (D.CLASS = 201 OR D.CLASS = 202) AND
        D.ACTIVE = TRUE AND
        A.CONFIRMED = TRUE;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
            
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS RETRIEVE_HISTORY_OF_TRANSACTION_DONE_TEMP;
		SET @json_data 		= NULL;
		CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
	END;        
	START TRANSACTION;	   
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS RETRIEVE_HISTORY_OF_TRANSACTION_DONE_TEMP (
		TRANSACTION_REPORT_ID			BIGINT,
		DISPOSER_ORDER_ID				BIGINT,
		ORDER_CODE						VARCHAR(10),
        COLLECTOR_SITE_ID				BIGINT,
        TRANSACTION_ID					BIGINT,
        WSTE_CODE						VARCHAR(8),
        WSTE_NAME						VARCHAR(255)
        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_TRANSACTION_REPORT_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_COLLECTOR_SITE_ID,
			CUR_TRANSACTION_ID,
			CUR_WSTE_CODE,
			CUR_WSTE_NAME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		RETRIEVE_HISTORY_OF_TRANSACTION_DONE_TEMP(
			TRANSACTION_REPORT_ID, 
			DISPOSER_ORDER_ID, 
			ORDER_CODE,
			COLLECTOR_SITE_ID,
			TRANSACTION_ID,
			WSTE_CODE,
			WSTE_NAME
		)
		VALUES(
			CUR_TRANSACTION_REPORT_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_COLLECTOR_SITE_ID,
			CUR_TRANSACTION_ID,
			CUR_WSTE_CODE,
			CUR_WSTE_NAME
		);
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'TRANSACTION_REPORT_ID'			, TRANSACTION_REPORT_ID, 
        'DISPOSER_ORDER_ID'				, DISPOSER_ORDER_ID, 
        'ORDER_CODE'					, ORDER_CODE, 
        'COLLECTOR_SITE_ID'				, COLLECTOR_SITE_ID, 
        'TRANSACTION_ID'				, TRANSACTION_ID, 
        'WSTE_CODE'						, WSTE_CODE, 
        'WSTE_NAME'						, WSTE_NAME
	)) 
    INTO @json_data FROM RETRIEVE_HISTORY_OF_TRANSACTION_DONE_TEMP;
    
    IF vRowCount = 0 THEN
		SET @rtn_val = 29101;
		SET @msg_txt = 'No data found';
		SIGNAL SQLSTATE '23000';
    ELSE
		SET @rtn_val = 0;
		SET @msg_txt = 'Success';
    END IF;
	DROP TABLE IF EXISTS RETRIEVE_HISTORY_OF_TRANSACTION_DONE_TEMP;
    COMMIT;
	CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
END