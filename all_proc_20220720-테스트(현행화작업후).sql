DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_add_business_area`(
	IN IN_SIGUNGU_LIST		VARCHAR(255),			/*입력값 : 추가하고자 하는 시군구코드(KIKCD_B.B_CODE)*/
	IN IN_IS_DEFAULT		TINYINT,				/*입력값 : 무료는 TRUE로 값을 전달하고 유료는 FALSE로 값을 전달한다.*/
    IN IN_SITE_ID			BIGINT,
    OUT OUT_COUNT			INT,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_add_business_area
Input param 	: 3개
Job 			: 수집운반업자 등의 허가를 갖춘 사이트가 사업지역을 추가한다.(시군구 단위)
Update 			: 2022.01.27
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.2)
*/		

	IF IN_SIGUNGU_LIST IS NOT NULL THEN
		CALL sp_parse_and_insert_sigungu_list(
			IN_SITE_ID,
			IN_SIGUNGU_LIST,
			IN_IS_DEFAULT,
			OUT_COUNT
		);
		SET rtn_val 		= 0;
		SET msg_txt 		= 'success';
    ELSE
	/*B_CODE가 존재하지 않는 경우에는 예외처리한다.*/
		SET OUT_COUNT 		= 0;
		SET rtn_val 		= 37901;
		SET msg_txt 		= 'B_CODE should not be null';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_add_sido`(
	IN IN_SIDO_CODE			VARCHAR(10),		/*입력값 : 추가하고자 하는 시군구코드(KIKCD_B.B_CODE)*/
	IN IN_IS_DEFAULT		TINYINT,				/*입력값 : 무료는 TRUE로 값을 전달하고 유료는 FALSE로 값을 전달한다.*/
    IN IN_SITE_ID			BIGINT,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_add_sido
Input param 	: 3개
Job 			: 시도의 시군구를 벌크로 편입한다.
Update 			: 2022.01.27
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/	
	DECLARE REG_DT									DATETIME;
    DECLARE NUMBER_OF_FREE_AREAS_OF_INTEREST		INT 		DEFAULT 0;
    DECLARE EXTRA_FREE								INT 		DEFAULT 0;
    DECLARE AREA_COUNT								INT 		DEFAULT 0;
    DECLARE SIGUNGU_CODE							VARCHAR(10) DEFAULT NULL;
    DECLARE ID_COUNT								INT 		DEFAULT 0;
    DECLARE COUNT_TO_BE_ADDED						INT 		DEFAULT 0;
    DECLARE SIGUNGU_COUNT							INT 		DEFAULT 0;
    DECLARE AREA_ALREADY_ADDED						INT 		DEFAULT 0;
    
	CALL sp_req_current_time(REG_DT);
	IF IN_IS_DEFAULT = TRUE THEN
	/*무료 추가인 경우*/
		SELECT COUNT(ID) INTO AREA_COUNT
		FROM BUSINESS_AREA
		WHERE 
			SITE_ID = IN_SITE_ID AND
			IS_DEFAULT <> 0 AND
			ACTIVE = TRUE;
		/*무료로 가입시킨 지역의 개수를 구하여 AREA_COUNT에 반환한다.*/
		CALL sp_req_policy_direction(
			'number_of_free_areas_of_interest',
			NUMBER_OF_FREE_AREAS_OF_INTEREST
		);
        SET EXTRA_FREE = NUMBER_OF_FREE_AREAS_OF_INTEREST - AREA_COUNT;
        /*무료로 추가할 수 있는 여유 수량을 구하여 EXTRA_FREE에 저장한다.*/
        
        IF IN_SIDO_CODE = '3600000000' THEN
            SET SIGUNGU_CODE = '3611000000';
			SELECT COUNT(ID) INTO ID_COUNT
            FROM BUSINESS_AREA
            WHERE SITE_ID = IN_SITE_ID AND KIKCD_B_CODE = SIGUNGU_CODE;
            IF ID_COUNT = 0 THEN
            /*이전에 추가한 적이 없는 경우 정상처리한다.*/
				SET COUNT_TO_BE_ADDED = 1;
				IF EXTRA_FREE >= COUNT_TO_BE_ADDED THEN
				/*추가할 여력이 있는 경우 정상처리한다.*/
					INSERT INTO BUSINESS_AREA (
						SITE_ID, 
						KIKCD_B_CODE, 
						IS_DEFAULT, 
						CREATED_AT
					) 
					VALUES (
						IN_SITE_ID, 
						SIGUNGU_CODE, 
						IN_IS_DEFAULT, 
						REG_DT
					);
					
					IF ROW_COUNT() = 1 THEN
					/*레코드가 정상적으로 생성되었다면*/
						SET rtn_val 		= 0;
						SET msg_txt 		= 'success111112222233333';
					ELSE
					/*레코드가 정상적으로 생성되지 않았다면*/
						SET rtn_val 		= 38106;
						SET msg_txt 		= 'Failed to add area of ​​interest';
					END IF;
				ELSE
				/*추가할 여력이 없는 경우 예외처리한다.*/
					SET rtn_val 		= 38105;
					SET msg_txt 		= 'can not add business area any more';
				END IF;
            ELSE
            /*이전에 추가한 적이 있는 경우 예외처리한다.*/
				SET rtn_val 		= 38104;
				SET msg_txt 		= 'area already added';
            END IF;
        ELSE
			SELECT COUNT(B_CODE) INTO SIGUNGU_COUNT
			FROM KIKCD_B
			WHERE 
				LEFT(IN_SIDO_CODE, 2) = LEFT(B_CODE, 2) AND
				CANCELED_DATE IS NULL AND
				MID(B_CODE, 3, 3) <> '000' AND
                RIGHT(B_CODE, 5) = '00000';
			
            /*아래에서 이미 편입한 관심지역의 수를 계산하여 AREA_ALREADY_ADDED 반환한다.*/
            SELECT COUNT(KIKCD_B_CODE) INTO AREA_ALREADY_ADDED
            FROM BUSINESS_AREA
            WHERE LEFT(KIKCD_B_CODE, 5) IN (
            SELECT B_CODE FROM KIKCD_B
			WHERE 
				LEFT(IN_SIDO_CODE, 2) = LEFT(B_CODE, 2) AND
				CANCELED_DATE IS NULL AND
				MID(B_CODE, 3, 3) <> '000');
			
            SET COUNT_TO_BE_ADDED = SIGUNGU_COUNT - AREA_ALREADY_ADDED;
            IF COUNT_TO_BE_ADDED > 0 THEN
				IF EXTRA_FREE >= COUNT_TO_BE_ADDED THEN
				/*추가할 여력이 있는 경우 정상처리한다.*/
					CALL sp_add_sido_without_handler(
						IN_SITE_ID,
						IN_SIDO_CODE,
						IN_IS_DEFAULT,
						rtn_val,
						msg_txt
					);
				ELSE
				/*추가할 여력이 없는 경우 예외처리한다.*/
					SET rtn_val 		= 38103;
					SET msg_txt 		= CONCAT('can not add business area any more/', SIGUNGU_COUNT, '/', AREA_ALREADY_ADDED, '/', COUNT_TO_BE_ADDED, '/', EXTRA_FREE);
				END IF;
            ELSE
            /*해당 시도에서는 추가할 시군구가 존재하지 않는 경우 예외처리한다.*/
				SET rtn_val 		= 38102;
				SET msg_txt 		= 'can not add business area in this province any more';
            END IF;
        END IF;
	ELSE
	/*유료 추가인 경우 정상처리한다.*/
		CALL sp_add_sido_without_handler(
			IN_SITE_ID,
			IN_SIDO_CODE,
			IN_IS_DEFAULT,
			rtn_val,
			msg_txt
        );
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_add_sido_without_handler`(
	IN IN_SITE_ID			BIGINT,
    IN IN_SIDO_CODE			VARCHAR(10),
    IN IN_IS_DEFAULT		TINYINT,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_add_sido_without_handler
Input param 	: 3개
Job 			: 시도의 시군구를 벌크로 편입한다.
Update 			: 2022.01.27
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/	

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_B_CODE							VARCHAR(10); 
    DECLARE REG_DT								DATETIME DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		B_CODE
    FROM KIKCD_B
	WHERE 
		LEFT(IN_SIDO_CODE, 2) = LEFT(B_CODE, 2) AND
		CANCELED_DATE IS NULL AND
        MID(B_CODE, 3, 3) <> '000' AND
        RIGHT(B_CODE, 5) = '00000' AND
		LEFT(B_CODE, 5) NOT IN (
			SELECT LEFT(KIKCD_B_CODE, 5) FROM BUSINESS_AREA
			WHERE 
				SITE_ID = IN_SITE_ID AND
				ACTIVE = TRUE
		);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_B_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		CALL sp_req_current_time(REG_DT);
		INSERT INTO 
		BUSINESS_AREA(
			SITE_ID, 
			KIKCD_B_CODE, 
			IS_DEFAULT,
			CREATED_AT
		)
		VALUES(
			IN_SITE_ID,
			CUR_B_CODE,
			IN_IS_DEFAULT,
			REG_DT
		);
	END LOOP;   
	CLOSE TEMP_CURSOR;
    
    IF vRowCount = 0 THEN
		SET rtn_val = 38201;
		SET msg_txt = 'No data added';
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Success99999';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_add_sigungu`(
	IN IN_USER_ID			BIGINT,				/*입력값 : 사업지역을 추가하고자 하는 사이트의 관리자(USERS.ID)*/
	IN IN_SIGUNGU_CODE		VARCHAR(255),		/*입력값 : 추가하고자 하는 시군구코드(KIKCD_B.B_CODE)*/
	IN IN_IS_DEFAULT		TINYINT				/*입력값 : 2는 디폴트, 1은 무료, 0은 유료*/
)
BEGIN

/*
Procedure Name 	: sp_add_sigungu
Input param 	: 3개
Job 			: 수집운반업자 등의 허가를 갖춘 사이트가 사업지역을 추가한다.(시군구 단위)
Update 			: 2022.01.27
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.2)
*/		
    DECLARE rtn_val					INT 			DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200)	DEFAULT NULL;
    DECLARE json_data				JSON			DEFAULT NULL;
    DECLARE SITE_ID					BIGINT 			DEFAULT 0;
    DECLARE COUNT_ADDED				INT 			DEFAULT 0;
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 존재한다면*/
		CALL sp_req_site_id_of_user_reg_id(
        /*사용자가 소속한 사이트의 고유등록번호를 구한다.*/
			IN_USER_ID,
            SITE_ID,
			rtn_val,
			msg_txt
        );
		IF rtn_val = 0 THEN
		/*사이트가 정상(개인사용자는 제외됨)적인 경우*/
			CALL sp_req_is_site_collector(
            /*사이트가 수거자등인지 검사한다.*/
				SITE_ID,
				rtn_val,
				msg_txt
            );
            IF rtn_val = 0 THEN
            /*사이트가 수거자 종류이면*/
				CALL sp_add_business_area(
					IN_SIGUNGU_CODE,
					IN_IS_DEFAULT,
					SITE_ID,
					COUNT_ADDED,
					rtn_val,
					msg_txt                                
				);	
				SELECT JSON_ARRAYAGG(
					JSON_OBJECT(
						'COUNT'			, COUNT_ADDED
					)
				) 
				INTO json_data;
            END IF;
		END IF;
    END IF;
    
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_add_sigungu_without_handler`(
	IN IN_SIGUNGU_CODE		VARCHAR(10),		/*입력값 : 추가하고자 하는 시군구코드(KIKCD_B.B_CODE)*/
	IN IN_IS_DEFAULT		TINYINT,				/*입력값 : 무료는 TRUE로 값을 전달하고 유료는 FALSE로 값을 전달한다.*/
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_add_sigungu_without_handler
Input param 	: 3개
Job 			: 수집운반업자 등의 허가를 갖춘 사이트가 사업지역을 추가한다.(시군구 단위)
Update 			: 2022.01.27
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.2)
*/		
	DECLARE REG_DT									DATETIME;
    DECLARE B_CODE_COUNT			INT 			DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200)	DEFAULT NULL;
    DECLARE json_data				JSON			DEFAULT NULL;
    DECLARE SITE_ID					BIGINT 			DEFAULT 0;

	IF IN_SIGUNGU_CODE IS NOT NULL THEN
		SELECT COUNT(B_CODE) INTO B_CODE_COUNT
		FROM KIKCD_B
		WHERE 
			B_CODE = IN_SIGUNGU_CODE AND
			CANCELED_DATE IS NULL;
		IF B_CODE_COUNT > 0 THEN
			CALL sp_req_current_time(REG_DT);
			INSERT INTO BUSINESS_AREA (
				SITE_ID, 
				KIKCD_B_CODE, 
				IS_DEFAULT, 
				CREATED_AT
			) 
			VALUES (
				SITE_ID, 
				IN_SIGUNGU_CODE, 
				IN_IS_DEFAULT, 
				REG_DT
			);
			
			IF ROW_COUNT() = 1 THEN
			/*레코드가 정상적으로 생성되었다면*/
				SET rtn_val 		= 0;
				SET msg_txt 		= 'success';
			ELSE
			/*레코드가 정상적으로 생성되지 않았다면*/
				SET rtn_val 		= 35301;
				SET msg_txt 		= 'Failed to add area of ​​interest';
			END IF;
		ELSE
		/*B_CODE가 존재하지 않는 경우에는 예외처리한다.*/
			SET rtn_val 		= 35302;
			SET msg_txt 		= 'B_CODE does not exist';
		END IF;
    ELSE
	/*B_CODE가 존재하지 않는 경우에는 예외처리한다.*/
		SET rtn_val 		= 35303;
		SET msg_txt 		= 'B_CODE should not be null';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_add_sigungu_without_handler_1`(
	IN IN_SIGUNGU_CODE		VARCHAR(10),			/*입력값 : 추가하고자 하는 시군구코드(KIKCD_B.B_CODE)*/
	IN IN_IS_DEFAULT		TINYINT,				/*입력값 : 무료는 TRUE로 값을 전달하고 유료는 FALSE로 값을 전달한다.*/
    IN IN_SITE_ID			BIGINT,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_add_sigungu_without_handler_1
Input param 	: 3개
Job 			: 수집운반업자 등의 허가를 갖춘 사이트가 사업지역을 추가한다.(시군구 단위)
Update 			: 2022.01.27
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.2)
*/	
	DECLARE REG_DT								DATETIME DEFAULT NOW();
	DECLARE AREA_COUNT							INT DEFAULT 0;
	DECLARE NUMBER_OF_FREE_AREAS_OF_INTEREST	VARCHAR(10) DEFAULT '0';
    
	CALL sp_req_current_time(REG_DT);
	IF IN_IS_DEFAULT = TRUE THEN
	/*무료 추가인 경우*/
		SELECT COUNT(ID) INTO AREA_COUNT
		FROM BUSINESS_AREA
		WHERE 
			SITE_ID = IN_SITE_ID AND
			IS_DEFAULT <> 0 AND
			ACTIVE = TRUE;
		/*무료로 가입시킨 지역의 개수를 구하여 AREA_COUNT에 반환한다.*/
		CALL sp_req_policy_direction(
			'number_of_free_areas_of_interest',
			NUMBER_OF_FREE_AREAS_OF_INTEREST
		);
		IF AREA_COUNT < CAST(NUMBER_OF_FREE_AREAS_OF_INTEREST AS UNSIGNED) THEN
			INSERT INTO BUSINESS_AREA (
				SITE_ID, 
				KIKCD_B_CODE, 
				IS_DEFAULT, 
				CREATED_AT
			) 
			VALUES (
				IN_SITE_ID, 
				IN_SIGUNGU_CODE, 
				IN_IS_DEFAULT, 
				REG_DT
			);
			
			IF ROW_COUNT() = 1 THEN
			/*레코드가 정상적으로 생성되었다면*/
				SET rtn_val 		= 0;
				SET msg_txt 		= 'success';
			ELSE
			/*레코드가 정상적으로 생성되지 않았다면*/
				SET rtn_val 		= 38003;
				SET msg_txt 		= 'Failed to add area of ​​interest';
			END IF;
		ELSE
		/*정책으로 결정된 무료사이트가입 개수를 넘긴 경우에는 예외처리한다.*/
			SET rtn_val 		= 38002;
			SET msg_txt 		= 'Exceeding the number of free areas of interest';
			SIGNAL SQLSTATE '23000';
		END IF;
	ELSE
	/*유료 추가인 경우*/
		INSERT INTO BUSINESS_AREA (
			SITE_ID, 
			KIKCD_B_CODE, 
			IS_DEFAULT, 
			CREATED_AT
		) 
		VALUES (
			IN_SITE_ID, 
			IN_SIGUNGU_CODE, 
			IN_IS_DEFAULT, 
			REG_DT
		);
		
		IF ROW_COUNT() = 1 THEN
		/*레코드가 정상적으로 생성되었다면*/
			SET rtn_val 		= 0;
			SET msg_txt 		= 'success';
		ELSE
		/*레코드가 정상적으로 생성되지 않았다면*/
			SET rtn_val 		= 38001;
			SET msg_txt 		= 'Failed to add area of ​​interest';
		END IF;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_count_sido_stats`(
    IN IN_DUMMY_ACTIVATE				TINYINT,
	IN IN_SIDO_CODE						VARCHAR(10),
    OUT OUT_COUNT_COL					INT,
    OUT OUT_COUNT_EMI					INT
)
BEGIN  
	SELECT COUNT(ID) INTO @COUNT_COL
    FROM COMP_SITE A
    LEFT JOIN WSTE_TRMT_BIZ B ON A.TRMT_BIZ_CODE = B.CODE
    WHERE 
		LEFT(A.KIKCD_B_CODE, 2) = LEFT(IN_SIDO_CODE, 2) AND
		IF(IN_DUMMY_ACTIVATE 	= TRUE, (A.TEST = TRUE OR A.TEST = FALSE), A.TEST = FALSE) AND
        B.USER_TYPE = 3;
        
	SELECT COUNT(ID) INTO @COUNT_EMI
    FROM COMP_SITE A
    LEFT JOIN WSTE_TRMT_BIZ B ON A.TRMT_BIZ_CODE = B.CODE
    WHERE 
		LEFT(A.KIKCD_B_CODE, 2) = LEFT(IN_SIDO_CODE, 2) AND
		IF(IN_DUMMY_ACTIVATE 	= TRUE, (A.TEST = TRUE OR A.TEST = FALSE), A.TEST = FALSE) AND
        B.USER_TYPE = 2;
        
	SET OUT_COUNT_COL = @COUNT_COL;
	SET OUT_COUNT_EMI = @COUNT_EMI;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_count_sigungu_stats`(
    IN IN_DUMMY_ACTIVATE				TINYINT,
	IN IN_SIGUNGU_CODE					VARCHAR(10),
    OUT OUT_COUNT_COL					INT,
    OUT OUT_COUNT_EMI					INT
)
BEGIN  
	SELECT COUNT(ID) INTO @COUNT_COL
    FROM COMP_SITE A
    LEFT JOIN WSTE_TRMT_BIZ B ON A.TRMT_BIZ_CODE = B.CODE
    WHERE 
		LEFT(A.KIKCD_B_CODE, 5) = LEFT(IN_SIGUNGU_CODE, 5) AND
		IF(IN_DUMMY_ACTIVATE 	= TRUE, (A.TEST = TRUE OR A.TEST = FALSE), A.TEST = FALSE) AND
        B.USER_TYPE = 3;
        
	SELECT COUNT(ID) INTO @COUNT_EMI
    FROM COMP_SITE A
    LEFT JOIN WSTE_TRMT_BIZ B ON A.TRMT_BIZ_CODE = B.CODE
    WHERE 
		LEFT(A.KIKCD_B_CODE, 5) = LEFT(IN_SIGUNGU_CODE, 5) AND
		IF(IN_DUMMY_ACTIVATE 	= TRUE, (A.TEST = TRUE OR A.TEST = FALSE), A.TEST = FALSE) AND
        B.USER_TYPE = 2;
        
	SET OUT_COUNT_COL = @COUNT_COL;
	SET OUT_COUNT_EMI = @COUNT_EMI;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_create_user`(
	IN IN_PARAMS				JSON
)
BEGIN
	DECLARE rtn_val				INT DEFAULT 0;
    DECLARE msg_txt				VARCHAR(200) DEFAULT 'success';
    DECLARE json_data			JSON DEFAULT NULL;
    DECLARE JSON_SAVED_DATA		JSON DEFAULT NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_CREATE_USER_TEMP (
		ID								VARCHAR(255),
		NAME							VARCHAR(255)
	);        
    
    INSERT INTO ADMIN_CREATE_USER_TEMP(
		ID,
        NAME
    )
	SELECT 
		ID COLLATE utf8mb4_unicode_ci,
		NAME COLLATE utf8mb4_unicode_ci
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ID		 				VARCHAR(255)		PATH "$.ID",
		NAME	 				VARCHAR(255)		PATH "$.NAME"
	)) AS PARAMS;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'ID'				, ID,
        'NAME'				, NAME
	)) 
    INTO JSON_SAVED_DATA FROM ADMIN_CREATE_USER_TEMP;      
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_CREATE_USER_TEMP_2 (
		INPUT_PARAMS					JSON,
		SAVED_DATA						JSON
	);   
    
    INSERT INTO ADMIN_CREATE_USER_TEMP_2(
		INPUT_PARAMS,
        SAVED_DATA
    ) VALUES(
		IN_PARAMS,
        JSON_SAVED_DATA
    );
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'INPUT_PARAMS'				, INPUT_PARAMS,
        'SAVED_DATA'				, SAVED_DATA
	)) 
    INTO json_data FROM ADMIN_CREATE_USER_TEMP_2; 
    
	DROP TABLE IF EXISTS ADMIN_CREATE_USER_TEMP_2;  
	DROP TABLE IF EXISTS ADMIN_CREATE_USER_TEMP;
    
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_delete_chat`(
    IN IN_PARAMS					JSON
)
BEGIN
	DECLARE rtn_val					INT DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200) DEFAULT 'success';
    DECLARE json_data				JSON DEFAULT NULL;
    DECLARE VAR_USER_ID				BIGINT DEFAULT NULL;
    DECLARE VAR_CHAT_ID_LIST		VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_CHAT_ID				BIGINT DEFAULT NULL;
	DECLARE SEPERATOR				VARCHAR(10) DEFAULT ',' COLLATE utf8mb4_unicode_ci;		/*리스트의 아이템을 분리하는 식별자로서 comma(,)를 사용하는 것으로 정의함. 식별자는 언제든지 변경가능함*/
	DECLARE REG_DT					DATETIME DEFAULT NULL;
	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= IN_PARAMS;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작1*/  
    
	SELECT USER_ID, CHAT_ID_LIST COLLATE utf8mb4_unicode_ci
    INTO VAR_USER_ID, VAR_CHAT_ID_LIST
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		CHAT_ID_LIST			VARCHAR(255)		PATH "$.CHAT_ID_LIST"
	)) AS PARAMS;    
    
    CALL sp_req_current_time(REG_DT);
    
    IF VAR_CHAT_ID_LIST IS NULL OR VAR_CHAT_ID_LIST = '' THEN
		SET json_data = IN_PARAMS;
    ELSE
		SET json_data = IN_PARAMS;
		WHILE (LOCATE(SEPERATOR, VAR_CHAT_ID_LIST) > 0) DO
			SET VAR_CHAT_ID = CAST(SUBSTRING(VAR_CHAT_ID_LIST, 1, LOCATE(SEPERATOR, VAR_CHAT_ID_LIST) - 1) AS UNSIGNED);
			SET VAR_CHAT_ID_LIST = SUBSTRING(VAR_CHAT_ID_LIST, LOCATE(SEPERATOR, VAR_CHAT_ID_LIST) + 1);  
            
			CALL sp_admin_delete_chat_without_handler(
				VAR_USER_ID,
				VAR_CHAT_ID,
				REG_DT,
				rtn_val,
				msg_txt
			);
            IF rtn_val > 0 THEN
				SIGNAL SQLSTATE '23000';
            END IF;
		END WHILE;
            
		CALL sp_admin_delete_chat_without_handler(
			VAR_USER_ID,
			CAST(VAR_CHAT_ID_LIST AS UNSIGNED),
			REG_DT,
			rtn_val,
			msg_txt
		);
		IF rtn_val > 0 THEN
			SIGNAL SQLSTATE '23000';
		END IF;
    END IF;    
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_delete_chat_without_handler`(
    IN IN_USER_ID				BIGINT,
    IN IN_CHAT_ID				BIGINT,
    IN REG_DT					DATETIME,
    OUT rtn_val					INT,
    OUT msg_txt					VARCHAR(200)
)
BEGIN
    DECLARE CHAT_EXISTS			INT DEFAULT 0;
    
	SELECT COUNT(ID) INTO CHAT_EXISTS
    FROM CHATS
    WHERE 
		USER_ID = IN_USER_ID AND
        ID = IN_CHAT_ID;
	
    IF CHAT_EXISTS = 1 THEN
		UPDATE CHATS
		SET 
			DELETED = TRUE,
			DELETED_AT = REG_DT,
            UPDATED_AT = REG_DT
		WHERE 
			USER_ID = IN_USER_ID AND
			ID = IN_CHAT_ID;
		
		IF ROW_COUNT() = 1 THEN
			SET rtn_val = 0;
			SET msg_txt = 'success';
		ELSE
			SET rtn_val = 100402;
			SET msg_txt = 'failed to delete chat message';
		END IF;
    ELSE
		SET rtn_val = 100401;
		SET msg_txt = 'chat message to delete does not exist';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_1_01_main`(
	IN IN_PARAM					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_1_01_main
Input param 	: 1개
Output param 	: 10개
Job 			: 관리자페이지(1-01-main)에 필요한 초기자료를 반환한다.
Update 			: 2022.04.20
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_USER_ID				BIGINT DEFAULT NULL;
	DECLARE ADMIN_MAIN_DURATION		VARCHAR(10) DEFAULT '0';
    DECLARE VAR_TOP					JSON DEFAULT NULL;
    DECLARE VAR_BODY				JSON DEFAULT NULL;
	DECLARE rtn_val					INT				DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200)	DEFAULT NULL;
    DECLARE json_data				JSON			DEFAULT NULL;
    
	SELECT USER_ID INTO VAR_USER_ID
    FROM JSON_TABLE(IN_PARAM, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID"
	)) AS PARAMS;
    
	CALL sp_req_policy_direction(
	/*입찰마감일로부터 배출종료일까지의 최소 소요기간(단위: day)을 반환받는다. 입찰종료일일은 방문종료일 + duration_bidding_end_date_after_the_visit_closing으로 한다.*/
		'admin_main_duration',
		ADMIN_MAIN_DURATION
	);
    
    CALL sp_admin_main_top(
		VAR_USER_ID,
		CAST(ADMIN_MAIN_DURATION AS UNSIGNED),
		VAR_TOP
    );
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_1_01_TEMP (
		ADMIN_ID						BIGINT,
		TOP								JSON,
		BODY							JSON
	);     
	INSERT ADMIN_GET_1_01_TEMP(
		ADMIN_ID, 
        TOP, 
        BODY
	) VALUES(
        VAR_USER_ID, 
        VAR_TOP, 
        VAR_BODY
	);
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ADMIN_ID'					, ADMIN_ID,
		'TOP'						, TOP,
		'BODY'						, BODY
	)) 
	INTO json_data
	FROM ADMIN_GET_1_01_TEMP;  
    
	SET rtn_val = 0;
	SET msg_txt = 'Success';
	DROP TABLE IF EXISTS ADMIN_GET_1_01_TEMP;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_chat_rooms`(
    IN IN_PARAMS					JSON
)
BEGIN
	DECLARE rtn_val					INT				DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200)	DEFAULT NULL;
    DECLARE json_data				JSON			DEFAULT NULL;
	DECLARE VAR_USER_ID				BIGINT			DEFAULT NULL;
	DECLARE VAR_USER_TYPE			INT				DEFAULT NULL;
    
	SELECT USER_ID INTO VAR_USER_ID
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID"
	)) AS PARAMS;   
    
    SELECT USER_CURRENT_TYPE INTO VAR_USER_TYPE
    FROM USERS WHERE ID = VAR_USER_ID;
    
	CALL sp_admin_get_chat_rooms_without_handler(
		VAR_USER_ID,
		VAR_USER_TYPE,
		json_data
	);
    SET rtn_val = 0;
    SET msg_txt = 'success';
	CALL sp_return_results(rtn_val, msg_txt, json_data);
	
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_chat_rooms_for_collector_without_handler`(
    IN IN_USER_ID					BIGINT,
    OUT OUT_ROOM_INFO				JSON
)
BEGIN

    DECLARE vRowCount 				INT DEFAULT 0;
    DECLARE endOfRow 				TINYINT DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID			BIGINT; 
    DECLARE CUR_ORDER_CODE			VARCHAR(10); 
    DECLARE CUR_SITE_ID				BIGINT; 
    DECLARE CUR_USER_ID				BIGINT; 
    DECLARE VAR_SITE_NAME			VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_AVATAR_PATH			VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_MAX_ID				BIGINT DEFAULT NULL;
    DECLARE VAR_CHAT_ID				BIGINT DEFAULT NULL;
    DECLARE VAR_MESSAGE				VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_UNREAD				INT DEFAULT 0;
    DECLARE VAR_CREATED_AT			DATETIME DEFAULT NOW();
    DECLARE TEMP_CURSOR		 		CURSOR FOR 
	SELECT 
		A.ID, 
		A.ORDER_CODE,
        A.SITE_ID,
        A.DISPOSER_ID
	FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN V_ORDER_STATE B ON A.ID = B.DISPOSER_ORDER_ID
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION C ON A.ID = C.DISPOSAL_ORDER_ID
    LEFT JOIN COMP_SITE D ON A.SITE_ID = D.ID
	WHERE 
		B.STATE_CODE IN (118) AND
        D.ACTIVE = TRUE AND
        C.COLLECTOR_ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE ID = IN_USER_ID);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    SET OUT_ROOM_INFO = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP (
		ORDER_ID						BIGINT,
		ORDER_CODE						VARCHAR(10),
		SITE_ID							BIGINT,
		USER_ID							BIGINT,
		SITE_NAME						VARCHAR(255),
        AVATAR_PATH						VARCHAR(255),
        CHAT_ID							BIGINT,
        MESSAGE							VARCHAR(255),
        UNREAD							INT,
        CREATED_AT						DATETIME
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_SITE_ID,
			CUR_USER_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
        INSERT INTO ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP (
			ORDER_ID,
            ORDER_CODE,
            SITE_ID,
            USER_ID
        ) VALUES (
			CUR_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_SITE_ID,
			CUR_USER_ID
        );
        
        IF CUR_SITE_ID = 0 THEN
			SELECT USER_NAME, AVATAR_PATH 
            INTO VAR_SITE_NAME, VAR_AVATAR_PATH
            FROM USERS WHERE ID = CUR_USER_ID;
        ELSE
			SELECT A.SITE_NAME, B.AVATAR_PATH
            INTO VAR_SITE_NAME, VAR_AVATAR_PATH
            FROM COMP_SITE A
            LEFT JOIN USERS B ON A.ID = B.AFFILIATED_SITE
            WHERE 
				A.ID = CUR_SITE_ID AND
				B.CLASS = 201 AND
                B.ACTIVE = TRUE;
        END IF;
        
        SELECT MAX(ID) INTO VAR_MAX_ID
		FROM CHATS 
		WHERE ROOM_ID = CUR_ORDER_ID;
        
        IF VAR_MAX_ID IS NOT NULL THEN
			SELECT 
				ID, 
                IF(DELETED = TRUE, CONCAT('삭제된 메시지입니다.', ' => collector'), CONCAT(MESSAGE, ' => collector')), 
                CREATED_AT 
			INTO VAR_CHAT_ID, VAR_MESSAGE, VAR_CREATED_AT
			FROM CHATS 
			WHERE ROOM_ID = CUR_ORDER_ID 
			ORDER BY ID DESC 
			LIMIT 0, 1;
        ELSE
			SET VAR_CHAT_ID = NULL;
            SET VAR_MESSAGE = NULL;
        END IF;
            
		SELECT COUNT(ID) INTO VAR_UNREAD
		FROM CHATS
		WHERE 
			ROOM_ID = CUR_ORDER_ID AND
			USER_ID <> IN_USER_ID AND
			IS_READ = FALSE;
        
        UPDATE ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP
        SET 
			AVATAR_PATH 		= VAR_AVATAR_PATH,
			MESSAGE			 	= VAR_MESSAGE,
			CHAT_ID 			= VAR_CHAT_ID,
			UNREAD	 			= VAR_UNREAD,
			CREATED_AT	 		= VAR_CREATED_AT,
			SITE_NAME	 		= VAR_SITE_NAME
        WHERE ORDER_ID 			= CUR_ORDER_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
        'ORDER_CODE'				, ORDER_CODE, 
        'SITE_ID'					, SITE_ID, 
        'USER_ID'					, USER_ID, 
        'SITE_NAME'					, SITE_NAME, 
        'AVATAR_PATH'				, AVATAR_PATH, 
        'CHAT_ID'					, CHAT_ID, 
        'MESSAGE'					, MESSAGE, 
        'UNREAD'					, UNREAD, 
        'CREATED_AT'				, CREATED_AT
	)) 
    INTO OUT_ROOM_INFO FROM ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP;   
	DROP TABLE IF EXISTS ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_chat_rooms_for_disposer_without_handler`(
    IN IN_USER_ID					BIGINT,
    OUT OUT_ROOM_INFO				JSON
)
BEGIN

    DECLARE vRowCount 				INT DEFAULT 0;
    DECLARE endOfRow 				TINYINT DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID			BIGINT; 
    DECLARE CUR_ORDER_CODE			VARCHAR(10); 
    DECLARE CUR_SITE_ID				BIGINT; 
    DECLARE CUR_SITE_NAME			VARCHAR(255); 
    DECLARE VAR_AVATAR_PATH			VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_MESSAGE				VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_MAX_ID				BIGINT DEFAULT NULL;
    DECLARE VAR_CREATED_AT			DATETIME DEFAULT NOW();
    DECLARE VAR_CHAT_ID				BIGINT DEFAULT NULL;
    DECLARE VAR_UNREAD				INT DEFAULT 0;
    DECLARE VAR_USER_ID				BIGINT DEFAULT NULL;
    DECLARE TEMP_CURSOR		 		CURSOR FOR 
	SELECT 
		A.ID, 
		A.ORDER_CODE,
        C.COLLECTOR_ID,
        D.SITE_NAME
	FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN V_ORDER_STATE B ON A.ID = B.DISPOSER_ORDER_ID
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION C ON A.ID = C.DISPOSAL_ORDER_ID
    LEFT JOIN COMP_SITE D ON C.COLLECTOR_ID = D.ID
	WHERE 
		B.STATE_CODE IN (118) AND
        C.COLLECTOR_ID IS NOT NULL AND
        D.ACTIVE = TRUE AND
        A.SITE_ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE ID = IN_USER_ID);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP (
		ORDER_ID						BIGINT,
		ORDER_CODE						VARCHAR(10),
		SITE_ID							BIGINT,
		USER_ID							BIGINT,
		SITE_NAME						VARCHAR(255),
        AVATAR_PATH						VARCHAR(255),
        CHAT_ID							BIGINT,
        MESSAGE							VARCHAR(255),
        UNREAD							INT,
        CREATED_AT						DATETIME
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_SITE_ID,
			CUR_SITE_NAME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
        INSERT INTO ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP (
			ORDER_ID,
            ORDER_CODE,
            SITE_ID,
            SITE_NAME
        ) VALUES (
			CUR_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_SITE_ID,
			CUR_SITE_NAME
        );
        
        SELECT AVATAR_PATH INTO VAR_AVATAR_PATH
        FROM USERS 
        WHERE 
			AFFILIATED_SITE = CUR_SITE_ID AND
            CLASS = 201 AND
            ACTIVE = TRUE;
        
        SELECT MAX(ID) INTO VAR_MAX_ID
		FROM CHATS 
		WHERE ROOM_ID = CUR_ORDER_ID;
        
        IF VAR_MAX_ID IS NOT NULL THEN
			SELECT 
				ID, 
                IF(DELETED = TRUE, CONCAT('삭제된 메시지입니다.', ' => disposer'), CONCAT(MESSAGE, ' => disposer')), 
                CREATED_AT 
			INTO VAR_CHAT_ID, VAR_MESSAGE, VAR_CREATED_AT
			FROM CHATS 
			WHERE ROOM_ID = CUR_ORDER_ID 
			ORDER BY ID DESC 
			LIMIT 0, 1;
        ELSE
			SET VAR_CHAT_ID = NULL;
            SET VAR_MESSAGE = NULL;
        END IF;
        /*    
		SELECT COUNT(ID) INTO VAR_UNREAD
		FROM CHATS
		WHERE 
			ROOM_ID = CUR_ORDER_ID AND
			USER_ID <> IN_USER_ID AND
			IS_READ = FALSE;
        */
        SELECT USER_ID INTO VAR_USER_ID
        FROM CHATS
        WHERE 
			ROOM_ID = CUR_ORDER_ID AND
            USER_ID <> IN_USER_ID
        GROUP BY USER_ID, ROOM_ID;        
        
        UPDATE ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP
        SET 
			AVATAR_PATH 		= VAR_AVATAR_PATH,
			MESSAGE			 	= VAR_MESSAGE,
			CHAT_ID 			= VAR_CHAT_ID,
			UNREAD	 			= VAR_UNREAD,
			CREATED_AT	 		= VAR_CREATED_AT,
			USER_ID	 			= VAR_USER_ID
        WHERE ORDER_ID 			= CUR_ORDER_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
        'ORDER_CODE'				, ORDER_CODE, 
        'SITE_ID'					, SITE_ID, 
        'USER_ID'					, USER_ID, 
        'SITE_NAME'					, SITE_NAME, 
        'AVATAR_PATH'				, AVATAR_PATH, 
        'CHAT_ID'					, CHAT_ID, 
        'MESSAGE'					, MESSAGE, 
        'UNREAD'					, UNREAD, 
        'CREATED_AT'				, CREATED_AT
	)) 
    INTO OUT_ROOM_INFO FROM ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP;   
	DROP TABLE IF EXISTS ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_chat_rooms_without_handler`(
    IN IN_USER_ID					BIGINT,
    IN IN_USER_TYPE					INT,
    OUT OUT_ROOM_INFO				JSON
)
BEGIN

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_ROOM_ID							BIGINT;   
    DECLARE CUR_ORDER_ID						BIGINT; 
    DECLARE CUR_ORDER_CODE						VARCHAR(10);   
    DECLARE CUR_BIDDING_ID						BIGINT; 
    DECLARE CUR_DISPOSER_USER_ID				BIGINT; 
    DECLARE CUR_COLLECTOR_USER_ID				BIGINT; 
    DECLARE CUR_STATE_CODE						INT; 
    DECLARE CUR_DISPOSER_AVATAR_PATH			VARCHAR(255);  
    DECLARE CUR_COLLECTOR_AVATAR_PATH			VARCHAR(255);   
    DECLARE CUR_LAST_CHAT_ID					BIGINT;   
    DECLARE CUR_LAST_CHAT						VARCHAR(255);   
    DECLARE CUR_LAST_CHATTED_USER_ID			BIGINT;  
    DECLARE CUR_LAST_CHATTED_AT					DATETIME;   
    DECLARE CUR_LAST_CHAT_DELETED				TINYINT;    
    DECLARE CUR_LAST_CHAT_MEDIA					TINYINT;   
    DECLARE VAR_UNREAD							INT DEFAULT 0; 
    DECLARE VAR_SITE_NAME						VARCHAR(255) DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
		A.ORDER_ID, 
		B.ORDER_CODE,
        A.BIDDING_ID,
        A.DISPOSER_USER_ID,
        A.COLLECTOR_USER_ID,
        C.STATE_CODE,
        D.AVATAR_PATH,
        E.AVATAR_PATH,
        A.LAST_CHAT_ID,
        A.LAST_CHAT,
        A.LAST_CHATTED_USER_ID,
        A.LAST_CHATTED_AT,
        A.LAST_CHAT_DELETED,
        A.LAST_CHAT_MEDIA
	FROM CHAT_ROOMS A
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.ORDER_ID = B.ID
    LEFT JOIN V_ORDER_STATE C ON B.ID = C.DISPOSER_ORDER_ID
    LEFT JOIN USERS D ON A.DISPOSER_USER_ID = D.ID
    LEFT JOIN USERS E ON A.COLLECTOR_USER_ID = E.ID
	WHERE 
		C.STATE_CODE IN (102, 118) AND
        A.STATE = C.STATE_CODE AND
        IF(IN_USER_TYPE = 2,
			A.DISPOSER_USER_ID = IN_USER_ID,
            A.COLLECTOR_USER_ID = IN_USER_ID
        );
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    SET OUT_ROOM_INFO = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP (
		ROOM_ID							BIGINT,
		ORDER_ID						BIGINT,
		ORDER_CODE						VARCHAR(10),
		BIDDING_ID						BIGINT,
		OPPONENT_USER_ID				BIGINT,
        STATE_CODE						INT,
		OPPONENT_AVATAR_PATH			VARCHAR(255),
        CHAT_ID							BIGINT,
        MESSAGE							VARCHAR(255),
        CREATED_AT						DATETIME,
        UNREAD							INT,
        SITE_NAME						VARCHAR(255)
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ROOM_ID,
			CUR_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_BIDDING_ID,
			CUR_DISPOSER_USER_ID,
			CUR_COLLECTOR_USER_ID,
			CUR_STATE_CODE,
			CUR_DISPOSER_AVATAR_PATH,
			CUR_COLLECTOR_AVATAR_PATH,
			CUR_LAST_CHAT_ID,
			CUR_LAST_CHAT,
			CUR_LAST_CHATTED_USER_ID,
			CUR_LAST_CHATTED_AT,
			CUR_LAST_CHAT_DELETED,
			CUR_LAST_CHAT_MEDIA;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
        INSERT INTO ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP (
			ROOM_ID,
			ORDER_ID,
            ORDER_CODE,
            BIDDING_ID,
            OPPONENT_USER_ID,
            STATE_CODE,
            OPPONENT_AVATAR_PATH,
            CHAT_ID,
            MESSAGE,
            CREATED_AT
        ) VALUES (
			CUR_ROOM_ID,
			CUR_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_BIDDING_ID,
			IF(IN_USER_TYPE = 2, CUR_COLLECTOR_USER_ID, CUR_DISPOSER_USER_ID),
			CUR_STATE_CODE,
			IF(IN_USER_TYPE = 2, CUR_COLLECTOR_AVATAR_PATH, CUR_DISPOSER_AVATAR_PATH),
            CUR_LAST_CHAT_ID,
            IF(CUR_LAST_CHAT_DELETED = TRUE, 
				'삭제된 메시지입니다.',
                IF(CUR_LAST_CHAT_MEDIA IS NOT NULL,
					IF(CUR_LAST_CHAT_MEDIA = 0, 
						CUR_LAST_CHAT,
						IF(CUR_LAST_CHAT_MEDIA = 1, 
							'이미지 자료입니다.', 
							'동영상 자료입니다.'
						)
					),
					NULL
				)
            ),
            CUR_LAST_CHATTED_AT
        );
            
		SELECT COUNT(ID) INTO VAR_UNREAD
		FROM CHATS
		WHERE 
			ROOM_ID = CUR_ROOM_ID AND
			USER_ID <> IN_USER_ID AND
			IS_READ = FALSE;
        
		SELECT IF(A.AFFILIATED_SITE = 0, A.USER_NAME, B.SITE_NAME) INTO VAR_SITE_NAME
		FROM USERS A
		LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID
		WHERE A.ID = IF(IN_USER_TYPE = 2, CUR_COLLECTOR_USER_ID, CUR_DISPOSER_USER_ID);
        
        UPDATE ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP
        SET 
			UNREAD	 			= VAR_UNREAD,
			SITE_NAME	 		= VAR_SITE_NAME
        WHERE ROOM_ID 			= CUR_ROOM_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ROOM_ID'					, ROOM_ID, 
		'ORDER_ID'					, ORDER_ID, 
        'ORDER_CODE'				, ORDER_CODE, 
        'BIDDING_ID'				, BIDDING_ID, 
        'OPPONENT_USER_ID'			, OPPONENT_USER_ID, 
        'OPPONENT_AVATAR_PATH'		, OPPONENT_AVATAR_PATH, 
        'CHAT_ID'					, CHAT_ID, 
        'MESSAGE'					, MESSAGE, 
        'CREATED_AT'				, CREATED_AT, 
        'UNREAD'					, UNREAD, 
        'SITE_NAME'					, SITE_NAME
	)) 
    INTO OUT_ROOM_INFO FROM ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP;   
	DROP TABLE IF EXISTS ADMIN_GET_CHAT_ROOMS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_current_background_theme`()
BEGIN
	DECLARE json_data			JSON DEFAULT NULL;
    DECLARE rtn_val				INT DEFAULT 0;
    DECLARE msg_txt				VARCHAR(200) DEFAULT NULL;
    
    SELECT JSON_OBJECT(
		'MONTH', 			ID,
        'BACKGROUND_IMG',	IMG_PATH
    ) INTO json_data
    FROM CHIUM_BACKGROUND_THEME
    WHERE ID = MONTH(CURRENT_DATE());
    
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_disposer_schedule`(
	IN IN_PARAMS			JSON
)
BEGIN
    DECLARE	VAR_ADMIN_ID	BIGINT;
    DECLARE	VAR_ORDER_ID	BIGINT;
	DECLARE rtn_val			INT				DEFAULT 0;
	DECLARE msg_txt			VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data		JSON			DEFAULT NULL;
    
	SELECT 
		ADMIN_ID,
		ORDER_ID
	INTO 
		VAR_ADMIN_ID,
		VAR_ORDER_ID
	FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ADMIN_ID	 	BIGINT				PATH "$.ADMIN_ID",
		ORDER_ID	 	BIGINT				PATH "$.ORDER_ID"
	)) AS PARAMS;
    
    CALL sp_admin_get_disposer_schedule_without_handler(
		VAR_ORDER_ID,
        json_data
    );
    CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_disposer_schedule_without_handler`(
	IN IN_ORDER_ID			BIGINT,
    OUT OUT_SCHEDULE		JSON
)
BEGIN
	DECLARE VAR_ID							BIGINT;
	DECLARE VAR_COLLECTOR_ID				BIGINT;
	DECLARE VAR_TRANSACTION_ID				BIGINT;
	DECLARE VAR_START_AT					DATETIME;
    DECLARE VAR_VISIT_START_AT				DATETIME;
    DECLARE VAR_VISIT_END_AT				DATETIME;
    DECLARE VAR_BIDDING_START_AT			DATETIME;
    DECLARE VAR_BIDDING_END_AT				DATETIME;
    DECLARE VAR_ASK_DISPOSING_AT			DATETIME;
    DECLARE VAR_RESPONSE_DISPOSING_AT		DATETIME;
    DECLARE VAR_TRANSACTION_START_AT		DATETIME;
    DECLARE VAR_TRANSACTION_END_AT			DATETIME;
    DECLARE VAR_REPORT_SUBMIT_AT			DATETIME;
    DECLARE VAR_REPORT_CONFIRMED_AT			DATETIME;
    
    DECLARE VAR_VISIT_EARLY_CLOSED_AT		DATETIME;
    DECLARE VAR_BIDDING_EARLY_CLOSED_AT		DATETIME;
    DECLARE VAR_DELETED_AT					DATETIME;
    DECLARE VAR_COLLECTOR_CONFIRMED_AT		DATETIME;
    DECLARE VAR_COLLECTOR2_CONFIRMED_AT		DATETIME;
    DECLARE VAR_MAX_SELECT_AT				DATETIME;
    DECLARE VAR_MAX_SELECT2_AT				DATETIME;
    DECLARE VAR_COLLECTOR_MAX_DECISION_AT	DATETIME;
    DECLARE VAR_COLLECTOR2_MAX_DECISION_AT	DATETIME;
    DECLARE VAR_COLLECTOR_SELECTION_CONFIRMED TINYINT;
    DECLARE VAR_BIDDERS						INT;
	DECLARE rtn_val							INT				DEFAULT 0;
	DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON			DEFAULT NULL;
    DECLARE VAR_DATA						JSON			DEFAULT NULL;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_DISPOSER_SCHEDULE_TEMP (
		ID							BIGINT,
		COLLECTOR_ID				BIGINT,
        TRANSACTION_ID				BIGINT,
		START_AT					DATETIME,
		VISIT_START_AT				DATETIME,
		VISIT_END_AT				DATETIME,
		BIDDING_START_AT			DATETIME,
		BIDDING_END_AT				DATETIME,
		ASK_DISPOSING_AT			DATETIME,
		RESPONSE_DISPOSING_AT		DATETIME,
		TRANSACTION_START_AT		DATETIME,
		TRANSACTION_END_AT			DATETIME,
		REPORT_SUBMIT_AT			DATETIME,
		REPORT_CONFIRMED_AT			DATETIME,
		
		VISIT_EARLY_CLOSED_AT		DATETIME,
		BIDDING_EARLY_CLOSED_AT		DATETIME,
		DELETED_AT					DATETIME,
		COLLECTOR_CONFIRMED_AT		DATETIME,
		COLLECTOR2_CONFIRMED_AT		DATETIME,
		MAX_SELECT_AT				DATETIME,
		MAX_SELECT2_AT				DATETIME,
		COLLECTOR_MAX_DECISION_AT	DATETIME,
		COLLECTOR2_MAX_DECISION_AT	DATETIME
	);         
    
    SELECT
		ID,
		COLLECTOR_ID,
        TRANSACTION_ID,
		CREATED_AT,
		VISIT_START_AT,
		VISIT_END_AT,
		VISIT_END_AT,
		BIDDING_END_AT,
		SELECTED_AT,
		COLLECTOR_SELECTION_CONFIRMED_AT,
		VISIT_EARLY_CLOSED_AT,
		BIDDING_EARLY_CLOSED_AT,
		DELETED_AT,
		COLLECTOR_SELECTION_CONFIRMED_AT,
		COLLECTOR_SELECTION_CONFIRMED2_AT,
		MAX_SELECT_AT,
		MAX_SELECT2_AT,
		COLLECTOR_MAX_DECISION_AT,
		COLLECTOR_MAX_DECISION2_AT,
        COLLECTOR_SELECTION_CONFIRMED,
        BIDDERS
	INTO
		VAR_ID,
		VAR_COLLECTOR_ID,
		VAR_TRANSACTION_ID,
		VAR_START_AT,
		VAR_VISIT_START_AT,
		VAR_VISIT_END_AT,
		VAR_BIDDING_START_AT,
		VAR_BIDDING_END_AT,
		VAR_ASK_DISPOSING_AT,
		VAR_RESPONSE_DISPOSING_AT,
		VAR_VISIT_EARLY_CLOSED_AT,
		VAR_BIDDING_EARLY_CLOSED_AT,
		VAR_DELETED_AT,
		VAR_COLLECTOR_CONFIRMED_AT,
		VAR_COLLECTOR2_CONFIRMED_AT,
		VAR_MAX_SELECT_AT,
		VAR_MAX_SELECT2_AT,
		VAR_COLLECTOR_MAX_DECISION_AT,
		VAR_COLLECTOR2_MAX_DECISION_AT,
		VAR_COLLECTOR_SELECTION_CONFIRMED,
		VAR_BIDDERS
	FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE ID = IN_ORDER_ID;
    
    IF VAR_COLLECTOR_ID IS NOT NULL THEN
		SELECT 
			COLLECT_ASK_END_AT,
			ACCEPT_ASK_END_AT
		INTO 
			VAR_ASK_DISPOSING_AT,
            VAR_RESPONSE_DISPOSING_AT
		FROM WSTE_CLCT_TRMT_TRANSACTION
        WHERE
			DISPOSAL_ORDER_ID = IN_ORDER_ID AND
            IN_PROGRESS = TRUE;
    END IF;
        
    SELECT
		CREATED_AT,
        CONFIRMED_AT
	INTO
		VAR_REPORT_SUBMIT_AT,
        VAR_REPORT_CONFIRMED_AT
	FROM TRANSACTION_REPORT
    WHERE TRANSACTION_ID = VAR_TRANSACTION_ID;
    
    INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_TEMP (
		ID,
		COLLECTOR_ID,
		TRANSACTION_ID,
		START_AT,
		VISIT_START_AT,
		VISIT_END_AT,
		BIDDING_START_AT,
		BIDDING_END_AT,
		ASK_DISPOSING_AT,
		RESPONSE_DISPOSING_AT,		
		VISIT_EARLY_CLOSED_AT,
		BIDDING_EARLY_CLOSED_AT,
		DELETED_AT,
		COLLECTOR_CONFIRMED_AT,
		COLLECTOR2_CONFIRMED_AT,
		MAX_SELECT_AT,
		MAX_SELECT2_AT,
		COLLECTOR_MAX_DECISION_AT,
		COLLECTOR2_MAX_DECISION_AT
    ) VALUES (
		VAR_ID,
		VAR_COLLECTOR_ID,
		VAR_TRANSACTION_ID,
		VAR_START_AT,
		VAR_VISIT_START_AT,
		VAR_VISIT_END_AT,
		VAR_BIDDING_START_AT,
		VAR_BIDDING_END_AT,
		VAR_ASK_DISPOSING_AT,
		VAR_RESPONSE_DISPOSING_AT,
		VAR_VISIT_EARLY_CLOSED_AT,
		VAR_BIDDING_EARLY_CLOSED_AT,
		VAR_DELETED_AT,
		VAR_COLLECTOR_CONFIRMED_AT,
		VAR_COLLECTOR2_CONFIRMED_AT,
		VAR_MAX_SELECT_AT,
		VAR_MAX_SELECT2_AT,
		VAR_COLLECTOR_MAX_DECISION_AT,
		VAR_COLLECTOR2_MAX_DECISION_AT
    );
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_DISPOSER_SCHEDULE_HEADER_TEMP (
		ID				BIGINT,
		COLLECTOR_ID	BIGINT,
        TRANSACTION_ID	BIGINT,
        DATA			JSON
	);      
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
		NAME			VARCHAR(255),
		START_AT		DATETIME,
        END_AT			DATETIME,
		COLOR			INT,
		TIMED			INT
	);         
        
    INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
		NAME,
        START_AT,
        END_AT,
        COLOR,
        TIMED
    ) VALUES (
		'폐기물배출등록',
        VAR_START_AT,
        VAR_START_AT,
        3,
        1
    );           
        
    INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
		NAME,
        START_AT,
        END_AT,
        COLOR,
        TIMED
    ) VALUES (
		'방문',
        IF(VAR_VISIT_START_AT IS NOT NULL,
			VAR_VISIT_START_AT,
            VAR_START_AT
		),
        VAR_VISIT_END_AT,
        2,
        1
    );             
        
    INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
		NAME,
        START_AT,
        END_AT,
        COLOR,
        TIMED
    ) VALUES (
		'입찰',
        VAR_BIDDING_START_AT,
        VAR_BIDDING_END_AT,
        2,
        1
    );               
        
    INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
		NAME,
        START_AT,
        END_AT,
        COLOR,
        TIMED
    ) VALUES (
		'폐기물수거요청일',
        /*CAST(CONCAT(DATE(VAR_ASK_DISPOSING_AT), ' ', '00:00:00') AS DATETIME),
        CAST(CONCAT(DATE(VAR_ASK_DISPOSING_AT), ' ', '23:59:59') AS DATETIME),*/
        VAR_ASK_DISPOSING_AT,
        VAR_ASK_DISPOSING_AT,
        /*ADDTIME(VAR_ASK_DISPOSING_AT, '00:00:01'),*/
        2,
        1
    );                
    IF VAR_BIDDERS > 0 THEN
		INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
			NAME,
			START_AT,
			END_AT,
			COLOR,
			TIMED
		) VALUES (
			'1순위자폐기물수거요청응답일',
			VAR_COLLECTOR_CONFIRMED_AT,
			VAR_COLLECTOR_CONFIRMED_AT,
			5,
			1
		);   
    END IF;         
    
    IF VAR_COLLECTOR_SELECTION_CONFIRMED = FALSE THEN
		INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
			NAME,
			START_AT,
			END_AT,
			COLOR,
			TIMED
		) VALUES (
			'2순위자폐기물수거요청응답일',
			VAR_COLLECTOR_CONFIRMED2_AT,
			VAR_COLLECTOR_CONFIRMED2_AT,
			4,
			1
		);   
    END IF;             
        
    INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
		NAME,
        START_AT,
        END_AT,
        COLOR,
        TIMED
    ) VALUES (
		'방문조기마감일',
        VAR_VISIT_EARLY_CLOSED_AT,
        VAR_VISIT_EARLY_CLOSED_AT,
        2,
        1
    );                 
        
    INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
		NAME,
        START_AT,
        END_AT,
        COLOR,
        TIMED
    ) VALUES (
		'입찰조기마감일',
        VAR_BIDDING_EARLY_CLOSED_AT,
        VAR_BIDDING_EARLY_CLOSED_AT,
        2,
        1
    );                  
        
    INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
		NAME,
        START_AT,
        END_AT,
        COLOR,
        TIMED
    ) VALUES (
		'폐기물삭제',
        VAR_DELETED_AT,
        VAR_DELETED_AT,
        7,
        1
    );                    
                      
    IF VAR_BIDDERS > 0 THEN
		INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
			NAME,
			START_AT,
			END_AT,
			COLOR,
			TIMED
		) VALUES (
			'1순위자응답',
			VAR_COLLECTOR_CONFIRMED_AT,
			VAR_COLLECTOR_CONFIRMED_AT,
			5,
			1
		);       
    END IF;              
	
    IF VAR_COLLECTOR_SELECTION_CONFIRMED = FALSE THEN
		INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
			NAME,
			START_AT,
			END_AT,
			COLOR,
			TIMED
		) VALUES (
			'2순위자응답',
			VAR_COLLECTOR2_CONFIRMED_AT,
			VAR_COLLECTOR2_CONFIRMED_AT,
			4,
			1
		);
	END IF;
                   
    IF VAR_BIDDERS > 0 THEN
		INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
			NAME,
			START_AT,
			END_AT,
			COLOR,
			TIMED
		) VALUES (
			'1슌위자선택기한',
			VAR_BIDDING_END_AT,
			VAR_MAX_SELECT_AT,
			5,
			1
		);      
    END IF;             
                
    IF VAR_BIDDERS > 0 THEN
		INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
			NAME,
			START_AT,
			END_AT,
			COLOR,
			TIMED
		) VALUES (
			'1순위자결정기한',
			VAR_BIDDING_END_AT,
			VAR_ASK_DISPOSING_AT,
			5,
			1
		);      
    END IF;                  
        
    IF VAR_COLLECTOR_SELECTION_CONFIRMED = FALSE THEN
		INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP (
			NAME,
			START_AT,
			END_AT,
			COLOR,
			TIMED
		) VALUES (
			'2순위자선택기한',
			ADDTIME(VAR_COLLECTOR2_MAX_DECISION_AT, '-24:00:00'),
			VAR_COLLECTOR2_MAX_DECISION_AT,
			4,
			1
		);        
    END IF;
    
    SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'NAME',			NAME,
		'START_AT',		START_AT,
		'END_AT',		END_AT,
		'COLOR',		COLOR,
		'TIMED',		TIMED
	)) INTO VAR_DATA FROM ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP;
    
    INSERT INTO ADMIN_GET_DISPOSER_SCHEDULE_HEADER_TEMP (
		ID,
        COLLECTOR_ID,
        TRANSACTION_ID,
        DATA
    ) VALUES (
		VAR_ID,
        VAR_COLLECTOR_ID,
        VAR_TRANSACTION_ID,
        VAR_DATA
    );
    
	SELECT JSON_OBJECT(
		'ID'				, ID, 
        'COLLECTOR_ID'		, COLLECTOR_ID, 
        'TRANSACTION_ID'	, TRANSACTION_ID, 
        'DATA'				, DATA
	)
    INTO OUT_SCHEDULE FROM ADMIN_GET_DISPOSER_SCHEDULE_HEADER_TEMP;
    
    DROP TABLE IF EXISTS ADMIN_GET_DISPOSER_SCHEDULE_HEADER_TEMP;
    DROP TABLE IF EXISTS ADMIN_GET_DISPOSER_SCHEDULE_DATA_TEMP;
    DROP TABLE IF EXISTS ADMIN_GET_DISPOSER_SCHEDULE_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_last_message`(
	IN IN_USER_ID				BIGINT,
	IN IN_LIST					VARCHAR(255),
    OUT OUT_LAST_MESSAGES		JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_last_message
Input param 	: 1개
Output param 	: 1개
Job 			: 파라미터로 받은 리스트 안에 있는 아이템의 갯수를 반환한다.
Update 			: 2022.01.10
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE IN_ARRAY				VARCHAR(255) DEFAULT NULL;
	DECLARE ITEM					VARCHAR(255) DEFAULT NULL;
	DECLARE REG_DT					DATETIME DEFAULT NULL;
	DECLARE SEPERATOR				VARCHAR(10) DEFAULT ',' COLLATE utf8mb4_unicode_ci;
    DECLARE VAR_ROOM_ID				BIGINT;
    DECLARE VAR_CHAT_ID				BIGINT;
    DECLARE VAR_UNREAD				INT DEFAULT 0;
    DECLARE VAR_MESSAGE				VARCHAR(255) DEFAULT NULL;
    
	SET IN_ARRAY = IN_LIST;
    /*리스트의 아이템을 분리하는 식별자로서 comma(,)를 사용하는 것으로 정의함. 식별자는 언제든지 변경가능함*/
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_LAST_MESSAGE_TEMP (
		ROOM_ID						BIGINT,
		CHAT_ID						BIGINT,
		UNREAD						INT,
		MESSAGE						VARCHAR(255)
	);     
    
	WHILE (LOCATE(SEPERATOR, IN_ARRAY) > 0) DO
		SET ITEM = SUBSTRING(IN_ARRAY, 1, LOCATE(SEPERATOR, IN_ARRAY) - 1);
		SET IN_ARRAY = SUBSTRING(IN_ARRAY, LOCATE(SEPERATOR, IN_ARRAY) + 1);  
		SET VAR_ROOM_ID = CAST(ITEM AS UNSIGNED);
		
		SELECT ID, MESSAGE 
		INTO VAR_CHAT_ID, VAR_MESSAGE
		FROM CHATS 
		WHERE ROOM_ID = VAR_ROOM_ID
		ORDER BY ID DESC 
		LIMIT 0, 1;
		
		SELECT COUNT(ID) INTO VAR_UNREAD
		FROM CHATS
		WHERE 
			ROOM_ID = VAR_ROOM_ID AND
			USER_ID <> IN_USER_ID AND
			IS_READ = FALSE;
		
		INSERT INTO ADMIN_GET_LAST_MESSAGE_TEMP (
			ROOM_ID,
			CHAT_ID,
			UNREAD,
			MESSAGE
		) VALUES (
			VAR_ROOM_ID,
			VAR_CHAT_ID,
			VAR_UNREAD,
			VAR_MESSAGE
		);
	END WHILE;
		
	SELECT ID, MESSAGE 
	INTO VAR_CHAT_ID, VAR_MESSAGE
	FROM CHATS 
	WHERE ROOM_ID = IN_ARRAY 
	ORDER BY ID DESC 
	LIMIT 0, 1;
		
	SELECT COUNT(ID) INTO VAR_UNREAD
	FROM CHATS
	WHERE 
		ROOM_ID = IN_ARRAY AND
		USER_ID <> IN_USER_ID AND
		IS_READ = FALSE;
	
	INSERT INTO ADMIN_GET_LAST_MESSAGE_TEMP (
		ROOM_ID,
		CHAT_ID,
		UNREAD,
		MESSAGE
	) VALUES (
		IN_ARRAY,
		VAR_CHAT_ID,
		VAR_UNREAD,
		VAR_MESSAGE
	);
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'ROOM_ID'				, ROOM_ID, 
        'CHAT_ID'				, CHAT_ID, 
        'UNREAD'				, UNREAD, 
        'MESSAGE'				, MESSAGE
	)) 
    INTO OUT_LAST_MESSAGES 
    FROM ADMIN_GET_LAST_MESSAGE_TEMP;
	DROP TABLE IF EXISTS ADMIN_GET_LAST_MESSAGE_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_last_message_2`(
	IN IN_USER_ID				BIGINT,
	IN IN_LIST					VARCHAR(255),
    OUT OUT_LAST_MESSAGES		JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_last_message
Input param 	: 1개
Output param 	: 1개
Job 			: 파라미터로 받은 리스트 안에 있는 아이템의 갯수를 반환한다.
Update 			: 2022.01.10
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE IN_ARRAY				VARCHAR(255) DEFAULT NULL;
	DECLARE ITEM					VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_ROOM_ID				BIGINT;
	DECLARE SEPERATOR				VARCHAR(10) DEFAULT ',' COLLATE utf8mb4_unicode_ci;
    DECLARE VAR_CHAT_ID				BIGINT;
    DECLARE VAR_MESSAGE				VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_UNREAD				INT DEFAULT 0;
    
	SET IN_ARRAY = IN_LIST;
    /*리스트의 아이템을 분리하는 식별자로서 comma(,)를 사용하는 것으로 정의함. 식별자는 언제든지 변경가능함*/
    SET @INVALID_COUNT = 0;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_LAST_MESSAGE_TEMP (
		ROOM_ID						BIGINT,
		CHAT_ID						BIGINT,
		UNREAD						INT,
		MESSAGE						VARCHAR(255)
	);     
    
	WHILE (LOCATE(SEPERATOR, IN_ARRAY) > 0) DO
		SET ITEM = SUBSTRING(IN_ARRAY, 1, LOCATE(SEPERATOR, IN_ARRAY) - 1);
		SET IN_ARRAY = SUBSTRING(IN_ARRAY, LOCATE(SEPERATOR, IN_ARRAY) + 1);  
		SET VAR_ROOM_ID = CAST(ITEM AS UNSIGNED);
		
		SELECT ID, MESSAGE 
		INTO VAR_CHAT_ID, VAR_MESSAGE
		FROM CHATS 
		WHERE ROOM_ID = VAR_ROOM_ID
		ORDER BY ID DESC 
		LIMIT 0, 1;
		
		SELECT COUNT(ID) INTO VAR_UNREAD
		FROM CHATS
		WHERE 
			ROOM_ID = VAR_ROOM_ID AND
			USER_ID <> IN_USER_ID AND
			IS_READ = FALSE;
		
		INSERT INTO ADMIN_GET_LAST_MESSAGE_TEMP (
			ROOM_ID,
			CHAT_ID,
			UNREAD,
			MESSAGE
		) VALUES (
			VAR_ROOM_ID,
			VAR_CHAT_ID,
			VAR_UNREAD,
			VAR_MESSAGE
		);
	END WHILE;
		
	SELECT ID, MESSAGE 
	INTO VAR_CHAT_ID, VAR_MESSAGE
	FROM CHATS 
	WHERE ROOM_ID = CAST(IN_ARRAY AS UNSIGNED)
	ORDER BY ID DESC 
	LIMIT 0, 1;
		
	SELECT COUNT(ID) INTO VAR_UNREAD
	FROM CHATS
	WHERE 
		ROOM_ID = CAST(IN_ARRAY AS UNSIGNED) AND
		USER_ID <> IN_USER_ID AND
		IS_READ = FALSE;
	
	INSERT INTO ADMIN_GET_LAST_MESSAGE_TEMP (
		ROOM_ID,
		CHAT_ID,
		UNREAD,
		MESSAGE
	) VALUES (
		CAST(IN_ARRAY AS UNSIGNED),
		VAR_CHAT_ID,
		VAR_UNREAD,
		VAR_MESSAGE
	);
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'ROOM_ID'				, ROOM_ID, 
        'CHAT_ID'				, CHAT_ID, 
        'UNREAD'				, UNREAD, 
        'MESSAGE'				, MESSAGE
	)) 
    INTO OUT_LAST_MESSAGES 
    FROM ADMIN_GET_LAST_MESSAGE_TEMP;
	DROP TABLE IF EXISTS ADMIN_GET_LAST_MESSAGE_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_bidding_details`(
    IN IN_PARAMS					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_comings
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_USER_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_BIDDING_INFO				JSON 			DEFAULT NULL;
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON 			DEFAULT NULL;    
    
    DECLARE VAR_ADMIN_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_MEMBER_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_SITE_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_ORDER_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_BIDDING_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_TRANSACTION_ID				BIGINT 			DEFAULT NULL;
    DECLARE VAR_REPORT_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_SITE_CATEGORY				TINYINT			DEFAULT NULL;
    DECLARE VAR_SEARCH						VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE					INT 			DEFAULT 0;
    DECLARE VAR_PAGE_SIZE					INT 			DEFAULT 1000;
    DECLARE VAR_NOTE_LIST					JSON 			DEFAULT NULL;
    
	SELECT 
		USER_ID, 
        BIDDING_ID
    INTO 
		VAR_ADMIN_ID, 
        VAR_BIDDING_ID
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		BIDDING_ID 				BIGINT				PATH "$.BIDDING_ID"
	)) AS PARAMS;
    
    CALL sp_admin_get_new_bidding_details_without_handler(
		VAR_BIDDING_ID,
        VAR_BIDDING_INFO
    );
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_BIDDING_DETAILS (
		INPUT_PARAMS					JSON,
		BIDDING_INFO					JSON,
        NOTES							JSON
	);  
    
    CALL sp_admin_get_new_notes_without_handler(
		VAR_ADMIN_ID,
		VAR_MEMBER_ID,
		VAR_SITE_ID,
		VAR_ORDER_ID,
		VAR_BIDDING_ID,
		VAR_TRANSACTION_ID,
		VAR_REPORT_ID,
		VAR_SITE_CATEGORY,
		VAR_SEARCH,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
        VAR_NOTE_LIST
    ); 
    
    INSERT INTO ADMIN_GET_NEW_BIDDING_DETAILS (
		INPUT_PARAMS,
        BIDDING_INFO,
        NOTES
    ) VALUES (
		IN_PARAMS,
        VAR_BIDDING_INFO,
        VAR_NOTE_LIST
    );
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'INPUT_PARAMS'		, INPUT_PARAMS, 
        'BIDDING_INFO'		, BIDDING_INFO, 
        'NOTES'				, NOTES
	)) 
    INTO json_data FROM ADMIN_GET_NEW_BIDDING_DETAILS;    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_BIDDING_DETAILS;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_bidding_details_without_handler`(
	IN IN_BIDDING_ID					BIGINT,
    OUT OUT_BIDDING_INFO				JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_biddings_details_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT 		DEFAULT FALSE;    
	DECLARE CUR_BIDDING_ID						BIGINT;
	DECLARE CUR_COLLECTOR_ID					BIGINT;
	DECLARE CUR_ORDER_ID						BIGINT;
	DECLARE CUR_BID_AMOUNT						FLOAT;
	DECLARE CUR_TRMT_METHOD						VARCHAR(4);
	DECLARE CUR_ACTIVE							TINYINT;
	DECLARE CUR_BIDDING_RANK					INT;
	DECLARE CUR_CREATED_AT						DATETIME;
	DECLARE CUR_DELETED							TINYINT;
	DECLARE CUR_DELETED_AT						DATETIME;
	DECLARE CUR_DATE_OF_VISIT					DATETIME;
	DECLARE CUR_RESPONSE_VISIT					TINYINT;
	DECLARE CUR_RESPONSE_VISIT_AT				DATETIME;
	DECLARE CUR_CANCEL_VISIT					TINYINT;
	DECLARE CUR_CANCEL_VISIT_AT					DATETIME;
	DECLARE CUR_GIVEUP_BIDDING					TINYINT;
	DECLARE CUR_GIVEUP_BIDDING_AT				DATETIME;
	DECLARE CUR_DATE_OF_BIDDING					DATETIME;
	DECLARE CUR_CANCEL_BIDDING					TINYINT;
	DECLARE CUR_CANCEL_BIDDING_AT				DATETIME;
	DECLARE CUR_REJECT_BIDDING					TINYINT;
	DECLARE CUR_REJECT_BIDDING_AT				DATETIME;
	DECLARE CUR_SELECTED						TINYINT;
	DECLARE CUR_SELECTED_AT						DATETIME;
	DECLARE CUR_MAKE_DECISION					TINYINT;
	DECLARE CUR_MAKE_DECISION_AT				DATETIME;
	DECLARE CUR_MAX_DECISION_AT					DATETIME;
	DECLARE CUR_ORDER_VISIBLE					TINYINT;
	DECLARE CUR_ORDER_VISIBLE_CHANGED_AT		DATETIME;
	DECLARE CUR_BIDDING_VISIBLE					TINYINT;
	DECLARE CUR_BIDDING_VISIBLE_CHANGED_AT		DATETIME;
	DECLARE CUR_UPDATED_AT						DATETIME;
	DECLARE CUR_TRANSACTION_ID					BIGINT;
	DECLARE CUR_CHECK_STATE						TINYINT;
    DECLARE VAR_RECORD_COUNT					INT				DEFAULT 0;
    DECLARE VAR_DISPOSER_NAME					VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_DISPOSER_TYPE					VARCHAR(20)		DEFAULT NULL;
    DECLARE VAR_ORDER_INFO						JSON			DEFAULT NULL;
    DECLARE VAR_TRANSACTION_INFO				JSON			DEFAULT NULL;
    DECLARE VAR_WSTE_INFO						JSON			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID,
		A.COLLECTOR_ID,
		A.DISPOSAL_ORDER_ID,
		A.BID_AMOUNT,
		A.TRMT_METHOD,
		A.ACTIVE,
		A.BIDDING_RANK,
		A.CREATED_AT,
		A.DELETED,
		A.DELETED_AT,
		A.DATE_OF_VISIT,
		A.RESPONSE_VISIT,
		A.RESPONSE_VISIT_AT,
		A.CANCEL_VISIT,
        A.CANCEL_VISIT_AT,
        A.GIVEUP_BIDDING,
        A.GIVEUP_BIDDING_AT,
        A.DATE_OF_BIDDING,
        A.CANCEL_BIDDING,
        A.CANCEL_BIDDING_AT,
        A.REJECT_BIDDING,
        A.REJECT_BIDDING_AT,
        A.SELECTED,
        A.SELECTED_AT,
        A.MAKE_DECISION,
        A.MAKE_DECISION_AT,
        A.MAX_DECISION_AT,
        A.ORDER_VISIBLE,
        A.ORDER_VISIBLE_CHANGED_AT,
        A.BIDDING_VISIBLE,
        A.BIDDING_VISIBLE_CHANGED_AT,
        A.UPDATED_AT,
        A.TRANSACTION_ID,
        A.CHECK_STATE
    FROM COLLECTOR_BIDDING A
	LEFT JOIN COMP_SITE C ON A.COLLECTOR_ID = C.ID
    LEFT JOIN KIKCD_B B ON C.KIKCD_B_CODE = B.B_CODE
    WHERE A.ID = IN_BIDDING_ID;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_BIDDING_DETAILS_WITHOUT_HANDLER_TEMP (
		BIDDING_ID						BIGINT,
		COLLECTOR_ID					BIGINT,
		ORDER_ID						BIGINT,
		BID_AMOUNT						FLOAT,
		TRMT_METHOD						VARCHAR(4),
		ACTIVE							TINYINT,
		BIDDING_RANK					INT,
		CREATED_AT						DATETIME,
		DELETED							TINYINT,
		DELETED_AT						DATETIME,
		DATE_OF_VISIT					DATETIME,
		RESPONSE_VISIT					TINYINT,
		RESPONSE_VISIT_AT				DATETIME,
		CANCEL_VISIT					TINYINT,
        CANCEL_VISIT_AT					DATETIME,
        GIVEUP_BIDDING					TINYINT,
        GIVEUP_BIDDING_AT				DATETIME,
        DATE_OF_BIDDING					DATETIME,
        CANCEL_BIDDING					TINYINT,
        CANCEL_BIDDING_AT				DATETIME,
        REJECT_BIDDING					TINYINT,
        REJECT_BIDDING_AT				DATETIME,
        SELECTED						TINYINT,
        SELECTED_AT						DATETIME,
        MAKE_DECISION					TINYINT,
        MAKE_DECISION_AT				DATETIME,
        MAX_DECISION_AT					DATETIME,
        ORDER_VISIBLE					TINYINT,
        ORDER_VISIBLE_CHANGED_AT		DATETIME,
        BIDDING_VISIBLE					TINYINT,
        BIDDING_VISIBLE_CHANGED_AT		DATETIME,
        UPDATED_AT						DATETIME,
        TRANSACTION_ID					BIGINT,
        CHECK_STATE						TINYINT,
        ORDER_INFO						JSON,
        TRANSACTION_INFO				JSON,
        WSTE_INFO						JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_BIDDING_ID,
			CUR_COLLECTOR_ID,
			CUR_ORDER_ID,
			CUR_BID_AMOUNT,
			CUR_TRMT_METHOD,
			CUR_ACTIVE,
			CUR_BIDDING_RANK,
			CUR_CREATED_AT,
			CUR_DELETED,
			CUR_DELETED_AT,
			CUR_DATE_OF_VISIT,
			CUR_RESPONSE_VISIT,
			CUR_RESPONSE_VISIT_AT,
			CUR_CANCEL_VISIT,
			CUR_CANCEL_VISIT_AT,
			CUR_GIVEUP_BIDDING,
			CUR_GIVEUP_BIDDING_AT,
			CUR_DATE_OF_BIDDING,
			CUR_CANCEL_BIDDING,
			CUR_CANCEL_BIDDING_AT,
			CUR_REJECT_BIDDING,
			CUR_REJECT_BIDDING_AT,
			CUR_SELECTED,
			CUR_SELECTED_AT,
			CUR_MAKE_DECISION,
			CUR_MAKE_DECISION_AT,
			CUR_MAX_DECISION_AT,
			CUR_ORDER_VISIBLE,
			CUR_ORDER_VISIBLE_CHANGED_AT,
			CUR_BIDDING_VISIBLE,
			CUR_BIDDING_VISIBLE_CHANGED_AT,
			CUR_UPDATED_AT,
			CUR_TRANSACTION_ID,
			CUR_CHECK_STATE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
		ADMIN_GET_NEW_BIDDING_DETAILS_WITHOUT_HANDLER_TEMP(
			BIDDING_ID,
			COLLECTOR_ID,
			ORDER_ID,
			BID_AMOUNT,
			TRMT_METHOD,
			ACTIVE,
			BIDDING_RANK,
			CREATED_AT,
			DELETED,
			DELETED_AT,
			DATE_OF_VISIT,
			RESPONSE_VISIT,
			RESPONSE_VISIT_AT,
			CANCEL_VISIT,
			CANCEL_VISIT_AT,
			GIVEUP_BIDDING,
			GIVEUP_BIDDING_AT,
			DATE_OF_BIDDING,
			CANCEL_BIDDING,
			CANCEL_BIDDING_AT,
			REJECT_BIDDING,
			REJECT_BIDDING_AT,
			SELECTED,
			SELECTED_AT,
			MAKE_DECISION,
			MAKE_DECISION_AT,
			MAX_DECISION_AT,
			ORDER_VISIBLE,
			ORDER_VISIBLE_CHANGED_AT,
			BIDDING_VISIBLE,
			BIDDING_VISIBLE_CHANGED_AT,
			UPDATED_AT,
			TRANSACTION_ID,
			CHECK_STATE
		)
		VALUES( 
			CUR_BIDDING_ID,
			CUR_COLLECTOR_ID,
			CUR_ORDER_ID,
			CUR_BID_AMOUNT,
			CUR_TRMT_METHOD,
			CUR_ACTIVE,
			CUR_BIDDING_RANK,
			CUR_CREATED_AT,
			CUR_DELETED,
			CUR_DELETED_AT,
			CUR_DATE_OF_VISIT,
			CUR_RESPONSE_VISIT,
			CUR_RESPONSE_VISIT_AT,
			CUR_CANCEL_VISIT,
			CUR_CANCEL_VISIT_AT,
			CUR_GIVEUP_BIDDING,
			CUR_GIVEUP_BIDDING_AT,
			CUR_DATE_OF_BIDDING,
			CUR_CANCEL_BIDDING,
			CUR_CANCEL_BIDDING_AT,
			CUR_REJECT_BIDDING,
			CUR_REJECT_BIDDING_AT,
			CUR_SELECTED,
			CUR_SELECTED_AT,
			CUR_MAKE_DECISION,
			CUR_MAKE_DECISION_AT,
			CUR_MAX_DECISION_AT,
			CUR_ORDER_VISIBLE,
			CUR_ORDER_VISIBLE_CHANGED_AT,
			CUR_BIDDING_VISIBLE,
			CUR_BIDDING_VISIBLE_CHANGED_AT,
			CUR_UPDATED_AT,
			CUR_TRANSACTION_ID,
			CUR_CHECK_STATE
		);
        
        CALL sp_get_disposal_order_info(
			CUR_ORDER_ID,
            VAR_ORDER_INFO
        );
        
        CALL sp_get_transaction_info_2(
			CUR_TRANSACTION_ID,
            VAR_TRANSACTION_INFO
        );
        
        CALL sp_get_collector_bidding_wste_lists(
			CUR_BIDDING_ID,
            VAR_WSTE_INFO
        );
        
        UPDATE ADMIN_GET_NEW_BIDDING_DETAILS_WITHOUT_HANDLER_TEMP
        SET 
			ORDER_INFO = VAR_ORDER_INFO,
			TRANSACTION_INFO = VAR_TRANSACTION_INFO,
			WSTE_INFO = VAR_WSTE_INFO
		WHERE BIDDING_ID = CUR_BIDDING_ID;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_OBJECT(
		'BIDDING_ID'					, BIDDING_ID, 
        'COLLECTOR_ID'					, COLLECTOR_ID, 
        'ORDER_ID'						, ORDER_ID, 
        'BID_AMOUNT'					, BID_AMOUNT, 
        'TRMT_METHOD'					, TRMT_METHOD, 
        'ACTIVE'						, ACTIVE, 
        'BIDDING_RANK'					, BIDDING_RANK, 
        'CREATED_AT'					, CREATED_AT, 
        'DELETED'						, DELETED, 
        'DELETED_AT'					, DELETED_AT, 
        'DATE_OF_VISIT'					, DATE_OF_VISIT, 
        'RESPONSE_VISIT'				, RESPONSE_VISIT, 
        'RESPONSE_VISIT_AT'				, RESPONSE_VISIT_AT, 
        'CANCEL_VISIT'					, CANCEL_VISIT, 
        'CANCEL_VISIT_AT'				, CANCEL_VISIT_AT, 
        'GIVEUP_BIDDING'				, GIVEUP_BIDDING, 
        'GIVEUP_BIDDING_AT'				, GIVEUP_BIDDING_AT, 
        'DATE_OF_BIDDING'				, DATE_OF_BIDDING, 
        'CANCEL_BIDDING'				, CANCEL_BIDDING, 
        'CANCEL_BIDDING_AT'				, CANCEL_BIDDING_AT, 
        'REJECT_BIDDING'				, REJECT_BIDDING, 
        'REJECT_BIDDING_AT'				, REJECT_BIDDING_AT, 
        'SELECTED'						, SELECTED, 
        'SELECTED_AT'					, SELECTED_AT, 
        'MAKE_DECISION'					, MAKE_DECISION, 
        'MAKE_DECISION_AT'				, MAKE_DECISION_AT, 
        'MAX_DECISION_AT'				, MAX_DECISION_AT, 
        'ORDER_VISIBLE'					, ORDER_VISIBLE, 
        'ORDER_VISIBLE_CHANGED_AT'		, ORDER_VISIBLE_CHANGED_AT, 
        'BIDDING_VISIBLE'				, BIDDING_VISIBLE, 
        'BIDDING_VISIBLE_CHANGED_AT'	, BIDDING_VISIBLE_CHANGED_AT, 
        'UPDATED_AT'					, UPDATED_AT, 
        'TRANSACTION_ID'				, TRANSACTION_ID, 
        'CHECK_STATE'					, CHECK_STATE, 
        'ORDER_INFO'					, ORDER_INFO, 
        'TRANSACTION_INFO'				, TRANSACTION_INFO, 
        'WSTE_INFO'						, WSTE_INFO
	) 
    INTO OUT_BIDDING_INFO FROM ADMIN_GET_NEW_BIDDING_DETAILS_WITHOUT_HANDLER_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_BIDDING_DETAILS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_biddings`(
    IN IN_PARAMS					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_comings
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_USER_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_SEARCH						VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_PAGE_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_OUT_LIST					JSON 			DEFAULT NULL;
    DECLARE VAR_OUT_RECORD_COUNT			INT 			DEFAULT 0;
    DECLARE VAR_LAST_PAGE					INT 			DEFAULT NULL;
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON 			DEFAULT NULL;
    DECLARE VAR_DUMMY_ACTIVATE				TINYINT			DEFAULT FALSE;
    
	SELECT 
		USER_ID, 
        SEARCH, 
        OFFSET_SIZE, 
        PAGE_SIZE
    INTO 
		VAR_USER_ID, 
        VAR_SEARCH, 
        VAR_OFFSET_SIZE, 
        VAR_PAGE_SIZE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		SEARCH	 				VARCHAR(255)		PATH "$.SEARCH",
		OFFSET_SIZE 			INT 				PATH "$.OFFSET_SIZE",
		PAGE_SIZE 				INT 				PATH "$.PAGE_SIZE"
	)) AS PARAMS;
    
    CALL sp_req_policy_direction(
		'dummy_activate',
        VAR_DUMMY_ACTIVATE
    );
    
    CALL sp_admin_get_new_biddings_without_handler(
		VAR_SEARCH,
		VAR_DUMMY_ACTIVATE,
        VAR_OFFSET_SIZE,
        VAR_PAGE_SIZE,
        VAR_OUT_RECORD_COUNT,
        VAR_OUT_LIST
    );
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_BIDDINGS_TEMP (
		INPUT_PARAMS					JSON,
		LAST_PAGE						INT,
		BIDDING_LIST					JSON
	);      
	
	SET VAR_LAST_PAGE = CEILING(VAR_OUT_RECORD_COUNT / VAR_PAGE_SIZE);
    
    INSERT INTO ADMIN_GET_NEW_BIDDINGS_TEMP (
		INPUT_PARAMS,
        LAST_PAGE,
        BIDDING_LIST
    ) VALUES (
		IN_PARAMS,
        VAR_LAST_PAGE,
        VAR_OUT_LIST
    );
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'INPUT_PARAMS'				, INPUT_PARAMS, 
        'LAST_PAGE'					, LAST_PAGE, 
        'BIDDING_LIST'				, BIDDING_LIST
	)) 
    INTO json_data FROM ADMIN_GET_NEW_BIDDINGS_TEMP;    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_BIDDINGS_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_biddings_without_handler`(
	IN IN_SEARCH						VARCHAR(255),
    IN IN_DUMMY_ACTIVATE				TINYINT,
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    OUT OUT_RECORD_COUNT				INT,
    OUT OUT_SITE_LIST					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_comings
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT 		DEFAULT FALSE;    
	DECLARE CUR_BIDDING_ID						BIGINT;
	DECLARE CUR_COLLECTOR_ID					BIGINT;
	DECLARE CUR_ORDER_ID						BIGINT;
	DECLARE CUR_BID_AMOUNT						FLOAT;
	DECLARE CUR_TRMT_METHOD						VARCHAR(4);
	DECLARE CUR_ACTIVE							TINYINT;
	DECLARE CUR_BIDDING_RANK					INT;
	DECLARE CUR_CREATED_AT						DATETIME;
	DECLARE CUR_CHECK_STATE						TINYINT;
    DECLARE CUR_COLLECTOR_NAME					VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_RECORD_COUNT					INT				DEFAULT 0;
    DECLARE VAR_DISPOSER_NAME					VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_DISPOSER_SITE_NAME				VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_DISPOSER_TYPE					VARCHAR(20)		DEFAULT NULL;
    DECLARE VAR_DISPOSER_SITE_ID				BIGINT			DEFAULT NULL;
    DECLARE VAR_DISPOSER_ID						BIGINT			DEFAULT NULL;
    DECLARE VAR_ORDER_CODE						VARCHAR(10)		DEFAULT NULL;
    DECLARE VAR_COLLECTOR_PHONE					VARCHAR(40)		DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID,
		A.COLLECTOR_ID,
		A.DISPOSAL_ORDER_ID,
		A.BID_AMOUNT,
		A.TRMT_METHOD,
		A.ACTIVE,
		A.BIDDING_RANK,
		A.CREATED_AT,
        A.CHECK_STATE,
        C.SITE_NAME
    FROM COLLECTOR_BIDDING A
	LEFT JOIN COMP_SITE C ON A.COLLECTOR_ID = C.ID
    LEFT JOIN KIKCD_B B ON C.KIKCD_B_CODE = B.B_CODE
    WHERE 
		IF(IN_DUMMY_ACTIVATE = TRUE, (C.TEST = TRUE OR C.TEST = FALSE), C.TEST = FALSE) AND
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.COLLECTOR_ID IN (
					SELECT A1.ID 
                    FROM COMP_SITE A1
                    LEFT JOIN COMPANY A2 ON A1.COMP_ID = A2.ID
                    WHERE 
						A1.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A1.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.COMP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A2.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A1.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                ) OR
				A.DISPOSAL_ORDER_ID LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.B_CODE LIKE CONCAT('%', IN_SEARCH, '%')
			)
		)
    ORDER BY A.CREATED_AT DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	SELECT COUNT(A.ID) INTO VAR_RECORD_COUNT
    FROM COLLECTOR_BIDDING A
	LEFT JOIN COMP_SITE C ON A.COLLECTOR_ID = C.ID
    LEFT JOIN KIKCD_B B ON C.KIKCD_B_CODE = B.B_CODE
    WHERE 
		IF(IN_DUMMY_ACTIVATE = TRUE, (C.TEST = TRUE OR C.TEST = FALSE), C.TEST = FALSE) AND
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.COLLECTOR_ID IN (
					SELECT A1.ID 
                    FROM COMP_SITE A1
                    LEFT JOIN COMPANY A2 ON A1.COMP_ID = A2.ID
                    WHERE 
						A1.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A1.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.COMP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A2.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A1.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                ) OR
				A.DISPOSAL_ORDER_ID LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.B_CODE LIKE CONCAT('%', IN_SEARCH, '%')
			)
		);
    
    SET OUT_RECORD_COUNT = VAR_RECORD_COUNT;
    SET OUT_SITE_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_BIDDINGS_WITHOUT_HANDLER_TEMP (
		BIDDING_ID						BIGINT,
		COLLECTOR_ID					BIGINT,
		ORDER_ID						BIGINT,
		BID_AMOUNT						FLOAT,
		TRMT_METHOD						VARCHAR(4),
		ACTIVE							TINYINT,
		BIDDING_RANK					INT,
		CREATED_AT						DATETIME,
        CHECK_STATE						TINYINT,
        COLLECTOR_NAME					VARCHAR(255),
        DISPOSER_NAME					VARCHAR(255),
        DISPOSER_TYPE					VARCHAR(20),
        ORDER_CODE						VARCHAR(10),
        COLLECTOR_PHONE					VARCHAR(255)
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_BIDDING_ID,
			CUR_COLLECTOR_ID,
			CUR_ORDER_ID,
			CUR_BID_AMOUNT,
			CUR_TRMT_METHOD,
			CUR_ACTIVE,
			CUR_BIDDING_RANK,
			CUR_CREATED_AT,
			CUR_CHECK_STATE,
            CUR_COLLECTOR_NAME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
		ADMIN_GET_NEW_BIDDINGS_WITHOUT_HANDLER_TEMP(
			BIDDING_ID,
			COLLECTOR_ID,
			ORDER_ID,
			BID_AMOUNT,
			TRMT_METHOD,
			ACTIVE,
			BIDDING_RANK,
			CREATED_AT,
			CHECK_STATE,
            COLLECTOR_NAME
		)
		VALUES( 
			CUR_BIDDING_ID,
			CUR_COLLECTOR_ID,
			CUR_ORDER_ID,
			CUR_BID_AMOUNT,
			CUR_TRMT_METHOD,
			CUR_ACTIVE,
			CUR_BIDDING_RANK,
			CUR_CREATED_AT,
			CUR_CHECK_STATE,
            CUR_COLLECTOR_NAME
		);
        
        SELECT SITE_ID, DISPOSER_ID, ORDER_CODE INTO VAR_DISPOSER_SITE_ID, VAR_DISPOSER_ID, VAR_ORDER_CODE
        FROM SITE_WSTE_DISPOSAL_ORDER
        WHERE ID = CUR_ORDER_ID;
        
        IF VAR_DISPOSER_SITE_ID = 0 THEN
			SET VAR_DISPOSER_TYPE = "개";
            SELECT USER_NAME INTO VAR_DISPOSER_NAME
            FROM USERS
            WHERE ID = VAR_DISPOSER_ID;
        ELSE
			SET VAR_DISPOSER_TYPE = "사";
            SELECT SITE_NAME INTO VAR_DISPOSER_NAME
            FROM COMP_SITE
            WHERE ID = VAR_DISPOSER_SITE_ID;
        END IF;

		SELECT PHONE INTO VAR_COLLECTOR_PHONE
		FROM USERS
		WHERE 
			AFFILIATED_SITE = CUR_COLLECTOR_ID AND
			CLASS = 201;
        
        UPDATE ADMIN_GET_NEW_BIDDINGS_WITHOUT_HANDLER_TEMP
        SET
			DISPOSER_NAME = VAR_DISPOSER_NAME,
            DISPOSER_TYPE = VAR_DISPOSER_TYPE,
            ORDER_CODE = VAR_ORDER_CODE,
            COLLECTOR_PHONE = VAR_COLLECTOR_PHONE
		WHERE BIDDING_ID = CUR_BIDDING_ID;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'							, BIDDING_ID, 
        'COLLECTOR_ID'					, COLLECTOR_ID, 
        'ORDER_ID'						, ORDER_ID, 
        'BID_AMOUNT'					, BID_AMOUNT, 
        'TRMT_METHOD'					, TRMT_METHOD, 
        'ACTIVE'						, ACTIVE, 
        'BIDDING_RANK'					, BIDDING_RANK, 
        'CREATED_AT'					, CREATED_AT, 
        'CHECK_STATE'					, CHECK_STATE, 
        'COLLECTOR_NAME'				, COLLECTOR_NAME, 
        'DISPOSER_NAME'					, DISPOSER_NAME, 
        'DISPOSER_TYPE'					, DISPOSER_TYPE, 
        'ORDER_CODE'					, ORDER_CODE, 
        'COLLECTOR_PHONE'				, COLLECTOR_PHONE
	)) 
    INTO OUT_SITE_LIST FROM ADMIN_GET_NEW_BIDDINGS_WITHOUT_HANDLER_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_BIDDINGS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_comings`(
    IN IN_PARAMS					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_comings
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_USER_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_SEARCH						VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_PAGE_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_OUT_LIST					JSON 			DEFAULT NULL;
    DECLARE VAR_OUT_RECORD_COUNT			INT 			DEFAULT 0;
    DECLARE VAR_LAST_PAGE					INT 			DEFAULT NULL;
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON 			DEFAULT NULL;
    DECLARE VAR_DUMMY_ACTIVATE				TINYINT			DEFAULT FALSE;
    
	SELECT 
		USER_ID, 
        SEARCH, 
        OFFSET_SIZE, 
        PAGE_SIZE
    INTO 
		VAR_USER_ID, 
        VAR_SEARCH, 
        VAR_OFFSET_SIZE, 
        VAR_PAGE_SIZE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		SEARCH	 				VARCHAR(255)		PATH "$.SEARCH",
		OFFSET_SIZE 			INT 				PATH "$.OFFSET_SIZE",
		PAGE_SIZE 				INT 				PATH "$.PAGE_SIZE"
	)) AS PARAMS;
    
    CALL sp_req_policy_direction(
		'dummy_activate',
        VAR_DUMMY_ACTIVATE
    );
    
    CALL sp_admin_get_new_comings_without_handler(
		VAR_SEARCH,
		VAR_DUMMY_ACTIVATE,
        VAR_OFFSET_SIZE,
        VAR_PAGE_SIZE,
        VAR_OUT_RECORD_COUNT,
        VAR_OUT_LIST
    );
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_COMINGS (
		INPUT_PARAMS					JSON,
		LAST_PAGE						INT,
		ORDER_LIST						JSON
	);      
	
	SET VAR_LAST_PAGE = CEILING(VAR_OUT_RECORD_COUNT / VAR_PAGE_SIZE);
    
    INSERT INTO ADMIN_GET_NEW_COMINGS (
		INPUT_PARAMS,
        LAST_PAGE,
        ORDER_LIST
    ) VALUES (
		IN_PARAMS,
        VAR_LAST_PAGE,
        VAR_OUT_LIST
    );
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'INPUT_PARAMS'				, INPUT_PARAMS, 
        'LAST_PAGE'					, LAST_PAGE, 
        'ORDER_LIST'				, ORDER_LIST
	)) 
    INTO json_data FROM ADMIN_GET_NEW_COMINGS;    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_COMINGS;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_comings_detail`(
    IN IN_PARAMS					JSON
)
BEGIN
    DECLARE VAR_USER_ID												BIGINT DEFAULT NULL;
    DECLARE JSON_ORDER_INFO											JSON DEFAULT NULL;
    DECLARE JSON_COLLECTORS_WHOSE_BIZ_AREA_OF_INTEREST_INFO			JSON DEFAULT NULL;
    DECLARE rtn_val													INT DEFAULT 0;
    DECLARE msg_txt													VARCHAR(200) DEFAULT 'success';
    DECLARE json_data												JSON DEFAULT NULL;
    DECLARE VAR_BCODE												VARCHAR(10) DEFAULT NULL;
    
    DECLARE VAR_ADMIN_ID											BIGINT DEFAULT NULL;
    DECLARE VAR_MEMBER_ID											BIGINT DEFAULT NULL;
    DECLARE VAR_SITE_ID												BIGINT DEFAULT NULL;
    DECLARE VAR_ORDER_ID											BIGINT DEFAULT NULL;
    DECLARE VAR_BIDDING_ID											BIGINT DEFAULT NULL;
    DECLARE VAR_TRANSACTION_ID										BIGINT DEFAULT NULL;
    DECLARE VAR_REPORT_ID											BIGINT DEFAULT NULL;
    DECLARE VAR_SITE_CATEGORY										TINYINT DEFAULT NULL;
    DECLARE VAR_SEARCH												VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE											INT DEFAULT 0;
    DECLARE VAR_PAGE_SIZE											INT DEFAULT 1000;
    DECLARE VAR_NOTE_LIST											JSON DEFAULT NULL;
    
	SELECT USER_ID, ORDER_ID
    INTO VAR_ADMIN_ID, VAR_ORDER_ID
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		ORDER_ID 				BIGINT				PATH "$.ORDER_ID"
	)) AS PARAMS;   
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_COMINGS_DETAIL (
        USER_ID									BIGINT,
        ORDER_ID								BIGINT,
        ORDER_INFO								JSON,
        COLLECTORS_WHOSE_BIZ_AREA_OF_INTEREST 	JSON,
        NOTES								 	JSON,
        INPUT_PARAM								JSON
	);
    
	CALL sp_admin_get_new_comings_detail_without_handler(
		VAR_ORDER_ID,
		JSON_ORDER_INFO
	);
    
    SELECT KIKCD_B_CODE INTO VAR_BCODE
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE ID = VAR_ORDER_ID;
    
    SET VAR_BCODE = CONCAT(LEFT(VAR_BCODE, 5), '00000');
    
    CALL sp_get_site_list_whose_biz_areas_of_interest_without_handler(
		VAR_USER_ID,
        VAR_BCODE,
        JSON_COLLECTORS_WHOSE_BIZ_AREA_OF_INTEREST_INFO
    );
    
    CALL sp_admin_get_new_notes_without_handler(
		VAR_ADMIN_ID,
		VAR_MEMBER_ID,
		VAR_SITE_ID,
		VAR_ORDER_ID,
		VAR_BIDDING_ID,
		VAR_TRANSACTION_ID,
		VAR_REPORT_ID,
		VAR_SITE_CATEGORY,
		VAR_SEARCH,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
        VAR_NOTE_LIST
    );
    
	INSERT INTO 
	ADMIN_GET_NEW_COMINGS_DETAIL(
		USER_ID,
		ORDER_ID,
		ORDER_INFO,
		COLLECTORS_WHOSE_BIZ_AREA_OF_INTEREST,
		NOTES
	)
	VALUES(
		VAR_USER_ID,
		VAR_ORDER_ID,
		JSON_ORDER_INFO,
		JSON_COLLECTORS_WHOSE_BIZ_AREA_OF_INTEREST_INFO,
		VAR_NOTE_LIST
	);
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'USER_ID'									, VAR_USER_ID,
        'ORDER_ID'									, VAR_ORDER_ID,
        'ORDER_INFO'								, JSON_ORDER_INFO,
        'COLLECTORS_WHOSE_BIZ_AREA_OF_INTEREST'		, COLLECTORS_WHOSE_BIZ_AREA_OF_INTEREST,
        'NOTES'										, NOTES,
        'INPUT_PARAM'								, IN_PARAMS
	)) 
    INTO json_data FROM ADMIN_GET_NEW_COMINGS_DETAIL;
    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_COMINGS_DETAIL;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_comings_detail_without_handler`(
	IN IN_ORDER_ID						BIGINT,
    OUT OUT_ORDER_INFO					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_retrieve_site_info_without_handler
Input param 	: 1개
Job 			: 사이트의 정보를 반환한다.
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 								INT DEFAULT 0;
    DECLARE endOfRow 								TINYINT 		DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID							BIGINT;   
    DECLARE CUR_DISPOSER_ID							BIGINT;   
    DECLARE CUR_COLLECTOR_ID						BIGINT;  
    DECLARE CUR_DISPOSER_TYPE						VARCHAR(20)		DEFAULT NULL;
    DECLARE CUR_SITE_ID								BIGINT;  
    DECLARE CUR_ACTIVE								TINYINT;   
    DECLARE CUR_ORDER_CODE							VARCHAR(10);  
    DECLARE CUR_MANAGER_ID							BIGINT;  
    
    DECLARE CUR_FIRST_PLACE							BIGINT;  
    DECLARE CUR_SECOND_PLACE						BIGINT;  
    DECLARE CUR_UPDATED_AT							DATETIME;  
    DECLARE CUR_VISIT_START_AT						DATETIME;  
    DECLARE CUR_BIDDING_END_AT						DATETIME;  
    DECLARE CUR_OPEN_AT								DATETIME;  
    DECLARE CUR_CLOSE_AT							DATETIME;  
    DECLARE CUR_SERVICE_INSTRUCTION_ID				BIGINT;  
    DECLARE CUR_NOTE								VARCHAR(255);  
    DECLARE CUR_LAT									DECIMAL(12,9);  
    DECLARE CUR_LNG									DECIMAL(12,9);  
    DECLARE CUR_VISIT_EARLY_CLOSING					TINYINT; 
    DECLARE CUR_SELECTED							BIGINT; 
    DECLARE CUR_SELECTED_AT							DATETIME; 
    DECLARE CUR_COLLECTOR_SELECTION_CONFIRMED		TINYINT; 
    DECLARE CUR_COLLECTOR_SELECTION_CONFIRMED_AT	DATETIME; 
    DECLARE CUR_VISIT_EARLY_CLOSED_AT				DATETIME; 
    DECLARE CUR_MAX_SELECT_AT						DATETIME; 
    DECLARE CUR_COLLECTOR_SELECTION_CONFIRMED2		TINYINT;  
    DECLARE CUR_COLLECTOR_SELECTION_CONFIRMED2_AT	DATETIME;  
    DECLARE CUR_MAX_SELECT2_AT						DATETIME;  
    DECLARE CUR_COLLECTOR_BIDDING_ID				BIGINT;  
    DECLARE CUR_COLLECTOR_MAX_DECISION_AT			DATETIME;  
    DECLARE CUR_COLLECTOR_MAX_DECISION2_AT			DATETIME;  
    DECLARE CUR_MAX_DECISION_AT						DATETIME;  
    DECLARE CUR_MAX_DECISION2_AT					DATETIME;  
    DECLARE CUR_TRANSACTION_ID						BIGINT;  
    
    DECLARE CUR_PROSPECTIVE_VISITORS				INT; 
    DECLARE CUR_BIDDERS								INT;
    DECLARE CUR_PROSPECTIVE_BIDDERS					INT;
    DECLARE CUR_CREATED_AT							DATETIME;
    DECLARE CUR_KIKCD_B_CODE						VARCHAR(10);
    DECLARE CUR_ADDR								VARCHAR(255);
    DECLARE CUR_IS_DELETED							TINYINT;
    DECLARE CUR_DELETED_AT							DATETIME;
    DECLARE CUR_CHECK_STATE							TINYINT;
    DECLARE CUR_CS_CONFIRMED						TINYINT;
    
    DECLARE VAR_DISPOSER_NAME						VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_SITE_INFO							JSON			DEFAULT NULL;
    DECLARE VAR_COMPANY_INFO						JSON			DEFAULT NULL;
    DECLARE VAR_WSTE_ADDR_INFO						JSON			DEFAULT NULL;
    DECLARE VAR_TRANSACTION_INFO					JSON			DEFAULT NULL;
    DECLARE VAR_BIDDING_LIST						JSON			DEFAULT NULL;
    DECLARE VAR_REPORT_INFO							JSON			DEFAULT NULL;
    DECLARE VAR_COLLECTOR_INFO						JSON			DEFAULT NULL;
    DECLARE VAR_MANAGER_INFO						JSON			DEFAULT NULL;
    DECLARE VAR_COMP_ID								BIGINT			DEFAULT NULL;
    DECLARE VAR_REPORT_ID							BIGINT			DEFAULT NULL;
    DECLARE VAR_COLLECTOR_LIST_1					JSON			DEFAULT NULL;
    DECLARE VAR_COLLECTOR_LIST_2					JSON			DEFAULT NULL;
    DECLARE VAR_IMG_INFO							JSON			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
	SELECT 
		ID, 
		DISPOSER_ID, 
        COLLECTOR_ID,
        DISPOSER_TYPE,
        SITE_ID,
        ACTIVE,
        ORDER_CODE,
        MANAGER_ID,
        
		FIRST_PLACE,
		SECOND_PLACE,
		UPDATED_AT,
		VISIT_START_AT,
		BIDDING_END_AT,
		OPEN_AT,
		CLOSE_AT,
		SERVICE_INSTRUCTION_ID,
		NOTE,
		LAT,
		LNG,
		VISIT_EARLY_CLOSING,
		SELECTED,
		SELECTED_AT,
		IF(BIDDERS > 0, COLLECTOR_SELECTION_CONFIRMED, NULL),
		IF(BIDDERS > 0, COLLECTOR_SELECTION_CONFIRMED_AT, NULL),
		VISIT_EARLY_CLOSED_AT,
		IF(BIDDERS > 0, MAX_SELECT_AT, NULL),
		IF(BIDDERS > 0, COLLECTOR_SELECTION_CONFIRMED2, NULL),
		IF(BIDDERS > 0, COLLECTOR_SELECTION_CONFIRMED2_AT, NULL),
		MAX_SELECT2_AT,
		COLLECTOR_BIDDING_ID,
		IF(BIDDERS > 0, COLLECTOR_MAX_DECISION_AT, NULL),
		IF(BIDDERS > 0, COLLECTOR_MAX_DECISION2_AT, NULL),
		IF(BIDDERS > 0, MAX_DECISION_AT, NULL),
		IF(BIDDERS > 1, MAX_DECISION2_AT, NULL),
		TRANSACTION_ID,
        
        PROSPECTIVE_VISITORS,
        BIDDERS,
        PROSPECTIVE_BIDDERS,
        CREATED_AT,
        KIKCD_B_CODE,
        ADDR,
        IS_DELETED,
        DELETED_AT,
        CHECK_STATE,
        CS_CONFIRMED
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE ID = IN_ORDER_ID;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    SET OUT_ORDER_INFO = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_COMINGS_DETAIL_WITHOUT_HANDLER (
		ORDER_ID							BIGINT,
		DISPOSER_ID							BIGINT,
		COLLECTOR_ID						BIGINT,
		DISPOSER_TYPE						VARCHAR(10),
		SITE_ID								BIGINT,
		ACTIVE								TINYINT,
		ORDER_CODE							VARCHAR(10),
		MANAGER_ID							BIGINT,
        
		FIRST_PLACE							BIGINT,  
		SECOND_PLACE						BIGINT,  
		UPDATED_AT							DATETIME,  
		VISIT_START_AT						DATETIME,  
		BIDDING_END_AT						DATETIME,  
		OPEN_AT								DATETIME,  
		CLOSE_AT							DATETIME,  
		SERVICE_INSTRUCTION_ID				BIGINT,  
		NOTE								VARCHAR(255),  
		LAT									DECIMAL(12,9),  
		LNG									DECIMAL(12,9),  
		VISIT_EARLY_CLOSING					TINYINT, 
		SELECTED							BIGINT, 
		SELECTED_AT							DATETIME, 
		COLLECTOR_SELECTION_CONFIRMED		TINYINT, 
		COLLECTOR_SELECTION_CONFIRMED_AT	DATETIME, 
		VISIT_EARLY_CLOSED_AT				DATETIME, 
		MAX_SELECT_AT						DATETIME, 
		COLLECTOR_SELECTION_CONFIRMED2		TINYINT,  
		COLLECTOR_SELECTION_CONFIRMED2_AT	DATETIME,  
		MAX_SELECT2_AT						DATETIME,  
		COLLECTOR_BIDDING_ID				BIGINT,  
		COLLECTOR_MAX_DECISION_AT			DATETIME,  
		COLLECTOR_MAX_DECISION2_AT			DATETIME,  
		MAX_DECISION_AT						DATETIME,  
		MAX_DECISION2_AT					DATETIME,  
		TRANSACTION_ID						BIGINT,  
        
		PROSPECTIVE_VISITORS				INT,
		BIDDERS								INT,
		PROSPECTIVE_BIDDERS					INT,
		CREATED_AT							DATETIME,
		KIKCD_B_CODE						VARCHAR(10),
		ADDR								VARCHAR(255),
		IS_DELETED							TINYINT,
		DELETED_AT							DATETIME,
		CHECK_STATE							TINYINT,
		CS_CONFIRMED						TINYINT,
        DISPOSER_NAME						VARCHAR(255),
        SITE_INFO							JSON,
        COMPANY_INFO						JSON,
        WSTE_ADDR_INFO						JSON,
        TRANSACTION_INFO					JSON,
        BIDDING_LIST						JSON,
        REPORT_INFO							JSON,
        COLLECTOR_INFO						JSON,
        MANAGER_INFO						JSON,
        COLLECTOR_LIST_1					JSON,
        COLLECTOR_LIST_2					JSON,
        IMG_INFO							JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ORDER_ID,
			CUR_DISPOSER_ID,
			CUR_COLLECTOR_ID,
            CUR_DISPOSER_TYPE,
			CUR_SITE_ID,
			CUR_ACTIVE,
			CUR_ORDER_CODE,
			CUR_MANAGER_ID,
            
			CUR_FIRST_PLACE,
			CUR_SECOND_PLACE,
			CUR_UPDATED_AT,
			CUR_VISIT_START_AT,
			CUR_BIDDING_END_AT,
			CUR_OPEN_AT,
			CUR_CLOSE_AT,
			CUR_SERVICE_INSTRUCTION_ID,
			CUR_NOTE,
			CUR_LAT,
			CUR_LNG,
			CUR_VISIT_EARLY_CLOSING,
			CUR_SELECTED,
			CUR_SELECTED_AT,
			CUR_COLLECTOR_SELECTION_CONFIRMED,
			CUR_COLLECTOR_SELECTION_CONFIRMED_AT,
			CUR_VISIT_EARLY_CLOSED_AT,
			CUR_MAX_SELECT_AT,
			CUR_COLLECTOR_SELECTION_CONFIRMED2,
			CUR_COLLECTOR_SELECTION_CONFIRMED2_AT,
			CUR_MAX_SELECT2_AT,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_COLLECTOR_MAX_DECISION_AT,
			CUR_COLLECTOR_MAX_DECISION2_AT,
			CUR_MAX_DECISION_AT,
			CUR_MAX_DECISION2_AT,
			CUR_TRANSACTION_ID,
            
			CUR_PROSPECTIVE_VISITORS,
			CUR_BIDDERS,
			CUR_PROSPECTIVE_BIDDERS,
			CUR_CREATED_AT,
			CUR_KIKCD_B_CODE,
			CUR_ADDR,
			CUR_IS_DELETED,
			CUR_DELETED_AT,
			CUR_CHECK_STATE,
			CUR_CS_CONFIRMED;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
        IF CUR_DISPOSER_TYPE = 'person' THEN
			SELECT USER_NAME INTO VAR_DISPOSER_NAME
            FROM USERS
            WHERE ID = CUR_DISPOSER_ID;
            SET VAR_SITE_INFO = NULL;
            SET VAR_COMPANY_INFO = NULL;
        ELSE
			SELECT A.SITE_NAME INTO VAR_DISPOSER_NAME
            FROM COMP_SITE A LEFT JOIN USERS B ON A.ID = B.AFFILIATED_SITE
            WHERE B.ID = CUR_DISPOSER_ID;
			CALL sp_get_site_info_simple(
				CUR_SITE_ID,
				VAR_SITE_INFO
			);
            SELECT COMP_ID INTO VAR_COMP_ID
            FROM COMP_SITE
            WHERE ID = CUR_SITE_ID;
			CALL sp_get_company_info(
				VAR_COMP_ID,
				VAR_COMPANY_INFO
			);
        END IF;        
        
        CALL sp_get_address_with_bcode(
			CUR_KIKCD_B_CODE,
            VAR_WSTE_ADDR_INFO
        );      
        
        CALL sp_get_transaction_info_3(
			CUR_ORDER_ID,
			CUR_TRANSACTION_ID,
            VAR_TRANSACTION_INFO
        );
        
		CALL sp_get_bidding_lists_4(
			CUR_ORDER_ID,
			VAR_BIDDING_LIST
		);  
        
        SELECT ID INTO VAR_REPORT_ID
        FROM TRANSACTION_REPORT
        WHERE TRANSACTION_ID = CUR_TRANSACTION_ID;
        
        CALL sp_get_transaction_report(
			VAR_REPORT_ID,
            VAR_REPORT_INFO
        );
        
        IF CUR_COLLECTOR_ID IS NOT NULL THEN
			CALL sp_get_site_info_simple(
				CUR_COLLECTOR_ID,
				VAR_COLLECTOR_INFO
			);
        ELSE
			SET VAR_COLLECTOR_INFO = NULL;
        END IF;
        
        IF CUR_MANAGER_ID IS NOT NULL THEN
			CALL sp_get_manager_info(
				CUR_MANAGER_ID,
				VAR_MANAGER_INFO
			);
        ELSE
			SET VAR_COLLECTOR_INFO = NULL;
        END IF;
        
		CALL sp_get_disposal_img_lists(
			CUR_ORDER_ID,
			'입찰',
			VAR_IMG_INFO
		);
        
		INSERT INTO 
		ADMIN_GET_NEW_COMINGS_DETAIL_WITHOUT_HANDLER(
			ORDER_ID,
			DISPOSER_ID,
			COLLECTOR_ID,
            DISPOSER_TYPE,
			SITE_ID,
			ACTIVE,
			ORDER_CODE,
			MANAGER_ID,            
        
			FIRST_PLACE,
			SECOND_PLACE,
			UPDATED_AT,
			VISIT_START_AT,
			BIDDING_END_AT,
			OPEN_AT,
			CLOSE_AT,
			SERVICE_INSTRUCTION_ID,
			NOTE,
			LAT,
			LNG,
			VISIT_EARLY_CLOSING,
			SELECTED,
			SELECTED_AT,
			COLLECTOR_SELECTION_CONFIRMED,
			COLLECTOR_SELECTION_CONFIRMED_AT,
			VISIT_EARLY_CLOSED_AT,
			MAX_SELECT_AT,
			COLLECTOR_SELECTION_CONFIRMED2,
			COLLECTOR_SELECTION_CONFIRMED2_AT,
			MAX_SELECT2_AT,
			COLLECTOR_BIDDING_ID,
			COLLECTOR_MAX_DECISION_AT,
			COLLECTOR_MAX_DECISION2_AT,
			MAX_DECISION_AT,
			MAX_DECISION2_AT,
			TRANSACTION_ID,
            
			PROSPECTIVE_VISITORS,
			BIDDERS,
			PROSPECTIVE_BIDDERS,
			CREATED_AT,
			KIKCD_B_CODE,
			ADDR,
			IS_DELETED,
			DELETED_AT,
			CHECK_STATE,
			CS_CONFIRMED,
            DISPOSER_NAME,
            SITE_INFO,
            COMPANY_INFO,
            WSTE_ADDR_INFO,
            TRANSACTION_INFO,
            BIDDING_LIST,
            REPORT_INFO,
            COLLECTOR_INFO,
            MANAGER_INFO,
            COLLECTOR_LIST_1,
            COLLECTOR_LIST_2,
            IMG_INFO
		)
		VALUES(
			CUR_ORDER_ID,
			CUR_DISPOSER_ID,
			CUR_COLLECTOR_ID,
            CUR_DISPOSER_TYPE,
			CUR_SITE_ID,
			CUR_ACTIVE,
			CUR_ORDER_CODE,
			CUR_MANAGER_ID,
            
			CUR_FIRST_PLACE,
			CUR_SECOND_PLACE,
			CUR_UPDATED_AT,
			CUR_VISIT_START_AT,
			CUR_BIDDING_END_AT,
			CUR_OPEN_AT,
			CUR_CLOSE_AT,
			CUR_SERVICE_INSTRUCTION_ID,
			CUR_NOTE,
			CUR_LAT,
			CUR_LNG,
			CUR_VISIT_EARLY_CLOSING,
			CUR_SELECTED,
			CUR_SELECTED_AT,
			CUR_COLLECTOR_SELECTION_CONFIRMED,
			CUR_COLLECTOR_SELECTION_CONFIRMED_AT,
			CUR_VISIT_EARLY_CLOSED_AT,
			CUR_MAX_SELECT_AT,
			CUR_COLLECTOR_SELECTION_CONFIRMED2,
			CUR_COLLECTOR_SELECTION_CONFIRMED2_AT,
			CUR_MAX_SELECT2_AT,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_COLLECTOR_MAX_DECISION_AT,
			CUR_COLLECTOR_MAX_DECISION2_AT,
			CUR_MAX_DECISION_AT,
			CUR_MAX_DECISION2_AT,
			CUR_TRANSACTION_ID,
            
			CUR_PROSPECTIVE_VISITORS,
			CUR_BIDDERS,
			CUR_PROSPECTIVE_BIDDERS,
			CUR_CREATED_AT,
			CUR_KIKCD_B_CODE,
			CUR_ADDR,
			CUR_IS_DELETED,
			CUR_DELETED_AT,
			CUR_CHECK_STATE,
			CUR_CS_CONFIRMED,
            VAR_DISPOSER_NAME,
            VAR_SITE_INFO,
            VAR_COMPANY_INFO,
            VAR_WSTE_ADDR_INFO,
            VAR_TRANSACTION_INFO,
            VAR_BIDDING_LIST,
            VAR_REPORT_INFO,
            VAR_COLLECTOR_INFO,
            VAR_MANAGER_INFO,
            VAR_COLLECTOR_LIST_1,
            VAR_COLLECTOR_LIST_2,
            VAR_IMG_INFO
		);
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'								, ORDER_ID, 
        'DISPOSER_ID'							, DISPOSER_ID, 
        'COLLECTOR_ID'							, COLLECTOR_ID, 
        'DISPOSER_TYPE'							, DISPOSER_TYPE, 
        'SITE_ID'								, SITE_ID, 
        'ACTIVE'								, ACTIVE, 
        'ORDER_CODE'							, ORDER_CODE, 
        'MANAGER_ID'							, MANAGER_ID, 
        
        'FIRST_PLACE'							, FIRST_PLACE, 
        'SECOND_PLACE'							, SECOND_PLACE, 
        'UPDATED_AT'							, UPDATED_AT, 
        'VISIT_START_AT'						, VISIT_START_AT, 
        'BIDDING_END_AT'						, BIDDING_END_AT, 
        'OPEN_AT'								, OPEN_AT, 
        'CLOSE_AT'								, CLOSE_AT, 
        'SERVICE_INSTRUCTION_ID'				, SERVICE_INSTRUCTION_ID, 
        'NOTE'									, NOTE, 
        'LAT'									, LAT, 
        'LNG'									, LNG, 
        'VISIT_EARLY_CLOSING'					, VISIT_EARLY_CLOSING, 
        'SELECTED'								, SELECTED, 
        'SELECTED_AT'							, SELECTED_AT, 
        'COLLECTOR_SELECTION_CONFIRMED'			, COLLECTOR_SELECTION_CONFIRMED, 
        'COLLECTOR_SELECTION_CONFIRMED_AT'		, COLLECTOR_SELECTION_CONFIRMED_AT, 
        'VISIT_EARLY_CLOSED_AT'					, VISIT_EARLY_CLOSED_AT, 
        'MAX_SELECT_AT'							, MAX_SELECT_AT, 
        'COLLECTOR_SELECTION_CONFIRMED2'		, COLLECTOR_SELECTION_CONFIRMED2, 
        'COLLECTOR_SELECTION_CONFIRMED2_AT'		, COLLECTOR_SELECTION_CONFIRMED2_AT, 
        'MAX_SELECT2_AT'						, MAX_SELECT2_AT, 
        'COLLECTOR_BIDDING_ID'					, COLLECTOR_BIDDING_ID, 
        'COLLECTOR_MAX_DECISION_AT'				, COLLECTOR_MAX_DECISION_AT, 
        'COLLECTOR_MAX_DECISION2_AT'			, COLLECTOR_MAX_DECISION2_AT, 
        'MAX_DECISION_AT'						, MAX_DECISION_AT, 
        'MAX_DECISION2_AT'						, MAX_DECISION2_AT, 
        'TRANSACTION_ID'						, TRANSACTION_ID, 
        
        'PROSPECTIVE_VISITORS'					, PROSPECTIVE_VISITORS, 
        'BIDDERS'								, BIDDERS, 
        'PROSPECTIVE_BIDDERS'					, PROSPECTIVE_BIDDERS, 
        'CREATED_AT'							, CREATED_AT, 
        'KIKCD_B_CODE'							, KIKCD_B_CODE, 
        'ADDR'									, ADDR, 
        'IS_DELETED'							, IS_DELETED, 
        'DELETED_AT'							, DELETED_AT, 
        'CHECK_STATE'							, CHECK_STATE, 
        'CS_CONFIRMED'							, CS_CONFIRMED, 
        'DISPOSER_NAME'							, DISPOSER_NAME, 
        'SITE_INFO'								, SITE_INFO, 
        'COMPANY_INFO'							, COMPANY_INFO, 
        'WSTE_ADDR_INFO'						, WSTE_ADDR_INFO, 
        'TRANSACTION_INFO'						, TRANSACTION_INFO, 
        'BIDDING_LIST'							, BIDDING_LIST, 
        'REPORT_INFO'							, REPORT_INFO, 
        'COLLECTOR_INFO'						, COLLECTOR_INFO, 
        'MANAGER_INFO'							, MANAGER_INFO, 
        'COLLECTOR_LIST_1'						, COLLECTOR_LIST_1, 
        'COLLECTOR_LIST_2'						, COLLECTOR_LIST_2,
        'IMG_INFO'								, IMG_INFO
	)) 
    INTO OUT_ORDER_INFO FROM ADMIN_GET_NEW_COMINGS_DETAIL_WITHOUT_HANDLER;
    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_COMINGS_DETAIL_WITHOUT_HANDLER;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_comings_without_handler`(
	IN IN_SEARCH						VARCHAR(255),
    IN IN_DUMMY_ACTIVATE				TINYINT,
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    OUT OUT_RECORD_COUNT				INT,
    OUT OUT_SITE_LIST					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_comings
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT 		DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT;   
    DECLARE CUR_DISPOSER_ID						BIGINT;   
    DECLARE CUR_COLLECTOR_ID					BIGINT;  
    DECLARE CUR_SITE_ID							BIGINT;  
    DECLARE CUR_ACTIVE							TINYINT;   
    DECLARE CUR_ORDER_CODE						VARCHAR(10);  
    DECLARE CUR_PROSPECTIVE_VISITORS			INT; 
    DECLARE CUR_BIDDERS							INT;
    DECLARE CUR_PROSPECTIVE_BIDDERS				INT;
    DECLARE CUR_CREATED_AT						DATETIME;
    DECLARE CUR_KIKCD_B_CODE					VARCHAR(10);
    DECLARE CUR_ADDR							VARCHAR(255);
    DECLARE CUR_IS_DELETED						TINYINT;
    DECLARE CUR_CHECK_STATE						TINYINT;
    DECLARE CUR_STATE							VARCHAR(45);
    DECLARE VAR_RECORD_COUNT					INT				DEFAULT 0;
    DECLARE VAR_DISPOSER_NAME					VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_DISPOSER_TYPE					VARCHAR(20)		DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID, 
		A.DISPOSER_ID, 
        A.COLLECTOR_ID,
        A.SITE_ID,
        A.ACTIVE,
        A.ORDER_CODE,
        A.PROSPECTIVE_VISITORS,
        A.BIDDERS,
        A.PROSPECTIVE_BIDDERS,
        A.CREATED_AT,
        A.KIKCD_B_CODE,
        A.ADDR,
        A.IS_DELETED,
        A.CHECK_STATE,
		D.STATE
    FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN KIKCD_B B ON A.KIKCD_B_CODE = B.B_CODE
    LEFT JOIN USERS C ON A.DISPOSER_ID = C.ID
	LEFT JOIN V_ORDER_STATE_NAME D ON A.ID = D.DISPOSER_ORDER_ID
    WHERE 
		IF(IN_DUMMY_ACTIVATE = TRUE, (C.TEST = TRUE OR C.TEST = FALSE), C.TEST = FALSE) AND
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.DISPOSER_ID IN (SELECT ID FROM USERS WHERE USER_NAME LIKE CONCAT('%', IN_SEARCH, '%')) OR
				A.SITE_ID IN (
					SELECT A1.ID 
                    FROM COMP_SITE A1
                    LEFT JOIN COMPANY A2 ON A1.COMP_ID = A2.ID
                    WHERE 
						A1.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A1.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.COMP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A2.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A1.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                ) OR
				A.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.B_CODE LIKE CONCAT('%', IN_SEARCH, '%')
			)
		)
    ORDER BY A.CREATED_AT DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	SELECT COUNT(A.ID) INTO VAR_RECORD_COUNT
    FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN KIKCD_B B ON A.KIKCD_B_CODE = B.B_CODE
    LEFT JOIN USERS C ON A.DISPOSER_ID = C.ID
	LEFT JOIN V_ORDER_STATE_NAME D ON A.ID = D.DISPOSER_ORDER_ID
    WHERE 
		IF(IN_DUMMY_ACTIVATE = TRUE, (C.TEST = TRUE OR C.TEST = FALSE), C.TEST = FALSE) AND
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.DISPOSER_ID IN (SELECT ID FROM USERS WHERE USER_NAME LIKE CONCAT('%', IN_SEARCH, '%')) OR
				A.SITE_ID IN (
					SELECT A1.ID 
                    FROM COMP_SITE A1
                    LEFT JOIN COMPANY A2 ON A1.COMP_ID = A2.ID
                    WHERE 
						A1.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A1.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.COMP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A2.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A1.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                ) OR
				A.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.B_CODE LIKE CONCAT('%', IN_SEARCH, '%')
			)
		);
    
    SET OUT_RECORD_COUNT = VAR_RECORD_COUNT;
    SET OUT_SITE_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_COMINGS_WITHOUT_HANDLER (
		ORDER_ID						BIGINT,
		DISPOSER_ID						BIGINT,
		COLLECTOR_ID					BIGINT,
		SITE_ID							BIGINT,
		ACTIVE							TINYINT,
		ORDER_CODE						VARCHAR(10),
		PROSPECTIVE_VISITORS			INT,
		BIDDERS							INT,
		PROSPECTIVE_BIDDERS				INT,
		CREATED_AT						DATETIME,
		KIKCD_B_CODE					VARCHAR(10),
		ADDR							VARCHAR(255),
		IS_DELETED						TINYINT,
		CHECK_STATE						TINYINT,
		STATE							VARCHAR(45),
        DISPOSER_NAME					VARCHAR(255),
        DISPOSER_TYPE					VARCHAR(10),
        IMG_INFO						JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ORDER_ID,
			CUR_DISPOSER_ID,
			CUR_COLLECTOR_ID,
			CUR_SITE_ID,
			CUR_ACTIVE,
			CUR_ORDER_CODE,
			CUR_PROSPECTIVE_VISITORS,
			CUR_BIDDERS,
			CUR_PROSPECTIVE_BIDDERS,
			CUR_CREATED_AT,
			CUR_KIKCD_B_CODE,
			CUR_ADDR,
			CUR_IS_DELETED,
			CUR_CHECK_STATE,
			CUR_STATE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
        IF CUR_SITE_ID = 0 THEN
			SELECT USER_NAME INTO VAR_DISPOSER_NAME
            FROM USERS
            WHERE ID = CUR_DISPOSER_ID;
            SET VAR_DISPOSER_TYPE = '개인';
        ELSE
			SELECT A.SITE_NAME INTO VAR_DISPOSER_NAME
            FROM COMP_SITE A LEFT JOIN USERS B ON A.ID = B.AFFILIATED_SITE
            WHERE B.ID = CUR_DISPOSER_ID;
            SET VAR_DISPOSER_TYPE = '사업자';
        END IF;
        
		INSERT INTO 
		ADMIN_GET_NEW_COMINGS_WITHOUT_HANDLER(
			ORDER_ID,
			DISPOSER_ID,
			COLLECTOR_ID,
			SITE_ID,
			ACTIVE,
			ORDER_CODE,
			PROSPECTIVE_VISITORS,
			BIDDERS,
			PROSPECTIVE_BIDDERS,
			CREATED_AT,
			KIKCD_B_CODE,
			ADDR,
			IS_DELETED,
			CHECK_STATE,
			STATE,
            DISPOSER_NAME,
            DISPOSER_TYPE
		)
		VALUES(
			CUR_ORDER_ID,
			CUR_DISPOSER_ID,
			CUR_COLLECTOR_ID,
			CUR_SITE_ID,
			CUR_ACTIVE,
			CUR_ORDER_CODE,
			CUR_PROSPECTIVE_VISITORS,
			CUR_BIDDERS,
			CUR_PROSPECTIVE_BIDDERS,
			CUR_CREATED_AT,
			CUR_KIKCD_B_CODE,
			CUR_ADDR,
			CUR_IS_DELETED,
			CUR_CHECK_STATE,
			CUR_STATE,
            VAR_DISPOSER_NAME,
            VAR_DISPOSER_TYPE
		);
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'						, ORDER_ID, 
        'DISPOSER_ID'				, DISPOSER_ID, 
        'COLLECTOR_ID'				, COLLECTOR_ID, 
        'SITE_ID'					, SITE_ID, 
        'ACTIVE'					, ACTIVE, 
        'ORDER_CODE'				, ORDER_CODE, 
        'PROSPECTIVE_VISITORS'		, PROSPECTIVE_VISITORS, 
        'BIDDERS'					, BIDDERS, 
        'PROSPECTIVE_BIDDERS'		, PROSPECTIVE_BIDDERS, 
        'CREATED_AT'				, CREATED_AT, 
        'KIKCD_B_CODE'				, KIKCD_B_CODE, 
        'ADDR'						, ADDR, 
        'IS_DELETED'				, IS_DELETED, 
        'CHECK_STATE'				, CHECK_STATE, 
        'STATE'						, STATE, 
        'DISPOSER_NAME'				, DISPOSER_NAME, 
        'DISPOSER_TYPE'				, DISPOSER_TYPE
	)) 
    INTO OUT_SITE_LIST FROM ADMIN_GET_NEW_COMINGS_WITHOUT_HANDLER;
    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_COMINGS_WITHOUT_HANDLER;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_logs`(
    IN IN_PARAMS					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_logs
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_ORDER_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_USER_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_SEARCH						VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_PAGE_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_OUT_LIST					JSON 			DEFAULT NULL;
    DECLARE VAR_OUT_RECORD_COUNT			INT 			DEFAULT 0;
    DECLARE VAR_LAST_PAGE					INT 			DEFAULT NULL;
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON 			DEFAULT NULL;
    DECLARE VAR_DUMMY_ACTIVATE				TINYINT			DEFAULT FALSE;
    
	SELECT 
		USER_ID, 
        ORDER_ID, 
        SEARCH, 
        OFFSET_SIZE, 
        PAGE_SIZE
    INTO 
		VAR_USER_ID, 
        VAR_ORDER_ID, 
        VAR_SEARCH, 
        VAR_OFFSET_SIZE, 
        VAR_PAGE_SIZE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		ORDER_ID 				BIGINT				PATH "$.ORDER_ID",
		SEARCH	 				VARCHAR(255)		PATH "$.SEARCH",
		OFFSET_SIZE 			INT 				PATH "$.OFFSET_SIZE",
		PAGE_SIZE 				INT 				PATH "$.PAGE_SIZE"
	)) AS PARAMS;
    
    CALL sp_admin_get_new_logs_without_handler(
		VAR_ORDER_ID,
		VAR_SEARCH,
        VAR_OFFSET_SIZE,
        VAR_PAGE_SIZE,
        VAR_OUT_RECORD_COUNT,
        VAR_OUT_LIST
    );
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_LOGS_TEMP (
		INPUT_PARAMS					JSON,
		LAST_PAGE						INT,
		LOG_LIST						JSON
	);      
	
	SET VAR_LAST_PAGE = CEILING(VAR_OUT_RECORD_COUNT / VAR_PAGE_SIZE);
    
    INSERT INTO ADMIN_GET_NEW_LOGS_TEMP (
		INPUT_PARAMS,
        LAST_PAGE,
        LOG_LIST
    ) VALUES (
		IN_PARAMS,
        VAR_LAST_PAGE,
        VAR_OUT_LIST
    );
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'INPUT_PARAMS'				, INPUT_PARAMS, 
        'LAST_PAGE'					, LAST_PAGE, 
        'LOG_LIST'					, LOG_LIST
	)) 
    INTO json_data FROM ADMIN_GET_NEW_LOGS_TEMP;    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_LOGS_TEMP;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_logs_without_handler`(
    IN IN_ORDER_ID						BIGINT,
	IN IN_SEARCH						VARCHAR(255),
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    OUT OUT_RECORD_COUNT				INT,
    OUT OUT_LOG_LIST					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_logs_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 				INT DEFAULT 0;
    DECLARE endOfRow 				TINYINT 		DEFAULT FALSE;    
	DECLARE CUR_ID					BIGINT;
	DECLARE CUR_USER_ID				BIGINT;
	DECLARE CUR_SITE_ID				BIGINT;
	DECLARE CUR_JOB_NAME			TEXT;
	DECLARE CUR_JOB_CATEGORY		VARCHAR(45);
	DECLARE CUR_JOB_TABLE			VARCHAR(200);
	DECLARE CUR_CREATED_AT			DATETIME;
	DECLARE CUR_USER_CATEGORY		VARCHAR(45);
	DECLARE CUR_ORDER_ID			BIGINT;
    DECLARE CUR_BIDDING_ID			BIGINT;
    DECLARE CUR_TRANSACTION_ID		BIGINT;
    DECLARE CUR_REPORT_ID			BIGINT;
    DECLARE CUR_USER_NAME			VARCHAR(255);
    DECLARE CUR_SITE_NAME			VARCHAR(255);
    DECLARE CUR_ORDER_CODE			VARCHAR(10);
    DECLARE CUR_SITE_TYPE			TINYINT;
    DECLARE VAR_RECORD_COUNT		INT;
    DECLARE TEMP_CURSOR		 		CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID,
		A.USER_ID,
		A.SITE_ID,
		A.JOB_NAME,
		A.JOB_CATEGORY,
		A.JOB_TABLE,
		A.CREATED_AT,
		A.USER_CATEGORY,
		A.ORDER_ID,
		A.BIDDING_ID,
		A.TRANSACTION_ID,
        A.REPORT_ID,
        B.USER_NAME,
        C.SITE_NAME,
        D.ORDER_CODE,
        A.SITE_TYPE
    FROM JOB_LOG A
	LEFT JOIN USERS B ON A.USER_ID = B.ID
    LEFT JOIN COMP_SITE C ON C.ID = A.SITE_ID
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER D ON D.ID = A.ORDER_ID
    WHERE 
		IF(IN_SEARCH IS NULL,
			IF(IN_ORDER_ID IS NULL,
				A.ID > 0,
                A.ID > 0 AND
                A.ORDER_ID = IN_ORDER_ID
			),
			IF(IN_ORDER_ID IS NULL,
				A.ID > 0 AND
				(
					A.JOB_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
					A.JOB_CATEGORY LIKE CONCAT('%', IN_SEARCH, '%') OR
					B.USER_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
					C.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
					D.ORDER_CODE LIKE CONCAT('%', IN_SEARCH, '%')
				),
				A.ID > 0 AND
				A.ORDER_ID = IN_ORDER_ID AND
				(
					A.JOB_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
					A.JOB_CATEGORY LIKE CONCAT('%', IN_SEARCH, '%') OR
					B.USER_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
					C.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
					D.ORDER_CODE LIKE CONCAT('%', IN_SEARCH, '%')
				)
			)
		)
    ORDER BY A.ID DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	SELECT COUNT(A.ID) INTO VAR_RECORD_COUNT
    FROM JOB_LOG A
	LEFT JOIN USERS B ON A.USER_ID = B.ID
    LEFT JOIN COMP_SITE C ON C.ID = A.SITE_ID
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER D ON D.ID = A.ORDER_ID
    WHERE 
		IF(IN_SEARCH IS NULL,
			IF(IN_ORDER_ID IS NULL,
				A.ID > 0,
                A.ID > 0 AND
                A.ORDER_ID = IN_ORDER_ID
			),
			IF(IN_ORDER_ID IS NULL,
				A.ID > 0 AND
				(
					A.JOB_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
					A.JOB_CATEGORY LIKE CONCAT('%', IN_SEARCH, '%') OR
					B.USER_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
					C.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
					D.ORDER_CODE LIKE CONCAT('%', IN_SEARCH, '%')
				),
				A.ID > 0 AND
				A.ORDER_ID = IN_ORDER_ID AND
				(
					A.JOB_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
					A.JOB_CATEGORY LIKE CONCAT('%', IN_SEARCH, '%') OR
					B.USER_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
					C.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
					D.ORDER_CODE LIKE CONCAT('%', IN_SEARCH, '%')
				)
			)
		);
    
    SET OUT_RECORD_COUNT = VAR_RECORD_COUNT;
    SET OUT_LOG_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_LOGS_WITHOUT_HANDLER_TEMP (
		ID					BIGINT,
		USER_ID				BIGINT,
		SITE_ID				BIGINT,
		JOB_NAME			TEXT,
		JOB_CATEGORY		VARCHAR(45),
		JOB_TABLE			VARCHAR(200),
		CREATED_AT			DATETIME,
		USER_CATEGORY		VARCHAR(45),
		ORDER_ID			BIGINT,
		BIDDING_ID			BIGINT,
		TRANSACTION_ID		BIGINT,
		REPORT_ID			BIGINT,
		USER_NAME			VARCHAR(255),
		SITE_NAME			VARCHAR(255),
		ORDER_CODE			VARCHAR(10),
        SITE_TYPE			TINYINT
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_USER_ID,
			CUR_SITE_ID,
			CUR_JOB_NAME,
			CUR_JOB_CATEGORY,
			CUR_JOB_TABLE,
			CUR_CREATED_AT,
			CUR_USER_CATEGORY,
			CUR_ORDER_ID,
			CUR_BIDDING_ID,
			CUR_TRANSACTION_ID,
			CUR_REPORT_ID,
			CUR_USER_NAME,
			CUR_SITE_NAME,
			CUR_ORDER_CODE,
			CUR_SITE_TYPE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
		ADMIN_GET_NEW_LOGS_WITHOUT_HANDLER_TEMP(
			ID,
			USER_ID,
			SITE_ID,
			JOB_NAME,
			JOB_CATEGORY,
			JOB_TABLE,
			CREATED_AT,
			USER_CATEGORY,
			ORDER_ID,
			BIDDING_ID,
			TRANSACTION_ID,
			REPORT_ID,
			USER_NAME,
			SITE_NAME,
			ORDER_CODE,
			SITE_TYPE
		)
		VALUES( 
			CUR_ID,
			CUR_USER_ID,
			CUR_SITE_ID,
			CUR_JOB_NAME,
			CUR_JOB_CATEGORY,
			CUR_JOB_TABLE,
			CUR_CREATED_AT,
			CUR_USER_CATEGORY,
			CUR_ORDER_ID,
			CUR_BIDDING_ID,
			CUR_TRANSACTION_ID,
			CUR_REPORT_ID,
			CUR_USER_NAME,
			CUR_SITE_NAME,
			CUR_ORDER_CODE,
			CUR_SITE_TYPE
		);
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'					, ID, 
        'USER_ID'				, USER_ID, 
        'SITE_ID'				, SITE_ID, 
        'JOB_NAME'				, JOB_NAME, 
        'JOB_CATEGORY'			, JOB_CATEGORY, 
        'JOB_TABLE'				, JOB_TABLE, 
        'CREATED_AT'			, CREATED_AT, 
        'USER_CATEGORY'			, USER_CATEGORY, 
        'ORDER_ID'				, ORDER_ID, 
        'BIDDING_ID'			, BIDDING_ID, 
        'TRANSACTION_ID'		, TRANSACTION_ID, 
        'REPORT_ID'				, REPORT_ID, 
        'USER_NAME'				, USER_NAME, 
        'SITE_NAME'				, SITE_NAME, 
        'ORDER_CODE'			, ORDER_CODE, 
        'SITE_TYPE'				, SITE_TYPE
	)) 
    INTO OUT_LOG_LIST FROM ADMIN_GET_NEW_LOGS_WITHOUT_HANDLER_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_LOGS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_notes_without_handler`(
    IN IN_ADMIN_ID						BIGINT,
    IN IN_MEMBER_ID						BIGINT,
    IN IN_SITE_ID						BIGINT,
    IN IN_ORDER_ID						BIGINT,
    IN IN_BIDDING_ID					BIGINT,
    IN IN_TRANSACTION_ID				BIGINT,
    IN IN_REPORT_ID						BIGINT,
    IN IN_SITE_CATEGORY					TINYINT,
	IN IN_SEARCH						VARCHAR(255),
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    OUT OUT_NOTE_LIST					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_notes_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 				INT DEFAULT 0;
    DECLARE endOfRow 				TINYINT 		DEFAULT FALSE;    
	DECLARE CUR_ID					BIGINT;
	DECLARE CUR_ADMIN_ID			BIGINT;
	DECLARE CUR_MEMBER_ID			BIGINT;
	DECLARE CUR_SITE_ID				BIGINT;
	DECLARE CUR_ORDER_ID			BIGINT;
	DECLARE CUR_BIDDING_ID			BIGINT;
	DECLARE CUR_TRANSACTION_ID		BIGINT;
	DECLARE CUR_REPORT_ID			BIGINT;
	DECLARE CUR_NOTE				TEXT;
    DECLARE CUR_CREATED_AT			DATETIME;
    DECLARE CUR_UPDATED_AT			DATETIME;
    DECLARE CUR_SITE_CATEGORY		TINYINT;
    DECLARE CUR_ADMIN_NAME			VARCHAR(255);
    DECLARE VAR_RECORD_COUNT		INT 			DEFAULT 0;
    DECLARE VAR_MEMBER_NAME			VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_SITE_NAME			VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_ORDER_CODE			VARCHAR(10) 	DEFAULT NULL;
    DECLARE VAR_NOTE_LIST			JSON		 	DEFAULT NULL;
    DECLARE TEMP_CURSOR		 		CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID,
		A.ADMIN_ID,
		A.MEMBER_ID,
		A.SITE_ID,
		A.ORDER_ID,
		A.BIDDING_ID,
		A.TRANSACTION_ID,
		A.REPORT_ID,
		A.NOTE,
		A.CREATED_AT,
		A.UPDATED_AT,
		A.SITE_CATEGORY,
        B.NAME
    FROM CS_NOTE A
	LEFT JOIN CHIUM_MEMBERS B ON A.ADMIN_ID = B.ID
	LEFT JOIN USERS C ON A.MEMBER_ID = C.ID
    WHERE 
		IF(IN_SITE_CATEGORY IS NOT NULL,
			A.SITE_CATEGORY = IN_SITE_CATEGORY,
            A.ID > 0
        ) AND
		IF(IN_SEARCH IS NULL,
			A.ID > 0 AND
            IF(IN_ORDER_ID IS NOT NULL,
				A.ORDER_ID = IN_ORDER_ID,
                A.ID > 0
            ) AND
            IF(IN_BIDDING_ID IS NOT NULL,
				A.BIDDING_ID = IN_BIDDING_ID,
                A.ID > 0
            ) AND
            IF(IN_TRANSACTION_ID IS NOT NULL,
				A.TRANSACTION_ID = IN_TRANSACTION_ID,
                A.ID > 0
            ) AND
            IF(IN_REPORT_ID IS NOT NULL,
				A.REPORT_ID = IN_REPORT_ID,
                A.ID > 0
            ) AND
            IF(IN_MEMBER_ID IS NOT NULL,
				A.MEMBER_ID = IN_MEMBER_ID,
                A.ID > 0
            ) AND
            IF(IN_SITE_ID IS NOT NULL,
				A.SITE_ID = IN_SITE_ID,
                A.ID > 0
            ),
            (
				A.NOTE LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
                A.SITE_ID IN (
					SELECT ID FROM COMP_SITE WHERE SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%')
                )
            ) AND
            IF(IN_ORDER_ID IS NOT NULL,
				A.ORDER_ID = IN_ORDER_ID,
                A.ID > 0
            ) AND
            IF(IN_BIDDING_ID IS NOT NULL,
				A.BIDDING_ID = IN_BIDDING_ID,
                A.ID > 0
            ) AND
            IF(IN_TRANSACTION_ID IS NOT NULL,
				A.TRANSACTION_ID = IN_TRANSACTION_ID,
                A.ID > 0
            ) AND
            IF(IN_REPORT_ID IS NOT NULL,
				A.REPORT_ID = IN_REPORT_ID,
                A.ID > 0
            ) AND
            IF(IN_ADMIN_ID IS NOT NULL,
				A.ADMIN_ID = IN_ADMIN_ID,
                A.ID > 0
            ) AND
            IF(IN_MEMBER_ID IS NOT NULL,
				A.MEMBER_ID = IN_MEMBER_ID,
                A.ID > 0
            ) AND
            IF(IN_SITE_ID IS NOT NULL,
				A.SITE_ID = IN_SITE_ID,
                A.ID > 0
            )
		)
    ORDER BY A.ID DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	SELECT COUNT(A.ID) INTO VAR_RECORD_COUNT
    FROM CS_NOTE A
	LEFT JOIN CHIUM_MEMBERS B ON A.ADMIN_ID = B.ID
	LEFT JOIN USERS C ON A.MEMBER_ID = C.ID
    WHERE 
		IF(IN_SITE_CATEGORY IS NOT NULL,
			A.SITE_CATEGORY = IN_SITE_CATEGORY,
            A.ID > 0
        ) AND
		IF(IN_SEARCH IS NULL,
			A.ID > 0 AND
            IF(IN_ORDER_ID IS NOT NULL,
				A.ORDER_ID = IN_ORDER_ID,
                A.ID > 0
            ) AND
            IF(IN_BIDDING_ID IS NOT NULL,
				A.BIDDING_ID = IN_BIDDING_ID,
                A.ID > 0
            ) AND
            IF(IN_TRANSACTION_ID IS NOT NULL,
				A.TRANSACTION_ID = IN_TRANSACTION_ID,
                A.ID > 0
            ) AND
            IF(IN_REPORT_ID IS NOT NULL,
				A.REPORT_ID = IN_REPORT_ID,
                A.ID > 0
            ) AND
            IF(IN_ADMIN_ID IS NOT NULL,
				A.ADMIN_ID = IN_ADMIN_ID,
                A.ID > 0
            ) AND
            IF(IN_MEMBER_ID IS NOT NULL,
				A.MEMBER_ID = IN_MEMBER_ID,
                A.ID > 0
            ) AND
            IF(IN_SITE_ID IS NOT NULL,
				A.SITE_ID = IN_SITE_ID,
                A.ID > 0
            ),
            (
				A.NOTE LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
                A.SITE_ID IN (
					SELECT ID FROM COMP_SITE WHERE SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%')
                )
            ) AND
            IF(IN_ORDER_ID IS NOT NULL,
				A.ORDER_ID = IN_ORDER_ID,
                A.ID > 0
            ) AND
            IF(IN_BIDDING_ID IS NOT NULL,
				A.BIDDING_ID = IN_BIDDING_ID,
                A.ID > 0
            ) AND
            IF(IN_TRANSACTION_ID IS NOT NULL,
				A.TRANSACTION_ID = IN_TRANSACTION_ID,
                A.ID > 0
            ) AND
            IF(IN_REPORT_ID IS NOT NULL,
				A.REPORT_ID = IN_REPORT_ID,
                A.ID > 0
            ) AND
            IF(IN_ADMIN_ID IS NOT NULL,
				A.ADMIN_ID = IN_ADMIN_ID,
                A.ID > 0
            ) AND
            IF(IN_MEMBER_ID IS NOT NULL,
				A.MEMBER_ID = IN_MEMBER_ID,
                A.ID > 0
            ) AND
            IF(IN_SITE_ID IS NOT NULL,
				A.SITE_ID = IN_SITE_ID,
                A.ID > 0
            )
		);
        
    SET OUT_NOTE_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_NOTES_WITHOUT_HANDLER_TEMP (
		ID					BIGINT,
		ADMIN_ID			BIGINT,
		MEMBER_ID			BIGINT,
		SITE_ID				BIGINT,
		ORDER_ID			BIGINT,
		BIDDING_ID			BIGINT,
		TRANSACTION_ID		BIGINT,
		REPORT_ID			BIGINT,
		NOTE				TEXT,
		CREATED_AT			DATETIME,
		UPDATED_AT			DATETIME,
		SITE_CATEGORY		TINYINT,
        ADMIN_NAME			VARCHAR(255),
        MEMBER_NAME			VARCHAR(255),
        SITE_NAME			VARCHAR(255),
        ORDER_CODE			VARCHAR(10)
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		SET VAR_MEMBER_NAME = NULL;
		SET VAR_SITE_NAME = NULL;
		SET VAR_ORDER_CODE = NULL;
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_ADMIN_ID,
			CUR_MEMBER_ID,
			CUR_SITE_ID,
			CUR_ORDER_ID,
			CUR_BIDDING_ID,
			CUR_TRANSACTION_ID,
			CUR_REPORT_ID,
			CUR_NOTE,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_SITE_CATEGORY,
			CUR_ADMIN_NAME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
        IF CUR_MEMBER_ID IS NOT NULL THEN
			SELECT USER_NAME INTO VAR_MEMBER_NAME
            FROM USERS
            WHERE ID = CUR_MEMBER_ID;
        END IF;
        
        IF CUR_SITE_ID IS NOT NULL THEN
			IF CUR_SITE_CATEGORY IS NOT NULL THEN
				IF CUR_SITE_CATEGORY = TRUE THEN
					SELECT SITE_NAME INTO VAR_SITE_NAME
					FROM COMP_SITE
					WHERE ID = CUR_SITE_ID;
                ELSE
					SELECT COMP_NAME INTO VAR_SITE_NAME
					FROM PROSPECTIVE_MEMBERS
					WHERE ID = CUR_SITE_ID;
                END IF;
            END IF;
        END IF;
        
        IF CUR_ORDER_ID IS NOT NULL THEN
			SELECT ORDER_CODE INTO VAR_ORDER_CODE
            FROM SITE_WSTE_DISPOSAL_ORDER
            WHERE ID = CUR_ORDER_ID;
        END IF;
        
        IF CUR_SITE_ID IS NOT NULL THEN
			IF CUR_SITE_CATEGORY IS NOT NULL THEN
				IF CUR_SITE_CATEGORY = TRUE THEN
					SELECT SITE_NAME INTO VAR_SITE_NAME
					FROM COMP_SITE
					WHERE ID = CUR_SITE_ID;
                ELSE
					SELECT COMP_NAME INTO VAR_SITE_NAME
					FROM PROSPECTIVE_MEMBERS
					WHERE ID = CUR_SITE_ID;
                END IF;
            END IF;
        END IF;
        
		INSERT INTO 
		ADMIN_GET_NEW_NOTES_WITHOUT_HANDLER_TEMP(
			ID,
			ADMIN_ID,
			MEMBER_ID,
			SITE_ID,
			ORDER_ID,
			BIDDING_ID,
			TRANSACTION_ID,
			REPORT_ID,
			NOTE,
			CREATED_AT,
			UPDATED_AT,
			SITE_CATEGORY,
			ADMIN_NAME,
			MEMBER_NAME,
			SITE_NAME,
			ORDER_CODE
		) VALUES( 
			CUR_ID,
			CUR_ADMIN_ID,
			CUR_MEMBER_ID,
			CUR_SITE_ID,
			CUR_ORDER_ID,
			CUR_BIDDING_ID,
			CUR_TRANSACTION_ID,
			CUR_REPORT_ID,
			CUR_NOTE,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_SITE_CATEGORY,
			CUR_ADMIN_NAME,
			VAR_MEMBER_NAME,
			VAR_SITE_NAME,
			VAR_ORDER_CODE
		);
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'					, ID, 
        'ADMIN_ID'				, ADMIN_ID, 
        'MEMBER_ID'				, MEMBER_ID, 
        'SITE_ID'				, SITE_ID, 
        'ORDER_ID'				, ORDER_ID, 
        'BIDDING_ID'			, BIDDING_ID, 
        'TRANSACTION_ID'		, TRANSACTION_ID, 
        'REPORT_ID'				, REPORT_ID, 
        'NOTE'					, NOTE, 
        'CREATED_AT'			, CREATED_AT, 
        'UPDATED_AT'			, UPDATED_AT, 
        'SITE_CATEGORY'			, SITE_CATEGORY, 
        'ADMIN_NAME'			, ADMIN_NAME, 
        'MEMBER_NAME'			, MEMBER_NAME, 
        'SITE_NAME'				, SITE_NAME, 
        'ORDER_CODE'			, ORDER_CODE
	)) 
    INTO VAR_NOTE_LIST FROM ADMIN_GET_NEW_NOTES_WITHOUT_HANDLER_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_NOTES_WITHOUT_HANDLER_TEMP;
    
    SELECT JSON_OBJECT(
		'RECORD_COUNT'			, VAR_RECORD_COUNT,
		'NOTES'					, VAR_NOTE_LIST
    ) INTO OUT_NOTE_LIST;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_report_details`(
    IN IN_PARAMS					JSON
)
BEGIN
    DECLARE VAR_USER_ID				BIGINT DEFAULT NULL;
    DECLARE JSON_REPORT_INFO		JSON DEFAULT NULL;
    DECLARE rtn_val					INT DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200) DEFAULT 'success';
    DECLARE json_data				JSON DEFAULT NULL;
    
    DECLARE VAR_ADMIN_ID			BIGINT DEFAULT NULL;
    DECLARE VAR_MEMBER_ID			BIGINT DEFAULT NULL;
    DECLARE VAR_SITE_ID				BIGINT DEFAULT NULL;
    DECLARE VAR_ORDER_ID			BIGINT DEFAULT NULL;
    DECLARE VAR_BIDDING_ID			BIGINT DEFAULT NULL;
    DECLARE VAR_TRANSACTION_ID		BIGINT DEFAULT NULL;
    DECLARE VAR_REPORT_ID			BIGINT DEFAULT NULL;
    DECLARE VAR_SITE_CATEGORY		TINYINT DEFAULT NULL;
    DECLARE VAR_SEARCH				VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE			INT DEFAULT 0;
    DECLARE VAR_PAGE_SIZE			INT DEFAULT 1000;
    DECLARE VAR_NOTE_LIST			JSON DEFAULT NULL;
    
	SELECT USER_ID, REPORT_ID
    INTO VAR_ADMIN_ID, VAR_REPORT_ID
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		REPORT_ID 				BIGINT				PATH "$.REPORT_ID"
	)) AS PARAMS;   
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_REPORT_DETAILS_TEMP (
        USER_ID					BIGINT,
        REPORT_ID				BIGINT,
        REPORT_INFO				JSON,
        NOTES					JSON,
        INPUT_PARAM				JSON
	);
    
	CALL sp_admin_get_new_report_details_without_handler(
		VAR_REPORT_ID,
		JSON_REPORT_INFO
	);
    
    CALL sp_admin_get_new_notes_without_handler(
		VAR_ADMIN_ID,
		VAR_MEMBER_ID,
		VAR_SITE_ID,
		VAR_ORDER_ID,
		VAR_BIDDING_ID,
		VAR_TRANSACTION_ID,
		VAR_REPORT_ID,
		VAR_SITE_CATEGORY,
		VAR_SEARCH,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
        VAR_NOTE_LIST
    );
    
	INSERT INTO 
	ADMIN_GET_NEW_REPORT_DETAILS_TEMP(
		USER_ID,
		REPORT_ID,
		REPORT_INFO,
		NOTES
	)
	VALUES(
		VAR_USER_ID,
		VAR_REPORT_ID,
		JSON_REPORT_INFO,
		VAR_NOTE_LIST
	);
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'USER_ID'				, USER_ID,
        'REPORT_ID'				, REPORT_ID,
        'REPORT_INFO'			, REPORT_INFO,
        'NOTES'					, NOTES,
        'INPUT_PARAM'			, IN_PARAMS
	)) 
    INTO json_data FROM ADMIN_GET_NEW_REPORT_DETAILS_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_REPORT_DETAILS_TEMP;
	CALL sp_return_results(msg_txt, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_report_details_without_handler`(
	IN IN_REPORT_ID						BIGINT,
    OUT OUT_REPORT_INFO					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_report_details_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 								INT 				DEFAULT 0;
    DECLARE endOfRow 								TINYINT 			DEFAULT FALSE;   
	DECLARE CUR_ID									BIGINT;
	DECLARE CUR_TRANSACTION_ID						BIGINT;
	DECLARE CUR_COLLECTOR_SITE_ID					BIGINT;
	DECLARE CUR_DISPOSER_SITE_ID					BIGINT;
	DECLARE CUR_COLLECTOR_MANAGER_ID				BIGINT;
	DECLARE CUR_TRANSACTION_COMPLETED_AT			DATETIME;
	DECLARE CUR_QUANTITY							FLOAT;
	DECLARE CUR_UNIT								VARCHAR(20);
	DECLARE CUR_PRICE								INT;
	DECLARE CUR_TRMT_METHOD							VARCHAR(4);
	DECLARE CUR_WSTE_CODE							VARCHAR(8);
	DECLARE CUR_CREATED_AT							DATETIME;
	DECLARE CUR_UPDATED_AT							DATETIME;
	DECLARE CUR_DISPOSER_MANAGER_ID					BIGINT;
	DECLARE CUR_CONFIRMED_AT						DATETIME;
	DECLARE CUR_CONFIRMED							TINYINT;
	DECLARE CUR_WSTE_APPEARANCE						INT;
	DECLARE CUR_WSTE_FCTL_ID						INT;
    DECLARE CUR_DISPOSER_SITE_NAME					VARCHAR(255);
    DECLARE CUR_COLLECTOR_SITE_NAME					VARCHAR(255);
    DECLARE CUR_WSTE_NAME							VARCHAR(255);
    DECLARE CUR_WSTE_APPEARANCE_NAME				VARCHAR(255);  
    DECLARE CUR_TRMT_METHOD_NAME					VARCHAR(255);  
	DECLARE CUR_DISPOSER_ORDER_ID					BIGINT;
    DECLARE VAR_WSTE_FCTL_INFO						JSON			DEFAULT NULL;
    DECLARE VAR_WSTE_FCTL_SUB_INFO					JSON			DEFAULT NULL;
    DECLARE VAR_DISPOSER_NAME						VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_DISPOSER_SITE_NAME					VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_DISPOSER_TYPE						VARCHAR(20)		DEFAULT NULL;
    DECLARE VAR_DISPOSER_SITE_ID					BIGINT			DEFAULT NULL;
    DECLARE VAR_DISPOSER_ID							BIGINT			DEFAULT NULL;
    DECLARE VAR_ORDER_CODE							VARCHAR(10)		DEFAULT NULL;
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
	SELECT 
		A.ID,
		A.TRANSACTION_ID,
		A.COLLECTOR_SITE_ID,
		A.DISPOSER_SITE_ID,
		A.COLLECTOR_MANAGER_ID,
		A.TRANSACTION_COMPLETED_AT,
		A.QUANTITY,
		A.UNIT,
		A.PRICE,
		A.TRMT_METHOD,
		A.WSTE_CODE,
		A.CREATED_AT,
		A.UPDATED_AT,
		A.DISPOSER_MANAGER_ID,
		A.CONFIRMED_AT,
		A.CONFIRMED,
		A.WSTE_APPEARANCE,
		A.WSTE_FCTL_ID,
		IF(A.DISPOSER_SITE_ID = 0, CONCAT('(개)', F.USER_NAME), CONCAT('(사)', E.SITE_NAME)),
        B.SITE_NAME,
        C.NAME,
        D.KOREAN,
		G.NAME,
        A.DISPOSER_ORDER_ID
    FROM TRANSACTION_REPORT A
    LEFT JOIN COMP_SITE B ON A.COLLECTOR_SITE_ID = B.ID
    LEFT JOIN WSTE_CODE C ON A.WSTE_CODE = C.CODE
    LEFT JOIN WSTE_APPEARANCE D ON A.WSTE_APPEARANCE = D.ID
    LEFT JOIN COMP_SITE E ON A.DISPOSER_SITE_ID = E.ID
    LEFT JOIN USERS F ON A.DISPOSER_MANAGER_ID = F.ID
    LEFT JOIN WSTE_TRMT_METHOD G ON A.TRMT_METHOD = G.CODE
    WHERE A.ID = IN_REPORT_ID;  
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;    
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_REPORT_DETAILS_WITHOUT_HANDLER_TEMP (
		ID								BIGINT,
		TRANSACTION_ID					BIGINT,
		COLLECTOR_SITE_ID				BIGINT,
		DISPOSER_SITE_ID				BIGINT,
		COLLECTOR_MANAGER_ID			BIGINT,
		TRANSACTION_COMPLETED_AT		DATETIME,
		QUANTITY						FLOAT,
		UNIT							VARCHAR(20),
		PRICE							INT,
		TRMT_METHOD						VARCHAR(4),
		WSTE_CODE						VARCHAR(8),
		CREATED_AT						DATETIME,
		UPDATED_AT						DATETIME,
		DISPOSER_MANAGER_ID				BIGINT,
		CONFIRMED_AT					DATETIME,
		CONFIRMED						TINYINT,
		WSTE_APPEARANCE					INT,
		WSTE_FCTL_ID					INT,
        DISPOSER_SITE_NAME				VARCHAR(255),
        COLLECTOR_SITE_NAME				VARCHAR(255),
        WSTE_NAME						VARCHAR(255),
        WSTE_APPEARANCE_NAME			VARCHAR(255),
        WSTE_FCTL_INFO					JSON,
        TRMT_METHOD_NAME				VARCHAR(255),
        ORDER_ID						BIGINT
	);   
    
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID,
			CUR_TRANSACTION_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_DISPOSER_SITE_ID,
			CUR_COLLECTOR_MANAGER_ID,
			CUR_TRANSACTION_COMPLETED_AT,
			CUR_QUANTITY,
			CUR_UNIT,
			CUR_PRICE,
			CUR_TRMT_METHOD,
			CUR_WSTE_CODE,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_DISPOSER_MANAGER_ID,
			CUR_CONFIRMED_AT,
			CUR_CONFIRMED,
			CUR_WSTE_APPEARANCE,
			CUR_WSTE_FCTL_ID,
			CUR_DISPOSER_SITE_NAME,
			CUR_COLLECTOR_SITE_NAME,
			CUR_WSTE_NAME,
			CUR_WSTE_APPEARANCE_NAME,
			CUR_TRMT_METHOD_NAME,
			CUR_DISPOSER_ORDER_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_GET_NEW_REPORT_DETAILS_WITHOUT_HANDLER_TEMP(
			ID,
			TRANSACTION_ID,
			COLLECTOR_SITE_ID,
			DISPOSER_SITE_ID,
			COLLECTOR_MANAGER_ID,
			TRANSACTION_COMPLETED_AT,
			QUANTITY,
			UNIT,
			PRICE,
			TRMT_METHOD,
			WSTE_CODE,
			CREATED_AT,
			UPDATED_AT,
			DISPOSER_MANAGER_ID,
			CONFIRMED_AT,
			CONFIRMED,
			WSTE_APPEARANCE,
			WSTE_FCTL_ID,
			DISPOSER_SITE_NAME,
			COLLECTOR_SITE_NAME,
			WSTE_NAME,
			WSTE_APPEARANCE_NAME,
			TRMT_METHOD_NAME,
			ORDER_ID
		)
		VALUES(
			CUR_ID,
			CUR_TRANSACTION_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_DISPOSER_SITE_ID,
			CUR_COLLECTOR_MANAGER_ID,
			CUR_TRANSACTION_COMPLETED_AT,
			CUR_QUANTITY,
			CUR_UNIT,
			CUR_PRICE,
			CUR_TRMT_METHOD,
			CUR_WSTE_CODE,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_DISPOSER_MANAGER_ID,
			CUR_CONFIRMED_AT,
			CUR_CONFIRMED,
			CUR_WSTE_APPEARANCE,
			CUR_WSTE_FCTL_ID,
			CUR_DISPOSER_SITE_NAME,
			CUR_COLLECTOR_SITE_NAME,
			CUR_WSTE_NAME,
			CUR_WSTE_APPEARANCE_NAME,
			CUR_TRMT_METHOD_NAME,
			CUR_DISPOSER_ORDER_ID
		);
    
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'ID'				, A.ID,
			'REPORT_ID'			, A.REPORT_ID,
			'CATEGORY_ID'		, A.CATEGORY_ID,
			'VALUE_CODE'		, A.CATEGORY_VALUE,
			'VALUE_NAME'		, C.NAME,
			'DEPTH'				, A.DEPTH,
			'CREATED_AT'		, A.CREATED_AT,
			'UPDATED_AT'		, A.UPDATED_AT,
			'CATEGORY_NAME'		, B.NAME
		))
		INTO VAR_WSTE_FCTL_SUB_INFO 
		FROM WSTE_TRMT_FCTL_PROCESSING_DETAILS A
        LEFT JOIN GHG_EMIT_FACTOR B ON A.CATEGORY_ID = B.ID
        LEFT JOIN GHG_EMIT_FACTOR C ON A.CATEGORY_VALUE = C.ID
		WHERE 
			A.REPORT_ID = IN_REPORT_ID AND
			A.P_CATEGORY_ID = CUR_WSTE_FCTL_ID AND
            A.DEPTH = 2; 
		
		SELECT JSON_OBJECT(
			'ID'				, A.ID,
			'REPORT_ID'			, A.REPORT_ID,
			'CATEGORY_ID'		, A.CATEGORY_ID,
			'CATEGORY_VALUE'	, A.CATEGORY_VALUE,
			'P_CATEGORY_ID'		, A.P_CATEGORY_ID,
			'DEPTH'				, A.DEPTH,
			'CREATED_AT'		, A.CREATED_AT,
			'UPDATED_AT'		, A.UPDATED_AT,
			'CATEGORY_NAME'		, B.NAME,
			'SUB_CATEGORY'		, VAR_WSTE_FCTL_SUB_INFO
		)
		INTO VAR_WSTE_FCTL_INFO 
		FROM WSTE_TRMT_FCTL_PROCESSING_DETAILS A
        LEFT JOIN GHG_EMIT_FACTOR B ON A.CATEGORY_ID = B.ID
		WHERE 
			A.REPORT_ID = IN_REPORT_ID AND
			A.CATEGORY_ID = CUR_WSTE_FCTL_ID AND
            A.DEPTH = 1; 
		
		UPDATE ADMIN_GET_NEW_REPORT_DETAILS_WITHOUT_HANDLER_TEMP
		SET WSTE_FCTL_INFO = VAR_WSTE_FCTL_INFO
		WHERE ID = IN_REPORT_ID;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'						, ID, 
        'TRANSACTION_ID'			, TRANSACTION_ID, 
        'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
        'DISPOSER_SITE_ID'			, DISPOSER_SITE_ID, 
        'COLLECTOR_MANAGER_ID'		, COLLECTOR_MANAGER_ID, 
        'TRANSACTION_COMPLETED_AT'	, TRANSACTION_COMPLETED_AT, 
        'QUANTITY'					, QUANTITY, 
        'UNIT'						, UNIT, 
        'PRICE'						, PRICE, 
        'TRMT_METHOD'				, TRMT_METHOD, 
        'WSTE_CODE'					, WSTE_CODE, 
        'CREATED_AT'				, CREATED_AT, 
        'UPDATED_AT'				, UPDATED_AT, 
        'DISPOSER_MANAGER_ID'		, DISPOSER_MANAGER_ID, 
        'CONFIRMED_AT'				, CONFIRMED_AT, 
        'CONFIRMED'					, CONFIRMED, 
        'WSTE_APPEARANCE'			, WSTE_APPEARANCE, 
        'WSTE_FCTL_ID'				, WSTE_FCTL_ID,
        'DISPOSER_SITE_NAME'		, DISPOSER_SITE_NAME, 
        'COLLECTOR_SITE_NAME'		, COLLECTOR_SITE_NAME, 
        'WSTE_NAME'					, WSTE_NAME, 
        'WSTE_APPEARANCE_NAME'		, WSTE_APPEARANCE_NAME,
        'WSTE_FCTL_INFO'			, WSTE_FCTL_INFO,
        'TRMT_METHOD_NAME'			, TRMT_METHOD_NAME,
        'ORDER_ID'					, ORDER_ID
	))
    INTO OUT_REPORT_INFO FROM ADMIN_GET_NEW_REPORT_DETAILS_WITHOUT_HANDLER_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_REPORT_DETAILS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_reports`(
    IN IN_PARAMS					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_reports
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_USER_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_SEARCH						VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_PAGE_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_OUT_LIST					JSON 			DEFAULT NULL;
    DECLARE VAR_OUT_RECORD_COUNT			INT 			DEFAULT 0;
    DECLARE VAR_LAST_PAGE					INT 			DEFAULT NULL;
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON 			DEFAULT NULL;
    DECLARE VAR_DUMMY_ACTIVATE				TINYINT			DEFAULT FALSE;
    
	SELECT 
		USER_ID, 
        SEARCH, 
        OFFSET_SIZE, 
        PAGE_SIZE
    INTO 
		VAR_USER_ID, 
        VAR_SEARCH, 
        VAR_OFFSET_SIZE, 
        VAR_PAGE_SIZE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		SEARCH	 				VARCHAR(255)		PATH "$.SEARCH",
		OFFSET_SIZE 			INT 				PATH "$.OFFSET_SIZE",
		PAGE_SIZE 				INT 				PATH "$.PAGE_SIZE"
	)) AS PARAMS;
    
    CALL sp_req_policy_direction(
		'dummy_activate',
        VAR_DUMMY_ACTIVATE
    );
    
    CALL sp_admin_get_new_reports_without_handler(
		VAR_SEARCH,
		VAR_DUMMY_ACTIVATE,
        VAR_OFFSET_SIZE,
        VAR_PAGE_SIZE,
        VAR_OUT_RECORD_COUNT,
        VAR_OUT_LIST
    );
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_REPORTS_TEMP (
		INPUT_PARAMS					JSON,
		LAST_PAGE						INT,
		REPORT_LIST						JSON
	);      
	
	SET VAR_LAST_PAGE = CEILING(VAR_OUT_RECORD_COUNT / VAR_PAGE_SIZE);
    
    INSERT INTO ADMIN_GET_NEW_REPORTS_TEMP (
		INPUT_PARAMS,
        LAST_PAGE,
        REPORT_LIST
    ) VALUES (
		IN_PARAMS,
        VAR_LAST_PAGE,
        VAR_OUT_LIST
    );
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'INPUT_PARAMS'				, INPUT_PARAMS, 
        'LAST_PAGE'					, LAST_PAGE, 
        'REPORT_LIST'				, REPORT_LIST
	)) 
    INTO json_data FROM ADMIN_GET_NEW_REPORTS_TEMP;    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_REPORTS_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_reports_without_handler`(
	IN IN_SEARCH						VARCHAR(255),
    IN IN_DUMMY_ACTIVATE				TINYINT,
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    OUT OUT_RECORD_COUNT				INT,
    OUT OUT_SITE_LIST					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_reports_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT 		DEFAULT FALSE;    
	DECLARE CUR_ID								BIGINT;
	DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
	DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;
	DECLARE CUR_DISPOSER_ID						BIGINT;
	DECLARE CUR_DISPOSER_SITE_ID				BIGINT;
	DECLARE CUR_COLLECTOR_SITE_NAME				VARCHAR(255);
	DECLARE CUR_CONFIRMED						TINYINT;
	DECLARE CUR_CREATED_AT						DATETIME;
	DECLARE CUR_ORDER_CODE						VARCHAR(10);
    DECLARE VAR_RECORD_COUNT					INT				DEFAULT 0;
    DECLARE VAR_DISPOSER_NAME					VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_DISPOSER_SITE_NAME				VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_DISPOSER_TYPE					VARCHAR(20)		DEFAULT NULL;
    DECLARE VAR_DISPOSER_SITE_ID				BIGINT			DEFAULT NULL;
    DECLARE VAR_DISPOSER_ID						BIGINT			DEFAULT NULL;
    DECLARE VAR_ORDER_CODE						VARCHAR(10)		DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID,
		A.COLLECTOR_SITE_ID,
		A.DISPOSER_ORDER_ID,
		D.DISPOSER_ID,
		D.SITE_ID,
        C.SITE_NAME,
        A.CONFIRMED,
        A.CREATED_AT,
        D.ORDER_CODE
    FROM TRANSACTION_REPORT A
	LEFT JOIN COMP_SITE C ON A.COLLECTOR_SITE_ID = C.ID
    LEFT JOIN KIKCD_B B ON C.KIKCD_B_CODE = B.B_CODE
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER D ON A.DISPOSER_ORDER_ID = D.ID
    WHERE 
		IF(IN_DUMMY_ACTIVATE = TRUE, (C.TEST = TRUE OR C.TEST = FALSE), C.TEST = FALSE) AND
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.COLLECTOR_SITE_ID IN (
					SELECT A1.ID 
                    FROM COMP_SITE A1
                    LEFT JOIN COMPANY A2 ON A1.COMP_ID = A2.ID
                    WHERE 
						A1.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A1.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.COMP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A2.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A1.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                ) OR
				A.DISPOSER_ORDER_ID LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.B_CODE LIKE CONCAT('%', IN_SEARCH, '%')
			)
		)
    ORDER BY A.UPDATED_AT DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	SELECT COUNT(A.ID) INTO VAR_RECORD_COUNT
    FROM TRANSACTION_REPORT A
	LEFT JOIN COMP_SITE C ON A.COLLECTOR_SITE_ID = C.ID
    LEFT JOIN KIKCD_B B ON C.KIKCD_B_CODE = B.B_CODE
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER D ON A.DISPOSER_ORDER_ID = D.ID
    WHERE 
		IF(IN_DUMMY_ACTIVATE = TRUE, (C.TEST = TRUE OR C.TEST = FALSE), C.TEST = FALSE) AND
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.COLLECTOR_SITE_ID IN (
					SELECT A1.ID 
                    FROM COMP_SITE A1
                    LEFT JOIN COMPANY A2 ON A1.COMP_ID = A2.ID
                    WHERE 
						A1.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A1.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.COMP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A2.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A1.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                ) OR
				A.DISPOSER_ORDER_ID LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.B_CODE LIKE CONCAT('%', IN_SEARCH, '%')
			)
		);
    
    SET OUT_RECORD_COUNT = VAR_RECORD_COUNT;
    SET OUT_SITE_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_REPORTS_WITHOUT_HANDLER_TEMP (
		ID								BIGINT,
		COLLECTOR_SITE_ID				BIGINT,
		DISPOSER_ORDER_ID				BIGINT,
		DISPOSER_ID						BIGINT,
		DISPOSER_SITE_ID				BIGINT,
		COLLECTOR_SITE_NAME				VARCHAR(255),
		CONFIRMED						TINYINT,
		CREATED_AT						DATETIME,
        ORDER_CODE						VARCHAR(10),
        DISPOSER_NAME					VARCHAR(255),
        DISPOSER_TYPE					VARCHAR(20)
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ID,
			CUR_DISPOSER_SITE_ID,
			CUR_COLLECTOR_SITE_NAME,
			CUR_CONFIRMED,
			CUR_CREATED_AT,
            CUR_ORDER_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
		ADMIN_GET_NEW_REPORTS_WITHOUT_HANDLER_TEMP(
			ID,
			COLLECTOR_SITE_ID,
			DISPOSER_ORDER_ID,
			DISPOSER_ID,
			DISPOSER_SITE_ID,
			COLLECTOR_SITE_NAME,
			CONFIRMED,
			CREATED_AT,
			ORDER_CODE
		)
		VALUES( 
			CUR_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ID,
			CUR_DISPOSER_SITE_ID,
			CUR_COLLECTOR_SITE_NAME,
			CUR_CONFIRMED,
			CUR_CREATED_AT,
			CUR_ORDER_CODE
		);
                
        IF CUR_DISPOSER_SITE_ID = 0 THEN
			SET VAR_DISPOSER_TYPE = "개";
            SELECT USER_NAME INTO VAR_DISPOSER_NAME
            FROM USERS
            WHERE ID = CUR_DISPOSER_ID;
        ELSE
			SET VAR_DISPOSER_TYPE = "사";
            SELECT SITE_NAME INTO VAR_DISPOSER_NAME
            FROM COMP_SITE
            WHERE ID = CUR_DISPOSER_SITE_ID;
        END IF;
        
        UPDATE ADMIN_GET_NEW_REPORTS_WITHOUT_HANDLER_TEMP
        SET
			DISPOSER_NAME = VAR_DISPOSER_NAME,
            DISPOSER_TYPE = VAR_DISPOSER_TYPE
		WHERE ID = CUR_ID;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'						, ID, 
        'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
        'DISPOSER_ORDER_ID'			, DISPOSER_ORDER_ID, 
        'DISPOSER_ID'				, DISPOSER_ID, 
        'DISPOSER_SITE_ID'			, DISPOSER_SITE_ID, 
        'COLLECTOR_SITE_NAME'		, COLLECTOR_SITE_NAME, 
        'CONFIRMED'					, CONFIRMED, 
        'CREATED_AT'				, CREATED_AT, 
        'ORDER_CODE'				, ORDER_CODE, 
        'DISPOSER_NAME'				, DISPOSER_NAME, 
        'DISPOSER_TYPE'				, DISPOSER_TYPE
	)) 
    INTO OUT_SITE_LIST FROM ADMIN_GET_NEW_REPORTS_WITHOUT_HANDLER_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_REPORTS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_transaction_details`(
    IN IN_PARAMS					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_comings
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_USER_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_TRANSACTION_INFO			JSON 			DEFAULT NULL;
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON 			DEFAULT NULL;
    
    DECLARE VAR_ADMIN_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_MEMBER_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_SITE_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_ORDER_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_BIDDING_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_TRANSACTION_ID				BIGINT 			DEFAULT NULL;
    DECLARE VAR_REPORT_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_SITE_CATEGORY				TINYINT 		DEFAULT NULL;
    DECLARE VAR_SEARCH						VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE					INT 			DEFAULT 0;
    DECLARE VAR_PAGE_SIZE					INT 			DEFAULT 1000;
    DECLARE VAR_NOTE_LIST					JSON 			DEFAULT NULL;
    
	SELECT 
		USER_ID, 
        TRANSACTION_ID
    INTO 
		VAR_ADMIN_ID, 
        VAR_TRANSACTION_ID
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		TRANSACTION_ID			BIGINT				PATH "$.TRANSACTION_ID"
	)) AS PARAMS;
    
    CALL sp_admin_get_new_transaction_details_without_handler(
		VAR_TRANSACTION_ID,
        VAR_TRANSACTION_INFO
    );
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_TRANSACTION_DETAILS (
		INPUT_PARAMS					JSON,
        NOTES							JSON,
		TRANSACTION_INFO				JSON
	);   
    
    CALL sp_admin_get_new_notes_without_handler(
		VAR_ADMIN_ID,
		VAR_MEMBER_ID,
		VAR_SITE_ID,
		VAR_ORDER_ID,
		VAR_BIDDING_ID,
		VAR_TRANSACTION_ID,
		VAR_REPORT_ID,
		VAR_SITE_CATEGORY,
		VAR_SEARCH,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
        VAR_NOTE_LIST
    );
    
    INSERT INTO ADMIN_GET_NEW_TRANSACTION_DETAILS (
		INPUT_PARAMS,
        TRANSACTION_INFO,
		NOTES
    ) VALUES (
		IN_PARAMS,
        VAR_TRANSACTION_INFO,
		VAR_NOTE_LIST
    );
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'INPUT_PARAMS'				, INPUT_PARAMS, 
        'TRANSACTION_INFO'			, TRANSACTION_INFO, 
        'NOTES'						, NOTES
	)) 
    INTO json_data FROM ADMIN_GET_NEW_TRANSACTION_DETAILS;    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_TRANSACTION_DETAILS;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_transaction_details_without_handler`(
	IN IN_TRANSACTION_ID				BIGINT,
    OUT OUT_TRANSACTION_INFO			JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_transaction_details_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT 		DEFAULT FALSE;    
	DECLARE CUR_ID								BIGINT;
	DECLARE CUR_DISPOSAL_ORDER_ID				BIGINT;
	DECLARE CUR_COLLECTOR_BIDDING_ID			BIGINT;
	DECLARE CUR_ASKER_ID						BIGINT;
	DECLARE CUR_COLLECT_ASK_END_AT				DATETIME;
	DECLARE CUR_COLLECTING_TRUCK_ID				BIGINT;
	DECLARE CUR_TRUCK_DRIVER_ID					BIGINT;
	DECLARE CUR_TRUCK_START_AT					DATETIME;
	DECLARE CUR_COLLECT_END_AT					DATETIME;
	DECLARE CUR_WSTE_CODE						VARCHAR(8);
	DECLARE CUR_WSTE_QUANTITY					FLOAT;
	DECLARE CUR_WSTE_UNIT						VARCHAR(20);
	DECLARE CUR_PRICE_UNIT						FLOAT;
	DECLARE CUR_QCC_IMG_PATH					VARCHAR(255);
	DECLARE CUR_CONTRACT_ID						BIGINT;
	DECLARE CUR_CONFIRMER_ID					BIGINT;
	DECLARE CUR_DATE_OF_VISIT					DATETIME;
	DECLARE CUR_VISIT_START_AT					DATETIME;
	DECLARE CUR_VISIT_END_AT					DATETIME;
	DECLARE CUR_CONFIRMED_AT					DATETIME;
	DECLARE CUR_CREATED_AT						DATETIME;
	DECLARE CUR_UPDATED_AT						DATETIME;
	DECLARE CUR_COLLECTOR_ID					BIGINT;
	DECLARE CUR_WSTE_APPEARANCE					INT;
	DECLARE CUR_ACCEPT_ASK_END					TINYINT;
	DECLARE CUR_ACCEPT_ASK_END_AT				DATETIME;
	DECLARE CUR_COLLECTOR_REPORTED				TINYINT;
	DECLARE CUR_COLLECTOR_REPORTED_AT			DATETIME;
	DECLARE CUR_IN_PROGRESS						TINYINT;
	DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
	DECLARE CUR_CONFIRMED						TINYINT;
	DECLARE CUR_MAX_DECISION_AT					DATETIME;
	DECLARE CUR_CHECK_STATE						TINYINT;
    DECLARE CUR_REJECT_REASON					VARCHAR(255)	DEFAULT 0;    
    DECLARE VAR_ORDER_INFO						JSON			DEFAULT NULL;
    DECLARE VAR_WSTE_INFO						JSON			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID,
		A.DISPOSAL_ORDER_ID,
		A.COLLECTOR_BIDDING_ID,
		A.ASKER_ID,
		A.COLLECT_ASK_END_AT,
		A.COLLECTING_TRUCK_ID,
		A.TRUCK_DRIVER_ID,
		A.TRUCK_START_AT,
		A.COLLECT_END_AT,
		A.WSTE_CODE,
		A.WSTE_QUANTITY,
		A.WSTE_UNIT,
		A.PRICE_UNIT,
		A.QCC_IMG_PATH,
        A.CONTRACT_ID,
        A.CONFIRMER_ID,
        A.DATE_OF_VISIT,
        A.VISIT_START_AT,
        A.VISIT_END_AT,
        A.CONFIRMED_AT,
        A.CREATED_AT,
        A.UPDATED_AT,
        A.COLLECTOR_ID,
        A.WSTE_APPEARANCE,
        A.ACCEPT_ASK_END,
        A.ACCEPT_ASK_END_AT,
        A.COLLECTOR_REPORTED,
        A.COLLECTOR_REPORTED_AT,
        A.IN_PROGRESS,
        A.COLLECTOR_SITE_ID,
        A.CONFIRMED,
        A.MAX_DECISION_AT,
        A.CHECK_STATE,
        A.REJECT_REASON
    FROM WSTE_CLCT_TRMT_TRANSACTION A
    WHERE A.ID = IN_TRANSACTION_ID;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_TRANSACTION_DETAILS_WITHOUT_HANDLER_TEMP (
		ID								BIGINT,
		DISPOSAL_ORDER_ID				BIGINT,
		COLLECTOR_BIDDING_ID			BIGINT,
		ASKER_ID						BIGINT,
		COLLECT_ASK_END_AT				DATETIME,
		COLLECTING_TRUCK_ID				BIGINT,
		TRUCK_DRIVER_ID					BIGINT,
		TRUCK_START_AT					DATETIME,
		COLLECT_END_AT					DATETIME,
		WSTE_CODE						VARCHAR(8),
		WSTE_QUANTITY					FLOAT,
		WSTE_UNIT						VARCHAR(20),
		PRICE_UNIT						FLOAT,
		QCC_IMG_PATH					VARCHAR(255),
		CONTRACT_ID						BIGINT,
		CONFIRMER_ID					BIGINT,
		DATE_OF_VISIT					DATETIME,
		VISIT_START_AT					DATETIME,
		VISIT_END_AT					DATETIME,
		CONFIRMED_AT					DATETIME,
		CREATED_AT						DATETIME,
		UPDATED_AT						DATETIME,
		COLLECTOR_ID					BIGINT,
		WSTE_APPEARANCE					INT,
		ACCEPT_ASK_END					TINYINT,
		ACCEPT_ASK_END_AT				DATETIME,
		COLLECTOR_REPORTED				TINYINT,
		COLLECTOR_REPORTED_AT			DATETIME,
		IN_PROGRESS						TINYINT,
		COLLECTOR_SITE_ID				BIGINT,
		CONFIRMED						TINYINT,
		MAX_DECISION_AT					DATETIME,
		CHECK_STATE						TINYINT,
		REJECT_REASON					VARCHAR(255)	DEFAULT 0,
        ORDER_INFO						JSON,
        WSTE_INFO						JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_DISPOSAL_ORDER_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_ASKER_ID,
			CUR_COLLECT_ASK_END_AT,
			CUR_COLLECTING_TRUCK_ID,
			CUR_TRUCK_DRIVER_ID,
			CUR_TRUCK_START_AT,
			CUR_COLLECT_END_AT,
			CUR_WSTE_CODE,
			CUR_WSTE_QUANTITY,
			CUR_WSTE_UNIT,
			CUR_PRICE_UNIT,
			CUR_QCC_IMG_PATH,
			CUR_CONTRACT_ID,
			CUR_CONFIRMER_ID,
			CUR_DATE_OF_VISIT,
			CUR_VISIT_START_AT,
			CUR_VISIT_END_AT,
			CUR_CONFIRMED_AT,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_COLLECTOR_ID,
			CUR_WSTE_APPEARANCE,	
			CUR_ACCEPT_ASK_END,
			CUR_ACCEPT_ASK_END_AT,
			CUR_COLLECTOR_REPORTED,
			CUR_COLLECTOR_REPORTED_AT,
			CUR_IN_PROGRESS,
			CUR_COLLECTOR_SITE_ID,
			CUR_CONFIRMED,
			CUR_MAX_DECISION_AT,
			CUR_CHECK_STATE,
			CUR_REJECT_REASON;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
		ADMIN_GET_NEW_TRANSACTION_DETAILS_WITHOUT_HANDLER_TEMP(
			ID,
			DISPOSAL_ORDER_ID,
			COLLECTOR_BIDDING_ID,
			ASKER_ID,
			COLLECT_ASK_END_AT,
			COLLECTING_TRUCK_ID,
			TRUCK_DRIVER_ID,
			TRUCK_START_AT,
			COLLECT_END_AT,
			WSTE_CODE,
			WSTE_QUANTITY,
			WSTE_UNIT,
			PRICE_UNIT,
			QCC_IMG_PATH,
			CONTRACT_ID,
			CONFIRMER_ID,
			DATE_OF_VISIT,
			VISIT_START_AT,
			VISIT_END_AT,
			CONFIRMED_AT,
			CREATED_AT,
			UPDATED_AT,
			COLLECTOR_ID,
			WSTE_APPEARANCE,
			ACCEPT_ASK_END,
			ACCEPT_ASK_END_AT,
			COLLECTOR_REPORTED,
			COLLECTOR_REPORTED_AT,
			IN_PROGRESS,
			COLLECTOR_SITE_ID,
			CONFIRMED,
			MAX_DECISION_AT,
			CHECK_STATE,
			REJECT_REASON
		)
		VALUES(
			CUR_ID,
			CUR_DISPOSAL_ORDER_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_ASKER_ID,
			CUR_COLLECT_ASK_END_AT,
			CUR_COLLECTING_TRUCK_ID,
			CUR_TRUCK_DRIVER_ID,
			CUR_TRUCK_START_AT,
			CUR_COLLECT_END_AT,
			CUR_WSTE_CODE,
			CUR_WSTE_QUANTITY,
			CUR_WSTE_UNIT,
			CUR_PRICE_UNIT,
			CUR_QCC_IMG_PATH,
			CUR_CONTRACT_ID,
			CUR_CONFIRMER_ID,
			CUR_DATE_OF_VISIT,
			CUR_VISIT_START_AT,
			CUR_VISIT_END_AT,
			CUR_CONFIRMED_AT,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_COLLECTOR_ID,
			CUR_WSTE_APPEARANCE,	
			CUR_ACCEPT_ASK_END,
			CUR_ACCEPT_ASK_END_AT,
			CUR_COLLECTOR_REPORTED,
			CUR_COLLECTOR_REPORTED_AT,
			CUR_IN_PROGRESS,
			CUR_COLLECTOR_SITE_ID,
			CUR_CONFIRMED,
			CUR_MAX_DECISION_AT,
			CUR_CHECK_STATE,
			CUR_REJECT_REASON
		);
        
        CALL sp_get_disposal_order_info(
			CUR_DISPOSAL_ORDER_ID,
            VAR_ORDER_INFO
        );
        
        IF CUR_COLLECTOR_BIDDING_ID IS NOT NULL THEN
			CALL sp_get_collector_bidding_wste_lists(
				CUR_COLLECTOR_BIDDING_ID,
				VAR_WSTE_INFO
			);
        ELSE
			SET VAR_WSTE_INFO = NULL;
        END IF;
        
        UPDATE ADMIN_GET_NEW_TRANSACTION_DETAILS_WITHOUT_HANDLER_TEMP
        SET 
			ORDER_INFO = VAR_ORDER_INFO,
			WSTE_INFO = VAR_WSTE_INFO
		WHERE ID = CUR_ID;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_OBJECT(
		'ID'						, ID, 
        'DISPOSAL_ORDER_ID'			, DISPOSAL_ORDER_ID, 
        'COLLECTOR_BIDDING_ID'		, COLLECTOR_BIDDING_ID, 
        'ASKER_ID'					, ASKER_ID, 
        'COLLECT_ASK_END_AT'		, COLLECT_ASK_END_AT, 
        'COLLECTING_TRUCK_ID'		, COLLECTING_TRUCK_ID, 
        'TRUCK_DRIVER_ID'			, TRUCK_DRIVER_ID, 
        'TRUCK_START_AT'			, TRUCK_START_AT, 
        'COLLECT_END_AT'			, COLLECT_END_AT, 
        'WSTE_CODE'					, WSTE_CODE, 
        'WSTE_QUANTITY'				, WSTE_QUANTITY, 
        'WSTE_UNIT'					, WSTE_UNIT, 
        'PRICE_UNIT'				, PRICE_UNIT, 
        'QCC_IMG_PATH'				, QCC_IMG_PATH, 
        'CONTRACT_ID'				, CONTRACT_ID, 
        'CONFIRMER_ID'				, CONFIRMER_ID, 
        'DATE_OF_VISIT'				, DATE_OF_VISIT, 
        'VISIT_START_AT'			, VISIT_START_AT, 
        'VISIT_END_AT'				, VISIT_END_AT, 
        'CONFIRMED_AT'				, CONFIRMED_AT, 
        'CREATED_AT'				, CREATED_AT, 
        'UPDATED_AT'				, UPDATED_AT, 
        'COLLECTOR_ID'				, COLLECTOR_ID, 
        'WSTE_APPEARANCE'			, WSTE_APPEARANCE, 
        'ACCEPT_ASK_END'			, ACCEPT_ASK_END, 
        'ACCEPT_ASK_END_AT'			, ACCEPT_ASK_END_AT, 
        'COLLECTOR_REPORTED'		, COLLECTOR_REPORTED, 
        'COLLECTOR_REPORTED_AT'		, COLLECTOR_REPORTED_AT, 
        'IN_PROGRESS'				, IN_PROGRESS, 
        'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
        'CONFIRMED'					, CONFIRMED, 
        'MAX_DECISION_AT'			, MAX_DECISION_AT, 
        'CHECK_STATE'				, CHECK_STATE, 
        'REJECT_REASON'				, REJECT_REASON, 
        'ORDER_INFO'				, ORDER_INFO, 
        'WSTE_INFO'					, WSTE_INFO
	) 
    INTO OUT_TRANSACTION_INFO FROM ADMIN_GET_NEW_TRANSACTION_DETAILS_WITHOUT_HANDLER_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_TRANSACTION_DETAILS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_transactions`(
    IN IN_PARAMS					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_transactions
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_USER_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_SEARCH						VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_PAGE_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_OUT_LIST					JSON 			DEFAULT NULL;
    DECLARE VAR_OUT_RECORD_COUNT			INT 			DEFAULT 0;
    DECLARE VAR_LAST_PAGE					INT 			DEFAULT NULL;
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON 			DEFAULT NULL;
    DECLARE VAR_DUMMY_ACTIVATE				TINYINT			DEFAULT FALSE;
    
	SELECT 
		USER_ID, 
        SEARCH, 
        OFFSET_SIZE, 
        PAGE_SIZE
    INTO 
		VAR_USER_ID, 
        VAR_SEARCH, 
        VAR_OFFSET_SIZE, 
        VAR_PAGE_SIZE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		SEARCH	 				VARCHAR(255)		PATH "$.SEARCH",
		OFFSET_SIZE 			INT 				PATH "$.OFFSET_SIZE",
		PAGE_SIZE 				INT 				PATH "$.PAGE_SIZE"
	)) AS PARAMS;
    
    CALL sp_req_policy_direction(
		'dummy_activate',
        VAR_DUMMY_ACTIVATE
    );
    
    CALL sp_admin_get_new_transactions_without_handler(
		VAR_SEARCH,
		VAR_DUMMY_ACTIVATE,
        VAR_OFFSET_SIZE,
        VAR_PAGE_SIZE,
        VAR_OUT_RECORD_COUNT,
        VAR_OUT_LIST
    );
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_TRANSACTIONS_TEMP (
		INPUT_PARAMS					JSON,
		LAST_PAGE						INT,
		TRANSACTIOIN_LIST				JSON
	);      
	
	SET VAR_LAST_PAGE = CEILING(VAR_OUT_RECORD_COUNT / VAR_PAGE_SIZE);
    
    INSERT INTO ADMIN_GET_NEW_TRANSACTIONS_TEMP (
		INPUT_PARAMS,
        LAST_PAGE,
        TRANSACTIOIN_LIST
    ) VALUES (
		IN_PARAMS,
        VAR_LAST_PAGE,
        VAR_OUT_LIST
    );
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'INPUT_PARAMS'				, INPUT_PARAMS, 
        'LAST_PAGE'					, LAST_PAGE, 
        'TRANSACTIOIN_LIST'			, TRANSACTIOIN_LIST
	)) 
    INTO json_data FROM ADMIN_GET_NEW_TRANSACTIONS_TEMP;    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_TRANSACTIONS_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_new_transactions_without_handler`(
	IN IN_SEARCH						VARCHAR(255),
    IN IN_DUMMY_ACTIVATE				TINYINT,
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    OUT OUT_RECORD_COUNT				INT,
    OUT OUT_SITE_LIST					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_transactions_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT 		DEFAULT FALSE;    
	DECLARE CUR_ID								BIGINT;
	DECLARE CUR_COLLECT_ASK_END_AT				DATETIME;
	DECLARE CUR_DISPOSAL_ORDER_ID				BIGINT;
	DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
	DECLARE CUR_CHECK_STATE						TINYINT;
	DECLARE CUR_COLLECTOR_NAME					VARCHAR(255);
	DECLARE CUR_TRANSACTION_TYPE				VARCHAR(20);
	DECLARE CUR_IN_PROGRESS						TINYINT;
	DECLARE CUR_CREATED_AT						DATETIME;
    DECLARE VAR_RECORD_COUNT					INT				DEFAULT 0;
    DECLARE VAR_DISPOSER_NAME					VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_DISPOSER_SITE_NAME				VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_DISPOSER_TYPE					VARCHAR(20)		DEFAULT NULL;
    DECLARE VAR_DISPOSER_SITE_ID				BIGINT			DEFAULT NULL;
    DECLARE VAR_DISPOSER_ID						BIGINT			DEFAULT NULL;
    DECLARE VAR_ORDER_CODE						VARCHAR(10)		DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID,
		A.COLLECT_ASK_END_AT,
		A.DISPOSAL_ORDER_ID,
		A.COLLECTOR_SITE_ID,
		A.CHECK_STATE,
        C.SITE_NAME,
        IF(A.COLLECTOR_SITE_ID IS NOT NULL, '기존거래', '입찰거래'),
		A.IN_PROGRESS,
		A.CREATED_AT
    FROM WSTE_CLCT_TRMT_TRANSACTION A
	LEFT JOIN COMP_SITE C ON A.COLLECTOR_SITE_ID = C.ID
    LEFT JOIN KIKCD_B B ON C.KIKCD_B_CODE = B.B_CODE
    WHERE 
		IF(IN_DUMMY_ACTIVATE = TRUE, (C.TEST = TRUE OR C.TEST = FALSE), C.TEST = FALSE) AND
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.COLLECTOR_SITE_ID IN (
					SELECT A1.ID 
                    FROM COMP_SITE A1
                    LEFT JOIN COMPANY A2 ON A1.COMP_ID = A2.ID
                    WHERE 
						A1.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A1.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.COMP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A2.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A1.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                ) OR
				A.DISPOSAL_ORDER_ID LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.B_CODE LIKE CONCAT('%', IN_SEARCH, '%')
			)
		)
    ORDER BY A.ID DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	SELECT COUNT(A.ID) INTO VAR_RECORD_COUNT
    FROM WSTE_CLCT_TRMT_TRANSACTION A
	LEFT JOIN COMP_SITE C ON A.COLLECTOR_SITE_ID = C.ID
    LEFT JOIN KIKCD_B B ON C.KIKCD_B_CODE = B.B_CODE
    WHERE 
		IF(IN_DUMMY_ACTIVATE = TRUE, (C.TEST = TRUE OR C.TEST = FALSE), C.TEST = FALSE) AND
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.COLLECTOR_SITE_ID IN (
					SELECT A1.ID 
                    FROM COMP_SITE A1
                    LEFT JOIN COMPANY A2 ON A1.COMP_ID = A2.ID
                    WHERE 
						A1.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A1.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.COMP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						A2.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A2.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A1.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                ) OR
				A.DISPOSAL_ORDER_ID LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.B_CODE LIKE CONCAT('%', IN_SEARCH, '%')
			)
		);
    
    SET OUT_RECORD_COUNT = VAR_RECORD_COUNT;
    SET OUT_SITE_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NEW_TRANSACTIONS_WITHOUT_HANDLER_TEMP (
		ID								BIGINT,
		COLLECT_ASK_END_AT				DATETIME,
		DISPOSAL_ORDER_ID				BIGINT,
		COLLECTOR_SITE_ID				BIGINT,
		CHECK_STATE						TINYINT,
        DISPOSER_TYPE					VARCHAR(20),
        DISPOSER_NAME					VARCHAR(255),
        ORDER_CODE						VARCHAR(10),
        COLLECTOR_NAME					VARCHAR(255),
        TRANSACTION_TYPE				VARCHAR(20),
        IN_PROGRESS						TINYINT,
        CREATED_AT						DATETIME
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_COLLECT_ASK_END_AT,
			CUR_DISPOSAL_ORDER_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_CHECK_STATE,
			CUR_COLLECTOR_NAME,
			CUR_TRANSACTION_TYPE,
			CUR_IN_PROGRESS,
			CUR_CREATED_AT;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
		ADMIN_GET_NEW_TRANSACTIONS_WITHOUT_HANDLER_TEMP(
			ID,
			COLLECT_ASK_END_AT,
			DISPOSAL_ORDER_ID,
			COLLECTOR_SITE_ID,
			CHECK_STATE,
			COLLECTOR_NAME,
			TRANSACTION_TYPE,
			IN_PROGRESS,
			CREATED_AT
		)
		VALUES( 
			CUR_ID,
			CUR_COLLECT_ASK_END_AT,
			CUR_DISPOSAL_ORDER_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_CHECK_STATE,
			CUR_COLLECTOR_NAME,
			CUR_TRANSACTION_TYPE,
			CUR_IN_PROGRESS,
			CUR_CREATED_AT
		);
        
        SELECT SITE_ID, DISPOSER_ID, ORDER_CODE INTO VAR_DISPOSER_SITE_ID, VAR_DISPOSER_ID, VAR_ORDER_CODE
        FROM SITE_WSTE_DISPOSAL_ORDER
        WHERE ID = CUR_DISPOSAL_ORDER_ID;
        
        IF VAR_DISPOSER_SITE_ID = 0 THEN
			SET VAR_DISPOSER_TYPE = "개";
            SELECT USER_NAME INTO VAR_DISPOSER_NAME
            FROM USERS
            WHERE ID = VAR_DISPOSER_ID;
        ELSE
			SET VAR_DISPOSER_TYPE = "사";
            SELECT SITE_NAME INTO VAR_DISPOSER_NAME
            FROM COMP_SITE
            WHERE ID = VAR_DISPOSER_SITE_ID;
        END IF;
        
        UPDATE ADMIN_GET_NEW_TRANSACTIONS_WITHOUT_HANDLER_TEMP
        SET
			DISPOSER_NAME = VAR_DISPOSER_NAME,
            DISPOSER_TYPE = VAR_DISPOSER_TYPE,
            ORDER_CODE = VAR_ORDER_CODE
		WHERE ID = CUR_ID;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'							, ID, 
        'COLLECT_ASK_END_AT'			, COLLECT_ASK_END_AT, 
        'DISPOSAL_ORDER_ID'				, DISPOSAL_ORDER_ID, 
        'COLLECTOR_SITE_ID'				, COLLECTOR_SITE_ID, 
        'CHECK_STATE'					, CHECK_STATE, 
        'DISPOSER_TYPE'					, DISPOSER_TYPE, 
        'DISPOSER_NAME'					, DISPOSER_NAME, 
        'ORDER_CODE'					, ORDER_CODE, 
        'COLLECTOR_NAME'				, COLLECTOR_NAME, 
        'TRANSACTION_TYPE'				, TRANSACTION_TYPE, 
        'IN_PROGRESS'					, IF(IN_PROGRESS = TRUE, FALSE, TRUE), 
        'CREATED_AT'					, CREATED_AT
	)) 
    INTO OUT_SITE_LIST FROM ADMIN_GET_NEW_TRANSACTIONS_WITHOUT_HANDLER_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_NEW_TRANSACTIONS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_note_details`(
	IN IN_PARAMS						JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_note_details
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_USER_ID			BIGINT DEFAULT NULL;
	DECLARE VAR_NOTE_ID			BIGINT DEFAULT NULL;
	DECLARE VAR_NOTE_DETAILS	JSON DEFAULT NULL;
	DECLARE rtn_val				INT DEFAULT 0;
	DECLARE msg_txt				VARCHAR(200) DEFAULT 'success';
	DECLARE json_data			JSON DEFAULT NULL;
    
	SELECT 
		USER_ID, 
        NOTE_ID
    INTO 
		VAR_USER_ID, 
        VAR_NOTE_ID
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		NOTE_ID	 				VARCHAR(255)		PATH "$.NOTE_ID"
	)) AS PARAMS;
    
    CALL sp_admin_get_note_details_without_handler(
		VAR_USER_ID,
        VAR_NOTE_ID,
        VAR_NOTE_DETAILS
    );
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NOTE_DETAILS_TEMP (
		INPUT_PARAMS					JSON,
		NOTE_DETAILS					JSON
	);      
    
    INSERT INTO ADMIN_GET_NOTE_DETAILS_TEMP (
		INPUT_PARAMS,
        NOTE_DETAILS
    ) VALUES (
		IN_PARAMS,
        VAR_NOTE_DETAILS
    );
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'INPUT_PARAMS'				, INPUT_PARAMS, 
        'NOTE_DETAILS'				, NOTE_DETAILS
	)) 
    INTO json_data FROM ADMIN_GET_NOTE_DETAILS_TEMP;    
	DROP TABLE IF EXISTS ADMIN_GET_NOTE_DETAILS_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_note_details_without_handler`(
	IN IN_USER_ID						BIGINT,
	IN IN_NOTE_ID						BIGINT,
    OUT OUT_NOTE_DETAILS				JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_note_details
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 				INT DEFAULT 0;
    DECLARE endOfRow 				TINYINT 		DEFAULT FALSE;    
	DECLARE CUR_ID					BIGINT;
	DECLARE CUR_ADMIN_ID			BIGINT;
	DECLARE CUR_MEMBER_ID			BIGINT;
	DECLARE CUR_SITE_ID				BIGINT;
	DECLARE CUR_ORDER_ID			BIGINT;
	DECLARE CUR_BIDDING_ID			BIGINT;
	DECLARE CUR_TRANSACTION_ID		BIGINT;
	DECLARE CUR_REPORT_ID			BIGINT;
	DECLARE CUR_NOTE				TEXT;
    DECLARE CUR_CREATED_AT			DATETIME;
    DECLARE CUR_UPDATED_AT			DATETIME;
    DECLARE CUR_ADMIN_NAME			VARCHAR(255);
    DECLARE VAR_RECORD_COUNT		INT;
    DECLARE TEMP_CURSOR		 		CURSOR FOR 
	SELECT 
		A.ID,
		A.ADMIN_ID,
		A.MEMBER_ID,
		A.SITE_ID,
		A.ORDER_ID,
		A.BIDDING_ID,
		A.TRANSACTION_ID,
		A.REPORT_ID,
		A.NOTE,
		A.CREATED_AT,
		A.UPDATED_AT,
        B.NAME
    FROM CS_NOTE A
    LEFT JOIN CHIUM_MEMBERS B ON A.ADMIN_ID = B.ID
    WHERE A.ID = IN_NOTE_ID;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NOTE_DETAILS_WITHOUT_HANDLER_TEMP (  
		ID					BIGINT,
		ADMIN_ID			BIGINT,
		MEMBER_ID			BIGINT,
		SITE_ID				BIGINT,
		ORDER_ID			BIGINT,
		BIDDING_ID			BIGINT,
		TRANSACTION_ID		BIGINT,
		REPORT_ID			BIGINT,
		NOTE				TEXT,
		CREATED_AT			DATETIME,
		UPDATED_AT			DATETIME,
		ADMIN_NAME			VARCHAR(255)
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_ADMIN_ID,
			CUR_MEMBER_ID,
			CUR_SITE_ID,
			CUR_ORDER_ID,
			CUR_BIDDING_ID,
			CUR_TRANSACTION_ID,
			CUR_REPORT_ID,
			CUR_NOTE,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_ADMIN_NAME;
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
		ADMIN_GET_NOTE_DETAILS_WITHOUT_HANDLER_TEMP(
			ID,
			ADMIN_ID,
			MEMBER_ID,
			SITE_ID,
			ORDER_ID,
			BIDDING_ID,
			TRANSACTION_ID,
			REPORT_ID,
			NOTE,
			CREATED_AT,
			UPDATED_AT,
			ADMIN_NAME
		)
		VALUES( 
			CUR_ID,
			CUR_ADMIN_ID,
			CUR_MEMBER_ID,
			CUR_SITE_ID,
			CUR_ORDER_ID,
			CUR_BIDDING_ID,
			CUR_TRANSACTION_ID,
			CUR_REPORT_ID,
			CUR_NOTE,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_ADMIN_NAME
		);
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'					, ID, 
        'ADMIN_ID'				, ADMIN_ID, 
        'MEMBER_ID'				, MEMBER_ID, 
        'SITE_ID'				, SITE_ID, 
        'ORDER_ID'				, ORDER_ID, 
        'BIDDING_ID'			, BIDDING_ID, 
        'TRANSACTION_ID'		, TRANSACTION_ID, 
        'REPORT_ID'				, REPORT_ID, 
        'NOTE'					, NOTE, 
        'CREATED_AT'			, CREATED_AT, 
        'UPDATED_AT'			, UPDATED_AT, 
        'ADMIN_NAME'			, ADMIN_NAME
	)) 
    INTO OUT_NOTE_DETAILS FROM ADMIN_GET_NOTE_DETAILS_WITHOUT_HANDLER_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_NOTE_DETAILS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_note_lists`(
	IN IN_PARAMS				JSON
)
BEGIN
	DECLARE VAR_USER_ID				BIGINT			DEFAULT NULL;
	DECLARE rtn_val					INT				DEFAULT 0;
	DECLARE msg_txt					VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data				JSON			DEFAULT NULL;
    DECLARE VAR_SEARCH				VARCHAR(255)	DEFAULT null;
    DECLARE VAR_OFFSET_SIZE			INT				DEFAULT 0;
    DECLARE VAR_PAGE_SIZE			INT				DEFAULT 15;
    DECLARE VAR_OUT_RECORD_COUNT	INT				DEFAULT 0;
    DECLARE VAR_LAST_PAGE			INT				DEFAULT 1;
    DECLARE VAR_NOTE_LISTS			JSON			DEFAULT NULL;
    
	SELECT
		USER_ID,
        SEARCH,
        OFFSET_SIZE,
        PAGE_SIZE
	INTO 
		VAR_USER_ID,
        VAR_SEARCH,
        VAR_OFFSET_SIZE,
        VAR_PAGE_SIZE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
        SEARCH					VARCHAR(255)		PATH "$.SEARCH",
        OFFSET_SIZE				INT					PATH "$.OFFSET_SIZE",
        PAGE_SIZE				INT					PATH "$.PAGE_SIZE"
	)) AS PARAMS;
        
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NOTE_LISTS_TEMP (
		INPUT_PARAMS					JSON,
		LAST_PAGE						INT,
		NOTE_LIST						JSON
	); 
    
    
    CALL sp_admin_get_note_lists_without_handler(
		VAR_SEARCH,
        VAR_OFFSET_SIZE,
        VAR_PAGE_SIZE,
        VAR_OUT_RECORD_COUNT,
        VAR_NOTE_LISTS
    );       
    
	SET VAR_LAST_PAGE = CEILING(VAR_OUT_RECORD_COUNT / VAR_PAGE_SIZE);    
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'INPUT_PARAMS'				, IN_PARAMS, 
        'LAST_PAGE'					, VAR_LAST_PAGE, 
        'NOTE_LIST'					, VAR_NOTE_LISTS
	)) 
    INTO json_data;    
    DROP TABLE IF EXISTS ADMIN_GET_NOTE_LISTS_TEMP;
    CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_note_lists_without_handler`(
	IN IN_SEARCH						VARCHAR(255),
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    OUT OUT_RECORD_COUNT				INT,
    OUT OUT_NOTE_LISTS					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_note_lists_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 				INT DEFAULT 0;
    DECLARE endOfRow 				TINYINT 		DEFAULT FALSE;    
	DECLARE CUR_ID					BIGINT;
	DECLARE CUR_ADMIN_ID			BIGINT;
	DECLARE CUR_MEMBER_ID			BIGINT;
	DECLARE CUR_SITE_ID				BIGINT;
	DECLARE CUR_ORDER_ID			BIGINT;
	DECLARE CUR_BIDDING_ID			BIGINT;
	DECLARE CUR_TRANSACTION_ID		BIGINT;
	DECLARE CUR_REPORT_ID			BIGINT;
	DECLARE CUR_NOTE				TEXT;
    DECLARE CUR_CREATED_AT			DATETIME;
    DECLARE CUR_UPDATED_AT			DATETIME;
    DECLARE CUR_ADMIN_NAME			VARCHAR(255);
    DECLARE CUR_SITE_CATEGORY		TINYINT;
    DECLARE VAR_RECORD_COUNT		INT;
    DECLARE VAR_SITE_INFO			JSON;
    DECLARE VAR_ORDER_INFO			JSON;
    DECLARE VAR_ORDER_CODE			VARCHAR(10);
    DECLARE TEMP_CURSOR		 		CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID,
		A.ADMIN_ID,
		A.MEMBER_ID,
		A.SITE_ID,
		A.ORDER_ID,
		A.BIDDING_ID,
		A.TRANSACTION_ID,
		A.REPORT_ID,
		A.NOTE,
		A.CREATED_AT,
		A.UPDATED_AT,
        B.NAME,
		A.SITE_CATEGORY
    FROM CS_NOTE A
    LEFT JOIN CHIUM_MEMBERS B ON A.ADMIN_ID = B.ID
    WHERE 
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.NOTE LIKE CONCAT('%', IN_SEARCH, '%')
			)
		)
    ORDER BY A.ID DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	SELECT COUNT(A.ID) INTO VAR_RECORD_COUNT
    FROM CS_NOTE A
    WHERE 
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.NOTE LIKE CONCAT('%', IN_SEARCH, '%')
			)
		);
    
    SET OUT_RECORD_COUNT = VAR_RECORD_COUNT;
    SET OUT_NOTE_LISTS = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_NOTE_LISTS_WITHOUT_HANDLER_TEMP (  
		ID					BIGINT,
		ADMIN_ID			BIGINT,
		MEMBER_ID			BIGINT,
		SITE_ID				BIGINT,
		ORDER_ID			BIGINT,
		BIDDING_ID			BIGINT,
		TRANSACTION_ID		BIGINT,
		REPORT_ID			BIGINT,
		NOTE				TEXT,
		CREATED_AT			DATETIME,
		UPDATED_AT			DATETIME,
		ADMIN_NAME			VARCHAR(255),
		SITE_CATEGORY		TINYINT,
		ORDER_CODE			VARCHAR(10),
		SITE_INFO			JSON,
        ORDER_INFO			JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_ADMIN_ID,
			CUR_MEMBER_ID,
			CUR_SITE_ID,
			CUR_ORDER_ID,
			CUR_BIDDING_ID,
			CUR_TRANSACTION_ID,
			CUR_REPORT_ID,
			CUR_NOTE,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_ADMIN_NAME,
			CUR_SITE_CATEGORY;
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
		ADMIN_GET_NOTE_LISTS_WITHOUT_HANDLER_TEMP(
			ID,
			ADMIN_ID,
			MEMBER_ID,
			SITE_ID,
			ORDER_ID,
			BIDDING_ID,
			TRANSACTION_ID,
			REPORT_ID,
			NOTE,
			CREATED_AT,
			UPDATED_AT,
			ADMIN_NAME,
			SITE_CATEGORY
		)
		VALUES( 
			CUR_ID,
			CUR_ADMIN_ID,
			CUR_MEMBER_ID,
			CUR_SITE_ID,
			CUR_ORDER_ID,
			CUR_BIDDING_ID,
			CUR_TRANSACTION_ID,
			CUR_REPORT_ID,
			CUR_NOTE,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_ADMIN_NAME,
			CUR_SITE_CATEGORY
		);
        
        IF CUR_SITE_ID IS NOT NULL THEN
			CALL sp_get_site_info_simple(
				CUR_SITE_ID,
				VAR_SITE_INFO
			);
        ELSE
			SET VAR_SITE_INFO = NULL;
        END IF;
        
        IF CUR_ORDER_ID IS NOT NULL THEN
			CALL sp_get_disposal_order_info(
				CUR_ORDER_ID,
				VAR_ORDER_INFO
			);
        ELSE
			SET VAR_ORDER_INFO = NULL;
        END IF;
        
        IF CUR_ORDER_ID IS NOT NULL THEN
			SELECT ORDER_CODE INTO VAR_ORDER_CODE
            FROM SITE_WSTE_DISPOSAL_ORDER
            WHERE ID = CUR_ORDER_ID;
		ELSE
			SET VAR_ORDER_CODE = NULL;
        END IF;
        
        UPDATE ADMIN_GET_NOTE_LISTS_WITHOUT_HANDLER_TEMP
        SET 
			SITE_INFO = VAR_SITE_INFO,
            ORDER_INFO = VAR_ORDER_INFO,
            ORDER_CODE = VAR_ORDER_CODE
        WHERE ID = CUR_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'					, ID, 
        'ADMIN_ID'				, ADMIN_ID, 
        'MEMBER_ID'				, MEMBER_ID, 
        'SITE_ID'				, SITE_ID, 
        'ORDER_ID'				, ORDER_ID, 
        'BIDDING_ID'			, BIDDING_ID, 
        'TRANSACTION_ID'		, TRANSACTION_ID, 
        'REPORT_ID'				, REPORT_ID, 
        'NOTE'					, NOTE, 
        'CREATED_AT'			, CREATED_AT, 
        'UPDATED_AT'			, UPDATED_AT, 
        'ADMIN_NAME'			, ADMIN_NAME, 
        'SITE_CATEGORY'			, SITE_CATEGORY, 
        'ORDER_CODE'			, ORDER_CODE, 
        'SITE_INFO'				, SITE_INFO, 
        'ORDER_INFO'			, ORDER_INFO
	)) 
    INTO OUT_NOTE_LISTS FROM ADMIN_GET_NOTE_LISTS_WITHOUT_HANDLER_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_NOTE_LISTS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_personal_details`(
	IN IN_PARAMS			JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_personal_details
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE	VAR_USER_ID			BIGINT;
	DECLARE rtn_val				INT						DEFAULT 0;
	DECLARE msg_txt				VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data			JSON					DEFAULT NULL;	
    
    DECLARE VAR_ADMIN_ID		BIGINT 					DEFAULT NULL;
    DECLARE VAR_MEMBER_ID		BIGINT 					DEFAULT NULL;
    DECLARE VAR_SITE_ID			BIGINT 					DEFAULT NULL;
    DECLARE VAR_SITE_NAME		VARCHAR(255)			DEFAULT NULL;
    DECLARE VAR_ORDER_ID		BIGINT 					DEFAULT NULL;
    DECLARE VAR_BIDDING_ID		BIGINT 					DEFAULT NULL;
    DECLARE VAR_TRANSACTION_ID	BIGINT 					DEFAULT NULL;
    DECLARE VAR_REPORT_ID		BIGINT 					DEFAULT NULL;
    DECLARE VAR_SITE_CATEGORY	TINYINT 				DEFAULT NULL;
    DECLARE VAR_SEARCH			VARCHAR(255) 			DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE		INT 					DEFAULT 0;
    DECLARE VAR_PAGE_SIZE		INT 					DEFAULT 1000;
    DECLARE VAR_NOTE_LIST		JSON 					DEFAULT NULL;
    
	SELECT 
		USER_ID,
		MEMBER_ID
    INTO 
		VAR_ADMIN_ID,
        VAR_MEMBER_ID
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID		 	VARCHAR(255)		PATH "$.USER_ID",
		MEMBER_ID		VARCHAR(255)		PATH "$.MEMBER_ID"
	)) AS PARAMS;
    
    CALL sp_admin_get_new_notes_without_handler(
		VAR_ADMIN_ID,
		VAR_MEMBER_ID,
		VAR_SITE_ID,
		VAR_ORDER_ID,
		VAR_BIDDING_ID,
		VAR_TRANSACTION_ID,
		VAR_REPORT_ID,
		VAR_SITE_CATEGORY,
		VAR_SEARCH,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
        VAR_NOTE_LIST
    );
    
    SELECT AFFILIATED_SITE INTO VAR_SITE_ID
    FROM USERS
    WHERE ID = VAR_MEMBER_ID;
    
	IF VAR_SITE_ID IS NULL THEN
		SET VAR_SITE_NAME = '개인회원';
	ELSE
		SELECT SITE_NAME INTO VAR_SITE_NAME
        FROM COMP_SITE
        WHERE ID = VAR_SITE_ID;
    END IF;
    
	SELECT JSON_OBJECT(
		'ID', 							A.ID, 
		'USER_ID', 						A.USER_ID, 
		'USER_NAME', 					A.USER_NAME, 
		'PHONE', 						A.PHONE, 
		'ACTIVE', 						A.ACTIVE, 
		'CS_MANAGER_ID', 				A.CS_MANAGER_ID, 
		'CONFIRMED', 					A.CONFIRMED, 
		'CONFIRMED_AT', 				A.CONFIRMED_AT, 
		'CREATED_AT', 					A.CREATED_AT, 
		'UPDATED_AT', 					A.UPDATED_AT, 
		'AVATAR_PATH', 					A.AVATAR_PATH, 
		'PUSH_ENABLED', 				A.PUSH_ENABLED, 
		'NOTICE_ENABLED', 				A.NOTICE_ENABLED,
		'SITE_ID', 						A.AFFILIATED_SITE,
		'CONTACT_PATH', 				C.NAME,
		'SITE_NAME', 					VAR_SITE_NAME,
        'INPUT_PARAMS',					IN_PARAMS,
        'NOTES',						VAR_NOTE_LIST
	) 
	INTO json_data 
	FROM USERS A 
    LEFT JOIN MEMBER_CONTACT_PATH B ON A.ID = B.USER_ID
    LEFT JOIN CONTACT_PATH C ON B.CONTACT_PATH = C.ID
	WHERE A.ID = VAR_MEMBER_ID;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
         
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_question_lists`(
	IN IN_PARAMS				JSON
)
BEGIN
	DECLARE VAR_USER_ID				BIGINT			DEFAULT NULL;
	DECLARE rtn_val					INT				DEFAULT 0;
	DECLARE msg_txt					VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data				JSON			DEFAULT NULL;
    DECLARE VAR_SEARCH				VARCHAR(255)	DEFAULT null;
    DECLARE VAR_OFFSET_SIZE			INT				DEFAULT 0;
    DECLARE VAR_PAGE_SIZE			INT				DEFAULT 15;
    DECLARE VAR_OUT_RECORD_COUNT	INT				DEFAULT 0;
    DECLARE VAR_LAST_PAGE			INT				DEFAULT 1;
    DECLARE VAR_QUESTION_LISTS		JSON			DEFAULT NULL;
    
	SELECT
		USER_ID,
        SEARCH,
        OFFSET_SIZE,
        PAGE_SIZE
	INTO 
		VAR_USER_ID,
        VAR_SEARCH,
        VAR_OFFSET_SIZE,
        VAR_PAGE_SIZE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
        SEARCH					VARCHAR(255)		PATH "$.SEARCH",
        OFFSET_SIZE				INT					PATH "$.OFFSET_SIZE",
        PAGE_SIZE				INT					PATH "$.PAGE_SIZE"
	)) AS PARAMS;
        
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_QUESTION_LISTS_TEMP (
		INPUT_PARAMS					JSON,
		LAST_PAGE						INT,
		QUESTION_LIST					JSON
	); 
    
    
    CALL sp_admin_get_question_lists_without_handler(
		VAR_SEARCH,
        VAR_OFFSET_SIZE,
        VAR_PAGE_SIZE,
        VAR_OUT_RECORD_COUNT,
        VAR_QUESTION_LISTS
    );       
    
	SET VAR_LAST_PAGE = CEILING(VAR_OUT_RECORD_COUNT / VAR_PAGE_SIZE);    
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'INPUT_PARAMS'				, IN_PARAMS, 
        'LAST_PAGE'					, VAR_LAST_PAGE, 
        'QUESTION_LIST'				, VAR_QUESTION_LISTS
	)) 
    INTO json_data;    
    DROP TABLE IF EXISTS ADMIN_GET_QUESTION_LISTS_TEMP;
    CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_question_lists_without_handler`(
	IN IN_SEARCH						VARCHAR(255),
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    OUT OUT_RECORD_COUNT				INT,
    OUT OUT_QUESTION_LISTS				JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_question_lists_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 				INT 			DEFAULT 0;
    DECLARE endOfRow 				TINYINT 		DEFAULT FALSE;    
	DECLARE CUR_ID					BIGINT;
	DECLARE CUR_PHONE				VARCHAR(45);
	DECLARE CUR_EMAIL				VARCHAR(100);
	DECLARE CUR_QUEST_CLASS			INT;
	DECLARE CUR_CONTENTS			VARCHAR(255);
	DECLARE CUR_CREATED_AT			DATETIME;
	DECLARE CUR_UPDATED_AT			DATETIME;
	DECLARE CUR_CLASS_NM			VARCHAR(45);
    DECLARE VAR_RECORD_COUNT		INT;
    DECLARE TEMP_CURSOR		 		CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID,
		A.PHONE,
		A.EMAIL,
		A.QUEST_CLASS,
		A.CONTENTS,
		A.CREATED_AT,
		A.UPDATED_AT,
		B.CLASS_NM
    FROM QUESTIONS A
    LEFT JOIN QUEST_CLASS B ON A.QUEST_CLASS = B.ID
    WHERE 
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.PHONE LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.EMAIL LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.CONTENTS LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.CLASS_NM LIKE CONCAT('%', IN_SEARCH, '%')
			)
		)
    ORDER BY A.ID DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	SELECT COUNT(A.ID) INTO VAR_RECORD_COUNT
    FROM QUESTIONS A
    LEFT JOIN QUEST_CLASS B ON A.QUEST_CLASS = B.ID
    WHERE 
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.PHONE LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.EMAIL LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.CONTENTS LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.CLASS_NM LIKE CONCAT('%', IN_SEARCH, '%')
			)
		);
    
    SET OUT_RECORD_COUNT = VAR_RECORD_COUNT;
    SET OUT_QUESTION_LISTS = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_QUESTION_LISTS_WITHOUT_HANDLER_TEMP (  
		ID					BIGINT,
		PHONE				VARCHAR(45),
		EMAIL				VARCHAR(100),
		QUEST_CLASS			INT,
		CONTENTS			VARCHAR(255),
		CREATED_AT			DATETIME,
		UPDATED_AT			DATETIME,
		CLASS_NM			VARCHAR(45)
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_PHONE,
			CUR_EMAIL,
			CUR_QUEST_CLASS,
			CUR_CONTENTS,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_CLASS_NM;
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
		ADMIN_GET_QUESTION_LISTS_WITHOUT_HANDLER_TEMP(
			ID,
			PHONE,
			EMAIL,
			QUEST_CLASS,
			CONTENTS,
			CREATED_AT,
			UPDATED_AT,
			CLASS_NM
		)
		VALUES( 
			CUR_ID,
			CUR_PHONE,
			CUR_EMAIL,
			CUR_QUEST_CLASS,
			CUR_CONTENTS,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_CLASS_NM
		);
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'				, ID, 
        'PHONE'				, PHONE, 
        'EMAIL'				, EMAIL, 
        'QUEST_CLASS'		, QUEST_CLASS, 
        'CONTENTS'			, CONTENTS, 
        'CREATED_AT'		, CREATED_AT, 
        'UPDATED_AT'		, UPDATED_AT, 
        'CLASS_NM'			, CLASS_NM
	)) 
    INTO OUT_QUESTION_LISTS FROM ADMIN_GET_QUESTION_LISTS_WITHOUT_HANDLER_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_QUESTION_LISTS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_real_time_status`(
	IN IN_USER_ID						BIGINT,
	IN IN_ADMIN_MAIN_DURATION			INT,
	OUT OUT_REAL_TIME_STATUS			JSON
)
BEGIN
    DECLARE EMITTERS				INT DEFAULT 0;
    DECLARE COLLECTORS				INT DEFAULT 0;
    DECLARE PROCESSORS				INT DEFAULT 0;
    DECLARE WAITING_ANSWERS			INT DEFAULT 0;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS RTS_TEMP (
		ID						INT,
		EMITTERS				INT,
		COLLECTORS				INT,
		PROCESSORS				INT,
		WAITING_ANSWERS			INT,
		ADMIN_MAIN_DURATION		INT
	);  
    
	SELECT COUNT(ID) INTO EMITTERS
    FROM COMP_SITE
    WHERE 
		ACTIVE = TRUE AND
        TRMT_BIZ_CODE = 9 AND
        NOW() <= DATE_ADD(CREATED_AT, INTERVAL CAST(IN_ADMIN_MAIN_DURATION AS UNSIGNED) DAY);   
    
	SELECT COUNT(ID) INTO PROCESSORS
    FROM COMP_SITE
    WHERE 
		ACTIVE = TRUE AND
        TRMT_BIZ_CODE > 1 AND TRMT_BIZ_CODE < 9 AND
        NOW() <= DATE_ADD(CREATED_AT, INTERVAL CAST(IN_ADMIN_MAIN_DURATION AS UNSIGNED) DAY);  
    
	SELECT COUNT(ID) INTO COLLECTORS
    FROM COMP_SITE
    WHERE 
		ACTIVE = TRUE AND
        TRMT_BIZ_CODE = 1 AND
        NOW() <= DATE_ADD(CREATED_AT, INTERVAL CAST(IN_ADMIN_MAIN_DURATION AS UNSIGNED) DAY);
    
    CALL sp_get_count_waiting_answers(
		IN_ADMIN_MAIN_DURATION,
        WAITING_ANSWERS
    );
    
	INSERT INTO 
	RTS_TEMP(
		ID,
		EMITTERS,
		COLLECTORS,
		PROCESSORS,
		WAITING_ANSWERS,
		ADMIN_MAIN_DURATION
	)
	VALUES(
		IN_USER_ID,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL
	);
	UPDATE RTS_TEMP
    SET 
		EMITTERS 				= EMITTERS,
        COLLECTORS 				= COLLECTORS,
        PROCESSORS 				= PROCESSORS,
        WAITING_ANSWERS 		= WAITING_ANSWERS,
        ADMIN_MAIN_DURATION 	= IN_ADMIN_MAIN_DURATION
	WHERE ID 					= IN_USER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'						, ID, 
		'EMITTERS'					, EMITTERS, 
        'COLLECTORS'				, COLLECTORS, 
        'PROCESSORS'				, PROCESSORS, 
        'WAITING_ANSWERS'			, WAITING_ANSWERS, 
        'ADMIN_MAIN_DURATION'		, ADMIN_MAIN_DURATION
	)) 
    INTO OUT_REAL_TIME_STATUS FROM RTS_TEMP;
    
	DROP TABLE IF EXISTS RTS_TEMP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_site_info`(
	IN IN_SITE_ID						BIGINT,
    OUT OUT_SITE_INFO					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_site_info
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_SITE_ID							BIGINT;   
    DECLARE CUR_COMP_ID							BIGINT;   
    DECLARE CUR_CREATED_AT						DATETIME;  
    DECLARE CUR_UPDATED_AT						DATETIME;  
    DECLARE CUR_SITE_NAME						VARCHAR(255);   
    DECLARE CUR_PERMIT_REG_CODE					VARCHAR(12);  
    DECLARE CUR_B_CODE							VARCHAR(10); 
    DECLARE CUR_ADDR							VARCHAR(255);
    DECLARE CUR_PERMIT_REG_IMG_PATH				VARCHAR(255);
    DECLARE CUR_LAT								DECIMAL(12,9);
    DECLARE CUR_LNG								DECIMAL(12,9);
    DECLARE CUR_USER_TYPE						INT;
    DECLARE JSON_ADDRESS_INFO					JSON DEFAULT NULL;
    DECLARE JSON_COMPANY_INFO					JSON DEFAULT NULL;
    DECLARE JSON_WSTE_INFO						JSON DEFAULT NULL;
    DECLARE JSON_SITE_INFO						JSON DEFAULT NULL;
    DECLARE JSON_SITE_LIST						JSON DEFAULT NULL;
    DECLARE CIRCLE_RANGE						INT DEFAULT 0;
	DECLARE rtn_val								INT DEFAULT 0;
    DECLARE msg_txt								VARCHAR(200) DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
		A.COMP_ID, 
        A.CREATED_AT,
        A.UPDATED_AT,
        A.SITE_NAME,
        A.PERMIT_REG_CODE,
        A.KIKCD_B_CODE,
        A.ADDR,
        A.PERMIT_REG_IMG_PATH,
        A.LAT,
        A.LNG,
        B.USER_TYPE
    FROM COMP_SITE A
    LEFT JOIN WSTE_TRMT_BIZ B ON A.TRMT_BIZ_CODE = B.CODE
    WHERE A.ID = IN_SITE_ID;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    SET OUT_SITE_INFO = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_SITE_INFO (
		SITE_ID							BIGINT,
		COMP_ID							BIGINT,
		CREATED_AT						DATETIME,
		UPDATED_AT						DATETIME,
		SITE_NAME						VARCHAR(255),
		PERMIT_REG_CODE					VARCHAR(12),
		B_CODE							VARCHAR(10),
		ADDR							VARCHAR(255),
		PERMIT_REG_IMG_PATH				VARCHAR(255),
        ADDRESS_INFO					JSON,
        COMPANY_INFO					JSON,
        WSTE_INFO						JSON,
        SITE_INFO						JSON,
        SITE_LIST						JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_SITE_ID,
			CUR_COMP_ID,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_SITE_NAME,
			CUR_PERMIT_REG_CODE,
			CUR_B_CODE,
			CUR_ADDR,
			CUR_PERMIT_REG_IMG_PATH,
			CUR_LAT,
			CUR_LNG,
			CUR_USER_TYPE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_GET_SITE_INFO(
			SITE_ID,
			COMP_ID,
			CREATED_AT,
			UPDATED_AT,
			SITE_NAME,
			PERMIT_REG_CODE,
			B_CODE,
			ADDR,
			PERMIT_REG_IMG_PATH
		)
		VALUES(
			CUR_SITE_ID,
			CUR_COMP_ID,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_SITE_NAME,
			CUR_PERMIT_REG_CODE,
			CUR_B_CODE,
			CUR_ADDR,
			CUR_PERMIT_REG_IMG_PATH
		);
        
        CALL sp_get_address_with_bcode(
			CUR_B_CODE,
            JSON_ADDRESS_INFO
        );
        
        CALL sp_get_company_info(
			CUR_COMP_ID,
            JSON_COMPANY_INFO
        );
        
        CALL sp_get_site_wste_info(
			CUR_SITE_ID,
            JSON_WSTE_INFO
        );
        
        CALL sp_get_site_info_simple(
			CUR_SITE_ID,
            JSON_SITE_INFO
        );
        
		CALL sp_req_policy_direction(
			'circle_range',
			CIRCLE_RANGE
		);
        
        CALL sp_get_site_list_inside_range_without_handler(
			CUR_USER_TYPE,
            CIRCLE_RANGE,
            CUR_LAT,
            CUR_LNG,
            rtn_val,
            msg_txt,
            JSON_SITE_LIST
        );
        
        UPDATE ADMIN_GET_SITE_INFO
        SET 
			ADDRESS_INFO = JSON_ADDRESS_INFO,
			COMPANY_INFO = JSON_COMPANY_INFO,
			WSTE_INFO = JSON_WSTE_INFO,
			SITE_INFO = JSON_SITE_INFO,
			SITE_LIST = JSON_SITE_LIST
        WHERE SITE_ID = CUR_SITE_ID;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'SITE_ID'					, SITE_ID, 
        'CREATED_AT'				, CREATED_AT, 
        'UPDATED_AT'				, UPDATED_AT, 
        'SITE_NAME'					, SITE_NAME, 
        'PERMIT_REG_CODE'			, PERMIT_REG_CODE, 
        'B_CODE'					, B_CODE, 
        'ADDR'						, ADDR, 
        'PERMIT_REG_IMG_PATH'		, PERMIT_REG_IMG_PATH, 
        'ADDRESS_INFO'				, ADDRESS_INFO, 
        'COMPANY_INFO'				, COMPANY_INFO, 
        'WSTE_INFO'					, WSTE_INFO, 
        'SITE_INFO'					, SITE_INFO, 
        'SITE_LIST'					, SITE_LIST
	)) 
    INTO OUT_SITE_INFO FROM ADMIN_GET_SITE_INFO;
    
	DROP TABLE IF EXISTS ADMIN_GET_SITE_INFO;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_user_info`(
	IN IN_PARAMS			JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_user_info
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE json_data			JSON				DEFAULT NULL;
    DECLARE msg_txt				VARCHAR(200)		DEFAULT 'success';
    DECLARE rtn_val				INT					DEFAULT 0;
    DECLARE VAR_UID				VARCHAR(255)		DEFAULT NULL;
    DECLARE VAR_USER_COUNT		INT					DEFAULT 0;
    
	SELECT ID COLLATE utf8mb4_unicode_ci
    INTO VAR_UID
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ID		 				VARCHAR(255)		PATH "$.ID",
		PW		 				VARCHAR(255)		PATH "$.PW"
	)) AS PARAMS;
    
	SELECT COUNT(ID) INTO VAR_USER_COUNT
    FROM CHIUM_MEMBERS
    WHERE UID = VAR_UID;
    
    IF VAR_USER_COUNT = 1 THEN
		SELECT JSON_OBJECT(
			'ID', 				A.ID, 
			'USER_ID', 			A.UID, 
			'PWD', 				A.PWD, 
			'CLASS', 			A.CLASS,
            'NAME',				A.NAME,
            'DEPARTMENT_ID',	A.DEPARTMENT,
            'AVATAR_PATH',		A.AVATAR_PATH,
            'DEPARTMENT_NAME',	B.NAME
		) 
		INTO json_data 
		FROM CHIUM_MEMBERS A 
        LEFT JOIN DEPARTMENT B ON A.DEPARTMENT = B.ID
		WHERE 
			UID 			= VAR_UID AND 
			ACTIVE 			= TRUE;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
    ELSE
		SET rtn_val = 100001;
		SET msg_txt = 'No user found';
		CALL sp_return_results(rtn_val, msg_txt, json_data);
    END IF;
         
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_user_info_without_handler`(
	IN IN_PARAMS			JSON,
	OUT USER_INFO			JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_user_info_without_handler
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_USER_REG_ID			VARCHAR(255) DEFAULT 0;
    
	SELECT ID COLLATE utf8mb4_unicode_ci
    INTO VAR_USER_REG_ID
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ID		 				VARCHAR(255)		PATH "$.ID",
		PW		 				VARCHAR(255)		PATH "$.PW"
	)) AS PARAMS;
    
	SELECT JSON_OBJECT(
		'ID', 							ID, 
		'USER_ID', 						USER_ID, 
		'PWD', 							PWD, 
		'USER_NAME', 					USER_NAME, 
		'TRMT_BIZ_CODE', 				TRMT_BIZ_CODE, 
		'SITE_ID', 						AFFILIATED_SITE, 
		'COMP_ID', 						BELONG_TO, 
		'FCM', 							FCM, 
		'CLASS', 						CLASS, 
		'PHONE', 						PHONE,			/*0.0.4에서 추가 PHONE추가*/
		'USER_TYPE', 					USER_TYPE,
		'USER_CURRENT_TYPE', 			USER_CURRENT_TYPE_NM,
		'PUSH_ENABLED', 				PUSH_ENABLED,
		'NOTICE_ENABLED', 				NOTICE_ENABLED,
		'AVATAR_PATH', 					AVATAR_PATH
	) 
	INTO USER_INFO 
	FROM V_USERS 
	WHERE 
		USER_ID 		= VAR_USER_REG_ID AND 
		ACTIVE 			= TRUE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_version_list`(
    IN IN_PARAMS					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_version_list
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_USER_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_PROJECT_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_SEARCH						VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_PAGE_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_OUT_LIST					JSON 			DEFAULT NULL;
    DECLARE VAR_OUT_RECORD_COUNT			INT 			DEFAULT 0;
    DECLARE VAR_LAST_PAGE					INT 			DEFAULT NULL;
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON 			DEFAULT NULL;
    DECLARE VAR_DUMMY_ACTIVATE				TINYINT			DEFAULT FALSE;
    
	SELECT 
		USER_ID, 
		PROJECT_ID, 
        SEARCH, 
        OFFSET_SIZE, 
        PAGE_SIZE
    INTO 
		VAR_USER_ID, 
		VAR_PROJECT_ID, 
        VAR_SEARCH, 
        VAR_OFFSET_SIZE, 
        VAR_PAGE_SIZE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		PROJECT_ID 				BIGINT 				PATH "$.PROJECT_ID",
		SEARCH	 				VARCHAR(255)		PATH "$.SEARCH",
		OFFSET_SIZE 			INT 				PATH "$.OFFSET_SIZE",
		PAGE_SIZE 				INT 				PATH "$.PAGE_SIZE"
	)) AS PARAMS;
    
    CALL sp_admin_get_version_list_without_handler(
		VAR_PROJECT_ID,
		VAR_SEARCH,
        VAR_OFFSET_SIZE,
        VAR_PAGE_SIZE,
        VAR_OUT_RECORD_COUNT,
        VAR_OUT_LIST
    );
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_VERSION_LIST_TEMP (
		INPUT_PARAMS		JSON,
		LAST_PAGE			INT,
		VERSION_LIST		JSON
	);      
	
	SET VAR_LAST_PAGE = CEILING(VAR_OUT_RECORD_COUNT / VAR_PAGE_SIZE);
    
    INSERT INTO ADMIN_GET_VERSION_LIST_TEMP (
		INPUT_PARAMS,
        LAST_PAGE,
        VERSION_LIST
    ) VALUES (
		IN_PARAMS,
        VAR_LAST_PAGE,
        VAR_OUT_LIST
    );
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'INPUT_PARAMS'	, INPUT_PARAMS, 
        'LAST_PAGE'		, LAST_PAGE, 
        'VERSION_LIST'	, VERSION_LIST
	)) 
    INTO json_data FROM ADMIN_GET_VERSION_LIST_TEMP;    
	DROP TABLE IF EXISTS ADMIN_GET_VERSION_LIST_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_get_version_list_without_handler`(
	IN IN_PROJECT_ID					BIGINT,
	IN IN_SEARCH						VARCHAR(255),
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    OUT OUT_RECORD_COUNT				INT,
    OUT OUT_VERSION_LIST				JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_version_list_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 				INT DEFAULT 0;
    DECLARE endOfRow 				TINYINT 		DEFAULT FALSE;    
	DECLARE CUR_ID					BIGINT;
	DECLARE CUR_CREATOR_ID			BIGINT;
	DECLARE CUR_PROJECT_ID			INT;
	DECLARE CUR_CONTENT				TEXT;
	DECLARE CUR_CREATED_AT			DATETIME;
	DECLARE CUR_UPDATED_AT			DATETIME;
	DECLARE CUR_VERSION				VARCHAR(45);
	DECLARE CUR_CREATOR_NAME		VARCHAR(255);
	DECLARE CUR_PROJECT_NAME		VARCHAR(255);
    DECLARE VAR_RECORD_COUNT		INT				DEFAULT 0;
    DECLARE TEMP_CURSOR		 		CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID,
		A.CREATOR_ID,
		A.PROJECT_ID,
		A.CONTENT,
		A.CREATED_AT,
		A.UPDATED_AT,
		A.VERSION,
		B.NAME,
        C.NAME
    FROM DEV_HISTORY A
	LEFT JOIN CHIUM_MEMBERS B ON A.CREATOR_ID = B.ID
    LEFT JOIN DEV_PROJECT C ON A.PROJECT_ID = C.ID
    WHERE 
		PROJECT_ID = IN_PROJECT_ID AND 
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.VERSION LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.NAME LIKE CONCAT('%', IN_SEARCH, '%')
			)
		)
    ORDER BY A.CREATED_AT DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	SELECT COUNT(A.ID) INTO VAR_RECORD_COUNT
    FROM DEV_HISTORY A
	LEFT JOIN CHIUM_MEMBERS B ON A.CREATOR_ID = B.ID
    LEFT JOIN DEV_PROJECT C ON A.PROJECT_ID = C.ID
    WHERE 
		PROJECT_ID = IN_PROJECT_ID AND 
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.VERSION LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.NAME LIKE CONCAT('%', IN_SEARCH, '%')
			)
		);
    
    SET OUT_RECORD_COUNT = VAR_RECORD_COUNT;
    SET OUT_VERSION_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_GET_VERSION_LIST_WITHOUT_HANDLER_TEMP (
		ID					BIGINT,
		CREATOR_ID			BIGINT,
		PROJECT_ID			INT,
		CONTENT				TEXT,
		CREATED_AT			DATETIME,
		UPDATED_AT			DATETIME,
		VERSION				VARCHAR(45),
		CREATOR_NAME		VARCHAR(255),
		PROJECT_NAME		VARCHAR(255)
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_CREATOR_ID,
			CUR_PROJECT_ID,
			CUR_CONTENT,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_VERSION,
			CUR_CREATOR_NAME,
			CUR_PROJECT_NAME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
		ADMIN_GET_VERSION_LIST_WITHOUT_HANDLER_TEMP(
			ID,
			CREATOR_ID,
			PROJECT_ID,
			CONTENT,
			CREATED_AT,
			UPDATED_AT,
			VERSION,
			CREATOR_NAME,
			PROJECT_NAME
		)
		VALUES( 
			CUR_ID,
			CUR_CREATOR_ID,
			CUR_PROJECT_ID,
			CUR_CONTENT,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_VERSION,
			CUR_CREATOR_NAME,
			CUR_PROJECT_NAME
		);
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'				, ID, 
        'CREATOR_ID'		, CREATOR_ID, 
        'PROJECT_ID'		, PROJECT_ID, 
        'CONTENT'			, CONTENT, 
        'CREATED_AT'		, CREATED_AT, 
        'UPDATED_AT'		, UPDATED_AT, 
        'VERSION'			, VERSION, 
        'CREATOR_NAME'		, CREATOR_NAME, 
        'PROJECT_NAME'		, PROJECT_NAME
	)) 
    INTO OUT_VERSION_LIST FROM ADMIN_GET_VERSION_LIST_WITHOUT_HANDLER_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_GET_VERSION_LIST_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_init_user`(
    IN IN_PARAMS					JSON
)
BEGIN
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success12';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_ADMIN_ID						BIGINT 			DEFAULT NULL;
	DECLARE VAR_ADMIN_UID						VARCHAR(255)	DEFAULT NULL;
	DECLARE VAR_PWD								VARCHAR(255)	DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NOW();

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, IN_PARAMS);
	END;  
	START TRANSACTION;	
  
	SELECT 
		ADMIN_ID, 
		ADMIN_UID, 
        PWD
    INTO 
		VAR_ADMIN_ID, 
		VAR_ADMIN_UID, 
        VAR_PWD
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ADMIN_ID 				BIGINT 				PATH "$.ADMIN_ID",
		ADMIN_UID 				VARCHAR(255)		PATH "$.ADMIN_UID",
		PWD		 				VARCHAR(255)		PATH "$.PWD"
	)) AS PARAMS;   
    
	CALL sp_req_current_time(VAR_REG_DT);
    UPDATE CHIUM_MEMBERS
    SET 
		UID				 	= VAR_ADMIN_UID,
		PWD				 	= VAR_PWD,
        UPDATED_AT 			= VAR_REG_DT
	WHERE 
        ID 					= VAR_ADMIN_ID;
	
    IF ROW_COUNT() = 1 THEN
		SELECT JSON_OBJECT(
			'ID', 							ID, 
			'USER_ID', 						UID, 
			'PWD', 							PWD, 
			'CLASS', 						CLASS
		) 
		INTO json_data 
		FROM CHIUM_MEMBERS 
		WHERE 
			ID 				= VAR_ADMIN_ID AND 
			ACTIVE 			= TRUE;
    ELSE
		SET rtn_val = 101401;
		SET msg_txt = 'failed to initiate user';
		SIGNAL SQLSTATE '23000';
    END IF;
   
    COMMIT;
    CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_insert_chat`(
    IN IN_PARAMS					JSON
)
BEGIN
    DECLARE json_data				JSON 			DEFAULT NULL;
    DECLARE rtn_val					INT 			DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200) 	DEFAULT 'success';
    DECLARE VAR_USER_ID				BIGINT 			DEFAULT NULL;
    DECLARE VAR_ROOM_ID				BIGINT 			DEFAULT NULL;
    DECLARE VAR_MESSAGE				VARCHAR(255) 	DEFAULT NULL;
    DECLARE REG_DT					DATETIME 		DEFAULT NOW();
    DECLARE VAR_IS_READ				TINYINT 		DEFAULT 0;
    DECLARE VAR_MEDIA				TINYINT 		DEFAULT 0;
    DECLARE VAR_LAST_ID				BIGINT 			DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	SELECT 
		USER_ID, 
        ROOM_ID, 
        MESSAGE, 
        IS_READ, 
        MEDIA
    INTO 
		VAR_USER_ID, 
        VAR_ROOM_ID, 
        VAR_MESSAGE, 
        VAR_IS_READ, 
        VAR_MEDIA
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		ROOM_ID 				INT 				PATH "$.ROOM_ID",
		MESSAGE 				TEXT		 		PATH "$.MESSAGE",
		IS_READ 				TINYINT		 		PATH "$.IS_READ",
		MEDIA	 				TINYINT		 		PATH "$.MEDIA"
	)) AS PARAMS;

    CALL sp_req_current_time(REG_DT);
    
    INSERT INTO CHATS(USER_ID, ROOM_ID, MESSAGE, CREATED_AT, IS_READ, MEDIA)
    VALUES(VAR_USER_ID, VAR_ROOM_ID, VAR_MESSAGE, REG_DT, VAR_IS_READ, VAR_MEDIA);
    
    IF ROW_COUNT() = 1 THEN    
		SELECT LAST_INSERT_ID() INTO VAR_LAST_ID;
        
		CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_INSERT_CHAT_TEMP (
			USER_ID									BIGINT,
			CHAT_ID									BIGINT,
			ROOM_ID									BIGINT,
			MESSAGE									TEXT,
			CREATED_AT								DATETIME,
			IS_READ									TINYINT,
			DELETED									TINYINT,
			MEDIA									TINYINT
		);        
		
		INSERT INTO ADMIN_INSERT_CHAT_TEMP(
			USER_ID, 
            CHAT_ID, 
            ROOM_ID, 
            MESSAGE, 
            CREATED_AT, 
            IS_READ, 
            DELETED, 
            MEDIA
        )
		SELECT 
			USER_ID, 
			ID, 
			ROOM_ID, 
			IF(DELETED = FALSE, MESSAGE, '삭제된 메시지입니다.'),
			CREATED_AT, 
			IS_READ,
			DELETED,
			MEDIA
		FROM CHATS WHERE ID = VAR_LAST_ID;
		
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'USER_ID'				, USER_ID, 
			'CHAT_ID'				, CHAT_ID, 
			'ROOM_ID'				, ROOM_ID, 
			'MESSAGE'				, MESSAGE, 
			'CREATED_AT'			, CREATED_AT, 
			'IS_READ'				, IS_READ, 
			'DELETED'				, DELETED, 
			'MEDIA'					, MEDIA
		)) 
		INTO json_data FROM ADMIN_INSERT_CHAT_TEMP;
		DROP TABLE IF EXISTS ADMIN_INSERT_CHAT_TEMP;
		SET rtn_val = 0;
        SET msg_txt = 'success';
    ELSE
		SET rtn_val = 100201;
        SET msg_txt = 'failed to insert chat messages';
		SIGNAL SQLSTATE '23000';
        SET json_data = IN_PARAMS;
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_insert_manager`(
    IN IN_PARAMS					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_new_logs
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_NAME						VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_CLASS						INT 			DEFAULT NULL;
    DECLARE VAR_DEPARTMENT					INT 			DEFAULT NULL;
    DECLARE VAR_USER_ID						VARCHAR(45) 	DEFAULT NULL;
    DECLARE VAR_PASSWORD					VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_PHONE						VARCHAR(45) 	DEFAULT NULL;
    DECLARE VAR_REG_DT						DATETIME 		DEFAULT NULL;
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON 			DEFAULT NULL;
    DECLARE VAR_DUMMY_ACTIVATE				TINYINT			DEFAULT FALSE;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	SELECT 
		NAME, 
        CLASS, 
        DEPARTMENT, 
        USER_ID, 
        PASSWORD, 
        PHONE
    INTO 
		VAR_NAME, 
        VAR_CLASS, 
        VAR_DEPARTMENT, 
        VAR_USER_ID, 
        VAR_PASSWORD, 
        VAR_PHONE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		NAME 				VARCHAR(255) 		PATH "$.NAME",
		CLASS 				INT					PATH "$.CLASS",
		DEPARTMENT	 		INT					PATH "$.DEPARTMENT",
		USER_ID	 			VARCHAR(45)			PATH "$.USER_ID",
		PASSWORD	 		VARCHAR(255)		PATH "$.PASSWORD",
		PHONE	 			VARCHAR(45)			PATH "$.PHONE"
	)) AS PARAMS;
    
    CALL sp_req_current_time(VAR_REG_DT);
    
    INSERT INTO CHIUM_MEMBERS(
		NAME, 
        CLASS, 
        DEPARTMENT,
        UID,
        PWD,
        PHONE,
        CREATED_AT,
        UPDATED_AT
	) VALUES (
		VAR_NAME,
        VAR_CLASS,
        VAR_DEPARTMENT,
        VAR_USER_ID,
        VAR_PASSWORD,
        VAR_PHONE,
        VAR_REG_DT,
        VAR_REG_DT
    );
    
    IF ROW_COUNT() = 0 THEN
		SET rtn_val = 101101;
		SET msg_txt = 'failed to create member';
		SIGNAL SQLSTATE '23000';
    END IF;
    
	CALL sp_return_results(rtn_val, msg_txt, IN_PARAMS);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_insert_multiple_chat`(
    IN IN_PARAMS					JSON,
    OUT OUT_LAST_ID					BIGINT,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN
    DECLARE VAR_USER_ID				BIGINT 			DEFAULT NULL;
    DECLARE VAR_ROOM_ID				BIGINT 			DEFAULT NULL;
    DECLARE VAR_MESSAGE_LIST		VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_MESSAGE				VARCHAR(255) 	DEFAULT NULL;
    DECLARE REG_DT					DATETIME 		DEFAULT NOW();
    DECLARE VAR_IS_READ				TINYINT 		DEFAULT 0;
    DECLARE VAR_MEDIA				TINYINT 		DEFAULT 0;
    DECLARE VAR_LAST_ID				BIGINT 			DEFAULT NULL;
	DECLARE SEPERATOR				VARCHAR(10) 	DEFAULT ',' COLLATE utf8mb4_unicode_ci;		/*리스트의 아이템을 분리하는 식별자로서 comma(,)를 사용하는 것으로 정의함. 식별자는 언제든지 변경가능함*/    
    
	SELECT 
		USER_ID, 
        ROOM_ID, 
        MESSAGE COLLATE utf8mb4_unicode_ci, 
        IS_READ, 
        MEDIA
    INTO 
		VAR_USER_ID, 
        VAR_ROOM_ID, 
        VAR_MESSAGE_LIST, 
        VAR_IS_READ, 
        VAR_MEDIA
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		ROOM_ID 				INT 				PATH "$.ROOM_ID",
		MESSAGE 				VARCHAR(255) 		PATH "$.MESSAGE",
		IS_READ 				VARCHAR(255) 		PATH "$.IS_READ",
		MEDIA	 				TINYINT		 		PATH "$.MEDIA"
	)) AS PARAMS;

    CALL sp_req_current_time(REG_DT);
    
	SET rtn_val = 0;
	SET msg_txt = 'success';
    
    IF VAR_MESSAGE_LIST IS NULL OR VAR_MESSAGE_LIST = '' THEN
		SET rtn_val = 100403;
		SET msg_txt = 'messages should not be null';
    ELSE
		WHILE (LOCATE(SEPERATOR, VAR_MESSAGE_LIST) > 0) DO
			SET VAR_MESSAGE = SUBSTRING(VAR_MESSAGE_LIST, 1, LOCATE(SEPERATOR, VAR_MESSAGE_LIST) - 1);
			SET VAR_MESSAGE_LIST = SUBSTRING(VAR_MESSAGE_LIST, LOCATE(SEPERATOR, VAR_MESSAGE_LIST) + 1);  
            
			INSERT INTO CHATS(
				USER_ID, 
                ROOM_ID, 
                MESSAGE, 
                CREATED_AT, 
                IS_READ, 
                MEDIA
            )
			VALUES(
				VAR_USER_ID, 
                VAR_ROOM_ID, 
                VAR_MESSAGE, 
                REG_DT, 
                VAR_IS_READ, 
                VAR_MEDIA
            );
            
            IF ROW_COUNT() = 0 THEN
				SET rtn_val = 100402;
				SET msg_txt = 'failed to insert a message';
            END IF;
		END WHILE;
            
		INSERT INTO CHATS(
			USER_ID, 
            ROOM_ID, 
            MESSAGE, 
            CREATED_AT, 
            IS_READ, 
            MEDIA
        )
		VALUES(
			VAR_USER_ID, 
            VAR_ROOM_ID, 
            VAR_MESSAGE_LIST, 
            REG_DT, 
            VAR_IS_READ, 
            VAR_MEDIA
        );
        
		IF ROW_COUNT() = 0 THEN
			SET rtn_val = 100401;
			SET msg_txt = 'failed to insert a message';
		END IF;
        
        SELECT LAST_INSERT_ID() INTO OUT_LAST_ID;
    END IF;  
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_insert_note`(
    IN IN_PARAMS					JSON
)
BEGIN
    DECLARE	VAR_ADMIN_ID		BIGINT;
    DECLARE	VAR_NOTE_DETAILS	JSON;
	DECLARE rtn_val				INT						DEFAULT 0;
	DECLARE msg_txt				VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data			JSON					DEFAULT NULL;	
    
	SELECT 
		ADMIN_ID,
		NOTE_DETAILS
    INTO 
		VAR_ADMIN_ID,
        VAR_NOTE_DETAILS
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ADMIN_ID	 	BIGINT				PATH "$.ADMIN_ID",
		NOTE_DETAILS 	JSON				PATH "$.NOTE_DETAILS"
	)) AS PARAMS;
    
    CALL sp_admin_insert_note_without_handler(
		VAR_ADMIN_ID,
		VAR_NOTE_DETAILS,
        rtn_val,
        msg_txt
    );
    
	CALL sp_return_results(rtn_val, msg_txt, IN_PARAMS);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_insert_note_without_handler`(
    IN IN_ADMIN_ID					BIGINT,
    IN IN_PARAMS					JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN
    DECLARE VAR_REG_DT				DATETIME 		DEFAULT NOW();
    DECLARE VAR_MEMBER_ID			BIGINT			DEFAULT NULL;
    DECLARE VAR_SITE_ID				BIGINT			DEFAULT NULL;
    DECLARE VAR_ORDER_ID			BIGINT			DEFAULT NULL;
    DECLARE VAR_BIDDING_ID			BIGINT			DEFAULT NULL;
    DECLARE VAR_TRANSACTION_ID		BIGINT			DEFAULT NULL;
    DECLARE VAR_REPORT_ID			BIGINT			DEFAULT NULL;
    DECLARE VAR_NOTE				TEXT			DEFAULT NULL;
    DECLARE VAR_SITE_CATEGORY		TINYINT			DEFAULT NULL;
    DECLARE VAR_USER_COUNT			INT				DEFAULT 0;
    
    IF JSON_LENGTH(IN_PARAMS) > 0 THEN
		SELECT 
			MEMBER_ID, 
			SITE_ID, 
			ORDER_ID, 
			BIDDING_ID, 
			TRANSACTION_ID, 
			REPORT_ID, 
			NOTE, 
			SITE_CATEGORY
		INTO 
			VAR_MEMBER_ID, 
			VAR_SITE_ID, 
			VAR_ORDER_ID, 
			VAR_BIDDING_ID, 
			VAR_TRANSACTION_ID, 
			VAR_REPORT_ID, 
			VAR_NOTE, 
			VAR_SITE_CATEGORY
		FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
			MEMBER_ID 				BIGINT 				PATH "$.MEMBER_ID",
			SITE_ID 				BIGINT 				PATH "$.SITE_ID",
			ORDER_ID 				BIGINT		 		PATH "$.ORDER_ID",
			BIDDING_ID 				BIGINT		 		PATH "$.BIDDING_ID",
			TRANSACTION_ID	 		BIGINT		 		PATH "$.TRANSACTION_ID",
			REPORT_ID	 			BIGINT		 		PATH "$.REPORT_ID",
			NOTE	 				TEXT		 		PATH "$.NOTE",
			SITE_CATEGORY			TINYINT		 		PATH "$.SITE_CATEGORY"
		)) AS PARAMS;
		
        SELECT COUNT(ID) INTO VAR_USER_COUNT
        FROM CHIUM_MEMBERS
        WHERE ID = IN_ADMIN_ID;
        
        IF VAR_USER_COUNT = 1 THEN
			CALL sp_req_current_time(VAR_REG_DT);
			IF VAR_NOTE IS NULL OR VAR_NOTE = '' THEN
				SET rtn_val = 0;
				SET msg_txt = 'no note but success';
            ELSE
				INSERT INTO CS_NOTE (
					ADMIN_ID,
					MEMBER_ID,
					SITE_ID,
					ORDER_ID,
					BIDDING_ID,
					TRANSACTION_ID,
					REPORT_ID,
					NOTE,
					SITE_CATEGORY,
					CREATED_AT
				) VALUES (
					IN_ADMIN_ID, 
					VAR_MEMBER_ID, 
					VAR_SITE_ID, 
					VAR_ORDER_ID, 
					VAR_BIDDING_ID, 
					VAR_TRANSACTION_ID, 
					VAR_REPORT_ID, 
					VAR_NOTE,
					VAR_SITE_CATEGORY,
					VAR_REG_DT
				);
				
				IF ROW_COUNT() = 1 THEN
					SET rtn_val = 0;
					SET msg_txt = 'success';
				ELSE
					SET rtn_val = 100902;
					SET msg_txt = 'failed to insert a counseling note';
				END IF;
            END IF;
        ELSE
			SET rtn_val = 100901;
			SET msg_txt = 'No authorized to insert a counseling data';
        END IF;
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'no note object but success';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_insert_version_info`(
    IN IN_PARAMS					JSON
)
BEGIN
    DECLARE	VAR_ADMIN_ID		BIGINT;
    DECLARE	VAR_DEV_INFO		JSON;
	DECLARE rtn_val				INT						DEFAULT 0;
	DECLARE msg_txt				VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data			JSON					DEFAULT NULL;	
    
	SELECT 
		ADMIN_ID,
		DEV_INFO
    INTO 
		VAR_ADMIN_ID,
        VAR_DEV_INFO
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ADMIN_ID	 	BIGINT				PATH "$.ADMIN_ID",
		DEV_INFO	 	JSON				PATH "$.DEV_INFO"
	)) AS PARAMS;
    
    CALL sp_admin_insert_version_info_without_handler(
		VAR_ADMIN_ID,
		VAR_DEV_INFO,
        rtn_val,
        msg_txt
    );
    
	CALL sp_return_results(rtn_val, msg_txt, IN_PARAMS);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_insert_version_info_without_handler`(
    IN IN_ADMIN_ID					BIGINT,
    IN IN_PARAMS					JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN
    DECLARE VAR_REG_DT				DATETIME 		DEFAULT NOW();
    DECLARE VAR_PROJECT_ID			BIGINT			DEFAULT NULL;
    DECLARE VAR_CONTENT				TEXT			DEFAULT NULL;
    DECLARE VAR_VERSION				VARCHAR(45)		DEFAULT NULL;
    DECLARE VAR_USER_COUNT			INT				DEFAULT 0;
    
    IF JSON_LENGTH(IN_PARAMS) > 0 THEN
		SELECT 
			PROJECT_ID, 
			CONTENT, 
			VERSION
		INTO 
			VAR_PROJECT_ID, 
			VAR_CONTENT, 
			VAR_VERSION
		FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
			PROJECT_ID 				BIGINT 				PATH "$.PROJECT_ID",
			CONTENT 				TEXT 				PATH "$.CONTENT",
			VERSION 				VARCHAR(45)	 		PATH "$.VERSION"
		)) AS PARAMS;
		
        SELECT COUNT(ID) INTO VAR_USER_COUNT
        FROM CHIUM_MEMBERS
        WHERE ID = IN_ADMIN_ID;
        
        IF VAR_USER_COUNT = 1 THEN
			CALL sp_req_current_time(VAR_REG_DT);
			
			INSERT INTO DEV_HISTORY (
				CREATOR_ID,
				PROJECT_ID,
				CONTENT,
				CREATED_AT,
				UPDATED_AT,
				VERSION
			) VALUES (
				IN_ADMIN_ID, 
				VAR_PROJECT_ID, 
				VAR_CONTENT, 
				VAR_REG_DT, 
				VAR_REG_DT, 
				VAR_VERSION
			);
			
			IF ROW_COUNT() = 1 THEN
				SET rtn_val = 0;
				SET msg_txt = 'success';
			ELSE
				SET rtn_val = 101302;
				SET msg_txt = 'failed to insert a version info';
			END IF;
        ELSE
			SET rtn_val = 101301;
			SET msg_txt = 'No authorized to insert a version info';
        END IF;
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'no version info but success';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_main_get_no_confirm_counts_monthly_base`(
    IN IN_PARAM							JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_main_get_no_confirm_counts_monthly_base
Input param 	: 1개
Job 			: 현재가 속하고 있는 연월에서 일별로 사업자등록증 허가증 등 cs로부터 미처리된 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_USER_ID				BIGINT 			DEFAULT NULL;
    DECLARE VAR_MENU_ID				INT 			DEFAULT NULL;
    DECLARE VAR_TARGET_DATE			DATETIME 		DEFAULT NULL;
    DECLARE JSON_LISTS				JSON 			DEFAULT NULL;
    DECLARE json_data				JSON 			DEFAULT NULL;
    DECLARE rtn_val					INT 			DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200) 	DEFAULT 'success';
    
	SELECT 
		USER_ID, 
        MENU_ID, 
        TARGET_DATE
    INTO 
		VAR_USER_ID, 
        VAR_MENU_ID, 
        VAR_TARGET_DATE
    FROM JSON_TABLE(IN_PARAM, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		MENU_ID 				INT 				PATH "$.MENU_ID",
		TARGET_DATE				DATE 				PATH "$.TARGET_DATE"
	)) AS PARAMS;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS MAIN_GET_NO_CONFIRM_COUNTS_TEMP (
		USER_ID					BIGINT,
		MENU_ID					INT,
        LISTS					JSON        
	);        
	
    INSERT INTO MAIN_GET_NO_CONFIRM_COUNTS_TEMP(
		USER_ID,
        MENU_ID,
        LISTS
	) VALUES (
		VAR_USER_ID,
        VAR_MENU_ID,
        JSON_LISTS
	);
	
	CALL sp_get_no_confirm_license_counts_monthly(
		VAR_TARGET_DATE,
		VAR_MENU_ID,
		JSON_LISTS
	);
    
    UPDATE MAIN_GET_NO_CONFIRM_COUNTS_TEMP
    SET LISTS = JSON_LISTS
    WHERE USER_ID = VAR_USER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'USER_ID'			, USER_ID, 
        'MENU_ID'			, MENU_ID, 
        'LISTS'				, LISTS
	)) 
    INTO json_data FROM MAIN_GET_NO_CONFIRM_COUNTS_TEMP;
	DROP TABLE IF EXISTS MAIN_GET_NO_CONFIRM_COUNTS_TEMP;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_main_get_no_confirm_lists_monthly_base`(
    IN IN_PARAM							JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_main_get_no_confirm_lists_monthly_base
Input param 	: 1개
Job 			: 현재가 속하고 있는 연월에서 일별로 사업자등록증 허가증 등 cs로부터 미처리된 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_USER_ID				BIGINT 			DEFAULT NULL;
    DECLARE VAR_MENU_ID				INT 			DEFAULT NULL;
    DECLARE VAR_TARGET_DATE			DATETIME 		DEFAULT NULL;
    DECLARE VAR_LISTS_COUNT			INT 			DEFAULT 0;
    DECLARE JSON_LISTS				JSON 			DEFAULT NULL;
    DECLARE json_data				JSON 			DEFAULT NULL;
    DECLARE rtn_val					INT 			DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200) 	DEFAULT 'success';
    
	SELECT 
		USER_ID, 
        MENU_ID, 
        TARGET_DATE
    INTO 
		VAR_USER_ID, 
        VAR_MENU_ID, 
        VAR_TARGET_DATE
    FROM JSON_TABLE(IN_PARAM, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		MENU_ID 				INT 				PATH "$.MENU_ID",
		TARGET_DATE				DATE 				PATH "$.TARGET_DATE"
	)) AS PARAMS;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS MAIN_GET_NO_CONFIRM_LISTS_TEMP (
		USER_ID									BIGINT,
		MENU_ID									INT,
        LISTS									JSON,
        LISTS_COUNT								INT
	);        
	
    INSERT INTO MAIN_GET_NO_CONFIRM_LISTS_TEMP(
		USER_ID,
        MENU_ID,
        LISTS
	) VALUES (
		VAR_USER_ID,
        VAR_MENU_ID,
        JSON_LISTS
	);
	
	CALL sp_get_site_lists_registered(
		VAR_TARGET_DATE,
		VAR_MENU_ID,
		JSON_LISTS
	);
    
    CALL sp_get_no_confirm_license_counts_daily(
		VAR_TARGET_DATE,
		VAR_MENU_ID,
		VAR_LISTS_COUNT
    );
        
    UPDATE MAIN_GET_NO_CONFIRM_LISTS_TEMP
    SET 
		LISTS 			= JSON_LISTS,
		LISTS_COUNT 	= VAR_LISTS_COUNT
    WHERE USER_ID = VAR_USER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'USER_ID'			, USER_ID, 
        'MENU_ID'			, MENU_ID, 
        'LISTS'				, LISTS, 
        'LISTS_COUNT'		, LISTS_COUNT
	)) 
    INTO json_data FROM MAIN_GET_NO_CONFIRM_LISTS_TEMP;
	DROP TABLE IF EXISTS MAIN_GET_NO_CONFIRM_LISTS_TEMP;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_main_top`(
	IN IN_USER_ID						BIGINT,
	IN IN_ADMIN_MAIN_DURATION			INT,
	OUT OUT_REAL_TIME_STATUS			JSON
)
BEGIN
    DECLARE VAR_WAITING_ANSWERS			INT DEFAULT 0;
    DECLARE VAR_EMITTERS				INT DEFAULT 0;
    DECLARE VAR_COLLECTORS				INT DEFAULT 0;
    DECLARE VAR_PROCESSORS				INT DEFAULT 0;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS RTS_TEMP (
		ID						INT,
		EMITTERS				INT,
		COLLECTORS				INT,
		PROCESSORS				INT,
		WAITING_ANSWERS			INT,
		ADMIN_MAIN_DURATION		INT,
        PUSH_HISTORY			JSON
	);  
    
	SELECT COUNT(ID) INTO VAR_EMITTERS
    FROM COMP_SITE
    WHERE 
		ACTIVE = TRUE AND
        TRMT_BIZ_CODE = 9 AND
        NOW() <= DATE_ADD(CREATED_AT, INTERVAL CAST(IN_ADMIN_MAIN_DURATION AS UNSIGNED) DAY);   
    
	SELECT COUNT(ID) INTO VAR_PROCESSORS
    FROM COMP_SITE
    WHERE 
		ACTIVE = TRUE AND
        TRMT_BIZ_CODE > 1 AND TRMT_BIZ_CODE < 9 AND
        NOW() <= DATE_ADD(CREATED_AT, INTERVAL CAST(IN_ADMIN_MAIN_DURATION AS UNSIGNED) DAY);  
    
	SELECT COUNT(ID) INTO VAR_COLLECTORS
    FROM COMP_SITE
    WHERE 
		ACTIVE = TRUE AND
        TRMT_BIZ_CODE = 1 AND
        NOW() <= DATE_ADD(CREATED_AT, INTERVAL CAST(IN_ADMIN_MAIN_DURATION AS UNSIGNED) DAY);
    
    CALL sp_get_count_waiting_answers(
		IN_ADMIN_MAIN_DURATION,
        VAR_WAITING_ANSWERS
    );
    
	INSERT INTO 
	RTS_TEMP(
		ID,
		EMITTERS,
		COLLECTORS,
		PROCESSORS,
		WAITING_ANSWERS,
		ADMIN_MAIN_DURATION
	)
	VALUES(
		IN_USER_ID,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL
	);
	UPDATE RTS_TEMP
    SET 
		EMITTERS 				= VAR_EMITTERS,
        COLLECTORS 				= VAR_COLLECTORS,
        PROCESSORS 				= VAR_PROCESSORS,
        WAITING_ANSWERS 		= VAR_WAITING_ANSWERS,
        ADMIN_MAIN_DURATION 	= IN_ADMIN_MAIN_DURATION
	WHERE ID 					= IN_USER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'						, ID, 
		'EMITTERS'					, EMITTERS, 
        'COLLECTORS'				, COLLECTORS, 
        'PROCESSORS'				, PROCESSORS, 
        'WAITING_ANSWERS'			, WAITING_ANSWERS, 
        'ADMIN_MAIN_DURATION'		, ADMIN_MAIN_DURATION
	)) 
    INTO OUT_REAL_TIME_STATUS FROM RTS_TEMP;
    
	DROP TABLE IF EXISTS RTS_TEMP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_main_top_list_load_more`(
    IN IN_PARAM							JSON
)
BEGIN
    DECLARE VAR_USER_ID				BIGINT 			DEFAULT NULL;
    DECLARE VAR_MENU_ID				INT 			DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE			INT 			DEFAULT 0;
    DECLARE VAR_PAGE_SIZE			INT 			DEFAULT 0;
    DECLARE ADMIN_MAIN_DURATION		VARCHAR(20) 	DEFAULT NULL;
    DECLARE JSON_PUSH_HISTORY		JSON		 	DEFAULT NULL;
    DECLARE json_data				JSON 			DEFAULT NULL;
    DECLARE rtn_val					INT 			DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200) 	DEFAULT 'success';
    
	SELECT 
		USER_ID , 
        MENU_ID, 
        OFFSET_SIZE, 
        PAGE_SIZE
    INTO 
		VAR_USER_ID, 
        VAR_MENU_ID, 
        VAR_OFFSET_SIZE, 
        VAR_PAGE_SIZE
    FROM JSON_TABLE(IN_PARAM, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		MENU_ID 				INT 				PATH "$.MENU_ID",
		OFFSET_SIZE 			INT 				PATH "$.OFFSET_SIZE",
		PAGE_SIZE 				INT 				PATH "$.PAGE_SIZE"
	)) AS PARAMS;

	CALL sp_req_policy_direction(
	/*입찰마감일로부터 배출종료일까지의 최소 소요기간(단위: day)을 반환받는다. 입찰종료일일은 방문종료일 + duration_bidding_end_date_after_the_visit_closing으로 한다.*/
		'admin_main_duration',
		ADMIN_MAIN_DURATION
	);
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_MAIN_TOP_LIST_LOAD_MORE_TEMP (
        USER_ID					BIGINT,
        MENU_ID					INT,
        OFFSET_SIZE				INT,
        PAGE_SIZE				INT,
        PUSH_HISTORY			JSON
	);  
    
    IF VAR_MENU_ID >= 0 AND VAR_MENU_ID < 3 THEN
		CALL sp_admin_main_top_lists(
			VAR_MENU_ID,
			ADMIN_MAIN_DURATION,
			VAR_OFFSET_SIZE,
			VAR_PAGE_SIZE,
			JSON_PUSH_HISTORY
		);
	ELSE
		COMMIT;
    END IF;
    
	INSERT INTO 
	ADMIN_MAIN_TOP_LIST_LOAD_MORE_TEMP(
		USER_ID,
		MENU_ID,
		OFFSET_SIZE,
		PAGE_SIZE,
		PUSH_HISTORY
	)
	VALUES(
		VAR_USER_ID,
		VAR_MENU_ID,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
		NULL
	);
	UPDATE ADMIN_MAIN_TOP_LIST_LOAD_MORE_TEMP
    SET 
        PUSH_HISTORY 			= JSON_PUSH_HISTORY
	WHERE USER_ID 				= VAR_USER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'PUSH_HISTORY'				, PUSH_HISTORY
	)) 
    INTO json_data FROM ADMIN_MAIN_TOP_LIST_LOAD_MORE_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_MAIN_TOP_LIST_LOAD_MORE_TEMP;
    
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_main_top_lists`(
	IN IN_MENU							INT,			/*1:배출자, 2:수거자, 3:처리업체, 4:답변대기*/
    IN IN_ADMIN_MAIN_DURATION			INT,
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    OUT OUT_LISTS						JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_retrieve_main_history
Input param 	: 1개
Job 			: 관리자 메인에서 각 상단메뉴별로 실시간 현황 상세내역을 반환한다.
Update 			: 2022.04.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_PUSH_ID							BIGINT;    
    DECLARE CUR_USER_ID							BIGINT;   
    DECLARE CUR_USER_NAME						VARCHAR(255);  
    DECLARE CUR_USER_COMP_SITE_ID				INT;   
    DECLARE CUR_USER_TYPE						VARCHAR(20);  
    DECLARE CUR_SENDER_ID						BIGINT; 
    DECLARE CUR_SENDER_TYPE						VARCHAR(20); 
    DECLARE CUR_PUSH_CATEGORY_ID				INT;
    DECLARE CUR_PUSH_CATEGORY					VARCHAR(45);
    DECLARE CUR_PUSH_TITLE						VARCHAR(255);
    DECLARE CUR_PUSH_CREATED					DATETIME;
    DECLARE VAR_PUSH_BODY						VARCHAR(255);
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
        A.USER_ID, 
        IF(C.AFFILIATED_SITE = 0, C.USER_NAME, D.SITE_NAME),
        C.AFFILIATED_SITE,
        IF(C.AFFILIATED_SITE = 0, '개인배출자', G.NAME),
        A.SENDER_ID,
        IF(A.SENDER_ID = 0, '시스템', IF(E.AFFILIATED_SITE = 0, '개인배출자', H.NAME)),
        A.CATEGORY_ID,
        B.KO,
        A.TITLE,
        A.CREATED_AT
    FROM PUSH_HISTORY A
    LEFT JOIN PUSH_CATEGORY B ON A.CATEGORY_ID = B.ID
    LEFT JOIN USERS C ON A.USER_ID = C.ID
    LEFT JOIN COMP_SITE D ON C.AFFILIATED_SITE = D.ID
    LEFT JOIN USERS E ON A.SENDER_ID = E.ID
    LEFT JOIN COMP_SITE F ON E.AFFILIATED_SITE = F.ID
    LEFT JOIN WSTE_TRMT_BIZ G ON D.TRMT_BIZ_CODE = G.CODE
    LEFT JOIN WSTE_TRMT_BIZ H ON F.TRMT_BIZ_CODE = H.CODE
	WHERE 
		A.DELETED = FALSE AND
        (
			C.AFFILIATED_SITE = 0 OR 
			IF(IN_MENU = 0, 
				D.TRMT_BIZ_CODE = 9, 
                IF(IN_MENU = 1, 
					D.TRMT_BIZ_CODE = 1, 
                    (D.TRMT_BIZ_CODE > 1 AND D.TRMT_BIZ_CODE < 9)
				)
			) OR 
            A.SENDER_ID = 0 OR 
            IF(A.SENDER_ID > 0, 
                IF(IN_MENU = 0, 
					F.TRMT_BIZ_CODE = 9, 
                    IF(IN_MENU = 1, 
						F.TRMT_BIZ_CODE = 1, 
                        (F.TRMT_BIZ_CODE > 1 AND F.TRMT_BIZ_CODE < 9)
					)
				), 
                A.ID = 0
			)
		) AND
        NOW() <= DATE_ADD(A.CREATED_AT, INTERVAL CAST(IN_ADMIN_MAIN_DURATION AS UNSIGNED) DAY)
	ORDER BY A.CREATED_AT DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    SET OUT_LISTS = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_MAIN_TOP_LISTS (
		PUSH_ID						BIGINT,
		USER_ID						BIGINT,
		USER_NAME					VARCHAR(255),
        USER_COMP_SITE_ID			BIGINT,
        USER_TYPE					VARCHAR(20),
        SENDER_ID					BIGINT,
        SENDER_TYPE					VARCHAR(20),
        PUSH_CATEGORY_ID			INT,
        PUSH_CATEGORY				VARCHAR(45),
		PUSH_TITLE					VARCHAR(255),
		PUSH_BODY					VARCHAR(255),
        PUSH_CREATED				DATETIME        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_PUSH_ID,
			CUR_USER_ID,
			CUR_USER_NAME,
			CUR_USER_COMP_SITE_ID,
			CUR_USER_TYPE,
			CUR_SENDER_ID,
			CUR_SENDER_TYPE,
			CUR_PUSH_CATEGORY_ID,
			CUR_PUSH_CATEGORY,
			CUR_PUSH_TITLE,
			CUR_PUSH_CREATED;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_MAIN_TOP_LISTS(
			PUSH_ID,
			USER_ID,
			USER_NAME,
			USER_COMP_SITE_ID,
			USER_TYPE,
			SENDER_ID,
			SENDER_TYPE,
			PUSH_CATEGORY_ID,
			PUSH_CATEGORY,
			PUSH_TITLE,
			PUSH_CREATED
		)
		VALUES(
			CUR_PUSH_ID,
			CUR_USER_ID,
			CUR_USER_NAME,
			CUR_USER_COMP_SITE_ID,
			CUR_USER_TYPE,
			CUR_SENDER_ID,
			CUR_SENDER_TYPE,
			CUR_PUSH_CATEGORY_ID,
			CUR_PUSH_CATEGORY,
			CUR_PUSH_TITLE,
			CUR_PUSH_CREATED
		);
        
        CALL sp_admin_main_top_lists_create_body(
			CUR_PUSH_ID,
            VAR_PUSH_BODY
        );
        
        UPDATE ADMIN_MAIN_TOP_LISTS
        SET PUSH_BODY = VAR_PUSH_BODY
        WHERE PUSH_ID = CUR_PUSH_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'PUSH_ID'					, PUSH_ID, 
        'USER_ID'					, USER_ID, 
        'USER_NAME'					, USER_NAME, 
        'USER_COMP_SITE_ID'			, USER_COMP_SITE_ID, 
        'USER_TYPE'					, USER_TYPE, 
        'SENDER_ID'					, SENDER_ID, 
        'SENDER_TYPE'				, SENDER_TYPE, 
        'PUSH_CATEGORY_ID'			, PUSH_CATEGORY_ID, 
        'PUSH_CATEGORY'				, PUSH_CATEGORY, 
        'PUSH_TITLE'				, PUSH_TITLE, 
        'PUSH_BODY'					, PUSH_BODY, 
        'PUSH_CREATED'				, PUSH_CREATED
	)) 
    INTO OUT_LISTS FROM ADMIN_MAIN_TOP_LISTS;
    
	DROP TABLE IF EXISTS ADMIN_MAIN_TOP_LISTS;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_main_top_lists_create_body`(
    IN IN_PUSH_ID						INT,
    OUT OUT_BODY						VARCHAR(255)
)
BEGIN

/*
Procedure Name 	: sp_admin_main_top_lists_create_body
Input param 	: 1개
Job 			: 관리자 메인에서 사용되는 리스트의 BODY를 만들어 반환한다.
Update 			: 2022.04.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_CATEGORY_ID				INT 				DEFAULT NULL;
	DECLARE VAR_SENDER_ID				BIGINT 				DEFAULT NULL;
	DECLARE VAR_SENDER_NAME				VARCHAR(255) 		DEFAULT NULL;
	DECLARE VAR_USER_ID					BIGINT 				DEFAULT NULL;
	DECLARE VAR_USER_NAME				VARCHAR(255)		DEFAULT NULL;
	DECLARE VAR_ORDER_CODE				VARCHAR(10) 		DEFAULT NULL;
	DECLARE VAR_PICKED					TINYINT 			DEFAULT FALSE;
    
    SELECT 
		A.CATEGORY_ID,
        A.SENDER_ID,
        IF(A.SENDER_ID = 0, '시스템', IF(B.AFFILIATED_SITE = 0, B.USER_NAME, C.SITE_NAME)),
        A.USER_ID,
        IF(A.USER_ID = 0, '시스템', IF(D.AFFILIATED_SITE = 0, D.USER_NAME, E.SITE_NAME)),
        F.ORDER_CODE
	INTO
		VAR_CATEGORY_ID,
        VAR_SENDER_ID,
        VAR_SENDER_NAME,
        VAR_USER_ID,
        VAR_USER_NAME,
        VAR_ORDER_CODE
	FROM PUSH_HISTORY A
    LEFT JOIN USERS B ON A.SENDER_ID = B.ID
    LEFT JOIN COMP_SITE C ON B.AFFILIATED_SITE = C.ID
    LEFT JOIN USERS D ON A.USER_ID = D.ID
    LEFT JOIN COMP_SITE E ON D.AFFILIATED_SITE = E.ID
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER F ON A.ORDER_ID = F.ID
    WHERE A.ID = IN_PUSH_ID;
    
	IF VAR_CATEGORY_ID = 1 THEN
		SET OUT_BODY = CONCAT('[', VAR_ORDER_CODE, ']의 폐기물 배출신청을 하였습니다.');
        SET VAR_PICKED = TRUE;
	END IF;
    
	IF VAR_CATEGORY_ID = 2 THEN
		SET OUT_BODY = CONCAT('[', VAR_ORDER_CODE, ']에 대하여 배출자가 방문신청을 수락하였습니다.');
        SET VAR_PICKED = TRUE;
	END IF;
    
	IF VAR_CATEGORY_ID = 3 THEN
		SET OUT_BODY = CONCAT('[', VAR_ORDER_CODE, ']에 방문신청이 접수되었습니다.');
        SET VAR_PICKED = TRUE;
	END IF;
    
	IF VAR_PICKED = FALSE THEN
		SET OUT_BODY = '기타입니다.';
	END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retreve_site_info_without_handler`(
	IN IN_SITE_ID						BIGINT,
    OUT OUT_SITE_LIST					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_retreve_site_info_without_handler
Input param 	: 1개
Job 			: 사이트의 정보를 반환한다.
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_SITE_ID							BIGINT;   
    DECLARE CUR_COMP_ID							BIGINT;   
    DECLARE CUR_CREATED_AT						DATETIME;  
    DECLARE CUR_UPDATED_AT						DATETIME;  
    DECLARE CUR_SITE_NAME						VARCHAR(255);   
    DECLARE CUR_PERMIT_REG_CODE					VARCHAR(12);  
    DECLARE CUR_B_CODE							VARCHAR(10); 
    DECLARE CUR_ADDR							VARCHAR(255);
    DECLARE CUR_PERMIT_REG_IMG_PATH				VARCHAR(255);
    DECLARE CUR_USER_TYPE						INT;
    DECLARE CUR_LAT								DECIMAL(12,9);
    DECLARE CUR_LNG								DECIMAL(12,9);
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
		A.COMP_ID, 
        A.CREATED_AT,
        A.UPDATED_AT,
        A.SITE_NAME,
        A.PERMIT_REG_CODE,
        A.KIKCD_B_CODE,
        A.ADDR,
        A.PERMIT_REG_IMG_PATH,
        E.USER_TYPE,
        A.LAT,
        A.LNG
    FROM COMP_SITE A
    LEFT JOIN COMPANY B ON A.COMP_ID = B.ID
    LEFT JOIN KIKCD_B C ON A.KIKCD_B_CODE = C.B_CODE
    LEFT JOIN KIKCD_B D ON B.KIKCD_B_CODE = D.B_CODE
    LEFT JOIN WSTE_TRMT_BIZ E ON A.TRMT_BIZ_CODE = E.CODE
    WHERE A.ID = IN_SITE_ID;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    SET OUT_SITE_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_SITE_INFO_TEMP (
		SITE_ID							BIGINT,
		COMP_ID							BIGINT,
		CREATED_AT						DATETIME,
		UPDATED_AT						DATETIME,
		SITE_NAME						VARCHAR(255),
		PERMIT_REG_CODE					VARCHAR(12),
		B_CODE							VARCHAR(10),
		ADDR							VARCHAR(255),
		PERMIT_REG_IMG_PATH				VARCHAR(255),
		LAST_PAGE						INT,
        ADDRESS_INFO					JSON,
        COMPANY_INFO					JSON,
        WSTE_INFO						JSON,
        SITE_INFO						JSON,
        SITE_LIST						JSON,
        USER_TYPE						INT
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_SITE_ID,
			CUR_COMP_ID,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_SITE_NAME,
			CUR_PERMIT_REG_CODE,
			CUR_B_CODE,
			CUR_ADDR,
			CUR_PERMIT_REG_IMG_PATH,
			CUR_USER_TYPE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_RETRIEVE_SITE_INFO_TEMP(
			SITE_ID,
			COMP_ID,
			CREATED_AT,
			UPDATED_AT,
			SITE_NAME,
			PERMIT_REG_CODE,
			B_CODE,
			ADDR,
			PERMIT_REG_IMG_PATH,
			USER_TYPE
		)
		VALUES(
			CUR_SITE_ID,
			CUR_COMP_ID,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_SITE_NAME,
			CUR_PERMIT_REG_CODE,
			CUR_B_CODE,
			CUR_ADDR,
			CUR_PERMIT_REG_IMG_PATH,
			CUR_USER_TYPE
		);
        
        CALL sp_get_address_with_bcode(
			CUR_B_CODE,
            @ADDRESS_INFO
        );
        
        CALL sp_get_company_info(
			CUR_COMP_ID,
            @COMPANY_INFO
        );
        
        CALL sp_get_site_wste_info(
			CUR_SITE_ID,
            @WSTE_INFO
        );
        
        CALL sp_get_site_info_simple(
			CUR_SITE_ID,
            @SITE_INFO
        );
        
		CALL sp_req_policy_direction(
			'circle_range',
			@circle_range
		);
        
        CALL sp_get_site_list_inside_range_without_handler(
			CUR_USER_TYPE,
            @circle_range,
            CUR_LAT,
            CUR_LNG,
            @rtn_val,
            @msg_txt,
            @SITE_LIST
        );
        
		SET @LAST_PAGE = CEILING(@RECORD_COUNT / @PAGE_SIZE);
        
        UPDATE ADMIN_RETRIEVE_SITE_INFO_TEMP
        SET 
			ADDRESS_INFO = @ADDRESS_INFO,
			COMPANY_INFO = @COMPANY_INFO,
			WSTE_INFO = @WSTE_INFO,
			SITE_INFO = @SITE_INFO,
			LAST_PAGE = @LAST_PAGE
        WHERE SITE_ID = CUR_SITE_ID;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'SITE_ID'					, SITE_ID, 
        'CREATED_AT'				, CREATED_AT, 
        'UPDATED_AT'				, UPDATED_AT, 
        'SITE_NAME'					, SITE_NAME, 
        'PERMIT_REG_CODE'			, PERMIT_REG_CODE, 
        'B_CODE'					, B_CODE, 
        'ADDR'						, ADDR, 
        'PERMIT_REG_IMG_PATH'		, PERMIT_REG_IMG_PATH, 
        'LAST_PAGE'					, LAST_PAGE, 
        'ADDRESS_INFO'				, ADDRESS_INFO, 
        'COMPANY_INFO'				, COMPANY_INFO, 
        'WSTE_INFO'					, WSTE_INFO, 
        'SITE_INFO'					, SITE_INFO, 
        'SITE_LIST'					, SITE_LIST
	)) 
    INTO OUT_SITE_LIST FROM ADMIN_RETRIEVE_SITE_INFO_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_SITE_INFO_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_chats`(
    IN IN_PARAMS					JSON
)
BEGIN
	DECLARE VAR_USER_ID					BIGINT DEFAULT NULL;
	DECLARE VAR_ROOM_ID					BIGINT DEFAULT NULL;
	DECLARE VAR_PAGE_SIZE				INT DEFAULT NULL;
	DECLARE VAR_OFFSET_SIZE				INT DEFAULT NULL;
	DECLARE rtn_val						INT DEFAULT 0;
	DECLARE msg_txt						VARCHAR(200) DEFAULT 'success';
	DECLARE json_data					JSON DEFAULT NULL;
    
	SELECT USER_ID, ROOM_ID, PAGE_SIZE, OFFSET_SIZE
    INTO VAR_USER_ID, VAR_ROOM_ID, VAR_PAGE_SIZE, VAR_OFFSET_SIZE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		ROOM_ID	 				BIGINT				PATH "$.ROOM_ID",
		PAGE_SIZE	 			INT					PATH "$.PAGE_SIZE",
		OFFSET_SIZE	 			INT					PATH "$.OFFSET_SIZE"
	)) AS PARAMS;
    
    CALL sp_admin_set_is_read_true(
		VAR_ROOM_ID,
        VAR_USER_ID,
        rtn_val,
        msg_txt
    );
    
	CALL sp_admin_retrieve_chats_without_handler(
		VAR_ROOM_ID,
		VAR_USER_ID,
        VAR_PAGE_SIZE,
        VAR_OFFSET_SIZE,
        json_data
    );
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_chats_without_handler`(
    IN IN_ROOM_ID					BIGINT,
    IN IN_USER_ID					BIGINT,
    IN IN_PAGE_SIZE					INT,
    IN IN_OFFSET_SIZE				INT,
    OUT OUT_CHAT					JSON
)
BEGIN

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;   
    DECLARE VAR_AVATAR_PATH						VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_SITE_NAME						VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_FCM_TOKEN						VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_USER_COUNT						INT DEFAULT 0;   
    DECLARE JSON_CHAT_LIST						JSON DEFAULT NULL;
    DECLARE CUR_DATE							DATE; 
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT DISTINCT DATE(CREATED_AT)
    FROM CHATS
	WHERE 
		ROOM_ID = IN_ROOM_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_CHATS_WITHOUT_HANDLER_TEMP (
		VAR_DATE						DATE,
		DAILY_CHATS						JSON,
        AVATAR_PATH						VARCHAR(255),
        SITE_NAME						VARCHAR(255),
        FCM_TOKEN						VARCHAR(255)
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_DATE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_RETRIEVE_CHATS_WITHOUT_HANDLER_TEMP(
			VAR_DATE
		)
		VALUES(
			CUR_DATE
		);
        
        CALL sp_admin_retrieve_daily_chats_without_handler(
			IN_ROOM_ID,
            IN_USER_ID,
            CUR_DATE,
            JSON_CHAT_LIST
        );
        
        
        SELECT COUNT(A.ID) 
        INTO VAR_USER_COUNT
        FROM USERS A
        LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID
        WHERE A.ID IN (SELECT USER_ID FROM CHATS WHERE ROOM_ID = IN_ROOM_ID AND USER_ID NOT IN (IN_USER_ID));
        
        IF VAR_USER_COUNT > 0 THEN
			SELECT A.AVATAR_PATH, B.SITE_NAME, A.FCM
			INTO VAR_AVATAR_PATH, VAR_SITE_NAME, VAR_FCM_TOKEN
			FROM USERS A
			LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID
			WHERE A.ID IN (SELECT USER_ID FROM CHATS WHERE ROOM_ID = IN_ROOM_ID AND USER_ID NOT IN (IN_USER_ID));
		END IF;
        
		UPDATE ADMIN_RETRIEVE_CHATS_WITHOUT_HANDLER_TEMP 
        SET 
			DAILY_CHATS 	= JSON_CHAT_LIST,
			AVATAR_PATH 	= VAR_AVATAR_PATH,
			FCM_TOKEN 		= VAR_FCM_TOKEN,
			SITE_NAME 		= VAR_SITE_NAME
        WHERE VAR_DATE 		= CUR_DATE;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'VAR_DATE'			, VAR_DATE, 
        'DAILY_CHATS'		, DAILY_CHATS, 
        'AVATAR_PATH'		, AVATAR_PATH, 
        'FCM_TOKEN'			, FCM_TOKEN, 
        'SITE_NAME'			, SITE_NAME
	)) 
    INTO OUT_CHAT FROM ADMIN_RETRIEVE_CHATS_WITHOUT_HANDLER_TEMP;    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_CHATS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_daily_chats_without_handler`(
    IN IN_ROOM_ID					BIGINT,
    IN IN_USER_ID					BIGINT,
    IN IN_DATE						DATE,
    OUT OUT_CHAT					JSON
)
BEGIN
	DECLARE rtn_val					INT DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200) DEFAULT 'success';
    
    CALL sp_admin_set_is_read_true(
		IN_ROOM_ID,
        IN_USER_ID,
        rtn_val,
        msg_txt
    );
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_DAILY_CHATS_WITHOUT_HANDLER_TEMP (
		USER_ID									BIGINT,
		CHAT_ID									BIGINT,
		ROOM_ID									VARCHAR(100),
		MESSAGE									TEXT,
        CREATED_AT								DATETIME,
        IS_READ									TINYINT,
        DELETED									TINYINT,
        MEDIA									TINYINT
	);        
    
    INSERT INTO ADMIN_RETRIEVE_DAILY_CHATS_WITHOUT_HANDLER_TEMP(
		USER_ID, 
		CHAT_ID, 
        ROOM_ID, 
        MESSAGE, 
        CREATED_AT, 
        IS_READ,
        DELETED,
        MEDIA
    )
    SELECT 
		USER_ID, 
		ID, 
        ROOM_ID, 
        IF(DELETED = FALSE, MESSAGE, '삭제된 메시지입니다.'),
        CREATED_AT, 
        IS_READ,
        DELETED,
        MEDIA
    FROM CHATS
    WHERE 
		ROOM_ID = IN_ROOM_ID AND
        DATE(CREATED_AT) = IN_DATE
    ORDER BY CREATED_AT ASC;  
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'USER_ID'				, USER_ID, 
		'CHAT_ID'				, CHAT_ID, 
        'ROOM_ID'				, ROOM_ID, 
        'MESSAGE'				, MESSAGE, 
        'CREATED_AT'			, CREATED_AT, 
        'IS_READ'				, IS_READ, 
        'DELETED'				, DELETED, 
        'MEDIA'					, MEDIA
	)) 
    INTO OUT_CHAT 
    FROM ADMIN_RETRIEVE_DAILY_CHATS_WITHOUT_HANDLER_TEMP;
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_DAILY_CHATS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_decision_list`(
    IN IN_PARAMS					JSON
)
BEGIN
    DECLARE VAR_USER_ID				BIGINT 			DEFAULT NULL;
	DECLARE rtn_val					INT				DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200)	DEFAULT 'success';
    DECLARE json_data				JSON			DEFAULT NULL;
    DECLARE JSON_DECISION_LIST		JSON			DEFAULT NULL;
    
	SELECT USER_ID INTO VAR_USER_ID
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID"
	)) AS PARAMS;  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_DECISION_LIST_TEMP (
        USER_ID					BIGINT,
        DECISION_LIST			JSON,
        INPUT_PARAM				JSON
	);
    
	CALL sp_admin_retrieve_decision_list_without_handler(
		JSON_DECISION_LIST
	);
    
	INSERT INTO 
	ADMIN_RETRIEVE_DECISION_LIST_TEMP(
		USER_ID,
		DECISION_LIST,
		INPUT_PARAM
	)
	VALUES(
		VAR_USER_ID,
		JSON_DECISION_LIST,
		IN_PARAMS
	);
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'USER_ID'				, USER_ID,
        'DECISION_LIST'			, DECISION_LIST,
        'INPUT_PARAM'			, INPUT_PARAM
	)) 
    INTO json_data FROM ADMIN_RETRIEVE_DECISION_LIST_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_DECISION_LIST_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_decision_list_without_handler`(
    OUT DECISION_LIST			JSON
)
BEGIN
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'			, id, 
            'TITLE'			, title, 
            'DATA_TYPE'		, data_type, 
            'DIRECTION'		, direction
		)
	) INTO DECISION_LIST
    FROM sys_policy
    WHERE active = true;  
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_logs`(
    IN IN_PARAMS					JSON
)
BEGIN
    DECLARE VAR_ADMIN_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_ORDER_ID					BIGINT 			DEFAULT NULL;
    DECLARE VAR_SEARCH						VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_PAGE_SIZE					INT 			DEFAULT NULL;
    DECLARE JSON_LOG_LISTS					JSON 			DEFAULT NULL;
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON 			DEFAULT NULL;
    
	SELECT 
		ADMIN_ID, 
		ORDER_ID, 
        SEARCH, 
        OFFSET_SIZE, 
        PAGE_SIZE
    INTO 
		VAR_ADMIN_ID, 
		VAR_ORDER_ID, 
        VAR_SEARCH, 
        VAR_OFFSET_SIZE, 
        VAR_PAGE_SIZE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ADMIN_ID 				BIGINT 				PATH "$.ADMIN_ID",
		ORDER_ID 				BIGINT				PATH "$.ORDER_ID",
		SEARCH	 				VARCHAR(255)		PATH "$.SEARCH",
		OFFSET_SIZE 			INT 				PATH "$.OFFSET_SIZE",
		PAGE_SIZE 				INT 				PATH "$.PAGE_SIZE"
	)) AS PARAMS;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_LOGS_TEMP (
        ADMIN_ID				BIGINT,
        ORDER_ID				BIGINT,
        SEARCH					VARCHAR(255),
        OFFSET_SIZE				INT,
        PAGE_SIZE				INT,
        LOGS					JSON
	);  
    CALL sp_admin_retrieve_logs_without_handler(
		VAR_ORDER_ID,
		VAR_SEARCH,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
		JSON_LOG_LISTS
    );
    
	INSERT INTO 
	ADMIN_RETRIEVE_LOGS_TEMP(
		ADMIN_ID,
		ORDER_ID,
		SEARCH,
		OFFSET_SIZE,
		PAGE_SIZE,
		LOGS
	)
	VALUES(
		VAR_ADMIN_ID,
		VAR_ORDER_ID,
		VAR_SEARCH,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
		JSON_LOG_LISTS
	);
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'ADMIN_ID'				, ADMIN_ID,
        'ORDER_ID'				, ORDER_ID,
        'SEARCH'				, SEARCH,
        'OFFSET_SIZE'			, OFFSET_SIZE,
        'PAGE_SIZE'				, PAGE_SIZE,
        'LOGS'					, LOGS
	)) 
    INTO json_data FROM ADMIN_RETRIEVE_LOGS_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_LOGS_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_prospective_site_info`(
    IN IN_PARAMS					JSON
)
BEGIN
    DECLARE VAR_USER_ID				BIGINT DEFAULT NULL;
    DECLARE VAR_TYPE_INDEX			INT DEFAULT NULL;
    DECLARE VAR_CIRCLE_RANGE		INT DEFAULT 0;
    DECLARE JSON_SITE_INFO			JSON DEFAULT NULL;
    DECLARE rtn_val					INT DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200) DEFAULT 'success';
    DECLARE json_data				JSON DEFAULT NULL;
    
    DECLARE VAR_ADMIN_ID			BIGINT DEFAULT NULL;
    DECLARE VAR_SITE_ID				BIGINT DEFAULT NULL;
    DECLARE VAR_NOTE_LIST			JSON DEFAULT NULL; 
    DECLARE VAR_MEMBER_ID			BIGINT 			DEFAULT NULL;
    DECLARE VAR_ORDER_ID			BIGINT 			DEFAULT NULL;
    DECLARE VAR_BIDDING_ID			BIGINT 			DEFAULT NULL;
    DECLARE VAR_TRANSACTION_ID		BIGINT 			DEFAULT NULL;
    DECLARE VAR_REPORT_ID			BIGINT 			DEFAULT NULL;
    DECLARE VAR_SITE_CATEGORY		TINYINT			DEFAULT NULL;
    DECLARE VAR_SEARCH				VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE			INT 			DEFAULT 0;
    DECLARE VAR_PAGE_SIZE			INT 			DEFAULT 1000;
    
	SELECT USER_ID, SITE_ID, SITE_CATEGORY
    INTO VAR_ADMIN_ID, VAR_SITE_ID, VAR_SITE_CATEGORY
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		SITE_ID	 				BIGINT				PATH "$.SITE_ID",
		SITE_CATEGORY			TINYINT				PATH "$.SITE_CATEGORY"
	)) AS PARAMS;   
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_PROSPECTIVE_SITE_INFO_TEMP (
        INPUT_PARAM				JSON,
        SITE_INFO				JSON,
        NOTES					JSON
	);
    
	CALL sp_admin_retrieve_prospective_site_info_without_handler(
		VAR_SITE_ID,
		JSON_SITE_INFO
	);
    
	INSERT INTO 
	ADMIN_RETRIEVE_PROSPECTIVE_SITE_INFO_TEMP(
        INPUT_PARAM,
		SITE_INFO,
        NOTES
	)
	VALUES(
		IN_PARAMS,
		JSON_SITE_INFO,
		VAR_NOTE_LIST
	);
    
    CALL sp_admin_get_new_notes_without_handler(
		VAR_ADMIN_ID,
		VAR_MEMBER_ID,
		VAR_SITE_ID,
		VAR_ORDER_ID,
		VAR_BIDDING_ID,
		VAR_TRANSACTION_ID,
		VAR_REPORT_ID,
		VAR_SITE_CATEGORY,
		VAR_SEARCH,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
        VAR_NOTE_LIST
    ); 
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'INPUT_PARAM'			, INPUT_PARAM,
        'SITE_INFO'				, SITE_INFO,
        'NOTES'					, VAR_NOTE_LIST
	)) 
    INTO json_data FROM ADMIN_RETRIEVE_PROSPECTIVE_SITE_INFO_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_PROSPECTIVE_SITE_INFO_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_prospective_site_info_without_handler`(
	IN IN_SITE_ID						BIGINT,
    OUT OUT_SITE_INFO					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_retrieve_prospective_site_info_without_handler
Input param 	: 1개
Job 			: 사이트의 정보를 반환한다.
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;   
    DECLARE CUR_ID								BIGINT;   
    DECLARE CUR_COMP_NAME						VARCHAR(255);   
    DECLARE CUR_REP_NAME						VARCHAR(255);  
    DECLARE CUR_CONTACT							VARCHAR(255);  
    DECLARE CUR_FAX								VARCHAR(255);   
    DECLARE CUR_EMAIL							VARCHAR(255);  
    DECLARE CUR_BIZ_CODE						VARCHAR(4); 
    DECLARE CUR_WEBSITE							VARCHAR(255);
    DECLARE CUR_BCODE							VARCHAR(10);
    DECLARE CUR_ADDR							VARCHAR(255);
    DECLARE CUR_LAT								DECIMAL(12,9);
    DECLARE CUR_LNG								DECIMAL(12,9);
    DECLARE CUR_IS_TRANSIT						TINYINT;
    DECLARE CUR_CLOSED							TINYINT;
    DECLARE CUR_BIZ_NAME						VARCHAR(255);
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE VAR_LAST_PAGE						INT 			DEFAULT NULL;
	DECLARE VAR_RECORD_COUNT					INT 			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
		A.COMP_NAME, 
        A.REP_NAME,
        A.CONTACT,
        A.FAX,
        A.EMAIL,
        A.BIZ_CODE,
        A.WEBSITE,
        A.BCODE,
        A.ADDR,
        A.LAT,
        A.LNG,
        A.IS_TRANSIT,
        A.CLOSED,
        C.NAME
    FROM PROSPECTIVE_MEMBERS A
    LEFT JOIN KIKCD_B B ON A.BCODE = B.B_CODE
    LEFT JOIN WSTE_TRMT_BIZ C ON A.BIZ_CODE = C.CODE
    WHERE A.ID = IN_SITE_ID;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    SET OUT_SITE_INFO = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_PROSPECTIVE_SITE_INFO_WITHOUT_HANDLER (
		ID								BIGINT,   
		COMP_NAME						VARCHAR(255),   
		REP_NAME						VARCHAR(255),  
		CONTACT							VARCHAR(255),  
		FAX								VARCHAR(255),   
		EMAIL							VARCHAR(255),  
		BIZ_CODE						VARCHAR(4), 
		WEBSITE							VARCHAR(255),
		BCODE							VARCHAR(10),
		ADDR							VARCHAR(255),
		LAT								DECIMAL(12,9),
		LNG								DECIMAL(12,9),
		IS_TRANSIT						TINYINT,
		CLOSED							TINYINT,
		BIZ_NAME						VARCHAR(255)
	);  
    
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_COMP_NAME,
			CUR_REP_NAME,
			CUR_CONTACT,
			CUR_FAX,
			CUR_EMAIL,
			CUR_BIZ_CODE,
			CUR_WEBSITE,
			CUR_BCODE,
			CUR_ADDR,
			CUR_LAT,
			CUR_LNG,
			CUR_IS_TRANSIT,
			CUR_CLOSED,
			CUR_BIZ_NAME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_RETRIEVE_PROSPECTIVE_SITE_INFO_WITHOUT_HANDLER(
			ID,
			COMP_NAME,
			REP_NAME,
			CONTACT,
			FAX,
			EMAIL,
			BIZ_CODE,
			WEBSITE,
			BCODE,
			ADDR,
			LAT,
			LNG,
			IS_TRANSIT,
			CLOSED,
			BIZ_NAME
		)
		VALUES(
			CUR_ID,
			CUR_COMP_NAME,
			CUR_REP_NAME,
			CUR_CONTACT,
			CUR_FAX,
			CUR_EMAIL,
			CUR_BIZ_CODE,
			CUR_WEBSITE,
			CUR_BCODE,
			CUR_ADDR,
			CUR_LAT,
			CUR_LNG,
			CUR_IS_TRANSIT,
			CUR_CLOSED,
			CUR_BIZ_NAME
		);
        
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'					, ID, 
        'COMP_NAME'				, COMP_NAME, 
        'REP_NAME'				, REP_NAME, 
        'CONTACT'				, CONTACT, 
        'FAX'					, FAX, 
        'EMAIL'					, EMAIL, 
        'BIZ_CODE'				, BIZ_CODE, 
        'WEBSITE'				, WEBSITE, 
        'BCODE'					, BCODE, 
        'ADDR'					, ADDR, 
        'LAT'					, LAT, 
        'LNG'					, LNG, 
        'IS_TRANSIT'			, IS_TRANSIT, 
        'CLOSED'				, CLOSED, 
        'BIZ_NAME'				, BIZ_NAME
	)) 
    INTO OUT_SITE_INFO FROM ADMIN_RETRIEVE_PROSPECTIVE_SITE_INFO_WITHOUT_HANDLER;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_PROSPECTIVE_SITE_INFO_WITHOUT_HANDLER;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_prospective_site_lists`(
    IN IN_PARAMS					JSON
)
BEGIN
    DECLARE VAR_USER_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_SEARCH						VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_PAGE_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_LAST_PAGE					INT 			DEFAULT NULL;
    DECLARE VAR_OPEN						TINYINT 		DEFAULT NULL;
    DECLARE VAR_TRANSIT						TINYINT 		DEFAULT NULL;
    DECLARE JSON_SITE_LISTS					JSON 			DEFAULT NULL;
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON 			DEFAULT NULL;
    
	SELECT 
		USER_ID, 
        SEARCH, 
        OFFSET_SIZE, 
        PAGE_SIZE/*, 
        OPEN, 
        TRANSIT*/
    INTO 
		VAR_USER_ID, 
        VAR_SEARCH, 
        VAR_OFFSET_SIZE, 
        VAR_PAGE_SIZE/*, 
        VAR_OPEN, 
        VAR_TRANSIT*/
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		SEARCH	 				VARCHAR(255)		PATH "$.SEARCH",
		OFFSET_SIZE 			INT 				PATH "$.OFFSET_SIZE",
		PAGE_SIZE 				INT 				PATH "$.PAGE_SIZE"/*,
		OPEN					TINYINT				PATH "$.OPEN",
		TRANSIT					TINYINT				PATH "$.TRANSIT"*/
	)) AS PARAMS;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_PROSPECTIVE_SITE_LISTS_TEMP (
        INPUT_PARAM				JSON,
        SITE_LISTS				JSON,
        LAST_PAGE				INT
	);  
    
    CALL sp_admin_retrieve_prospective_site_lists_without_handler(
		VAR_SEARCH,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
		VAR_OPEN,
		VAR_TRANSIT,
		VAR_LAST_PAGE,
		JSON_SITE_LISTS
    );
    
	INSERT INTO 
	ADMIN_RETRIEVE_PROSPECTIVE_SITE_LISTS_TEMP(
		INPUT_PARAM,
		SITE_LISTS,
		LAST_PAGE
	)
	VALUES(
		IN_PARAMS,
		JSON_SITE_LISTS,
		VAR_LAST_PAGE
	);
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'INPUT_PARAM'		, INPUT_PARAM,
        'SITE_LISTS'		, SITE_LISTS,
        'LAST_PAGE'			, LAST_PAGE
	)) 
    INTO json_data FROM ADMIN_RETRIEVE_PROSPECTIVE_SITE_LISTS_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_PROSPECTIVE_SITE_LISTS_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_prospective_site_lists_without_handler`(
	IN IN_SEARCH						VARCHAR(255),
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    IN IN_OPEN							TINYINT,
    IN IN_TRANSIT						TINYINT,
    OUT OUT_LAST_PAGE					INT,
    OUT OUT_SITE_LIST					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_retrieve_prospective_site_lists_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT 		DEFAULT FALSE;    
    DECLARE CUR_ID								BIGINT;   
    DECLARE CUR_COMP_NAME						VARCHAR(255);   
    DECLARE CUR_REP_NAME						VARCHAR(255);  
    DECLARE CUR_CONTACT							VARCHAR(255);  
    DECLARE CUR_FAX								VARCHAR(255);   
    DECLARE CUR_EMAIL							VARCHAR(255);  
    DECLARE CUR_BIZ_CODE						VARCHAR(4); 
    DECLARE CUR_WEBSITE							VARCHAR(255);
    DECLARE CUR_BCODE							VARCHAR(10);
    DECLARE CUR_ADDR							VARCHAR(255);
    DECLARE CUR_LAT								DECIMAL(12,9);
    DECLARE CUR_LNG								DECIMAL(12,9);
    DECLARE CUR_IS_TRANSIT						TINYINT;
    DECLARE CUR_CLOSED							TINYINT;
    DECLARE CUR_BIZ_NAME						VARCHAR(255);
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE VAR_LAST_PAGE						INT 			DEFAULT NULL;
	DECLARE VAR_RECORD_COUNT					INT 			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID, 
		A.COMP_NAME, 
        A.REP_NAME,
        A.CONTACT,
        A.FAX,
        A.EMAIL,
        A.BIZ_CODE,
        A.WEBSITE,
        A.BCODE,
        A.ADDR,
        A.LAT,
        A.LNG,
        A.IS_TRANSIT,
        A.CLOSED,
        C.NAME
    FROM PROSPECTIVE_MEMBERS A
    LEFT JOIN KIKCD_B B ON A.BCODE = B.B_CODE
    LEFT JOIN WSTE_TRMT_BIZ C ON A.BIZ_CODE = C.CODE
    WHERE 
		IF(IN_OPEN IS NULL,
			A.ID > 0,
            IF (IN_OPEN = TRUE, 
				A.CLOSED = FALSE,
                A.CLOSED = TRUE
            )
        ) AND
		IF(IN_TRANSIT IS NULL,
			A.ID > 0,
			A.IS_TRANSIT = IN_TRANSIT
        ) AND
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.COMP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.CONTACT LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.FAX LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.EMAIL LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.WEBSITE LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.BCODE LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%')
			)
		)
    ORDER BY A.ID DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	SELECT COUNT(A.ID) INTO VAR_RECORD_COUNT
    FROM PROSPECTIVE_MEMBERS A
    LEFT JOIN KIKCD_B B ON A.BCODE = B.B_CODE
    LEFT JOIN WSTE_TRMT_BIZ C ON A.BIZ_CODE = C.CODE
    WHERE 
		IF(IN_OPEN IS NULL,
			A.ID > 0,
            IF (IN_OPEN = TRUE, 
				A.CLOSED = FALSE,
                A.CLOSED = TRUE
            )
        ) AND
		IF(IN_TRANSIT IS NULL,
			A.ID > 0,
			A.IS_TRANSIT = IN_TRANSIT
        ) AND
		IF(IN_SEARCH IS NULL,
			A.ID > 0,
			A.ID > 0 AND
			(
				A.COMP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.CONTACT LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.FAX LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.EMAIL LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.WEBSITE LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.BCODE LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%')
			)
		);
        
	SET OUT_LAST_PAGE = CEILING(VAR_RECORD_COUNT / IN_PAGE_SIZE);
    
    SET OUT_SITE_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_PROSPECTIVE_SITE_LISTS_WITHOUT_HANDLER (
		ID								BIGINT,   
		COMP_NAME						VARCHAR(255),   
		REP_NAME						VARCHAR(255),  
		CONTACT							VARCHAR(255),  
		FAX								VARCHAR(255),   
		EMAIL							VARCHAR(255),  
		BIZ_CODE						VARCHAR(4), 
		WEBSITE							VARCHAR(255),
		BCODE							VARCHAR(10),
		ADDR							VARCHAR(255),
		LAT								DECIMAL(12,9),
		LNG								DECIMAL(12,9),
		IS_TRANSIT						TINYINT,
		CLOSED							TINYINT,
		BIZ_NAME						VARCHAR(255)
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_COMP_NAME,
			CUR_REP_NAME,
			CUR_CONTACT,
			CUR_FAX,
			CUR_EMAIL,
			CUR_BIZ_CODE,
			CUR_WEBSITE,
			CUR_BCODE,
			CUR_ADDR,
			CUR_LAT,
			CUR_LNG,
			CUR_IS_TRANSIT,
			CUR_CLOSED,
			CUR_BIZ_NAME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_RETRIEVE_PROSPECTIVE_SITE_LISTS_WITHOUT_HANDLER(
			ID,
			COMP_NAME,
			REP_NAME,
			CONTACT,
			FAX,
			EMAIL,
			BIZ_CODE,
			WEBSITE,
			BCODE,
			ADDR,
			LAT,
			LNG,
			IS_TRANSIT,
			CLOSED,
			BIZ_NAME
		)
		VALUES(
			CUR_ID,
			CUR_COMP_NAME,
			CUR_REP_NAME,
			CUR_CONTACT,
			CUR_FAX,
			CUR_EMAIL,
			CUR_BIZ_CODE,
			CUR_WEBSITE,
			CUR_BCODE,
			CUR_ADDR,
			CUR_LAT,
			CUR_LNG,
			CUR_IS_TRANSIT,
			CUR_CLOSED,
			CUR_BIZ_NAME
		);
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'					, ID, 
        'COMP_NAME'				, COMP_NAME, 
        'REP_NAME'				, REP_NAME, 
        'CONTACT'				, CONTACT, 
        'FAX'					, FAX, 
        'EMAIL'					, EMAIL, 
        'BIZ_CODE'				, BIZ_CODE, 
        'WEBSITE'				, WEBSITE, 
        'BCODE'					, BCODE, 
        'ADDR'					, ADDR, 
        'LAT'					, LAT, 
        'LNG'					, LNG, 
        'IS_TRANSIT'			, IS_TRANSIT, 
        'CLOSED'				, IF(CLOSED = TRUE, FALSE, TRUE), 
        'BIZ_NAME'				, BIZ_NAME
	)) 
    INTO OUT_SITE_LIST FROM ADMIN_RETRIEVE_PROSPECTIVE_SITE_LISTS_WITHOUT_HANDLER;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_PROSPECTIVE_SITE_LISTS_WITHOUT_HANDLER;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_site_info`(
    IN IN_PARAMS					JSON
)
BEGIN
    DECLARE VAR_USER_ID				BIGINT DEFAULT NULL;
    DECLARE VAR_TYPE_INDEX			INT DEFAULT NULL;
    DECLARE VAR_CIRCLE_RANGE		INT DEFAULT 0;
    DECLARE JSON_SITE_INFO			JSON DEFAULT NULL;
    DECLARE rtn_val					INT DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200) DEFAULT 'success';
    DECLARE json_data				JSON DEFAULT NULL;
    
    DECLARE VAR_ADMIN_ID			BIGINT DEFAULT NULL;
    DECLARE VAR_MEMBER_ID			BIGINT DEFAULT NULL;
    DECLARE VAR_SITE_ID				BIGINT DEFAULT NULL;
    DECLARE VAR_ORDER_ID			BIGINT DEFAULT NULL;
    DECLARE VAR_BIDDING_ID			BIGINT DEFAULT NULL;
    DECLARE VAR_TRANSACTION_ID		BIGINT DEFAULT NULL;
    DECLARE VAR_REPORT_ID			BIGINT DEFAULT NULL;
    DECLARE VAR_SITE_CATEGORY		TINYINT DEFAULT TRUE;
    DECLARE VAR_SEARCH				VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE			INT DEFAULT 0;
    DECLARE VAR_PAGE_SIZE			INT DEFAULT 1000;
    DECLARE VAR_NOTE_LIST			JSON DEFAULT NULL;
    
	SELECT USER_ID, SITE_ID, TYPE_INDEX, CIRCLE_RANGE
    INTO VAR_ADMIN_ID, VAR_SITE_ID, VAR_TYPE_INDEX, VAR_CIRCLE_RANGE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		SITE_ID	 				BIGINT				PATH "$.SITE_ID",
		TYPE_INDEX				INT					PATH "$.TYPE_INDEX",
        CIRCLE_RANGE			INT					PATH "$.CIRCLE_RANGE"
	)) AS PARAMS;   
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_SITE_INFO_TEMP_ROOT (
        USER_ID					BIGINT,
        SITE_ID					BIGINT,
        SITE_INFO				JSON,
        CIRCLE_RANGE			INT,
        NOTES					JSON,
        INPUT_PARAM				JSON
	);
    
	CALL sp_admin_retrieve_site_info_without_handler(
		VAR_SITE_ID,
		VAR_TYPE_INDEX,
		VAR_CIRCLE_RANGE,
		JSON_SITE_INFO
	);
    
    CALL sp_admin_get_new_notes_without_handler(
		VAR_ADMIN_ID,
		VAR_MEMBER_ID,
		VAR_SITE_ID,
		VAR_ORDER_ID,
		VAR_BIDDING_ID,
		VAR_TRANSACTION_ID,
		VAR_REPORT_ID,
		VAR_SITE_CATEGORY,
		VAR_SEARCH,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
        VAR_NOTE_LIST
    );
    
	INSERT INTO 
	ADMIN_RETRIEVE_SITE_INFO_TEMP_ROOT(
		USER_ID,
		SITE_ID,
		SITE_INFO,
        CIRCLE_RANGE,
        NOTES,
        INPUT_PARAM
	)
	VALUES(
		VAR_USER_ID,
		VAR_SITE_ID,
		JSON_SITE_INFO,
		VAR_CIRCLE_RANGE,
		VAR_NOTE_LIST,
		IN_PARAMS
	);
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'USER_ID'				, USER_ID,
        'SITE_ID'				, SITE_ID,
        'SITE_INFO'				, SITE_INFO,
        'CIRCLE_RANGE'			, CIRCLE_RANGE,
        'NOTES'					, NOTES,
        'INPUT_PARAM'			, INPUT_PARAM
	)) 
    INTO json_data FROM ADMIN_RETRIEVE_SITE_INFO_TEMP_ROOT;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_SITE_INFO_TEMP_ROOT;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_site_info_without_handler`(
	IN IN_SITE_ID						BIGINT,
	IN IN_TYPE_INDEX					INT,
	IN IN_CIRCLE_RANGE					INT,
    OUT OUT_SITE_LIST					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_retrieve_site_info_without_handler
Input param 	: 1개
Job 			: 사이트의 정보를 반환한다.
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_SITE_ID							BIGINT;   
    DECLARE CUR_COMP_ID							BIGINT;   
    DECLARE CUR_CREATED_AT						DATETIME;  
    DECLARE CUR_UPDATED_AT						DATETIME;  
    DECLARE CUR_SITE_NAME						VARCHAR(255);   
    DECLARE CUR_PERMIT_REG_CODE					VARCHAR(12);  
    DECLARE CUR_B_CODE							VARCHAR(10); 
    DECLARE CUR_ADDR							VARCHAR(255);
    DECLARE CUR_PERMIT_REG_IMG_PATH				VARCHAR(255);
    DECLARE CUR_USER_TYPE						INT;
    DECLARE CUR_LAT								DECIMAL(12,9);
    DECLARE CUR_LNG								DECIMAL(12,9);
    DECLARE CUR_CONTACT_PATH					VARCHAR(100);
    DECLARE JSON_ADDRESS_INFO					JSON 			DEFAULT NULL;
    DECLARE JSON_COMPANY_INFO					JSON 			DEFAULT NULL;
    DECLARE JSON_WSTE_INFO						JSON 			DEFAULT NULL;
    DECLARE JSON_WSTE_CLASS_INFO				JSON 			DEFAULT NULL;
    DECLARE JSON_SITE_INFO						JSON 			DEFAULT NULL;
    DECLARE JSON_MANAGER_LIST					JSON 			DEFAULT NULL;
    DECLARE JSON_SITE_LIST						JSON 			DEFAULT NULL;
    DECLARE JSON_DISPOSER_ORDER_LIST			JSON 			DEFAULT NULL;
    DECLARE JSON_COLLECTOR_BIDDING_LIST			JSON 			DEFAULT NULL;
    DECLARE JSON_BUSINESS_AREA					JSON 			DEFAULT NULL;
    DECLARE JSON_ADDED_SITE_LIST				JSON 			DEFAULT NULL;
    DECLARE VAR_DISPOSER_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_CIRCLE_RANGE					INT 			DEFAULT NULL;
    DECLARE VAR_TARGET_USER_TYPE				INT 			DEFAULT NULL;
    DECLARE VAR_LAST_PAGE						INT 			DEFAULT NULL;
	DECLARE rtn_val								INT				DEFAULT 0;
    DECLARE msg_txt								VARCHAR(200)	DEFAULT 'success';
    DECLARE json_data							JSON			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
		A.COMP_ID, 
        A.CREATED_AT,
        A.UPDATED_AT,
        A.SITE_NAME,
        A.PERMIT_REG_CODE,
        A.KIKCD_B_CODE,
        A.ADDR,
        A.PERMIT_REG_IMG_PATH,
        B.USER_TYPE,
        A.LAT,
        A.LNG,
        E.NAME
    FROM COMP_SITE A
    LEFT JOIN WSTE_TRMT_BIZ B ON A.TRMT_BIZ_CODE = B.CODE
    LEFT JOIN USERS C ON A.ID = C.AFFILIATED_SITE
    LEFT JOIN MEMBER_CONTACT_PATH D ON C.ID = D.USER_ID
    LEFT JOIN CONTACT_PATH E ON D.CONTACT_PATH = E.ID
    WHERE 
		A.ID = IN_SITE_ID AND
        C.CLASS = 201
    ORDER BY A.ID DESC;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    SET OUT_SITE_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_SITE_INFO_TEMP (
		SITE_ID							BIGINT,
		COMP_ID							BIGINT,
		CREATED_AT						DATETIME,
		UPDATED_AT						DATETIME,
		SITE_NAME						VARCHAR(255),
		PERMIT_REG_CODE					VARCHAR(12),
		B_CODE							VARCHAR(10),
		ADDR							VARCHAR(255),
		PERMIT_REG_IMG_PATH				VARCHAR(255),
		LAST_PAGE						INT,
        ADDRESS_INFO					JSON,
        COMPANY_INFO					JSON,
        WSTE_INFO						JSON,
        WSTE_CLASS_INFO					JSON,
        SITE_INFO						JSON,
        SITE_LIST						JSON,
        MANAGER_LIST					JSON,
        BUSINESS_AREA					JSON,
        USER_TYPE						INT,
        LAT								DECIMAL(12,9),
        LNG								DECIMAL(12,9),
        CONTACT_PATH					VARCHAR(100),
        DISPOSER_ORDER_LIST				JSON,
        COLLECTOR_BIDDING_LIST			JSON,
        ADDED_SITE_LIST					JSON
	);  
    
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_SITE_ID,
			CUR_COMP_ID,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_SITE_NAME,
			CUR_PERMIT_REG_CODE,
			CUR_B_CODE,
			CUR_ADDR,
			CUR_PERMIT_REG_IMG_PATH,
			CUR_USER_TYPE,
            CUR_LAT,
            CUR_LNG,
            CUR_CONTACT_PATH;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_RETRIEVE_SITE_INFO_TEMP(
			SITE_ID,
			COMP_ID,
			CREATED_AT,
			UPDATED_AT,
			SITE_NAME,
			PERMIT_REG_CODE,
			B_CODE,
			ADDR,
			PERMIT_REG_IMG_PATH,
			USER_TYPE,
            LAT,
            LNG,
            CONTACT_PATH
		)
		VALUES(
			CUR_SITE_ID,
			CUR_COMP_ID,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_SITE_NAME,
			CUR_PERMIT_REG_CODE,
			CUR_B_CODE,
			CUR_ADDR,
			CUR_PERMIT_REG_IMG_PATH,
			CUR_USER_TYPE,
            CUR_LAT,
            CUR_LNG,
            CUR_CONTACT_PATH
		);
        
        CALL sp_get_address_with_bcode(
			CUR_B_CODE,
            JSON_ADDRESS_INFO
        );
        
        CALL sp_get_company_info(
			CUR_COMP_ID,
            JSON_COMPANY_INFO
        );
        
        CALL sp_get_site_wste_info(
			CUR_SITE_ID,
            JSON_WSTE_INFO
        );
        
        CALL sp_get_site_wste_class_info(
			CUR_SITE_ID,
            JSON_WSTE_CLASS_INFO
        );
        
        CALL sp_get_site_info_simple(
			CUR_SITE_ID,
            JSON_SITE_INFO
        );
        
        CALL sp_get_manager_list(
			CUR_SITE_ID,
            JSON_MANAGER_LIST
        );
        
        IF CUR_USER_TYPE = 2 THEN
			SET VAR_DISPOSER_ID = NULL;
			CALL sp_get_disposer_order_list(
				CUR_SITE_ID,
				VAR_DISPOSER_ID,
				JSON_DISPOSER_ORDER_LIST
			);
		ELSE
			CALL sp_get_bidding_lists_3(
				CUR_SITE_ID,
				JSON_COLLECTOR_BIDDING_LIST
			);
        END IF;
        
        IF IN_TYPE_INDEX = 0 THEN
        /*일정거리이내의 모든 업체를 리스트하는 경우*/
			IF IN_CIRCLE_RANGE IS NULL THEN
				CALL sp_req_policy_direction(
					'circle_range',
					VAR_CIRCLE_RANGE
				);
			ELSE
				SET VAR_CIRCLE_RANGE = IN_CIRCLE_RANGE;
			END IF;
			IF CUR_USER_TYPE = 2 THEN
				SET VAR_TARGET_USER_TYPE = 3;
			ELSE
				SET VAR_TARGET_USER_TYPE = 2;
			END IF;
			CALL sp_get_site_list_inside_range_without_handler(
				VAR_TARGET_USER_TYPE,
				VAR_CIRCLE_RANGE,
				CUR_LAT,
				CUR_LNG,
				rtn_val,
				msg_txt,
				JSON_SITE_LIST
			);
        ELSE
        /*일정거리이내의 모든 업체를 리스트하는 경우가 아닌 경우*/
			IF IN_TYPE_INDEX = 1 THEN
			/*입찰관계의 모든 업체를 리스트하는 경우*/
				IF IN_CIRCLE_RANGE IS NULL THEN
					CALL sp_req_policy_direction(
						'circle_range',
						VAR_CIRCLE_RANGE
					);
				ELSE
					SET VAR_CIRCLE_RANGE = IN_CIRCLE_RANGE;
				END IF;
				IF CUR_USER_TYPE = 2 THEN
					SET VAR_TARGET_USER_TYPE = 3;
				ELSE
					SET VAR_TARGET_USER_TYPE = 2;
				END IF;
                
				CALL sp_get_site_list_inside_range_without_handler(
					VAR_TARGET_USER_TYPE,
					VAR_CIRCLE_RANGE,
					CUR_LAT,
					CUR_LNG,
					rtn_val,
					msg_txt,
					JSON_SITE_LIST
				);
			ELSE
			/*그 이외의 경우*/
				SET JSON_SITE_LIST = NULL;
			END IF;
        END IF;
        
		/*SET @LAST_PAGE = CEILING(@RECORD_COUNT / @PAGE_SIZE);*/
        
		CALL sp_get_business_area(
			CUR_SITE_ID,
            JSON_BUSINESS_AREA
        );
        
        CALL sp_get_interested_site_lists(
			NULL,
            IN_SITE_ID,
            1,
            JSON_ADDED_SITE_LIST
        );
        
        UPDATE ADMIN_RETRIEVE_SITE_INFO_TEMP
        SET 
			ADDRESS_INFO 			= JSON_ADDRESS_INFO,
			COMPANY_INFO 			= JSON_COMPANY_INFO,
			WSTE_INFO 				= JSON_WSTE_INFO,
			WSTE_CLASS_INFO 		= JSON_WSTE_CLASS_INFO,
			SITE_INFO 				= JSON_SITE_INFO,
			LAST_PAGE 				= VAR_LAST_PAGE,
			SITE_LIST 				= JSON_SITE_LIST,
			MANAGER_LIST 			= JSON_MANAGER_LIST,
			DISPOSER_ORDER_LIST 	= JSON_DISPOSER_ORDER_LIST,
			COLLECTOR_BIDDING_LIST 	= JSON_COLLECTOR_BIDDING_LIST,
			BUSINESS_AREA		 	= JSON_BUSINESS_AREA,
			ADDED_SITE_LIST		 	= JSON_ADDED_SITE_LIST
        WHERE SITE_ID = CUR_SITE_ID;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'SITE_ID'					, SITE_ID, 
		'COMP_ID'					, COMP_ID, 
        'CREATED_AT'				, CREATED_AT, 
        'UPDATED_AT'				, UPDATED_AT, 
        'SITE_NAME'					, SITE_NAME, 
        'PERMIT_REG_CODE'			, PERMIT_REG_CODE, 
        'B_CODE'					, B_CODE, 
        'ADDR'						, ADDR, 
        'PERMIT_REG_IMG_PATH'		, PERMIT_REG_IMG_PATH, 
        'LAST_PAGE'					, LAST_PAGE, 
        'ADDRESS_INFO'				, ADDRESS_INFO, 
        'COMPANY_INFO'				, COMPANY_INFO, 
        'WSTE_INFO'					, WSTE_INFO, 
        'WSTE_CLASS_INFO'			, WSTE_CLASS_INFO, 
        'SITE_INFO'					, SITE_INFO, 
        'SITE_LIST'					, SITE_LIST, 
        'MANAGER_LIST'				, MANAGER_LIST, 
        'USER_TYPE'					, USER_TYPE, 
        'LAT'						, LAT, 
        'LNG'						, LNG, 
        'CONTACT_PATH'				, CONTACT_PATH, 
        'BUSINESS_AREA'				, BUSINESS_AREA, 
        'DISPOSER_ORDER_LIST'		, DISPOSER_ORDER_LIST, 
        'COLLECTOR_BIDDING_LIST'	, COLLECTOR_BIDDING_LIST, 
        'ADDED_SITE_LIST'			, ADDED_SITE_LIST
	)) 
    INTO OUT_SITE_LIST FROM ADMIN_RETRIEVE_SITE_INFO_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_SITE_INFO_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_site_lists`(
    IN IN_PARAMS					JSON
)
BEGIN
    DECLARE VAR_USER_ID						BIGINT 			DEFAULT NULL;
    DECLARE VAR_SEARCH						VARCHAR(255) 	DEFAULT NULL;
    DECLARE VAR_OFFSET_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_PAGE_SIZE					INT 			DEFAULT NULL;
    DECLARE VAR_EMIT_OR_COL					TINYINT 		DEFAULT NULL;
    DECLARE VAR_CONFIRMED					TINYINT 		DEFAULT NULL;
    DECLARE VAR_TARGET_USER_TYPE			INT 			DEFAULT NULL;
    DECLARE VAR_DUMMY_ACTIVATE				TINYINT 		DEFAULT NULL;
    DECLARE JSON_SITE_LISTS					JSON 			DEFAULT NULL;
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE json_data						JSON 			DEFAULT NULL;
    
	SELECT 
		USER_ID, 
        SEARCH, 
        OFFSET_SIZE, 
        PAGE_SIZE, 
        EMIT_OR_COL, 
        CONFIRMED
    INTO 
		VAR_USER_ID, 
        VAR_SEARCH, 
        VAR_OFFSET_SIZE, 
        VAR_PAGE_SIZE, 
        VAR_EMIT_OR_COL, 
        VAR_CONFIRMED
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		SEARCH	 				VARCHAR(255)		PATH "$.SEARCH",
		OFFSET_SIZE 			INT 				PATH "$.OFFSET_SIZE",
		PAGE_SIZE 				INT 				PATH "$.PAGE_SIZE",
		EMIT_OR_COL				TINYINT				PATH "$.EMIT_OR_COL",
		CONFIRMED 				TINYINT				PATH "$.CONFIRMED"
	)) AS PARAMS;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_SITE_LISTS_TEMP (
        USER_ID					BIGINT,
        SEARCH					VARCHAR(255),
        OFFSET_SIZE				INT,
        PAGE_SIZE				INT,
        CONFIRMED				TINYINT,
        TARGET_USER_TYPE		INT,
        SITE_LISTS				JSON
	);  
    
    IF VAR_EMIT_OR_COL IS NOT NULL THEN
		IF VAR_EMIT_OR_COL = TRUE THEN
			SET VAR_TARGET_USER_TYPE = 3;
		ELSE
			SET VAR_TARGET_USER_TYPE = 2;
		END IF;
    ELSE
		SET VAR_TARGET_USER_TYPE = NULL;
    END IF;
    
    CALL sp_req_policy_direction(
		'dummy_activate',
        VAR_DUMMY_ACTIVATE
    );
    
    CALL sp_admin_retrieve_site_lists_without_handler(
		VAR_SEARCH,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
		VAR_CONFIRMED,
		VAR_TARGET_USER_TYPE,
		VAR_DUMMY_ACTIVATE,
		JSON_SITE_LISTS
    );
    
	INSERT INTO 
	ADMIN_RETRIEVE_SITE_LISTS_TEMP(
		USER_ID,
		SEARCH,
		OFFSET_SIZE,
		PAGE_SIZE,
		CONFIRMED,
		TARGET_USER_TYPE,
		SITE_LISTS
	)
	VALUES(
		VAR_USER_ID,
		VAR_SEARCH,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
		VAR_CONFIRMED,
		VAR_TARGET_USER_TYPE,
		JSON_SITE_LISTS
	);
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'USER_ID'				, USER_ID,
        'SEARCH'				, SEARCH,
        'OFFSET_SIZE'			, OFFSET_SIZE,
        'PAGE_SIZE'				, PAGE_SIZE,
        'CONFIRMED'				, CONFIRMED,
        'TARGET_USER_TYPE'		, TARGET_USER_TYPE,
        'SITE_LISTS'			, SITE_LISTS
	)) 
    INTO json_data FROM ADMIN_RETRIEVE_SITE_LISTS_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_SITE_LISTS_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_site_lists_without_handler`(
	IN IN_SEARCH						VARCHAR(255),
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    IN IN_CONFIRMED						TINYINT,
    IN IN_USER_TYPE						INT,
    IN IN_DUMMY_ACTIVATE				TINYINT,
    OUT OUT_SITE_LIST					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_retrive_site_lists_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT 		DEFAULT FALSE;    
    DECLARE CUR_SITE_ID							BIGINT;   
    DECLARE CUR_COMP_ID							BIGINT;   
    DECLARE CUR_CREATED_AT						DATETIME;  
    DECLARE CUR_UPDATED_AT						DATETIME;  
    DECLARE CUR_SITE_NAME						VARCHAR(255);   
    DECLARE CUR_PERMIT_REG_CODE					VARCHAR(12);  
    DECLARE CUR_B_CODE							VARCHAR(10); 
    DECLARE CUR_ADDR							VARCHAR(255);
    DECLARE CUR_PERMIT_REG_IMG_PATH				VARCHAR(255);
    DECLARE CUR_USER_TYPE						INT;
    DECLARE CUR_LAT								DECIMAL(12,9);
    DECLARE CUR_LNG								DECIMAL(12,9);
    DECLARE CUR_TRMT_BIZ_CODE					VARCHAR(4);
    DECLARE CUR_BIZ_REG_CODE					VARCHAR(12);
    DECLARE CUR_ACTIVE							TINYINT;
	DECLARE VAR_RECORD_COUNT					INT 			DEFAULT NULL;
	DECLARE JSON_ADDRESS_INFO					JSON 			DEFAULT NULL;
	DECLARE JSON_COMPANY_INFO					JSON 			DEFAULT NULL;
	DECLARE JSON_WSTE_INFO						JSON 			DEFAULT NULL;
	DECLARE JSON_SITE_INFO						JSON 			DEFAULT NULL;
	DECLARE VAR_CIRCLE_RANGE					INT 			DEFAULT NULL;
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE JSON_SITE_LIST						JSON 			DEFAULT NULL;
	DECLARE VAR_LAST_PAGE						INT 			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		SQL_CALC_FOUND_ROWS
		A.ID, 
		A.COMP_ID, 
        A.CREATED_AT,
        A.UPDATED_AT,
        A.SITE_NAME,
        A.PERMIT_REG_CODE,
        A.KIKCD_B_CODE,
        A.ADDR,
        A.PERMIT_REG_IMG_PATH,
        E.USER_TYPE,
        A.LAT,
        A.LNG,
        A.TRMT_BIZ_CODE,
		B.BIZ_REG_CODE,
		A.ACTIVE
    FROM COMP_SITE A
    LEFT JOIN COMPANY B ON A.COMP_ID = B.ID
    LEFT JOIN KIKCD_B C ON A.KIKCD_B_CODE = C.B_CODE
    LEFT JOIN KIKCD_B D ON B.KIKCD_B_CODE = D.B_CODE
    LEFT JOIN WSTE_TRMT_BIZ E ON A.TRMT_BIZ_CODE = E.CODE
    WHERE 
		IF(IN_DUMMY_ACTIVATE = TRUE,
			A.ID > 0,
			A.TEST = FALSE
		) AND
        IF(IN_USER_TYPE IS NULL,
			IF(IN_SEARCH IS NULL,
				IF(IN_CONFIRMED IS NULL,
					A.ID > 0,
					(
						A.CONFIRMED = IN_CONFIRMED OR
						B.CONFIRMED = IN_CONFIRMED 
					)
				),
				IF(IN_CONFIRMED IS NULL,
					A.ID > 0 AND
					(
						A.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE USER_NAME LIKE CONCAT('%', IN_SEARCH, '%')) OR
						E.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(B.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
					),
					(
						A.CONFIRMED = IN_CONFIRMED OR
						B.CONFIRMED = IN_CONFIRMED 
					) AND
					(
						A.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE USER_NAME LIKE CONCAT('%', IN_SEARCH, '%')) OR
						E.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(B.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
					)
				)
			),
			IF(IN_SEARCH IS NULL,
				IF(IN_CONFIRMED IS NULL,
					A.ID > 0 AND
                    E.USER_TYPE = IN_USER_TYPE,
					(
						A.CONFIRMED = IN_CONFIRMED OR
						B.CONFIRMED = IN_CONFIRMED 
					) AND
                    E.USER_TYPE = IN_USER_TYPE
				),
				IF(IN_CONFIRMED IS NULL,
					A.ID > 0 AND
					(
						A.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE USER_NAME LIKE CONCAT('%', IN_SEARCH, '%')) OR
						E.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(B.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
					) AND
                    E.USER_TYPE = IN_USER_TYPE,
					(
						A.CONFIRMED = IN_CONFIRMED OR
						B.CONFIRMED = IN_CONFIRMED 
					) AND
					(
						A.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE USER_NAME LIKE CONCAT('%', IN_SEARCH, '%')) OR
						E.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(B.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
					) AND
                    E.USER_TYPE = IN_USER_TYPE
				)
			)
        )
    ORDER BY CREATED_AT DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	SELECT COUNT(A.ID) INTO VAR_RECORD_COUNT
	FROM COMP_SITE A
	LEFT JOIN COMPANY B ON A.COMP_ID = B.ID
	LEFT JOIN KIKCD_B C ON A.KIKCD_B_CODE = C.B_CODE
	LEFT JOIN KIKCD_B D ON B.KIKCD_B_CODE = D.B_CODE
	LEFT JOIN WSTE_TRMT_BIZ E ON A.TRMT_BIZ_CODE = E.CODE
    WHERE 
		IF(IN_DUMMY_ACTIVATE = TRUE,
			A.ID > 0,
			A.TEST = FALSE
		) AND
        IF(IN_USER_TYPE IS NULL,
			IF(IN_SEARCH IS NULL,
				IF(IN_CONFIRMED IS NULL,
					A.ID > 0,
					(
						A.CONFIRMED = IN_CONFIRMED OR
						B.CONFIRMED = IN_CONFIRMED 
					)
				),
				IF(IN_CONFIRMED IS NULL,
					A.ID > 0 AND
					(
						A.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE USER_NAME LIKE CONCAT('%', IN_SEARCH, '%')) OR
						E.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(B.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
					),
					(
						A.CONFIRMED = IN_CONFIRMED OR
						B.CONFIRMED = IN_CONFIRMED 
					) AND
					(
						A.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE USER_NAME LIKE CONCAT('%', IN_SEARCH, '%')) OR
						E.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(B.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
					)
				)
			),
			IF(IN_SEARCH IS NULL,
				IF(IN_CONFIRMED IS NULL,
					A.ID > 0 AND
                    E.USER_TYPE = IN_USER_TYPE,
					(
						A.CONFIRMED = IN_CONFIRMED OR
						B.CONFIRMED = IN_CONFIRMED 
					) AND
                    E.USER_TYPE = IN_USER_TYPE
				),
				IF(IN_CONFIRMED IS NULL,
					A.ID > 0 AND
					(
						A.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE USER_NAME LIKE CONCAT('%', IN_SEARCH, '%')) OR
						E.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(B.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
					) AND
                    E.USER_TYPE = IN_USER_TYPE,
					(
						A.CONFIRMED = IN_CONFIRMED OR
						B.CONFIRMED = IN_CONFIRMED 
					) AND
					(
						A.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						B.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						C.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
						D.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
						A.ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE USER_NAME LIKE CONCAT('%', IN_SEARCH, '%')) OR
						E.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(B.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
						REPLACE(A.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
					) AND
                    E.USER_TYPE = IN_USER_TYPE
				)
			)
        );
    
    SET OUT_SITE_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_SITE_LISTS_TEMP_2 (
		SITE_ID							BIGINT,
		COMP_ID							BIGINT,
		CREATED_AT						DATETIME,
		UPDATED_AT						DATETIME,
		SITE_NAME						VARCHAR(255),
		PERMIT_REG_CODE					VARCHAR(12),
		B_CODE							VARCHAR(10),
		ADDR							VARCHAR(255),
		PERMIT_REG_IMG_PATH				VARCHAR(255),
		LAST_PAGE						INT,
        ADDRESS_INFO					JSON,
        COMPANY_INFO					JSON,
        WSTE_INFO						JSON,
        SITE_INFO						JSON,
        SITE_LIST						JSON,
        USER_TYPE						INT,
        LAT								DECIMAL(12,9),
        LNG								DECIMAL(12,9),
        CIRCLE_RANGE					INT,
		TRMT_BIZ_CODE					VARCHAR(4),
		BIZ_REG_CODE					VARCHAR(12),
		ACTIVE							TINYINT
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_SITE_ID,
			CUR_COMP_ID,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_SITE_NAME,
			CUR_PERMIT_REG_CODE,
			CUR_B_CODE,
			CUR_ADDR,
			CUR_PERMIT_REG_IMG_PATH,
			CUR_USER_TYPE,
			CUR_LAT,
			CUR_LNG,
			CUR_TRMT_BIZ_CODE,
			CUR_BIZ_REG_CODE,
			CUR_ACTIVE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_RETRIEVE_SITE_LISTS_TEMP_2(
			SITE_ID,
			COMP_ID,
			CREATED_AT,
			UPDATED_AT,
			SITE_NAME,
			PERMIT_REG_CODE,
			B_CODE,
			ADDR,
			PERMIT_REG_IMG_PATH,
			USER_TYPE,
			LAT,
			LNG,
			TRMT_BIZ_CODE,
			BIZ_REG_CODE,
			ACTIVE
		)
		VALUES(
			CUR_SITE_ID,
			CUR_COMP_ID,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_SITE_NAME,
			CUR_PERMIT_REG_CODE,
			CUR_B_CODE,
			CUR_ADDR,
			CUR_PERMIT_REG_IMG_PATH,
			CUR_USER_TYPE,
			CUR_LAT,
			CUR_LNG,
			CUR_TRMT_BIZ_CODE,
			CUR_BIZ_REG_CODE,
			CUR_ACTIVE
		);
        
        CALL sp_get_address_with_bcode(
			CUR_B_CODE,
            JSON_ADDRESS_INFO
        );
        
        CALL sp_get_company_info(
			CUR_COMP_ID,
            JSON_COMPANY_INFO
        );
        
        CALL sp_get_site_wste_info(
			CUR_SITE_ID,
            JSON_WSTE_INFO
        );
        
        CALL sp_get_site_info_simple(
			CUR_SITE_ID,
            JSON_SITE_INFO
        );
        
		CALL sp_req_policy_direction(
			'circle_range',
			VAR_CIRCLE_RANGE
		);
        
        CALL sp_get_site_list_inside_range_without_handler(
			CUR_USER_TYPE,
            VAR_CIRCLE_RANGE,
            CUR_LAT,
            CUR_LNG,
            rtn_val,
            msg_txt,
            JSON_SITE_LIST
        );
        
		SET VAR_LAST_PAGE = CEILING(VAR_RECORD_COUNT / IN_PAGE_SIZE);
        
        UPDATE ADMIN_RETRIEVE_SITE_LISTS_TEMP_2
        SET 
			ADDRESS_INFO = JSON_ADDRESS_INFO,
			COMPANY_INFO = JSON_COMPANY_INFO,
			WSTE_INFO = JSON_WSTE_INFO,
			SITE_INFO = JSON_SITE_INFO,
			LAST_PAGE = VAR_LAST_PAGE,
			SITE_LIST = JSON_SITE_LIST
        WHERE SITE_ID = CUR_SITE_ID;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'						, SITE_ID, 
        'CREATED_AT'				, CREATED_AT, 
        'UPDATED_AT'				, UPDATED_AT, 
        'SITE_NAME'					, SITE_NAME, 
        'PERMIT_REG_CODE'			, PERMIT_REG_CODE, 
        'B_CODE'					, B_CODE, 
        'ADDR'						, ADDR, 
        'PERMIT_REG_IMG_PATH'		, PERMIT_REG_IMG_PATH, 
        'LAST_PAGE'					, LAST_PAGE, 
        'ADDRESS_INFO'				, ADDRESS_INFO, 
        'COMPANY_INFO'				, COMPANY_INFO, 
        'WSTE_INFO'					, WSTE_INFO, 
        'SITE_INFO'					, SITE_INFO, 
        'SITE_LIST'					, SITE_LIST, 
        'LAT'						, LAT, 
        'LNG'						, LNG, 
        'CIRCLE_RANGE'				, VAR_CIRCLE_RANGE, 
        'TRMT_BIZ_CODE'				, TRMT_BIZ_CODE, 
        'BIZ_REG_CODE'				, BIZ_REG_CODE, 
        'ACTIVE'					, ACTIVE, 
        'SITE_TYPE'					, IF(TRMT_BIZ_CODE = '9', '배출자', '수거자')
	)) 
    INTO OUT_SITE_LIST FROM ADMIN_RETRIEVE_SITE_LISTS_TEMP_2;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_SITE_LISTS_TEMP_2;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_stat_region`(
    IN IN_PARAMS					JSON
)
BEGIN
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
    DECLARE VAR_USER_ID							BIGINT			DEFAULT NULL;
    DECLARE VAR_REGION_CODE						VARCHAR(10)		DEFAULT NULL;
    DECLARE JSON_STAT							JSON			DEFAULT NULL;
    DECLARE VAR_DUMMY_ACTIVATE					TINYINT			DEFAULT FALSE;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;  
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	SELECT 
		USER_ID, 
        REGION_CODE
    INTO 
		VAR_USER_ID, 
        VAR_REGION_CODE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		REGION_CODE				VARCHAR(10)			PATH "$.REGION_CODE"
	)) AS PARAMS;   
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_STAT_REGION_TEMP (
		USER_ID					BIGINT,
		STAT					JSON,
		INPUT_PARAM				JSON
	);
    
    CALL sp_req_policy_direction(
		'dummy_activate',
        VAR_DUMMY_ACTIVATE
    ); 
    
    IF VAR_REGION_CODE IS NOT NULL THEN
		CALL sp_admin_retrieve_stat_region_sigungu_without_handler(
			VAR_DUMMY_ACTIVATE,
			VAR_REGION_CODE,
			JSON_STAT
		);
    ELSE
		CALL sp_admin_retrieve_stat_region_sido_without_handler(
			VAR_DUMMY_ACTIVATE,
			JSON_STAT
		);
    END IF;
    
	INSERT INTO 
	ADMIN_RETRIEVE_STAT_REGION_TEMP(
		USER_ID
	)
	VALUES(
		VAR_USER_ID
	);
    
    UPDATE ADMIN_RETRIEVE_STAT_REGION_TEMP
    SET STAT = JSON_STAT, INPUT_PARAM = IN_PARAMS
    WHERE USER_ID = VAR_USER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'USER_ID'				, USER_ID,
        'STAT'					, STAT,
        'INPUT_PARAM'			, INPUT_PARAM
	)) 
    INTO json_data FROM ADMIN_RETRIEVE_STAT_REGION_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_STAT_REGION_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_stat_region_sido_without_handler`(
    IN IN_DUMMY_ACTIVATE	TINYINT,
    OUT STAT_LIST			JSON
)
BEGIN

    DECLARE vRowCount 								INT 				DEFAULT 0;
    DECLARE endOfRow 								TINYINT 			DEFAULT FALSE;   
    DECLARE CUR_REGION								VARCHAR(50);
    DECLARE CUR_REGION_CODE							VARCHAR(10);
    DECLARE CUR_USER_TYPE							VARCHAR(4);	
    DECLARE CUR_QTY									INT;
	DECLARE VAR_COL									INT 				DEFAULT 0;
	DECLARE VAR_EMI									INT 				DEFAULT 0;
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
	SELECT 
		SI_DO, 
		B_CODE
	FROM V_SIDO 
    ORDER BY B_CODE ASC;
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;        
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_STAT_REGION_SIDO_TEMP (
		REGION								VARCHAR(50), 
		REGION_CODE							VARCHAR(10), 
		COL									INT,	
		EMI									INT
	);         
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_REGION,
			CUR_REGION_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_RETRIEVE_STAT_REGION_SIDO_TEMP(
			REGION,
			REGION_CODE
		)
		VALUES(
			CUR_REGION,
			CUR_REGION_CODE
		);
        
        CALL sp_admin_count_sido_stats(
			IN_DUMMY_ACTIVATE,
			CUR_REGION_CODE,
            VAR_COL,
            VAR_EMI
        );
        
        UPDATE ADMIN_RETRIEVE_STAT_REGION_SIDO_TEMP
        SET 
			COL = VAR_COL,
			EMI = VAR_EMI
        WHERE REGION_CODE = CUR_REGION_CODE;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'REGION'						, REGION, 
			'REGION_CODE'					, REGION_CODE, 
			'COL'							, COL, 
			'EMI'							, EMI
		)
	) 
	INTO STAT_LIST
	FROM ADMIN_RETRIEVE_STAT_REGION_SIDO_TEMP;
	
    DROP TABLE IF EXISTS ADMIN_RETRIEVE_STAT_REGION_SIDO_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_stat_region_sigungu_without_handler`(
    IN IN_DUMMY_ACTIVATE	TINYINT,
	IN IN_SIDO_CODE 		VARCHAR(10),
    OUT STAT_LIST			JSON
)
BEGIN

    DECLARE vRowCount 								INT 				DEFAULT 0;
    DECLARE endOfRow 								TINYINT 			DEFAULT FALSE;   
    DECLARE CUR_REGION								VARCHAR(50);
    DECLARE CUR_REGION_CODE							VARCHAR(10);
    DECLARE CUR_USER_TYPE							VARCHAR(4);	
    DECLARE CUR_QTY									INT;
	DECLARE VAR_COL									INT 				DEFAULT 0;
	DECLARE VAR_EMI									INT 				DEFAULT 0;
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
	SELECT 
		SI_GUN_GU, 
		B_CODE
	FROM V_SIGUNGU
    WHERE LEFT(B_CODE, 2) = LEFT(IN_SIDO_CODE, 2)
    ORDER BY SI_GUN_GU ASC;
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;        
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_STAT_REGION_SIGUNGU_TEMP (
		REGION								VARCHAR(50), 
		REGION_CODE							VARCHAR(10), 
		COL									INT,	
		EMI									INT
	);         
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_REGION,
			CUR_REGION_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_RETRIEVE_STAT_REGION_SIGUNGU_TEMP(
			REGION,
			REGION_CODE
		)
		VALUES(
			CUR_REGION,
			CUR_REGION_CODE
		);
        
        CALL sp_admin_count_sigungu_stats(
			IN_DUMMY_ACTIVATE,
			CUR_REGION_CODE,
            VAR_COL,
            VAR_EMI
        );
        
        UPDATE ADMIN_RETRIEVE_STAT_REGION_SIGUNGU_TEMP
        SET 
			COL = VAR_COL,
			EMI = VAR_EMI
        WHERE REGION_CODE = CUR_REGION_CODE;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'REGION'						, REGION, 
			'REGION_CODE'					, REGION_CODE, 
			'COL'							, COL, 
			'EMI'							, EMI
		)
	) 
	INTO STAT_LIST
	FROM ADMIN_RETRIEVE_STAT_REGION_SIGUNGU_TEMP;
	
    DROP TABLE IF EXISTS ADMIN_RETRIEVE_STAT_REGION_SIGUNGU_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_stat_registeration`(
    IN IN_PARAMS					JSON
)
BEGIN
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_USER_ID							BIGINT 			DEFAULT NULL;
	DECLARE VAR_PARAM_YEAR						INT 			DEFAULT NULL;
	DECLARE VAR_PARAM_MONTH						INT 			DEFAULT NULL;
	DECLARE JSON_STAT							JSON 			DEFAULT NULL;
    DECLARE VAR_DUMMY_ACTIVATE					TINYINT			DEFAULT FALSE;
	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;  
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	SELECT 
		USER_ID, 
			PARAM_YEAR, 
            PARAM_MONTH
    INTO 
		VAR_USER_ID, 
        VAR_PARAM_YEAR, 
        VAR_PARAM_MONTH
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		PARAM_YEAR				INT					PATH "$.PARAM_YEAR",
		PARAM_MONTH				INT					PATH "$.PARAM_MONTH"
	)) AS PARAMS;  
    
    CALL sp_req_policy_direction(
		'dummy_activate',
        VAR_DUMMY_ACTIVATE
    ); 
    
    IF VAR_PARAM_YEAR IS NOT NULL THEN
		CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_STAT_REGISTERATION_TEMP (
			USER_ID					BIGINT,
			STAT					JSON,
			INPUT_PARAM				JSON
		);
        IF VAR_PARAM_MONTH IS NOT NULL THEN
			CALL sp_admin_retrieve_stat_registeration_month_without_handler(
				VAR_DUMMY_ACTIVATE,
				VAR_PARAM_YEAR,
				VAR_PARAM_MONTH,
				JSON_STAT
			);
        ELSE
			CALL sp_admin_retrieve_stat_registeration_year_without_handler(
				VAR_DUMMY_ACTIVATE,
				VAR_PARAM_YEAR,
				JSON_STAT
			);
        END IF;
    ELSE
		SET rtn_val 		= 100101;
		SET msg_txt 		= 'year should not be null';
        SET json_data		= IN_PARAMS;
		SIGNAL SQLSTATE '23000';
    END IF;
    
	INSERT INTO 
	ADMIN_RETRIEVE_STAT_REGISTERATION_TEMP(
		USER_ID
	)
	VALUES(
		VAR_USER_ID
	);
    
    UPDATE ADMIN_RETRIEVE_STAT_REGISTERATION_TEMP
    SET STAT = JSON_STAT, INPUT_PARAM = IN_PARAMS
    WHERE USER_ID = VAR_USER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'USER_ID'				, USER_ID,
        'STAT'					, STAT,
        'INPUT_PARAM'			, INPUT_PARAM
	)) 
    INTO json_data FROM ADMIN_RETRIEVE_STAT_REGISTERATION_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_STAT_REGISTERATION_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_stat_registeration_daily`(
    IN IN_PARAMS					JSON
)
BEGIN
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_USER_ID							BIGINT 			DEFAULT NULL;
	DECLARE JSON_STAT							JSON 			DEFAULT NULL;
    DECLARE VAR_DUMMY_ACTIVATE					TINYINT			DEFAULT FALSE;
    
	SELECT USER_ID
    INTO VAR_USER_ID
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID"
	)) AS PARAMS;  
    
    CALL sp_req_policy_direction(
		'dummy_activate',
        VAR_DUMMY_ACTIVATE
    ); 
    
	CALL sp_admin_retrieve_stat_registeration_daily_without_handler(
		VAR_DUMMY_ACTIVATE,
		JSON_STAT
	);
    
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_STAT_REGISTERATION_DAILY_TEMP (
        USER_ID				INT,
        STAT				JSON,
        INPUT_PARAM			JSON
	);
    
	INSERT INTO 
	ADMIN_RETRIEVE_STAT_REGISTERATION_DAILY_TEMP(
		USER_ID
	)
	VALUES(
		VAR_USER_ID
	);
    
    UPDATE ADMIN_RETRIEVE_STAT_REGISTERATION_DAILY_TEMP
    SET STAT = JSON_STAT, INPUT_PARAM = IN_PARAMS
    WHERE USER_ID = VAR_USER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'USER_ID'				, USER_ID,
        'STAT'					, STAT,
        'INPUT_PARAM'			, INPUT_PARAM
	)) 
    INTO json_data FROM ADMIN_RETRIEVE_STAT_REGISTERATION_DAILY_TEMP;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_STAT_REGISTERATION_DAILY_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_stat_registeration_daily_without_handler`(
    IN IN_DUMMY_ACTIVATE				TINYINT,
    OUT STAT_LIST						JSON
)
BEGIN
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_STAT_REGISTERATION_DAILY_WITHOUT_HANDLER_TEMP (
        PARAM_YEAR			INT,
        PARAM_MONTH			INT,
        PARAM_DAY			INT,
        USER_TYPE			INT,
        QTY					INT
	);
    
	INSERT INTO ADMIN_RETRIEVE_STAT_REGISTERATION_DAILY_WITHOUT_HANDLER_TEMP(
		PARAM_YEAR,
        PARAM_MONTH,
        PARAM_DAY,
        USER_TYPE,
        QTY
    )
    SELECT 
		YEAR(CREATED_AT),
		MONTH(CREATED_AT),
		DAY(CREATED_AT),
		USER_CURRENT_TYPE,
        COUNT(CREATED_AT)
	FROM USERS 
	WHERE 
        CLASS					= 201 AND
        USER_CURRENT_TYPE		IN (2, 3) AND
		IF(IN_DUMMY_ACTIVATE 	= TRUE, (TEST = TRUE OR TEST = FALSE), TEST = FALSE)
	GROUP BY 
		YEAR(CREATED_AT), 
		MONTH(CREATED_AT), 
		DAY(CREATED_AT), 
		USER_CURRENT_TYPE;	
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'PARAM_YEAR'		, PARAM_YEAR, 
			'PARAM_MONTH'		, PARAM_MONTH, 
			'PARAM_DAY'			, PARAM_DAY, 
			'USER_TYPE'			, USER_TYPE, 
			'QTY'				, QTY
		)
	) 
	INTO STAT_LIST 
	FROM ADMIN_RETRIEVE_STAT_REGISTERATION_DAILY_WITHOUT_HANDLER_TEMP;	
    DROP TABLE IF EXISTS ADMIN_RETRIEVE_STAT_REGISTERATION_DAILY_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_stat_registeration_month_without_handler`(
    IN IN_DUMMY_ACTIVATE				TINYINT,
	IN IN_YEAR							INT,
	IN IN_MONTH							INT,
    OUT STAT_LIST						JSON
)
BEGIN
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_STAT_REGISTERATION_MONTH_TEMP (
        PARAM_YEAR			INT,
        PARAM_MONTH			INT,
        PARAM_DAY			INT,
        USER_TYPE			INT,
        QTY					INT
	);
    
	INSERT INTO ADMIN_RETRIEVE_STAT_REGISTERATION_MONTH_TEMP(
		PARAM_YEAR,
        PARAM_MONTH,
        PARAM_DAY,
        USER_TYPE,
        QTY
    )
    SELECT 
		YEAR(CREATED_AT),
		MONTH(CREATED_AT),
		DAY(CREATED_AT),
		USER_CURRENT_TYPE,
        COUNT(CREATED_AT)
	FROM USERS 
	WHERE 
		YEAR(CREATED_AT) 		= IN_YEAR AND
        MONTH(CREATED_AT)		= IN_MONTH AND
        CLASS					= 201 AND
        USER_CURRENT_TYPE		IN (2, 3) AND
		IF(IN_DUMMY_ACTIVATE 	= TRUE, (TEST = TRUE OR TEST = FALSE), TEST = FALSE)
	GROUP BY 
		YEAR(CREATED_AT), 
		MONTH(CREATED_AT), 
		DAY(CREATED_AT), 
		USER_CURRENT_TYPE;	
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'PARAM_YEAR'		, PARAM_YEAR, 
			'PARAM_MONTH'		, PARAM_MONTH, 
			'PARAM_DAY'			, PARAM_DAY, 
			'USER_TYPE'			, USER_TYPE, 
			'QTY'				, QTY
		)
	) 
	INTO STAT_LIST 
	FROM ADMIN_RETRIEVE_STAT_REGISTERATION_MONTH_TEMP;	
    DROP TABLE IF EXISTS ADMIN_RETRIEVE_STAT_REGISTERATION_MONTH_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_stat_registeration_without_handler`(
	IN IN_YEAR		INT,
	IN IN_MONTH		INT,
    OUT STAT_LIST	JSON
)
BEGIN
	IF IN_MONTH IS NOT NULL THEN
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'PARAM_YEAR'		, YEAR(CREATED_AT), 
				'PARAM_MONTH'		, MONTH(CREATED_AT), 
				'PARAM_DAY'			, DAY(CREATED_AT), 
				'USER_TYPE'			, TRMT_BIZ_CODE, 
				'QTY'				, COUNT(CREATED_AT)
			)
		) 
		INTO STAT_LIST
		FROM COMP_SITE 
		GROUP BY 
			YEAR(CREATED_AT), 
			MONTH(CREATED_AT), 
			DAY(CREATED_AT), 
			TRMT_BIZ_CODE
		HAVING 
			YEAR(CREATED_AT) 		= IN_YEAR AND 
            MONTH(CREATED_AT) 		= IN_MONTH;
    ELSE
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'PARAM_YEAR'		, YEAR(CREATED_AT), 
				'PARAM_MONTH'		, MONTH(CREATED_AT), 
				'USER_TYPE'			, TRMT_BIZ_CODE, 
				'QTY'				, COUNT(CREATED_AT)
			)
		) 
		INTO STAT_LIST
		FROM COMP_SITE 
		GROUP BY 
			YEAR(CREATED_AT), 
			MONTH(CREATED_AT), 
			TRMT_BIZ_CODE
		HAVING 
			YEAR(CREATED_AT) 		= IN_YEAR;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_stat_registeration_year_without_handler`(
    IN IN_DUMMY_ACTIVATE				TINYINT,
	IN IN_YEAR							INT,
    OUT STAT_LIST						JSON
)
BEGIN
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_STAT_REGISTERATION_YEAR_TEMP (
        PARAM_YEAR			INT,
        PARAM_MONTH			INT,
        USER_TYPE			INT,
        QTY					INT
	);
    
	INSERT INTO ADMIN_RETRIEVE_STAT_REGISTERATION_YEAR_TEMP(
		PARAM_YEAR,
        PARAM_MONTH,
        USER_TYPE,
        QTY
    )
    SELECT 
		YEAR(CREATED_AT),
		MONTH(CREATED_AT),
		USER_CURRENT_TYPE,
        COUNT(CREATED_AT)
	FROM USERS 
	WHERE 
		YEAR(CREATED_AT) 		= IN_YEAR AND
        CLASS					= 201 AND
        USER_CURRENT_TYPE		IN (2, 3) AND
		IF(IN_DUMMY_ACTIVATE 	= TRUE, (TEST = TRUE OR TEST = FALSE), TEST = FALSE)
	GROUP BY 
		YEAR(CREATED_AT), 
		MONTH(CREATED_AT), 
		USER_CURRENT_TYPE;	
        
    /*
    SELECT 
		YEAR(CREATED_AT),
		MONTH(CREATED_AT),
		TRMT_BIZ_CODE,
        COUNT(CREATED_AT)
	FROM COMP_SITE 
	WHERE 
		YEAR(CREATED_AT) 		= IN_YEAR AND
        TEST					= FALSE
	GROUP BY 
		YEAR(CREATED_AT), 
		MONTH(CREATED_AT), 
		TRMT_BIZ_CODE;	
    */
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'PARAM_YEAR'		, PARAM_YEAR, 
			'PARAM_MONTH'		, PARAM_MONTH, 
			'USER_TYPE'			, USER_TYPE, 
			'QTY'				, QTY
		)
	) 
	INTO STAT_LIST 
	FROM ADMIN_RETRIEVE_STAT_REGISTERATION_YEAR_TEMP;	
    DROP TABLE IF EXISTS ADMIN_RETRIEVE_STAT_REGISTERATION_YEAR_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_users`(
    IN IN_PARAMS					JSON
)
BEGIN
	DECLARE VAR_USER_ID					BIGINT DEFAULT NULL;
	DECLARE VAR_SITE_ID					BIGINT DEFAULT NULL;
	DECLARE VAR_PAGE_SIZE				INT DEFAULT NULL;
	DECLARE VAR_OFFSET_SIZE				INT DEFAULT NULL;
	DECLARE VAR_CONFIRMED				TINYINT DEFAULT NULL;
	DECLARE VAR_ACTIVE					TINYINT DEFAULT NULL;
	DECLARE VAR_SEARCH					VARCHAR(255) DEFAULT NULL;
	DECLARE rtn_val						INT DEFAULT 0;
	DECLARE msg_txt						VARCHAR(200) DEFAULT 'success';
	DECLARE json_data					JSON DEFAULT NULL;
    
	SELECT 
		USER_ID, 
        SITE_ID, 
        PAGE_SIZE, 
        OFFSET_SIZE, 
        CONFIRMED, 
        ACTIVE, 
        SEARCH
    INTO 
		VAR_USER_ID, 
        VAR_SITE_ID, 
        VAR_PAGE_SIZE, 
        VAR_OFFSET_SIZE, 
        VAR_CONFIRMED, 
        VAR_ACTIVE, 
        VAR_SEARCH
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		SITE_ID 				BIGINT 				PATH "$.SITE_ID",
		PAGE_SIZE	 			INT					PATH "$.PAGE_SIZE",
		OFFSET_SIZE	 			INT					PATH "$.OFFSET_SIZE",
		CONFIRMED	 			TINYINT				PATH "$.CONFIRMED",
		ACTIVE		 			TINYINT				PATH "$.ACTIVE",
		SEARCH		 			VARCHAR(255)		PATH "$.SEARCH"
	)) AS PARAMS;
    
	CALL sp_admin_retrieve_users_without_handler(
		VAR_SITE_ID,
        VAR_PAGE_SIZE,
        VAR_OFFSET_SIZE,
        VAR_CONFIRMED, 
        VAR_ACTIVE, 
        VAR_SEARCH,
        json_data
    );
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_retrieve_users_without_handler`(
    IN IN_SITE_ID					BIGINT,
    IN IN_PAGE_SIZE					INT,
    IN IN_OFFSET_SIZE				INT,
    IN IN_CONFIRMED					TINYINT,
    IN IN_ACTIVE					TINYINT,
    IN IN_SEARCH					VARCHAR(255),
    OUT OUT_USER_LIST				JSON
)
BEGIN

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;   
    DECLARE CUR_ID								BIGINT;
    DECLARE CUR_USER_ID							VARCHAR(50) DEFAULT NULL;
    DECLARE CUR_USER_NAME						VARCHAR(20) DEFAULT NULL;
    DECLARE CUR_PHONE							VARCHAR(20) DEFAULT NULL;   
    DECLARE CUR_COMPANY_ID						BIGINT;
    DECLARE CUR_SITE_ID							BIGINT; 
    DECLARE CUR_ACTIVE							TINYINT; 
    DECLARE CUR_CLASS							INT; 
    DECLARE CUR_CS_MANAGER_ID					BIGINT; 
    DECLARE CUR_CONFIRMED						TINYINT; 
    DECLARE CUR_CONFIRMED_AT					DATETIME; 
    DECLARE CUR_CREATED_AT						DATETIME; 
    DECLARE CUR_UPDATED_AT						DATETIME; 
    DECLARE CUR_USER_CURRENT_TYPE				INT; 
    DECLARE CUR_AVATAR_PATH						VARCHAR(255); 
    DECLARE CUR_PUSH_ENABLED					TINYINT; 
    DECLARE CUR_NOTICE_ENABLED					TINYINT; 
    DECLARE VAR_COMPANY_NAME					VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_SITE_NAME						VARCHAR(255) DEFAULT NULL;
    DECLARE VAR_CS_MANAGER_NAME					VARCHAR(50) DEFAULT NULL;
    DECLARE VAR_USER_CURRENT_TYPE_NAME			VARCHAR(20) DEFAULT NULL;  
    DECLARE VAR_LAST_PAGE						INT DEFAULT NULL;   
    DECLARE VAR_RECORD_COUNT					INT DEFAULT 0;   
    DECLARE VAR_USER_LIST						JSON DEFAULT NULL;   
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		ID, 
		USER_ID, 
		USER_NAME, 
		PHONE, 
		BELONG_TO, 
		AFFILIATED_SITE, 
		ACTIVE, 
		CLASS, 
		CS_MANAGER_ID, 
		CONFIRMED, 
		CONFIRMED_AT, 
		CREATED_AT, 
		UPDATED_AT, 
		USER_CURRENT_TYPE, 
		AVATAR_PATH, 
		PUSH_ENABLED, 
		NOTICE_ENABLED
    FROM USERS
	WHERE 
		TEST = FALSE AND
        IF(IN_CONFIRMED IS NULL,
			IF(IN_ACTIVE IS NULL,
				IF(IN_SEARCH IS NULL,
					AFFILIATED_SITE = IN_SITE_ID,
					AFFILIATED_SITE = IN_SITE_ID AND
                    (
						USER_ID LIKE CONCAT('%', IN_SEARCH,'%') OR
						USER_NAME LIKE CONCAT('%', IN_SEARCH,'%') OR
                        REPLACE(PHONE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                    )
                ),
				IF(IN_SEARCH IS NULL,
					AFFILIATED_SITE = IN_SITE_ID AND
					ACTIVE = IN_ACTIVE,
					AFFILIATED_SITE = IN_SITE_ID AND
					ACTIVE = IN_ACTIVE AND
                    (
						USER_ID LIKE CONCAT('%', IN_SEARCH,'%') OR
						USER_NAME LIKE CONCAT('%', IN_SEARCH,'%') OR
                        REPLACE(PHONE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                    )
                )
            ),
			IF(IN_ACTIVE IS NULL,
				IF(IN_SEARCH IS NULL,
					AFFILIATED_SITE = IN_SITE_ID AND
					CONFIRMED = IN_CONFIRMED,
					AFFILIATED_SITE = IN_SITE_ID AND
					CONFIRMED = IN_CONFIRMED AND
                    (
						USER_ID LIKE CONCAT('%', IN_SEARCH,'%') OR
						USER_NAME LIKE CONCAT('%', IN_SEARCH,'%') OR
                        REPLACE(PHONE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                    )
                ),
				IF(IN_SEARCH IS NULL,
					AFFILIATED_SITE = IN_SITE_ID AND
					CONFIRMED = IN_CONFIRMED AND
					ACTIVE = IN_ACTIVE,
					AFFILIATED_SITE = IN_SITE_ID AND
					CONFIRMED = IN_CONFIRMED AND
					ACTIVE = IN_ACTIVE AND
                    (
						USER_ID LIKE CONCAT('%', IN_SEARCH,'%') OR
						USER_NAME LIKE CONCAT('%', IN_SEARCH,'%') OR
                        REPLACE(PHONE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                    )
                )
            )
		)
	ORDER BY CREATED_AT DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	SELECT COUNT(ID) INTO VAR_RECORD_COUNT
    FROM USERS
	WHERE 
		TEST = FALSE AND
        IF(IN_CONFIRMED IS NULL,
			IF(IN_ACTIVE IS NULL,
				IF(IN_SEARCH IS NULL,
					AFFILIATED_SITE = IN_SITE_ID,
					AFFILIATED_SITE = IN_SITE_ID AND
                    (
						USER_ID LIKE CONCAT('%', IN_SEARCH,'%') OR
						USER_NAME LIKE CONCAT('%', IN_SEARCH,'%') OR
                        REPLACE(PHONE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                    )
                ),
				IF(IN_SEARCH IS NULL,
					AFFILIATED_SITE = IN_SITE_ID AND
					ACTIVE = IN_ACTIVE,
					AFFILIATED_SITE = IN_SITE_ID AND
					ACTIVE = IN_ACTIVE AND
                    (
						USER_ID LIKE CONCAT('%', IN_SEARCH,'%') OR
						USER_NAME LIKE CONCAT('%', IN_SEARCH,'%') OR
                        REPLACE(PHONE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                    )
                )
            ),
			IF(IN_ACTIVE IS NULL,
				IF(IN_SEARCH IS NULL,
					AFFILIATED_SITE = IN_SITE_ID AND
					CONFIRMED = IN_CONFIRMED,
					AFFILIATED_SITE = IN_SITE_ID AND
					CONFIRMED = IN_CONFIRMED AND
                    (
						USER_ID LIKE CONCAT('%', IN_SEARCH,'%') OR
						USER_NAME LIKE CONCAT('%', IN_SEARCH,'%') OR
                        REPLACE(PHONE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                    )
                ),
				IF(IN_SEARCH IS NULL,
					AFFILIATED_SITE = IN_SITE_ID AND
					CONFIRMED = IN_CONFIRMED AND
					ACTIVE = IN_ACTIVE,
					AFFILIATED_SITE = IN_SITE_ID AND
					CONFIRMED = IN_CONFIRMED AND
					ACTIVE = IN_ACTIVE AND
                    (
						USER_ID LIKE CONCAT('%', IN_SEARCH,'%') OR
						USER_NAME LIKE CONCAT('%', IN_SEARCH,'%') OR
                        REPLACE(PHONE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
                    )
                )
            )
		);   
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_USERS_WITHOUT_HANDLER_TEMP (
		ID								BIGINT,
		USER_ID							VARCHAR(50) DEFAULT NULL,
		USER_NAME						VARCHAR(20) DEFAULT NULL,
		PHONE							VARCHAR(20) DEFAULT NULL,   
		COMPANY_ID						BIGINT DEFAULT NULL,
		SITE_ID							BIGINT DEFAULT NULL, 
		ACTIVE							TINYINT DEFAULT TRUE, 
		CLASS							INT DEFAULT 201,
		CS_MANAGER_ID					BIGINT DEFAULT NULL,
		CONFIRMED						TINYINT DEFAULT TRUE, 
		CONFIRMED_AT					DATETIME DEFAULT NULL, 
		CREATED_AT						DATETIME DEFAULT NULL, 
		UPDATED_AT						DATETIME DEFAULT NULL, 
		USER_CURRENT_TYPE				INT DEFAULT NULL,
		AVATAR_PATH						VARCHAR(255) DEFAULT NULL,
		PUSH_ENABLED					TINYINT DEFAULT TRUE,
		NOTICE_ENABLED					TINYINT DEFAULT TRUE, 
		COMPANY_NAME					VARCHAR(255) DEFAULT NULL,
		SITE_NAME						VARCHAR(255) DEFAULT NULL,
		CS_MANAGER_NAME					VARCHAR(50) DEFAULT NULL,
		USER_CURRENT_TYPE_NAME			VARCHAR(20) DEFAULT NULL   
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID,
			CUR_USER_ID,
			CUR_USER_NAME,
			CUR_PHONE,
			CUR_COMPANY_ID,
			CUR_SITE_ID,
			CUR_ACTIVE,
			CUR_CLASS,
			CUR_CS_MANAGER_ID,
			CUR_CONFIRMED,
			CUR_CONFIRMED_AT,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_USER_CURRENT_TYPE,
			CUR_AVATAR_PATH,
			CUR_PUSH_ENABLED,
			CUR_NOTICE_ENABLED;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_RETRIEVE_USERS_WITHOUT_HANDLER_TEMP(
			ID, 
			USER_ID, 
			USER_NAME, 
			PHONE, 
			COMPANY_ID, 
			SITE_ID, 
			ACTIVE, 
			CLASS, 
			CS_MANAGER_ID, 
			CONFIRMED, 
			CONFIRMED_AT, 
			CREATED_AT, 
			UPDATED_AT, 
			USER_CURRENT_TYPE, 
			AVATAR_PATH, 
			PUSH_ENABLED, 
			NOTICE_ENABLED
		)
		VALUES(
			CUR_ID,
			CUR_USER_ID,
			CUR_USER_NAME,
			CUR_PHONE,
			CUR_COMPANY_ID,
			CUR_SITE_ID,
			CUR_ACTIVE,
			CUR_CLASS,
			CUR_CS_MANAGER_ID,
			CUR_CONFIRMED,
			CUR_CONFIRMED_AT,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_USER_CURRENT_TYPE,
			CUR_AVATAR_PATH,
			CUR_PUSH_ENABLED,
			CUR_NOTICE_ENABLED
		);
        
        IF CUR_COMPANY_ID > 0 THEN
			SELECT COMP_NAME INTO VAR_COMPANY_NAME
            FROM COMPANY
            WHERE ID = CUR_COMPANY_ID;
        END IF;        
        
        IF CUR_SITE_ID > 0 THEN
			SELECT SITE_NAME INTO VAR_SITE_NAME
            FROM COMP_SITE
            WHERE ID = CUR_SITE_ID;
        END IF;       
        
        IF CUR_USER_CURRENT_TYPE IS NOT NULL THEN
			SELECT TYPE_KO INTO VAR_USER_CURRENT_TYPE_NAME
            FROM USER_TYPE
            WHERE ID = CUR_USER_CURRENT_TYPE;
        END IF;   
        
		UPDATE ADMIN_RETRIEVE_USERS_WITHOUT_HANDLER_TEMP 
        SET 
			COMPANY_NAME 			= VAR_COMPANY_NAME,
			SITE_NAME 				= VAR_SITE_NAME,
			CS_MANAGER_NAME			= VAR_CS_MANAGER_NAME,
			USER_CURRENT_TYPE_NAME	= VAR_USER_CURRENT_TYPE_NAME
        WHERE ID 					= CUR_ID;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
    
	SET VAR_LAST_PAGE = CEILING(VAR_RECORD_COUNT / IN_PAGE_SIZE); 
            
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'						, ID, 
        'USER_ID'					, USER_ID, 
        'USER_NAME'					, USER_NAME, 
        'PHONE'						, PHONE, 
        'COMPANY_ID'				, COMPANY_ID, 
        'SITE_ID'					, SITE_ID, 
        'ACTIVE'					, ACTIVE, 
        'CLASS'						, CLASS, 
        'CS_MANAGER_ID'				, CS_MANAGER_ID, 
        'CONFIRMED'					, CONFIRMED, 
        'CONFIRMED_AT'				, CONFIRMED_AT, 
        'CREATED_AT'				, CREATED_AT, 
        'UPDATED_AT'				, UPDATED_AT, 
        'USER_CURRENT_TYPE'			, USER_CURRENT_TYPE, 
        'AVATAR_PATH'				, AVATAR_PATH, 
        'PUSH_ENABLED'				, PUSH_ENABLED, 
        'NOTICE_ENABLED'			, NOTICE_ENABLED, 
        'COMPANY_NAME'				, COMPANY_NAME, 
        'SITE_NAME'					, SITE_NAME, 
        'CS_MANAGER_NAME'			, CS_MANAGER_NAME, 
        'USER_CURRENT_TYPE_NAME'	, USER_CURRENT_TYPE_NAME
	)) 
    INTO VAR_USER_LIST FROM ADMIN_RETRIEVE_USERS_WITHOUT_HANDLER_TEMP;    
    
    SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'LAST_PAGE'					, VAR_LAST_PAGE,
		'USERS'						, VAR_USER_LIST
    )) INTO OUT_USER_LIST;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_USERS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_set_is_read_true`(
	IN IN_ROOM_ID				BIGINT,
    IN IN_USER_ID				BIGINT,
    OUT rtn_val					INT,
    OUT msg_txt					VARCHAR(200)
)
BEGIN
	DECLARE VAR_RECORD_COUNT			INT DEFAULT 0;
	DECLARE VAR_REG_DT					DATETIME DEFAULT NOW();
    
	SELECT COUNT(ID) INTO VAR_RECORD_COUNT 
    FROM CHATS
    WHERE 
		USER_ID <> IN_USER_ID AND
		ROOM_ID = IN_ROOM_ID AND
        IS_READ = FALSE;
        
	IF VAR_RECORD_COUNT > 0 THEN
		CALL sp_req_current_time(VAR_REG_DT);
		UPDATE CHATS
		SET 
			IS_READ = TRUE,
            READ_AT = VAR_REG_DT,
            UPDATED_AT = VAR_REG_DT
		WHERE 
			USER_ID <> IN_USER_ID AND
			ROOM_ID = IN_ROOM_ID AND
			IS_READ = FALSE;
			
		IF ROW_COUNT() > 0 THEN 
		/* 성공한 경우 */
			SET rtn_val = 0;
            SET msg_txt = 'success';
		ELSE
		/* 실패한 경우 */
			SET rtn_val = 100302;
            SET msg_txt = 'fail to update';			
		END IF;
	ELSE
		SET rtn_val = 100301;
		SET msg_txt = 'messages has already read';
    END IF;
    
	
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_bidding_details`(
	IN IN_PARAMS			JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_update_bidding_details
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE	VAR_ADMIN_ID		BIGINT;
    DECLARE	VAR_BIDDING_DETAILS	JSON;
    DECLARE	VAR_ID				BIGINT;
    DECLARE	VAR_USER_ID			VARCHAR(255);
    DECLARE	VAR_USER_NAME		VARCHAR(255);
    DECLARE	VAR_PHONE			VARCHAR(255);
    DECLARE	VAR_ACTIVE			TINYINT;
    DECLARE	VAR_CS_MANAGER_ID	BIGINT;
    DECLARE	VAR_CONFIRMED		TINYINT;
    DECLARE	VAR_AVATAR_PATH		VARCHAR(255);
    DECLARE	VAR_PUSH_ENABLED	TINYINT;
    DECLARE	VAR_NOTICE_ENABLED	TINYINT;
    DECLARE	VAR_REG_DT			DATETIME;
	DECLARE rtn_val				INT						DEFAULT 0;
	DECLARE msg_txt				VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data			JSON					DEFAULT NULL;	
    
	SELECT 
		ADMIN_ID,
		BIDDING_DETAILS
    INTO 
		VAR_ADMIN_ID,
        VAR_BIDDING_DETAILS
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ADMIN_ID	 		BIGINT				PATH "$.ADMIN_ID",
		BIDDING_DETAILS 	JSON				PATH "$.BIDDING_DETAILS"
	)) AS PARAMS;
    
    IF JSON_LENGTH(IN_PARAMS) > 0 THEN
		CALL sp_admin_update_bidding_details_without_handler(
			VAR_BIDDING_DETAILS,
			rtn_val,
			msg_txt
		);
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Nothing updated';
    END IF;
    
	CALL sp_return_results(rtn_val, msg_txt, IN_PARAMS);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_bidding_details_without_handler`(
	IN IN_PARAMS			JSON,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_admin_update_bidding_details_without_handler
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE	VAR_ID				BIGINT;
    DECLARE	VAR_ORDER_VISIBLE	TINYINT;
    DECLARE	VAR_BIDDING_VISIBLE	TINYINT;
    DECLARE	VAR_REG_DT			DATETIME;
    
    SET rtn_val = 0;
    SET msg_txt = 'succss';    
    
	SELECT 
		ID,
		ORDER_VISIBLE,
		BIDDING_VISIBLE
	INTO 
		VAR_ID,
		VAR_ORDER_VISIBLE,
		VAR_BIDDING_VISIBLE
	FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ID			 	BIGINT				PATH "$.ID",
		ORDER_VISIBLE  	TINYINT				PATH "$.ORDER_VISIBLE",
		BIDDING_VISIBLE	TINYINT				PATH "$.BIDDING_VISIBLE"
	)) AS PARAMS;
	
		
	IF VAR_ID IS NOT NULL THEN    
		CALL sp_req_current_time(VAR_REG_DT);
		UPDATE COLLECTOR_BIDDING
		SET
			ORDER_VISIBLE 		= VAR_ORDER_VISIBLE,
			BIDDING_VISIBLE 	= VAR_BIDDING_VISIBLE,
			UPDATED_AT			= VAR_REG_DT
		WHERE ID = VAR_ID;
		IF ROW_COUNT() = 0 THEN
			SET rtn_val = 100602;
			SET msg_txt = 'failed to update bidding data';
		END IF;
	ELSE
		SET rtn_val = 100601;
		SET msg_txt = 'BIDDING ID should not be null';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_note`(
    IN IN_PARAMS					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_update_note
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_USER_ID			BIGINT DEFAULT NULL;
	DECLARE VAR_NOTE_DETAILS	JSON DEFAULT NULL;
	DECLARE rtn_val				INT DEFAULT 0;
	DECLARE msg_txt				VARCHAR(200) DEFAULT 'success1123';
	DECLARE json_data			JSON DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	SELECT 
		USER_ID, 
        NOTE_DETAILS
    INTO 
		VAR_USER_ID, 
        VAR_NOTE_DETAILS
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		NOTE_DETAILS			JSON				PATH "$.NOTE_DETAILS"
	)) AS PARAMS;
    
    CALL sp_admin_update_note_without_handler(
		VAR_NOTE_DETAILS,
        rtn_val,
        msg_txt
    );
    
    IF rtn_val > 0 THEN
		SIGNAL SQLSTATE '23000';
    END IF;
    SET json_data = IN_PARAMS;
	CALL sp_return_results(rtn_val, msg_txt, VAR_NOTE_DETAILS);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_note_without_handler`(
	IN IN_PARAMS			JSON,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_admin_update_note_without_handler
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE	VAR_ID				BIGINT;
    DECLARE	VAR_NOTE			TEXT;
    DECLARE	VAR_REG_DT			DATETIME;
    
    SET rtn_val = 0;
    SET msg_txt = 'succss9876';    
    
	SELECT 
		ID,
		NOTE
	INTO 
		VAR_ID,
		VAR_NOTE
	FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ID			 	BIGINT				PATH "$.ID",
		NOTE		 	TEXT				PATH "$.NOTE"
	)) AS PARAMS;
	
	CALL sp_req_current_time(VAR_REG_DT);
		
	IF VAR_ID IS NOT NULL THEN    
		CALL sp_req_current_time(VAR_REG_DT);
		UPDATE CS_NOTE
		SET
			NOTE 			= VAR_NOTE,
			UPDATED_AT		= VAR_REG_DT
		WHERE ID = VAR_ID;
		IF ROW_COUNT() = 0 THEN
			SET rtn_val = 101002;
			SET msg_txt = 'failed to update note data';
		END IF;
	ELSE
		SET rtn_val = 101001;
		SET msg_txt = 'Note ID should not be null';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_order_details`(
	IN IN_PARAMS			JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_update_order_details
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE	VAR_ADMIN_ID		BIGINT;
    DECLARE	VAR_ORDER_DETAILS	JSON;
    DECLARE	VAR_COUNSELING_DATA	JSON;
	DECLARE rtn_val				INT						DEFAULT 0;
	DECLARE msg_txt				VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data			JSON					DEFAULT NULL;	
    
	SELECT 
		ADMIN_ID,
		ORDER_DETAILS
    INTO 
		VAR_ADMIN_ID,
        VAR_ORDER_DETAILS
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ADMIN_ID	 	BIGINT				PATH "$.ADMIN_ID",
		ORDER_DETAILS 	JSON				PATH "$.ORDER_DETAILS"
	)) AS PARAMS;
    
    /*
	SELECT 
		COUNSELING_DATA
    INTO 
		VAR_COUNSELING_DATA
    FROM JSON_TABLE(VAR_ORDER_DETAILS, "$[*]" COLUMNS(
		COUNSELING_DATA	 	JSON				PATH "$.COUNSELING_DATA"
	)) AS PARAMS_COUNSELING;    
    */
    
    IF JSON_LENGTH(IN_PARAMS) > 0 THEN
		CALL sp_admin_update_order_details_without_handler(
			VAR_ORDER_DETAILS,
			rtn_val,
			msg_txt
		);
        /*
        IF rtn_val = 0 THEN
			CALL sp_admin_insert_note_without_handler(
				VAR_COUNSELING_DATA,
				rtn_val,
				msg_txt
			);
        END IF;
        */
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Nothing updated';
    END IF;
    
	CALL sp_return_results(rtn_val, msg_txt, IN_PARAMS);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_order_details_without_handler`(
	IN IN_PARAMS			JSON,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_admin_update_order_details_without_handler
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE	VAR_ID				BIGINT;
    DECLARE	VAR_IS_DELETED		TINYINT;
    DECLARE	VAR_CS_CONFIRMED	TINYINT;
    DECLARE	VAR_REG_DT			DATETIME;
    
    SET rtn_val = 0;
    SET msg_txt = 'succss';    
    
	SELECT 
		ID,
		IS_DELETED,
		CS_CONFIRMED
	INTO 
		VAR_ID,
		VAR_IS_DELETED,
		VAR_CS_CONFIRMED
	FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ID			 	BIGINT				PATH "$.ID",
		IS_DELETED	 	TINYINT				PATH "$.IS_DELETED",
		CS_CONFIRMED	TINYINT				PATH "$.CS_CONFIRMED"
	)) AS PARAMS;
        
	IF VAR_ID IS NOT NULL THEN    
		CALL sp_req_current_time(VAR_REG_DT);
		UPDATE SITE_WSTE_DISPOSAL_ORDER
		SET
			IS_DELETED 		= VAR_IS_DELETED,
			CS_CONFIRMED 	= VAR_CS_CONFIRMED,
			UPDATED_AT		= VAR_REG_DT
		WHERE ID = VAR_ID;
		IF ROW_COUNT() = 0 THEN
			SET rtn_val = 100602;
			SET msg_txt = 'failed to update order data';
		END IF;
	ELSE
		SET rtn_val = 100601;
		SET msg_txt = 'Order ID should not be null';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_order_info`(
    IN IN_PARAMS					JSON
)
BEGIN
	DECLARE rtn_val							INT 			DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) 	DEFAULT 'success';
    DECLARE VAR_RETURNS						JSON			DEFAULT NULL;
    DECLARE json_data						JSON 			DEFAULT NULL;
    
    SET VAR_RETURNS = NULL;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
        'RETURNS'				, VAR_RETURNS,
        'INPUT_PARAMS'			, IN_PARAMS
	)) 
    INTO json_data;
    
	CALL sp_return_results(json_data, msg_txt, json_data);

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_personal_details`(
	IN IN_PARAMS			JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_get_personal_details_update
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE	VAR_ADMIN_ID		BIGINT;
    DECLARE	VAR_USER_DETAILS	JSON;
    DECLARE	VAR_ID				BIGINT;
    DECLARE	VAR_USER_ID			VARCHAR(255);
    DECLARE	VAR_USER_NAME		VARCHAR(255);
    DECLARE	VAR_PHONE			VARCHAR(255);
    DECLARE	VAR_ACTIVE			TINYINT;
    DECLARE	VAR_CS_MANAGER_ID	BIGINT;
    DECLARE	VAR_CONFIRMED		TINYINT;
    DECLARE	VAR_AVATAR_PATH		VARCHAR(255);
    DECLARE	VAR_PUSH_ENABLED	TINYINT;
    DECLARE	VAR_NOTICE_ENABLED	TINYINT;
    DECLARE	VAR_REG_DT			DATETIME;
	DECLARE rtn_val				INT						DEFAULT 0;
	DECLARE msg_txt				VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data			JSON					DEFAULT NULL;	
    
	SELECT 
		ADMIN_ID,
		USER_DETAILS
    INTO 
		VAR_ADMIN_ID,
        VAR_USER_DETAILS
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ADMIN_ID	 	BIGINT				PATH "$.ADMIN_ID",
		USER_DETAILS 	JSON				PATH "$.USER_DETAILS"
	)) AS PARAMS;
    
    IF JSON_LENGTH(IN_PARAMS) > 0 THEN
		CALL sp_admin_update_personal_details_without_handler(
			VAR_USER_DETAILS,
			rtn_val,
			msg_txt
		);
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Nothing updated';
    END IF;
    
	CALL sp_return_results(rtn_val, msg_txt, IN_PARAMS);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_personal_details_without_handler`(
	IN IN_PARAMS			JSON,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_admin_get_personal_details_update
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE	VAR_ID				BIGINT;
    DECLARE	VAR_USER_ID			VARCHAR(255);
    DECLARE	VAR_USER_NAME		VARCHAR(255);
    DECLARE	VAR_PHONE			VARCHAR(255);
    DECLARE	VAR_ACTIVE			TINYINT;
    DECLARE	VAR_CS_MANAGER_ID	BIGINT;
    DECLARE	VAR_CONFIRMED		TINYINT;
    DECLARE	VAR_AVATAR_PATH		VARCHAR(255);
    DECLARE	VAR_PUSH_ENABLED	TINYINT;
    DECLARE	VAR_NOTICE_ENABLED	TINYINT;
    DECLARE	VAR_SITE_ID			BIGINT;
    DECLARE	VAR_REG_DT			DATETIME;
    
    SET rtn_val = 0;
    SET msg_txt = 'succss';
    
    
	SELECT 
		ID,
		USER_ID,
		USER_NAME,
		PHONE,
		ACTIVE,
		CS_MANAGER_ID,
		CONFIRMED,
		AVATAR_PATH,
		PUSH_ENABLED,
		NOTICE_ENABLED,
		SITE_ID
	INTO 
		VAR_ID,
		VAR_USER_ID,
		VAR_USER_NAME,
		VAR_PHONE,
		VAR_ACTIVE,
		VAR_CS_MANAGER_ID,
		VAR_CONFIRMED,
		VAR_AVATAR_PATH,
		VAR_PUSH_ENABLED,
		VAR_NOTICE_ENABLED,
		VAR_SITE_ID
	FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ID			 	BIGINT				PATH "$.ID",
		USER_ID		 	VARCHAR(255)		PATH "$.USER_ID",
		USER_NAME		VARCHAR(255)		PATH "$.USER_NAME",
		PHONE			VARCHAR(255)		PATH "$.PHONE",
		ACTIVE			TINYINT				PATH "$.ACTIVE",
		CS_MANAGER_ID	BIGINT				PATH "$.CS_MANAGER_ID",
		CONFIRMED		TINYINT				PATH "$.CONFIRMED",
		AVATAR_PATH		VARCHAR(255)		PATH "$.AVATAR_PATH",
		PUSH_ENABLED	TINYINT				PATH "$.PUSH_ENABLED",
		NOTICE_ENABLED	TINYINT				PATH "$.NOTICE_ENABLED",
		SITE_ID			BIGINT				PATH "$.SITE_ID"
	)) AS PARAMS;
	
		
	IF VAR_ID IS NOT NULL THEN    
		CALL sp_req_current_time(VAR_REG_DT);
		UPDATE USERS
		SET
			USER_ID 		= VAR_USER_ID,
			USER_NAME 		= VAR_USER_NAME,
			PHONE 			= VAR_PHONE,
			ACTIVE 			= VAR_ACTIVE,
			CS_MANAGER_ID 	= VAR_CS_MANAGER_ID,
			CONFIRMED 		= VAR_CONFIRMED,
			AVATAR_PATH 	= VAR_AVATAR_PATH,
			PUSH_ENABLED 	= VAR_PUSH_ENABLED,
			NOTICE_ENABLED 	= VAR_NOTICE_ENABLED,
			AFFILIATED_SITE = VAR_SITE_ID,
			UPDATED_AT		= VAR_REG_DT
		WHERE ID = VAR_ID;
		IF ROW_COUNT() = 0 THEN
			SET rtn_val = 100502;
			SET msg_txt = 'failed to update user data';
		END IF;
	ELSE
		SET rtn_val = 100501;
		SET msg_txt = 'USER ID should not be null';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_prospective_member_info`(
    IN IN_PARAMS					JSON
)
BEGIN
	DECLARE rtn_val						INT 				DEFAULT 0;
	DECLARE msg_txt						VARCHAR(200) 		DEFAULT 'success';
	DECLARE json_data					JSON 				DEFAULT NULL;
	DECLARE VAR_ADMIN_ID	 			BIGINT				DEFAULT NULL;
	DECLARE VAR_SITE_INFO				JSON				DEFAULT NULL;
	DECLARE VAR_ID	 					BIGINT				DEFAULT NULL;
	DECLARE VAR_COMP_NAME				VARCHAR(255)		DEFAULT NULL;
	DECLARE VAR_REP_NAME 				VARCHAR(255)		DEFAULT NULL;
	DECLARE VAR_CONTACT	 				VARCHAR(255)		DEFAULT NULL;
	DECLARE VAR_FAX	 					VARCHAR(255)		DEFAULT NULL;
	DECLARE VAR_EMAIL	 				VARCHAR(255)		DEFAULT NULL;
	DECLARE VAR_BIZ_CODE	 			VARCHAR(4)			DEFAULT NULL;
	DECLARE VAR_WEBSITE	 				VARCHAR(255)		DEFAULT NULL;
	DECLARE VAR_BCODE	 				VARCHAR(10)			DEFAULT NULL;
	DECLARE VAR_ADDR	 				VARCHAR(255)		DEFAULT NULL;
	DECLARE VAR_LNG	 					DECIMAL(12,9)		DEFAULT NULL;
	DECLARE VAR_LAT	 					DECIMAL(12,9)		DEFAULT NULL;
	DECLARE VAR_IS_TRANSIT	 			TINYINT				DEFAULT NULL;
	DECLARE VAR_CLOSED	 				TINYINT				DEFAULT NULL;
	DECLARE VAR_REG_DT	 				DATETIME			DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, IN_PARAMS);
	END;  
	START TRANSACTION;	
  
	SELECT 
		ADMIN_ID, 
        SITE_INFO
    INTO 
		VAR_ADMIN_ID, 
        VAR_SITE_INFO
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ADMIN_ID 				BIGINT 				PATH "$.ADMIN_ID",
		SITE_INFO 				JSON				PATH "$.SITE_INFO"
	)) AS PARAMS;    
  
	SELECT 
		ID,
		COMP_NAME,
		REP_NAME,
		CONTACT,
		FAX,
		EMAIL,
		BIZ_CODE,
		WEBSITE,
		BCODE,
		ADDR,
		LNG,
		LAT,
		IS_TRANSIT,
		CLOSED
    INTO 
		VAR_ID,
		VAR_COMP_NAME,
		VAR_REP_NAME,
		VAR_CONTACT,
		VAR_FAX,
		VAR_EMAIL,
		VAR_BIZ_CODE,
		VAR_WEBSITE,
		VAR_BCODE,
		VAR_ADDR,
		VAR_LNG,
		VAR_LAT,
		VAR_IS_TRANSIT,
		VAR_CLOSED
    FROM JSON_TABLE(VAR_SITE_INFO, "$[*]" COLUMNS(
		ID	 					BIGINT		 		PATH "$.ID",
		COMP_NAME				VARCHAR(255) 		PATH "$.COMP_NAME",
		REP_NAME 				VARCHAR(255) 		PATH "$.REP_NAME",
		CONTACT	 				VARCHAR(255)		PATH "$.CONTACT",
		FAX	 					VARCHAR(255)		PATH "$.FAX",
		EMAIL	 				VARCHAR(255)		PATH "$.EMAIL",
		BIZ_CODE	 			VARCHAR(4)			PATH "$.BIZ_CODE",
		WEBSITE	 				VARCHAR(255)		PATH "$.WEBSITE",
		BCODE	 				VARCHAR(10)			PATH "$.BCODE",
		ADDR	 				VARCHAR(255)		PATH "$.ADDR",
		LNG	 					DECIMAL(12,9)		PATH "$.LNG",
		LAT	 					DECIMAL(12,9)		PATH "$.LAT",
		IS_TRANSIT	 			TINYINT				PATH "$.IS_TRANSIT",
		CLOSED	 				TINYINT				PATH "$.CLOSED"
	)) AS SITE_INFO;
    
	CALL sp_req_current_time(VAR_REG_DT);
    UPDATE PROSPECTIVE_MEMBERS
    SET 
		COMP_NAME 		= VAR_COMP_NAME,
		REP_NAME 		= VAR_REP_NAME,
		CONTACT 		= VAR_CONTACT,
		FAX 			= VAR_FAX,
		EMAIL 			= VAR_EMAIL,
		BIZ_CODE 		= VAR_BIZ_CODE,
		WEBSITE 		= VAR_WEBSITE,
		BCODE 			= VAR_BCODE,
		ADDR 			= VAR_ADDR,
		LNG 			= VAR_LNG,
		LAT 			= VAR_LAT,
		IS_TRANSIT 		= VAR_IS_TRANSIT,
		CLOSED 			= VAR_CLOSED,
        UPDATED_AT 		= VAR_REG_DT
	WHERE 
        ID 				= VAR_ID;
	
    IF ROW_COUNT() = 0 THEN
		SET rtn_val = 101201;
		SET msg_txt = 'failed to update prospective member info';
		SIGNAL SQLSTATE '23000';
    END IF;
	
    COMMIT;
    CALL sp_return_results(rtn_val, msg_txt, IN_PARAMS);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_report_details`(
	IN IN_PARAMS			JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_update_report_details
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE	VAR_ADMIN_ID		BIGINT;
    DECLARE	VAR_REPORT_DETAILS	JSON;
	DECLARE rtn_val				INT						DEFAULT 0;
	DECLARE msg_txt				VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data			JSON					DEFAULT NULL;	
    
	SELECT 
		ADMIN_ID,
		REPORT_DETAILS
    INTO 
		VAR_ADMIN_ID,
        VAR_REPORT_DETAILS
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ADMIN_ID	 		BIGINT				PATH "$.ADMIN_ID",
		REPORT_DETAILS 		JSON				PATH "$.REPORT_DETAILS"
	)) AS PARAMS;
    
    IF JSON_LENGTH(IN_PARAMS) > 0 THEN
		CALL sp_admin_update_report_details_without_handler(
			VAR_REPORT_DETAILS,
			rtn_val,
			msg_txt
		);
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Nothing updated';
    END IF;
    
	CALL sp_return_results(rtn_val, msg_txt, IN_PARAMS);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_report_details_without_handler`(
	IN IN_PARAMS			JSON,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_admin_update_report_details_without_handler
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE	VAR_ID				BIGINT;
    DECLARE	VAR_CONFIRMED		TINYINT;
    DECLARE	VAR_PRICE			INT;
    DECLARE	VAR_QUANTITY		FLOAT;
    DECLARE	VAR_REG_DT			DATETIME;
    
    SET rtn_val = 0;
    SET msg_txt = 'succss';    
    
	SELECT 
		ID,
		CONFIRMED,
		PRICE,
		QUANTITY
	INTO 
		VAR_ID,
		VAR_CONFIRMED,
		VAR_PRICE,
		VAR_QUANTITY
	FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ID			 	BIGINT				PATH "$.ID",
		CONFIRMED  		TINYINT				PATH "$.CONFIRMED",
		PRICE			INT					PATH "$.PRICE",
		QUANTITY 		FLOAT				PATH "$.QUANTITY"
	)) AS PARAMS;
	
		
	IF VAR_ID IS NOT NULL THEN    
		CALL sp_req_current_time(VAR_REG_DT);
		UPDATE TRANSACTION_REPORT
		SET
			CONFIRMED 		= VAR_CONFIRMED,
			PRICE 			= VAR_PRICE,
			QUANTITY		= VAR_QUANTITY,
			UPDATED_AT		= VAR_REG_DT
		WHERE ID = VAR_ID;
		IF ROW_COUNT() = 0 THEN
			SET rtn_val = 100802;
			SET msg_txt = 'failed to update report data';
		END IF;
	ELSE
		SET rtn_val = 100801;
		SET msg_txt = 'Report ID should not be null';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_site_info`(
    IN IN_PARAMS					JSON
)
BEGIN
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_ADMIN_ID						BIGINT 			DEFAULT NULL;
	DECLARE VAR_USER_ID							VARCHAR(255)	DEFAULT NULL;
	DECLARE VAR_SITE_ID							BIGINT 			DEFAULT NULL;
	DECLARE VAR_SITE_NAME						VARCHAR(255) 	DEFAULT NULL;
	DECLARE VAR_BIZ_REG_CODE					VARCHAR(12) 	DEFAULT NULL;
	DECLARE VAR_BIZ_REG_IMG_PATH				VARCHAR(200)	DEFAULT NULL;
	DECLARE VAR_PERMIT_REG_CODE					VARCHAR(100)	DEFAULT NULL;
	DECLARE VAR_PERMIT_REG_IMG_PATH				VARCHAR(200)	DEFAULT NULL;
	DECLARE VAR_REP_NAME						VARCHAR(50) 	DEFAULT NULL;
	DECLARE VAR_B_CODE							VARCHAR(10) 	DEFAULT NULL;
	DECLARE VAR_ADDR							VARCHAR(255)	DEFAULT NULL;
	DECLARE JSON_WSTE_LIST						JSON 			DEFAULT NULL;
	DECLARE JSON_WSTE_CLASS_LIST				JSON 			DEFAULT NULL;
	DECLARE VAR_LAT								DECIMAL(12,9)	DEFAULT NULL;
	DECLARE VAR_LNG								DECIMAL(12,9)	DEFAULT NULL;
	DECLARE VAR_COMP_NAME						VARCHAR(100) 	DEFAULT NULL;
	DECLARE VAR_CONFIRMED						TINYINT 		DEFAULT NULL;
	DECLARE VAR_MANAGER_ID						BIGINT 			DEFAULT NULL;
	DECLARE JSON_MANAGER_LIST					JSON 			DEFAULT NULL;
	DECLARE VAR_ID								BIGINT 			DEFAULT NULL;
	DECLARE VAR_PHONE							VARCHAR(255) 	DEFAULT NULL;
	DECLARE VAR_USER_NAME						VARCHAR(255) 	DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NOW();
	DECLARE VAR_COMP_ID							BIGINT 			DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;  
	START TRANSACTION;	
  
	SELECT 
		ADMIN_ID, 
        SITE_ID, 
        SITE_NAME, 
        BIZ_REG_CODE, 
        BIZ_REG_IMG_PATH, 
        PERMIT_REG_CODE, 
        PERMIT_REG_IMG_PATH, 
        REP_NAME, 
        B_CODE, 
        ADDR, 
        WSTE_LIST, 
        WSTE_CLASS_LIST, 
        LAT, 
        LNG, 
        COMP_NAME, 
        CONFIRMED, 
        MANAGER_ID, 
        MANAGER_LIST
    INTO 
		VAR_ADMIN_ID, 
        VAR_SITE_ID, 
        VAR_SITE_NAME, 
        VAR_BIZ_REG_CODE, 
        VAR_BIZ_REG_IMG_PATH, 
        VAR_PERMIT_REG_CODE, 
        VAR_PERMIT_REG_IMG_PATH, 
        VAR_REP_NAME, 
        VAR_B_CODE, 
        VAR_ADDR, 
        JSON_WSTE_LIST, 
        JSON_WSTE_CLASS_LIST, 
        VAR_LAT, 
        VAR_LNG, 
        VAR_COMP_NAME, 
        VAR_CONFIRMED, 
        VAR_MANAGER_ID, 
        JSON_MANAGER_LIST
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ADMIN_ID 				BIGINT 				PATH "$.ADMIN_ID",
		SITE_ID	 				BIGINT				PATH "$.SITE_ID",
		SITE_NAME	 			VARCHAR(255)		PATH "$.SITE_NAME",
		BIZ_REG_CODE 			VARCHAR(12)			PATH "$.BIZ_REG_CODE",
		BIZ_REG_IMG_PATH		VARCHAR(200)		PATH "$.BIZ_REG_IMG_PATH",
		PERMIT_REG_CODE 		VARCHAR(100)		PATH "$.PERMIT_REG_CODE",
		PERMIT_REG_IMG_PATH		VARCHAR(200)		PATH "$.PERMIT_REG_IMG_PATH",
		REP_NAME 				VARCHAR(50)			PATH "$.REP_NAME",
		B_CODE	 				VARCHAR(10)			PATH "$.B_CODE",
		ADDR	 				VARCHAR(255)		PATH "$.ADDR",
		WSTE_LIST 				JSON				PATH "$.WSTE_LIST",
		WSTE_CLASS_LIST			JSON				PATH "$.WSTE_CLASS_LIST",
		LAT 					DECIMAL(12,9)		PATH "$.LAT",
		LNG 					DECIMAL(12,9)		PATH "$.LNG",        
		COMP_NAME 				VARCHAR(100)		PATH "$.COMP_NAME",
		CONFIRMED  				TINYINT				PATH "$.CONFIRMED",
		MANAGER_ID 				BIGINT				PATH "$.MANAGER_ID",
        MANAGER_LIST			JSON				PATH "$.MANAGER_LIST"
	)) AS PARAMS;    
  
	SELECT 
		ID, 
		USER_ID, 
		PHONE, 
        USER_NAME
    INTO 
		VAR_ID,
		VAR_USER_ID,
		VAR_PHONE, 
        VAR_USER_NAME
    FROM JSON_TABLE(JSON_MANAGER_LIST, "$[*]" COLUMNS(
		ID	 					BIGINT		 		PATH "$.ID",
		USER_ID					VARCHAR(255) 		PATH "$.USER_ID",
		PHONE 					VARCHAR(255) 		PATH "$.PHONE",
		USER_NAME	 			VARCHAR(255)		PATH "$.USER_NAME"
	)) AS MANAGER_LISTS;
    
	CALL sp_req_current_time(VAR_REG_DT);
    UPDATE COMP_SITE
    SET 
		SITE_NAME		 	= VAR_SITE_NAME,
		PERMIT_REG_CODE 	= VAR_PERMIT_REG_CODE,
        PERMIT_REG_IMG_PATH = VAR_PERMIT_REG_IMG_PATH,
        KIKCD_B_CODE 		= VAR_B_CODE,
        ADDR 				= VAR_ADDR,
        LAT 				= VAR_LAT,
        LNG 				= VAR_LNG,
        CONFIRMED 			= VAR_CONFIRMED,
        CS_MANAGER_ID 		= VAR_MANAGER_ID,
        UPDATED_AT 			= VAR_REG_DT
	WHERE 
        ID 					= VAR_SITE_ID;
	
	SELECT COMP_ID INTO VAR_COMP_ID
	FROM COMP_SITE
	WHERE ID = VAR_SITE_ID;
	
	UPDATE COMPANY
	SET 
		BIZ_REG_CODE 		= VAR_BIZ_REG_CODE,
		BIZ_REG_IMG_PATH 	= VAR_BIZ_REG_IMG_PATH,
		COMP_NAME 			= VAR_COMP_NAME,
		REP_NAME 			= VAR_REP_NAME,
		UPDATED_AT 			= VAR_REG_DT
	WHERE 
		ID 					= VAR_COMP_ID;
	
    UPDATE USERS
    SET 
		USER_ID 			= VAR_USER_ID,
		USER_NAME 			= VAR_USER_NAME,
		PHONE 				= VAR_PHONE,
        UPDATED_AT 			= VAR_REG_DT
	WHERE ID 				= VAR_ID;
		
	IF JSON_WSTE_LIST IS NOT NULL THEN
		IF JSON_VALID(JSON_WSTE_LIST) THEN
			IF JSON_LENGTH(JSON_WSTE_LIST) > 0 THEN
				CALL sp_admin_update_site_wste_info(
					VAR_SITE_ID,
					JSON_WSTE_LIST,
					rtn_val,
					msg_txt
				);
				IF rtn_val = 0 THEN
					CALL sp_admin_get_site_info(
						VAR_SITE_ID,
						json_data
					);
				ELSE
					SIGNAL SQLSTATE '23000';
				END IF;
            ELSE
				SET rtn_val = 0;
				SET msg_txt = 'success';
            END IF;            
        ELSE
			SET rtn_val = 40301;
			SET msg_txt = 'waste list object is not json type';
			SIGNAL SQLSTATE '23000';
        END IF;
	ELSE
		SET rtn_val = 0;
		SET msg_txt = 'success';
	END IF;
		
	IF JSON_WSTE_CLASS_LIST IS NOT NULL THEN
		IF JSON_VALID(JSON_WSTE_CLASS_LIST) THEN
			IF JSON_LENGTH(JSON_WSTE_CLASS_LIST) > 0 THEN
				CALL sp_admin_update_site_wste_class_info(
					VAR_SITE_ID,
					JSON_WSTE_CLASS_LIST,
					rtn_val,
					msg_txt
				);
				IF rtn_val = 0 THEN
					CALL sp_admin_get_site_info(
						VAR_SITE_ID,
						json_data
					);
				ELSE
					SIGNAL SQLSTATE '23000';
				END IF;
            ELSE
				SET rtn_val = 0;
				SET msg_txt = 'success';
            END IF;            
        ELSE
			SET rtn_val = 40302;
			SET msg_txt = 'waste class list object is not json type';
			SIGNAL SQLSTATE '23000';
        END IF;
	ELSE
		SET rtn_val = 0;
		SET msg_txt = 'success';
	END IF;
   
    COMMIT;
    CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_site_managers_info`(
	IN IN_PARAMS						BIGINT,
	OUT rtn_val							INT,
    OUT msg_txt							VARCHAR(200)
)
BEGIN
    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;   
    DECLARE CUR_ID								BIGINT;
    DECLARE CUR_USER_ID							VARCHAR(255);
    DECLARE CUR_PHONE							VARCHAR(255);
    DECLARE CUR_USER_NAME						VARCHAR(255);
    DECLARE CUR_CAT_ID							INT;
    DECLARE CUR_CAT_VAL							INT;
    DECLARE VAR_REG_DT							DATETIME;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
  
	SELECT 
		ID, 
		USER_ID, 
		PHONE, 
        USER_NAME
    FROM JSON_TABLE(JSON_MANAGER_LIST, "$[*]" COLUMNS(
		ID	 					BIGINT		 		PATH "$.ID",
		USER_ID					VARCHAR(255) 		PATH "$.USER_ID",
		PHONE 					VARCHAR(255) 		PATH "$.PHONE",
		USER_NAME	 			VARCHAR(255)		PATH "$.USER_NAME"
	)) AS MANAGER_LISTS;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	SET rtn_val = 0;
	SET msg_txt = 'success';
    CALL sp_req_current_time(VAR_REG_DT);
    
	OPEN TEMP_CURSOR;	
	cloop: LOOP		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_USER_ID,
			CUR_PHONE,
			CUR_USER_NAME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		UPDATE USERS
        SET
			USER_ID = CUR_USER_ID,
            USER_NAME = CUR_USER_NAME,
            PHONE = CUR_PHONE,
            UPDATED_AT = VAR_REG_DT
		WHERE ID = CUR_ID;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_site_wste_class_info`(
    IN IN_SITE_ID					BIGINT,
    IN IN_PARAMS					JSON,
	OUT rtn_val						INT,						/*출력값 : 처리결과 반환값*/
	OUT msg_txt 					VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN
    
    DECLARE vRowCount 					INT 		DEFAULT 0;
    DECLARE endOfRow 					TINYINT 	DEFAULT FALSE;    
    DECLARE CUR_WSTE_CLASS_CODE			VARCHAR(8);
    DECLARE VAR_REG_DT					DATETIME	DEFAULT NOW();
    DECLARE VAR_WSTE_COUNT				INT			DEFAULT 0;
    DECLARE VAR_DELETED_COUNT			INT			DEFAULT 0;
    DECLARE VAR_WSTE_CLASS_CODE_VALID	TINYINT		DEFAULT FALSE;
    DECLARE WSTE_CURSOR 				CURSOR FOR 
	SELECT WSTE_CLASS_CODE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		WSTE_CLASS_CODE 		VARCHAR(8)			PATH "$.WSTE_CLASS_CODE"
	)) AS WSTE_CLASS_LIST;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
        
	CALL sp_req_current_time(VAR_REG_DT);
    /*
    SELECT COUNT(ID) INTO VAR_WSTE_COUNT
    FROM WSTE_SITE_MATCH
    WHERE 
		SITE_ID = IN_SITE_ID AND
        ACTIVE = TRUE;    
	*/
    
	UPDATE WSTE_CLASS_SITE_MATCH 
	SET 
		DELETED_AT = VAR_REG_DT,
		UPDATED_AT = VAR_REG_DT,
		ACTIVE = FALSE
	WHERE 
		SITE_ID = IN_SITE_ID AND
        ACTIVE = TRUE;
    /*
	SET VAR_DELETED_COUNT = ROW_COUNT();
	*/
    
	OPEN WSTE_CURSOR;	
	cloop: LOOP
		FETCH WSTE_CURSOR 
		INTO CUR_WSTE_CLASS_CODE;   
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		CALL sp_check_if_wste_class_code_valid(
			CUR_WSTE_CLASS_CODE,
			VAR_WSTE_CLASS_CODE_VALID
		);
		
		IF VAR_WSTE_CLASS_CODE_VALID = 1 THEN
			INSERT INTO 
			WSTE_CLASS_SITE_MATCH(
				SITE_ID,
				WSTE_CLASS_CODE,
				ACTIVE,
				CREATED_AT,
				UPDATED_AT
			)
			VALUES(
				IN_SITE_ID, 
				CUR_WSTE_CLASS_CODE, 
				TRUE, 
				VAR_REG_DT, 
				VAR_REG_DT
			);	
			
			IF ROW_COUNT() = 1 THEN
				SET rtn_val = 0;
				SET msg_txt = 'Success2222222';
			ELSE
				SET rtn_val = 41002;
				SET msg_txt = 'Failed to save site wste class information';
				LEAVE cloop;
			END IF;
		ELSE
			SET rtn_val = 41001;
			SET msg_txt = 'waste class code is not valid';
			LEAVE cloop;
		END IF;
	END LOOP;   
	CLOSE WSTE_CURSOR;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_update_site_wste_info`(
    IN IN_SITE_ID					BIGINT,
    IN IN_PARAMS					JSON,
	OUT rtn_val						INT,						/*출력값 : 처리결과 반환값*/
	OUT msg_txt 					VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN
    
    DECLARE vRowCount 					INT 		DEFAULT 0;
    DECLARE endOfRow 					TINYINT 	DEFAULT FALSE;    
    DECLARE CUR_WSTE_CODE 				VARCHAR(8);
    DECLARE CUR_WSTE_APPEARANCE	 		INT;    
    DECLARE VAR_REG_DT					DATETIME	DEFAULT NOW();
    DECLARE VAR_WSTE_COUNT				INT			DEFAULT 0;
    DECLARE VAR_DELETED_COUNT			INT			DEFAULT 0;
    DECLARE VAR_WSTE_CODE_VALID			TINYINT		DEFAULT FALSE;
    DECLARE WSTE_CURSOR 				CURSOR FOR 
	SELECT 
        WSTE_CODE, 
        WSTE_APPEARANCE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		WSTE_CODE 				VARCHAR(8)			PATH "$.WSTE_CODE",
		WSTE_APPEARANCE			INT					PATH "$.APPR_CODE"
	)) AS WSTE_LIST;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
        
	CALL sp_req_current_time(VAR_REG_DT);
    /*
    SELECT COUNT(ID) INTO VAR_WSTE_COUNT
    FROM WSTE_SITE_MATCH
    WHERE 
		SITE_ID = IN_SITE_ID AND
        ACTIVE = TRUE;    
	*/
    
	UPDATE WSTE_SITE_MATCH 
	SET 
		DELETED_AT = VAR_REG_DT,
		UPDATED_AT = VAR_REG_DT,
		ACTIVE = FALSE
	WHERE 
		SITE_ID = IN_SITE_ID AND
        ACTIVE = TRUE;
    /*
	SET VAR_DELETED_COUNT = ROW_COUNT();
	*/
    
	OPEN WSTE_CURSOR;	
	cloop: LOOP
		FETCH WSTE_CURSOR 
		INTO 
			CUR_WSTE_CODE,
			CUR_WSTE_APPEARANCE;   
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		CALL sp_check_if_wste_code_valid(
			CUR_WSTE_CODE,
			VAR_WSTE_CODE_VALID
		);
		
		IF VAR_WSTE_CODE_VALID = 1 THEN
			INSERT INTO 
			WSTE_SITE_MATCH(
				SITE_ID,
				WSTE_CODE,
				WSTE_APPEARANCE,
				UPDATED_AT,
				CREATED_AT
			)
			VALUES(
				IN_SITE_ID, 
				CUR_WSTE_CODE, 
				CUR_WSTE_APPEARANCE, 
				VAR_REG_DT, 
				VAR_REG_DT
			);	
			
			IF ROW_COUNT() = 1 THEN
				SET rtn_val = 0;
				SET msg_txt = 'Success2222222';
			ELSE
				SET rtn_val = 39403;
				SET msg_txt = 'Failed to save site wste information';
				LEAVE cloop;
			END IF;
		ELSE
			SET rtn_val = 39402;
			SET msg_txt = 'waste code is not valid';
			LEAVE cloop;
		END IF;
	END LOOP;   
	CLOSE WSTE_CURSOR;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_admin_user_login`(
	IN IN_PARAMS			JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_user_login
Input param 	: 1개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_ID				VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_PW				VARCHAR(255)	DEFAULT NULL;
    DECLARE VAR_USER_COUNT		INT				DEFAULT 0;
    DECLARE JSON_USER_INFO		JSON			DEFAULT NULL;
	DECLARE rtn_val				INT 			DEFAULT 0;
	DECLARE msg_txt				VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data			JSON 			DEFAULT NULL;
    
	SELECT 
		ID COLLATE utf8mb4_unicode_ci, 
		PW COLLATE utf8mb4_unicode_ci
    INTO 
		VAR_ID, 
		VAR_PW
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		ID		 				VARCHAR(255)		PATH "$.ID",
		PW		 				VARCHAR(255)		PATH "$.PW"
	)) AS PARAMS;
    
	SELECT COUNT(ID) INTO VAR_USER_COUNT
    FROM USERS
    WHERE USER_ID = VAR_ID AND CLASS < 200;
    
    IF VAR_USER_COUNT = 1 THEN
		CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_USER_LOGIN_TEMP (
			INPUT_PARAM				JSON,
			USER_INFO				JSON
		);
		CALL sp_admin_get_user_info_without_handler(
			IN_PARAMS,
			JSON_USER_INFO
		);	
		
		INSERT INTO 
		ADMIN_USER_LOGIN_TEMP(
			USER_INFO,
			INPUT_PARAM
		)
		VALUES(
			JSON_USER_INFO,
			IN_PARAMS
		);
		
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'USER_INFO'				, JSON_USER_INFO,
			'INPUT_PARAM'			, IN_PARAMS
		)) 
		INTO json_data FROM ADMIN_USER_LOGIN_TEMP;		
		DROP TABLE IF EXISTS ADMIN_USER_LOGIN_TEMP;    
		CALL sp_return_results(json_data, msg_txt, json_data);
    ELSE
		SET rtn_val = 88101;
		SET msg_txt = 'No user found';
		SET json_data = NULL;
		CALL sp_return_results(json_data, msg_txt, json_data);
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_apply_bidding`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 입찰을 시도하는 사용자 아이디(USERS.ID)*/
    IN IN_DISPOSAL_ORDER_ID		BIGINT,				/*입력값 : 폐기물배출신청 등록고유번호(SITE_WSTE_DISPOSAL_ORDER.ID)*/
    IN IN_BID_AMOUNT			FLOAT,				/*입력값 : 폐기물처리견적가 총액*/
    IN IN_TRMT_METHOD			VARCHAR(4),			/*입력값 : 폐기물 처리방법*/
    IN IN_BIDDING_DETAILS		JSON				/*입력값 : 폐기물 수집운반 및 처리에 대한 입찰내역서*/
)
BEGIN

/*
Procedure Name 	: sp_apply_bidding
Input param 	: 3개
Job 			: 수거자 등에서 폐기물 처리를 위한 입찰내역 등록
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.29
Version			: 0.0.5
AUTHOR 			: Leo Nam
Change			: STATUS_HISTORY 테이블 사용 중지(0.0.2) / COLLECTOR_BIDDING 테이블에서 방문 및 입찰 정보 통합관리 시작
				: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.4)
				: 서브 프로시저의 데이타 반환타입 통일(0.0.5)
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_PUSH_CATEGORY					INT 			DEFAULT 14;
	DECLARE VAR_REG_DT							DATETIME 		DEFAULT NOW();
	DECLARE VAR_USER_SITE_ID					BIGINT 			DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT 			DEFAULT NULL;
	DECLARE VAR_COLLECTOR_BIDDING_ID			BIGINT 			DEFAULT NULL;
	DECLARE VAR_VISIT_END_AT					DATETIME 		DEFAULT NULL;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		/*ROLLBACK;*/
        COMMIT;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
		IN_USER_ID, 
		TRUE, 
		rtn_val,
		msg_txt
	);
	/*IN_USER_ID가 이미 등록되어 있는 사용자인지 체크한다. 등록되어 있는 경우에는 @USER_EXISTS = 1, 그렇지 않은 경우에는 @USER_EXISTS = 0을 반환한다.*/
	/*이미 등록되어 있는 사용자인 경우에는 관리자(member.admin)인지 검사한 후 member.admin인 경우에는 사업자 생성권한을 부여하고 그렇지 않은 경우에는 예외처리한다.*/
	/*등록되어 있지 않은 경우에는 신규사업자 생성으로 간주하고 정상처리 진행한다.*/
	
	IF rtn_val = 0 THEN
    /*입찰을 신청하는 사용자가 유효한 경우*/
		CALL sp_req_site_id_of_user_reg_id(
        /*사용자가 소속한 사이트의 고유등록번호를 반환한다.*/
			IN_USER_ID,
            VAR_USER_SITE_ID,
			rtn_val,
			msg_txt
        );
        IF rtn_val = 0 THEN
        /*사이트가 유효한 사업자의 사이트인 경우*/
			CALL sp_req_site_already_bid(
			/*입찰신청을 하려는 사이트가 이미 입찰을 했는지 검사한다.*/
				VAR_USER_SITE_ID,
				IN_DISPOSAL_ORDER_ID,
				rtn_val,
				msg_txt
			);
			IF rtn_val = 0 THEN
			/*사이트가 이미 입찰한 내역이 존재하지 않는 경우*/
				CALL sp_req_user_class_by_user_reg_id(
				/*사용자의 권한을 반환한다.*/
					IN_USER_ID,
					VAR_USER_CLASS
				);
				IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
				/*사용자가 입찰을 신청할 권한이 있는경우*/
					CALL sp_req_is_site_collector(
					/*사이트가 수집운반 등의 폐기물 처리권한이 있는지 검사한다.*/
						VAR_USER_SITE_ID,
						rtn_val,
						msg_txt
					);
					IF rtn_val = 0 THEN
					/*사이트가 수집운반 등의 폐기물 처리권한이 있는 경우*/
						CALL sp_get_duty_to_apply_for_visit(
						/*폐기물 배출신청 사이트에 방문의무가 있는지 여부를 확인한다.*/
							IN_DISPOSAL_ORDER_ID,
							rtn_val,
							msg_txt
						);
						IF rtn_val = 0 THEN
						/*폐기물 배출신청 사이트에 방문의무가 있는 경우*/
							CALL sp_req_visit_date_expired(
							/*방문종료일이 마감되었는지 확인한다.*/
								IN_DISPOSAL_ORDER_ID,
								rtn_val,
								msg_txt
							);
							IF rtn_val = 0 THEN
							/*방문종료일이 마감되었으면 입찰가능상태로서 정상입찰을 진행한다.*/
								CALL sp_req_apply_for_visit(
								/*방문의무가 있는 사이트에 방문신청을 한 사실이 있는지에 대한 여부 확인*/
									VAR_USER_SITE_ID,
									IN_DISPOSAL_ORDER_ID,
									VAR_COLLECTOR_BIDDING_ID,
									rtn_val,
									msg_txt
								);
								IF rtn_val = 0 THEN
								/*방문신청을 한 사실이 있다면*/
									CALL sp_req_is_visit_request_rejected(
									/*배출자로부터 방문거절을 당했는지 확인한다.*/
										VAR_COLLECTOR_BIDDING_ID,
										IN_DISPOSAL_ORDER_ID,
										rtn_val,
										msg_txt
									);
									IF rtn_val = 0 THEN
									/*배출자로부터 방문거절을 당하지 않았다면 정상처리한다.*/
										CALL sp_req_is_visit_request_already_not_canceled(
										/*수거자가 자신의 방문신청에 대하여 이미 취소한 사실이 없는지 검사한다.*/
											VAR_COLLECTOR_BIDDING_ID,
											IN_DISPOSAL_ORDER_ID,
											rtn_val,
											msg_txt
										);
                                        SELECT VISIT_END_AT INTO VAR_VISIT_END_AT
                                        FROM SITE_WSTE_DISPOSAL_ORDER
                                        WHERE ID = IN_DISPOSAL_ORDER_ID;
                                        IF VAR_VISIT_END_AT <= VAR_REG_DT THEN
                                        /*입찰신청일이 방문예정일이 지난 시간인 경우에는 정상처리한다.*/
											IF rtn_val = 0 THEN
											/*수거자가 자신의 방문신청에 대하여 이미 취소한 사실이 없는 경우 정상처리한다.*/
												CALL sp_req_bidding_end_date_expired(
												/*입찰마감일이 종료되었는지 검사한다. 종료되었으면 TRUE, 그렇지 않으면 FALSE반환*/
													IN_DISPOSAL_ORDER_ID,
													rtn_val,
													msg_txt
												);
												IF rtn_val = 0 THEN
												/*입찰마감일이 종료되지 않은 경우*/
													CALL sp_insert_collector_wste_lists(
													/*수거자 등이 입력한 입찰정보를 데이타베이스에 저장한다.*/
														IN_USER_ID,
														VAR_COLLECTOR_BIDDING_ID,
														IN_DISPOSAL_ORDER_ID,
														VAR_REG_DT,
														IN_BIDDING_DETAILS,
														rtn_val,
														msg_txt
													);
													IF rtn_val = 0 THEN
													/*데이타베이스 입력에 성공한 경우*/
														UPDATE COLLECTOR_BIDDING 
														SET 
															DATE_OF_BIDDING 		= VAR_REG_DT, 
															BID_AMOUNT 				= IN_BID_AMOUNT,  
															/*BID_AMOUNT를 폐기물 견적에서 단가와 수량을 곱한 후 합산한 금액으로 sp_insert_collector_wste_lists의 실행으로 계산을 하고 있으나 
															앱 사용측면에서 페기물 리스트를 업로드 하는것과는 별개로 전체 금액을 입력하고 있으므로 위의 계산결과와는 별개로 BID_AMOUNT통하여 
															입력받은 전체 금액을 데이타베이스에 입력하고 있다. 추후 견적관련 서비스를 수정하게 되면 이 부분은 삭제되어야 한다.*/
															TRMT_METHOD 			= IN_TRMT_METHOD, 
															UPDATED_AT 				= VAR_REG_DT 
														WHERE 
															ID = VAR_COLLECTOR_BIDDING_ID;
														IF ROW_COUNT() = 1 THEN
														/*데이타 입력에 성공하였다면*/
															CALL sp_calc_max_decision_at(
															/*수거자가 배출자의 낙찰통보에 대하여 최종결심할 수 있는 최대시간을 확정한다.*/
																IN_DISPOSAL_ORDER_ID,
																VAR_COLLECTOR_BIDDING_ID,
																VAR_REG_DT
															);
															CALL sp_push_collector_apply_bidding(
																IN_USER_ID,
																IN_DISPOSAL_ORDER_ID,
                                                                VAR_COLLECTOR_BIDDING_ID,
																VAR_PUSH_CATEGORY,
																json_data,
																rtn_val,
																msg_txt
															);
                                                            IF rtn_val = 0 THEN
																CALL sp_req_last_bidder_set_bidding_end_date_now_for_bidding(
																	IN_DISPOSAL_ORDER_ID,
																	VAR_COLLECTOR_BIDDING_ID,
																	rtn_val,
																	msg_txt
																);
																IF rtn_val = 0 THEN
																	CALL sp_calc_bidding_rank(
																		IN_DISPOSAL_ORDER_ID
																	);
																ELSE
																	SIGNAL SQLSTATE '23000';
																END IF;
                                                            ELSE
																SIGNAL SQLSTATE '23000';
                                                            END IF;
														ELSE
														/*데이타 입력에 실패하였다면 예외처리한다.*/
															SET rtn_val 		= 23401;
															SET msg_txt 		= 'Failed to change bid request record';
															SIGNAL SQLSTATE '23000';
														END IF;
													ELSE
													/*데이타베이스 입력에 실패한 경우*/
														SIGNAL SQLSTATE '23000';
													END IF;
												ELSE
												/*입찰마감일이 종료된 경우 예외처리한다.*/
													SIGNAL SQLSTATE '23000';
												END IF;
											ELSE
											/*수거자가 자신의 방문신청에 대하여 이미 취소한 사실이 존재하는 경우 예외처리한다.*/
												SIGNAL SQLSTATE '23000';
											END IF;
                                        ELSE
                                        /*입찰신청일이 방문예정일이 이전 시간인 경우에는 예외처리한다.*/
											SET rtn_val 		= 23405;
											SET msg_txt 		= 'Bidding is not possible before the scheduled visit date';
											SIGNAL SQLSTATE '23000';
                                        END IF;
									ELSE
									/*배출자로부터 방문거절을 당했다면 예외처리한다.*/
										SIGNAL SQLSTATE '23000';
									END IF;
								ELSE
								/*방문신청을 한 사실이 없는 경우 예외처리한다.*/
									SIGNAL SQLSTATE '23000';
								END IF;
							ELSE
							/*방문종료일이 마감되지 않았으면 입찰가능상태가 아니므로 예외처리한다.*/
								SIGNAL SQLSTATE '23000';
							END IF;
						ELSE
						/*폐기물 배출신청 사이트에 방문의무가 없는 경우*/
							CALL sp_req_collect_bidding_max_id(
								VAR_COLLECTOR_BIDDING_ID
							);
							INSERT INTO COLLECTOR_BIDDING (
								ID, 
								COLLECTOR_ID, 
								DISPOSAL_ORDER_ID, 
								ACTIVE, 
								STATUS_CODE, 
								DATE_OF_BIDDING, 
								BID_AMOUNT, 
								TRMT_METHOD, 
								CREATED_AT, 
								UPDATED_AT
							) VALUES (
								VAR_COLLECTOR_BIDDING_ID, 
								VAR_USER_SITE_ID, 
								IN_DISPOSAL_ORDER_ID, 
								TRUE, 
								2, 
								VAR_REG_DT, 
								IN_BID_AMOUNT, 
								IN_TRMT_METHOD, 
								VAR_REG_DT, 
								VAR_REG_DT
							);
							IF ROW_COUNT() = 1 THEN
							/*데이타베이스 입력에 성공한 경우*/
								INSERT INTO FINAL_BIDDER_MANAGEMENT (
									DISPOSER_ORDER_ID,
                                    COLLECTOR_BIDDING_ID
                                ) VALUES (
									VAR_COLLECTOR_BIDDING_ID, 
									IN_DISPOSAL_ORDER_ID
                                );
                                IF ROW_COUNT() = 1 THEN
									CALL sp_push_collector_apply_bidding(
										IN_USER_ID,
										IN_DISPOSAL_ORDER_ID,
										VAR_COLLECTOR_BIDDING_ID,
										VAR_PUSH_CATEGORY,
										json_data,
										rtn_val,
										msg_txt
									);
									IF rtn_val = 0 THEN
										CALL sp_req_last_bidder_set_bidding_end_date_now_for_bidding(
											IN_DISPOSAL_ORDER_ID,
											VAR_COLLECTOR_BIDDING_ID,
											rtn_val,
											msg_txt
										);
										IF rtn_val = 0 THEN
											CALL sp_calc_bidding_rank(
												IN_DISPOSAL_ORDER_ID
											);
										ELSE
											SIGNAL SQLSTATE '23000';
										END IF;
									ELSE
										SIGNAL SQLSTATE '23000';
									END IF;
                                ELSE
									SET rtn_val 		= 23404;
									SET msg_txt 		= 'Failed to create final bidder management rocord';
									SIGNAL SQLSTATE '23000';
                                END IF;
							ELSE
							/*데이타베이스 입력에 실패한 경우*/
								SET rtn_val 		= 23402;
								SET msg_txt 		= 'Failed to create bid record';
								SIGNAL SQLSTATE '23000';
							END IF;
						END IF;
					ELSE
					/*사이트가 수집운반 등의 폐기물 처리권한이 없는 경우에는 예외처리한다.*/
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*사용자가 입찰을 신청할 권한이 없는경우 예외처리한다.*/
					SET rtn_val 		= 23403;
					SET msg_txt 		= 'The user does not have the right to apply for a bid';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*사이트가 이미 입찰한 내역이 존재하는 경우 예외처리한다.*/
				SIGNAL SQLSTATE '23000';
			END IF;
        ELSE
        /*사이트가 유효한 사업자의 사이트가 아닌 경우*/
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*입찰을 신청하는 사용자가 존재하지 않거나 유효하지 않은 경우*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_apply_refusal_of_final_decision`(
	IN IN_USER_ID					BIGINT,				/*입력값 : 사용자 고유등록번호(USERS.ID)*/
	IN IN_COLLECT_BIDDING_ID		BIGINT,				/*입력값 : 입찰 고유등록번호(COLLECTOR_BIDDING.ID)*/
	IN IN_FINAL_DECISION			TINYINT				/*입력값 : 최종입찰에 대한 거절여부 결정(TRUE:거절, FALSE:수락)*/
)
BEGIN

/*
Procedure Name 	: sp_apply_refusal_of_final_decision
Input param 	: 3개
Job 			: 폐기물 수집운반업자가 배출자로부터 최종 낙찰자로 선정된 이후 최종결정을 한다.
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.27
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.2)
*/

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET @json_data 		= NULL;
		CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  

    CALL sp_req_current_time(@REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
	/*생성자가 존재하는지 체크한다.*/
		IN_USER_ID, 
		TRUE, 
		@rtn_val,
		@msg_txt
	);
	/*등록을 요청하는 사용자의 USER_ID가 이미 등록되어 있는 경우에는 @USER_EXISTS = 1, 그렇지 않은 경우에는 @USER_EXISTS = 0이 됨*/ 		
	IF @rtn_val = 0 THEN
    /*사용자가 존재하는 경우*/
		CALL sp_req_disposal_id_of_collector_bidding_id(
			IN_COLLECT_BIDDING_ID,
			@DISPOSAL_ORDER_ID
		);
		CALL sp_req_site_id_of_user_reg_id(
		/*사용자 고유등록번호로 사용자가 소속한 사이트의 고유등록번호를 반환한다.*/
			IN_USER_ID,
			@USER_SITE_ID,
			@rtn_val,
			@msg_txt
		);
		IF @rtn_val = 0 THEN
		/*사이트가 정상(개인사용자는 제외됨)적인 경우*/
			CALL sp_req_is_site_final_bidder(
			/*사이트가 배출자로부터 최종 선택을 받은 사이트인지 검사한다.*/
				@USER_SITE_ID,
				@IS_USER_SITE_FINAL_BIDDER
			);
			IF @IS_USER_SITE_FINAL_BIDDER = TRUE THEN
			/*사이트가 배출자로부터 최종 낙찰자로 선정된 경우*/
				UPDATE SITE_WSTE_DISPOSAL_ORDER 
                SET 
					COLLECTOR_SELECTION_CONFIRMED 		= IN_FINAL_DECISION, 
                    COLLECTOR_SELECTION_CONFIRMED_AT 	= @REG_DT , 
                    UPDATED_AT						 	= @REG_DT 
				WHERE ID = @DISPOSAL_ORDER_ID;
                IF ROW_COUNT() = 1 THEN
					IF IN_FINAL_DECISION = TRUE THEN
					/*최종결정에 대한 거절을 실행하는 경우*/
						UPDATE COLLECTOR_BIDDING 
						SET 
							MAKE_DECISION = IN_FINAL_DECISION, 
							MAKE_DECISION_AT = @REG_DT,
							UPDATED_AT = @REG_DT  
						WHERE ID = IN_COLLECT_BIDDING_ID;
					ELSE
					/*최종결정에 대한 수락을 실행하는 경우*/
						UPDATE COLLECTOR_BIDDING 
						SET 
							MAKE_DECISION = IN_FINAL_DECISION, 
							UPDATED_AT = @REG_DT 
						WHERE ID = IN_COLLECT_BIDDING_ID;
					END IF;
					/*최종처리결정에 대한 거부권(TRUE:거부, FALSE:수락)을 행사한다.*/
					IF ROW_COUNT() = 0 THEN
					/*데이타베이스 입력에 실패한 경우*/
						SET @rtn_val 		= 24101;
						SET @msg_txt 		= 'db error occurred during bid cancellation';
						SIGNAL SQLSTATE '23000';
					ELSE
					/*데이타베이스 입력에 성공한 경우*/
						IF IN_FINAL_DECISION = TRUE THEN
						/*최종결정을 거부한 경우*/
							SET @rtn_val 		= 0;
							SET @msg_txt 		= 'Success1';
						ELSE
						/*최종결정을 수락한 경우에는 CLCT_TRMT_TRANSACTION에 이미 생성되어 있는 작업을 UPDATE한다.*/
							UPDATE WSTE_CLCT_TRMT_TRANSACTION
							SET
								COLLECTOR_BIDDING_ID 	= IN_COLLECT_BIDDING_ID,
								UPDATED_AT 				= @REG_DT
							WHERE
								DISPOSAL_ORDER_ID 		= @DISPOSAL_ORDER_ID;
							IF ROW_COUNT() = 1 THEN
							/*WSTE_CLCT_TRMT_TRANSACTION에 이미 생성되어 있는 작업사항 중 수거자결정 내용 변경에 성공한 경우*/
								SET @rtn_val 		= 0;
								SET @msg_txt 		= 'Success2';
							ELSE
							/*WSTE_CLCT_TRMT_TRANSACTION에 이미 생성되어 있는 작업사항 중 수거자결정 내용 변경에 실패한 경우 예외처리한다.*/
								SET @rtn_val 		= 24102;
								SET @msg_txt 		= 'Failed to change job information';
								SIGNAL SQLSTATE '23000';
							END IF;
						END IF;
					END IF;
                ELSE
					SET @rtn_val 		= 24104;
					SET @msg_txt 		= 'An error occurred in the process of storing the final approval decision of the collector in the record of the discharger';
					SIGNAL SQLSTATE '23000';
                END IF;
			ELSE
			/*사이트가 배출자로부터 최종 낙찰자로 선정되지 경우*/
				SET @rtn_val 		= 24103;
				SET @msg_txt 		= 'Only the site selected as the final successful bidder can accept or reject';
				SIGNAL SQLSTATE '23000';
			END IF;
        ELSE
		/*사이트가 정상(개인사용자는 제외됨)적이지 않은 경우*/
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 존재하지 않거나 유효하지 않은 경우*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET @json_data 		= NULL;
	CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_ask_visit_on_disposal_site`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 방문요청자(수거자 사이트의 관리자)의 고유등록번호(USER.ID)*/
	IN IN_DISPOSER_ORDER_ID		BIGINT,				/*입력값 : 배출 신청 고유등록번호(SITE_WSTE_DISPOSAL_ORDER.ID)*/
	IN IN_VISIT_AT				DATETIME			/*입력값 : 방문요청을 하는 자의 방문예정일*/
)
BEGIN

/*
Procedure Name 	: sp_ask_visit_on_disposal_site
Input param 	: 3개
Job 			: 배출자의 배출지에 대한 방문요청 등록
Update 			: 2022.01.27
Version			: 0.0.5
AUTHOR 			: Leo Nam
Change			: 현재시간을 구하여 필요한 sp에 입력자료로 넘김(0.0.2)
				: STATUS_HISTORY에 입력하는 기능 추가(0.0.2)
				: STATUS_HISTORY에 입력하는 기능 삭제(0.0.3)
				: sp_req_ask_visit을 이용하여 ASK_VISIT_SITE 테이블에 입력하는 방법 삭제(ASK_VISIT_SITE 더이상 사용하지 않음/모든 일정 COLLECTOR_BIDDING으로 통합관리)(0.0.3)
				: status code 기록기능 삭제(칼럼 비활성화 할 예정)(0.0.4)
				: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.5)
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_PUSH_CATEGORY					INT 			DEFAULT 3;
	DECLARE VAR_REG_DT							DATETIME 		DEFAULT NOW();
	DECLARE VAR_DISPOSAL_ORDER_EXISTS			INT 			DEFAULT 0;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT 			DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID					BIGINT 			DEFAULT NULL;
	DECLARE VAR_COLLECTOR_CAN_ASK_VISIT			TINYINT			DEFAULT FALSE;
	DECLARE VAR_DISPOSAL_VISIT_START_AT			DATETIME 		DEFAULT NULL;
	DECLARE VAR_DISPOSAL_VISIT_END_AT			DATETIME 		DEFAULT NULL;
	DECLARE VAR_CHK_COUNT						INT 			DEFAULT 0;
	DECLARE VAR_BIDDING_ID						BIGINT 			DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  

    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/

    
	CALL sp_req_is_user_collector(
	/*USER가 소속한 사이트가 수집운반업 등 폐기물을 처리할 자격이 있는지 검사한다.*/
		IN_USER_ID,					/*방문요청을 하는 사용자의 고유등록번호(USERS.ID)*/
		rtn_val,
		msg_txt
	);
	IF rtn_val = 0 THEN
	/*USER가 소속한 사이트가 수집운반업 등 폐기물을 처리할 자격이 있는 경우*/   
		/*폐기물 배출 요청 내역이 존재하는지 검사한다.*/
		SELECT COUNT(ID) 
        INTO VAR_DISPOSAL_ORDER_EXISTS
        FROM SITE_WSTE_DISPOSAL_ORDER 
        WHERE 
			ACTIVE 	= TRUE AND 
            ID 		= IN_DISPOSER_ORDER_ID;
		IF VAR_DISPOSAL_ORDER_EXISTS = 1 THEN
		/*폐기물 배출 요청 내역이 존재하는 경우*/
			CALL sp_req_site_id_of_disposal_order_id(
				IN_DISPOSER_ORDER_ID,
				VAR_DISPOSER_SITE_ID
			);
            SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID FROM USERS WHERE ID = IN_USER_ID;
			IF VAR_USER_SITE_ID <> VAR_DISPOSER_SITE_ID THEN
			/*방문신청을 하는 사이트가 자신이 배출한 사이트가 아닌 다른 사이트인 경우에는 정상처리한다.*/
				CALL sp_req_collector_can_ask_visit(
				/*수집운반업자 등이 방문신청을 할수 있는지 검사한다.*/
					IN_DISPOSER_ORDER_ID,
					VAR_COLLECTOR_CAN_ASK_VISIT,
					rtn_val,
					msg_txt
				);
				IF rtn_val = 0 THEN
				/*수집운반업자등이 방문신청을 할 수 있는 경우*/
					CALL sp_req_visit_date_on_disposal_order(
						IN_DISPOSER_ORDER_ID,
						VAR_DISPOSAL_VISIT_START_AT,
						VAR_DISPOSAL_VISIT_END_AT
					);
					SET IN_VISIT_AT = VAR_DISPOSAL_VISIT_END_AT;
					
					SELECT COUNT(ID) INTO VAR_CHK_COUNT
					FROM COLLECTOR_BIDDING 
					WHERE 
						COLLECTOR_ID = IN_USER_ID AND 
						DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND 
						ACTIVE = TRUE;
					/*기존에 입력된 데이타가 존재하는지 확인한다.*/
					IF VAR_CHK_COUNT = 1 THEN
					/*기존 데이타가 존재한다면 데이타를 업데이트 처리한다.*/
						UPDATE COLLECTOR_BIDDING 
						SET 
							DATE_OF_VISIT = IN_VISIT_AT,
							UPDATED_AT = VAR_REG_DT
						WHERE 
							COLLECTOR_ID = IN_USER_ID AND 
							DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND 
							ACTIVE = TRUE;
						IF ROW_COUNT() = 1 THEN
						/*정상적으로 변경완료된 경우*/
							CALL sp_push_new_visitor_come(
								IN_USER_ID,
								IN_DISPOSER_ORDER_ID,
                                VAR_PUSH_CATEGORY,
								json_data,
								rtn_val,
								msg_txt
							);
                            IF rtn_val = 0 THEN
								CALL sp_calc_bidder_and_prospective_visitors(
									IN_DISPOSER_ORDER_ID
								);
                            ELSE
								SIGNAL SQLSTATE '23000';
                            END IF;
						ELSE
						/*정상적으로 변경되지 않은 경우*/
							SET rtn_val 		= 23104;
							SET msg_txt 		= 'Error in processing the request for visit by the collector';
							SIGNAL SQLSTATE '23000';
						END IF;
					ELSE
					/*기존 데이타가 존재하지 않는다면 새로운 레코드를 생성한다.*/
						CALL sp_create_collector_bidding(
							VAR_USER_SITE_ID, 
							IN_DISPOSER_ORDER_ID, 
							TRUE, 
							IN_VISIT_AT, 
							VAR_REG_DT,
							VAR_BIDDING_ID,
							rtn_val,
							msg_txt
						);
						IF rtn_val = 0 THEN
						/*정상적으로 입력완료된 경우*/
							CALL sp_create_chat_room(
								IN_USER_ID,
                                IN_DISPOSER_ORDER_ID,
                                VAR_BIDDING_ID,
                                0,
                                102,
								rtn_val,
								msg_txt                                
                            );
                            IF rtn_val = 0 THEN
                            /*채팅방이 정상적으로 생성된 경우 정상처리한다.*/
								CALL sp_push_new_visitor_come(
									IN_USER_ID,
									IN_DISPOSER_ORDER_ID,
									VAR_PUSH_CATEGORY,
									json_data,
									rtn_val,
									msg_txt
								);
								IF rtn_val = 0 THEN
									CALL sp_calc_bidder_and_prospective_visitors(
										IN_DISPOSER_ORDER_ID
									);
								ELSE
									SIGNAL SQLSTATE '23000';
								END IF;
                            ELSE
                            /*채팅방이 정상적으로 생성되지 않은 경우 예외처리한다.*/
								SIGNAL SQLSTATE '23000';
                            END IF;
						ELSE
						/*정상적으로 입력되지 않은 경우*/
							SIGNAL SQLSTATE '23000';
						END IF;
					END IF;
				ELSE
				/*수집운반업자등이 방문신청을 할 수 없는 경우*/
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*방문신청을 하는 사이트가 자신이 배출한 사이트인 경우에는 예외처리한다.*/
				SET rtn_val 		= 23109;
				SET msg_txt 		= 'Requests for visits are not allowed for self-bidding cases';
				SIGNAL SQLSTATE '23000';
			END IF;
			
		ELSE
		/*폐기물 배출 요청 내역이 존재하지 않는 경우 예외처리한다.*/
			SET rtn_val 		= 23105;
			SET msg_txt 		= 'Waste Discharge Request does not exist';
			SIGNAL SQLSTATE '23000';
		END IF;
	ELSE
	/*USER가 소속한 사이트가 수집운반업 등 폐기물을 처리할 자격이 없는 경우*/
		SIGNAL SQLSTATE '23000';
	END IF;
    
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_bidder_and_prospective_visitors`(
	IN IN_DISPOSER_ORDER_ID			BIGINT
)
BEGIN
	DECLARE VAR_REG_DT					DATETIME 	DEFAULT NOW();
	DECLARE VAR_BIDDERS					INT 		DEFAULT 0;
	DECLARE VAR_PROSPECTIVE_VISITORS	INT 		DEFAULT 0;
	DECLARE VAR_COUNT_BIDDINGS			INT 		DEFAULT 0;
	DECLARE VAR_UNABLED_BIDDERS			INT 		DEFAULT 0;
    
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) INTO VAR_BIDDERS
	FROM COLLECTOR_BIDDING 
	WHERE 
		BID_AMOUNT 				IS NOT NULL AND
		DISPOSAL_ORDER_ID 		= IN_DISPOSER_ORDER_ID AND 
		DATE_OF_BIDDING			IS NOT NULL AND
		CANCEL_BIDDING 			= FALSE AND
		REJECT_BIDDING 			<> TRUE AND
		REJECT_BIDDING_APPLY	<> TRUE AND
		GIVEUP_BIDDING			<> TRUE AND
		ACTIVE					= TRUE AND
        DELETED					= FALSE;
		
	SELECT COUNT(ID) INTO VAR_PROSPECTIVE_VISITORS
	FROM COLLECTOR_BIDDING 
	WHERE 
		DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID AND 
		DATE_OF_VISIT 		IS NOT NULL AND
		CANCEL_VISIT 		= FALSE AND
		RESPONSE_VISIT 		= TRUE AND
        DELETED				= FALSE;
		
	SELECT COUNT(ID) INTO VAR_COUNT_BIDDINGS
	FROM COLLECTOR_BIDDING 
	WHERE DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID;   
	
	SELECT COUNT(A.ID) INTO VAR_UNABLED_BIDDERS
	FROM COLLECTOR_BIDDING A
    LEFT JOIN COMP_SITE B ON A.COLLECTOR_ID = B.ID
	WHERE 
		A.DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID AND 
		(
			A.ACTIVE		 			= FALSE OR
			A.DELETED 					= TRUE OR
			A.DATE_OF_VISIT 			IS NULL OR
			A.RESPONSE_VISIT 			= FALSE OR
			A.RESPONSE_VISIT 			IS NULL OR
			A.CANCEL_VISIT 				= TRUE OR
			A.REJECT_BIDDING_APPLY 		= TRUE OR
			A.GIVEUP_BIDDING 			= TRUE OR
			A.CANCEL_BIDDING 			= TRUE OR
			A.REJECT_BIDDING 			= TRUE OR
			A.DATE_OF_BIDDING			IS NOT NULL OR
            B.ACTIVE					= FALSE
		);
		
	UPDATE SITE_WSTE_DISPOSAL_ORDER 
	SET 
		BIDDERS 				= VAR_BIDDERS,
		PROSPECTIVE_VISITORS 	= VAR_PROSPECTIVE_VISITORS,
		PROSPECTIVE_BIDDERS 	= VAR_COUNT_BIDDINGS - VAR_UNABLED_BIDDERS,
        UPDATED_AT 				= VAR_REG_DT
	WHERE ID = IN_DISPOSER_ORDER_ID;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_bidder_and_prospective_visitors_at_all`(
	OUT OUT_COUNT				INT
)
BEGIN

    DECLARE vRowCount 					INT 		DEFAULT 0;
    DECLARE endOfRow 					TINYINT 	DEFAULT FALSE;      
    DECLARE CUR_ID		 				BIGINT;    
	DECLARE VAR_BIDDERS					INT 		DEFAULT 0;
	DECLARE VAR_PROSPECTIVE_VISITORS	INT 		DEFAULT 0;
	DECLARE VAR_COUNT_BIDDINGS			INT 		DEFAULT 0;
	DECLARE VAR_UNABLED_BIDDERS			INT 		DEFAULT 0;
    DECLARE TEMP_CURSOR 				CURSOR FOR 
    SELECT 
		ID
	FROM SITE_WSTE_DISPOSAL_ORDER;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;   
    	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
				
		SELECT COUNT(ID) INTO VAR_BIDDERS
		FROM COLLECTOR_BIDDING 
		WHERE 
			BID_AMOUNT 				IS NOT NULL AND
			DISPOSAL_ORDER_ID 		= CUR_ID AND 
			DATE_OF_BIDDING			IS NOT NULL AND
			CANCEL_BIDDING 			= FALSE AND
			REJECT_BIDDING 			<> TRUE AND
			REJECT_BIDDING_APPLY	<> TRUE AND
			GIVEUP_BIDDING			<> TRUE AND
			ACTIVE					= TRUE AND
			DELETED					= FALSE;
            
		SELECT COUNT(ID) INTO VAR_PROSPECTIVE_VISITORS 
		FROM COLLECTOR_BIDDING 
		WHERE 
			DISPOSAL_ORDER_ID 	= CUR_ID AND 
			DATE_OF_VISIT 		IS NOT NULL AND
			CANCEL_VISIT 		= FALSE AND
			RESPONSE_VISIT 		= TRUE AND
			DELETED				= FALSE;
            
		SELECT COUNT(ID) INTO VAR_COUNT_BIDDINGS
		FROM COLLECTOR_BIDDING 
		WHERE DISPOSAL_ORDER_ID 	= CUR_ID;   
        
		SELECT COUNT(A.ID) INTO VAR_UNABLED_BIDDERS 
		FROM COLLECTOR_BIDDING A
		LEFT JOIN COMP_SITE B ON A.COLLECTOR_ID = B.ID
		WHERE 
			A.DISPOSAL_ORDER_ID 	= CUR_ID AND 
			(
				A.ACTIVE		 			= FALSE OR
				A.DELETED 					= TRUE OR
				A.DATE_OF_VISIT 			IS NULL OR
				A.RESPONSE_VISIT 			= FALSE OR
				A.RESPONSE_VISIT 			IS NULL OR
				A.CANCEL_VISIT 				= TRUE OR
				A.REJECT_BIDDING_APPLY 		= TRUE OR
				A.GIVEUP_BIDDING 			= TRUE OR
				A.CANCEL_BIDDING 			= TRUE OR
				A.REJECT_BIDDING 			= TRUE OR
				A.DATE_OF_BIDDING			IS NOT NULL OR
				B.ACTIVE					= FALSE
			);
			
		UPDATE SITE_WSTE_DISPOSAL_ORDER 
        SET 
			BIDDERS = VAR_BIDDERS,
            PROSPECTIVE_VISITORS = VAR_PROSPECTIVE_VISITORS,
            PROSPECTIVE_BIDDERS = VAR_COUNT_BIDDINGS - VAR_UNABLED_BIDDERS
        WHERE ID = CUR_ID;
		SET OUT_COUNT = ROW_COUNT();
	END LOOP;   
	CLOSE TEMP_CURSOR;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_bidders`(
	IN IN_DISPOSER_ORDER_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_calc_bidders
Input param 	: 1개
Job 			: 투찰자수를 계산하여 BIDDERS에 저장한다.
Update 			: 2022.03.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT					DATETIME 	DEFAULT NOW();
	DECLARE VAR_BIDDERS					INT 		DEFAULT 0;
	DECLARE VAR_COUNT_BIDDINGS			INT 		DEFAULT 0;
	DECLARE VAR_UNABLED_BIDDERS			INT 		DEFAULT 0;

    CALL sp_req_current_time(VAR_REG_DT);
    
	SELECT COUNT(ID) INTO VAR_BIDDERS 
	FROM COLLECTOR_BIDDING 
	WHERE 
		BID_AMOUNT 				IS NOT NULL AND
		DISPOSAL_ORDER_ID 		= IN_DISPOSER_ORDER_ID AND 
		DATE_OF_BIDDING			IS NOT NULL AND
		CANCEL_BIDDING 			= FALSE AND
		REJECT_BIDDING 			<> TRUE AND
        REJECT_BIDDING_APPLY	<> TRUE AND
        GIVEUP_BIDDING			<> TRUE AND
        ACTIVE					= TRUE;
            
	SELECT COUNT(ID) INTO VAR_COUNT_BIDDINGS
	FROM COLLECTOR_BIDDING 
	WHERE DISPOSAL_ORDER_ID 	= CUR_ID;   
	
	SELECT COUNT(ID) INTO VAR_UNABLED_BIDDERS 
	FROM COLLECTOR_BIDDING 
	WHERE 
		DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID AND 
		(
			ACTIVE		 			= FALSE OR
			DELETED 				= TRUE OR
			DATE_OF_VISIT 			IS NULL OR
			RESPONSE_VISIT 			= FALSE OR
			CANCEL_VISIT 			= TRUE OR
			REJECT_BIDDING_APPLY 	= TRUE OR
			GIVEUP_BIDDING 			= TRUE OR
			CANCEL_BIDDING 			= TRUE OR
			REJECT_BIDDING 			= TRUE
		);
        
	UPDATE SITE_WSTE_DISPOSAL_ORDER 
    SET 
		BIDDERS 				= VAR_BIDDERS,
		PROSPECTIVE_BIDDERS 	= VAR_COUNT_BIDDINGS - VAR_UNABLED_BIDDERS,
        UPDATED_AT 				= VAR_REG_DT
    WHERE ID = IN_DISPOSER_ORDER_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_bidding_id_in_push_history_at_all`(
)
BEGIN

    DECLARE vRowCount 						INT DEFAULT 0;
    DECLARE endOfRow 						TINYINT 	DEFAULT FALSE;      
    DECLARE CUR_ID		 					BIGINT;
    DECLARE CUR_USER_ID						BIGINT;
    DECLARE CUR_ORDER_ID					BIGINT;  
	DECLARE VAR_BIDDING_ID					BIGINT 		DEFAULT NULL;  
    DECLARE TEMP_CURSOR 					CURSOR FOR 
    SELECT 
		ID, USER_ID, ORDER_ID
	FROM PUSH_HISTORY
    WHERE CATEGORY_ID = 6;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;   
    	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID,
			CUR_USER_ID,
			CUR_ORDER_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
        SELECT A.ID INTO VAR_BIDDING_ID
        FROM COLLECTOR_BIDDING A
        LEFT JOIN USERS B ON A.COLLECTOR_ID = B.AFFILIATED_SITE
        WHERE B.ID = CUR_USER_ID AND A.DISPOSAL_ORDER_ID = CUR_ORDER_ID;
        
        UPDATE PUSH_HISTORY SET BIDDING_ID = VAR_BIDDING_ID
        WHERE ID = CUR_ID AND BIDDING_ID IS NULL;
	END LOOP;   
	CLOSE TEMP_CURSOR;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_bidding_rank`(
	IN IN_DISPOSER_ORDER_ID			BIGINT
)
BEGIN

/*
Procedure Name 	: sp_calc_bidding_rank
Input param 	: 1개
Job 			: 투찰한 업체의 낙찰순위를 일괄 계산한다. 향후 탄소배출량 등을 추가한 계산방식을 적용하는 경우 이 프로시저의 ORDER BY BID_AMOUNT 부분을 수정하면 된다.
Update 			: 2022.03.19
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT					DATETIME 	DEFAULT NOW();
	DECLARE VAR_BIDDERS					INT 		DEFAULT 0;
	DECLARE VAR_FIRST_PLACE				BIGINT 		DEFAULT NULL;
	DECLARE VAR_SECOND_PLACE			BIGINT 		DEFAULT NULL;

    CALL sp_req_current_time(VAR_REG_DT);
    
	UPDATE COLLECTOR_BIDDING 
    SET 
		WINNER 			= FALSE, 
		BIDDING_RANK 	= NULL,
        UPDATED_AT		= VAR_REG_DT
    WHERE DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID;
	/*COLLECTOR_BIDDING 전체 레코드에 대해서 BIDDING_RANK를 NULL로 셋팅한다.*/
    
	SET @rank:=0;
	UPDATE COLLECTOR_BIDDING 
	SET 
		BIDDING_RANK			= @rank := @rank+1,
		UPDATED_AT				= VAR_REG_DT
	WHERE 
		BID_AMOUNT 				IS NOT NULL AND
		DATE_OF_BIDDING			IS NOT NULL AND
		CANCEL_BIDDING 			= FALSE AND
		REJECT_BIDDING 			<> TRUE AND
		REJECT_BIDDING_APPLY	<> TRUE AND
        GIVEUP_BIDDING			<> TRUE AND
		ACTIVE					= TRUE AND
        DELETED					= FALSE AND
		DISPOSAL_ORDER_ID 		= IN_DISPOSER_ORDER_ID
	ORDER BY BID_AMOUNT, CREATED_AT ASC;
	/*COLLECTOR_BIDDING 전체 레코드에 대해서 BIDDING_RANK를 다시 계산한다.*/
    
	UPDATE COLLECTOR_BIDDING 
    SET 
		WINNER 				= TRUE, 
        UPDATED_AT 			= VAR_REG_DT
    WHERE 
		DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID AND 
        BIDDING_RANK 		= 1;
	/*COLLECTOR_BIDDINGD 레코드 중에서 BIDDING_RANK가 1인 레코드의 WINNER를 TRUE로 셋팅한다.*/    
    
    CALL sp_calc_bidder_and_prospective_visitors(
		IN_DISPOSER_ORDER_ID
    );
        
	SELECT BIDDERS INTO VAR_BIDDERS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE ID = IN_DISPOSER_ORDER_ID;
    
    IF VAR_BIDDERS > 0 THEN
    /*투찰자가 1이상 존재하는 경우*/
		SELECT ID INTO VAR_FIRST_PLACE
		FROM COLLECTOR_BIDDING 
		WHERE 
			BIDDING_RANK 		= 1 AND 
			DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID;
		/*COLLECTOR_BIDDING에서 RANK가 1인 COLLECTOR_BIDDING.ID를 구하여 VAR_FIRST_PLACE에 반환한다.*/
		IF VAR_BIDDERS = 1 THEN
        /*적합투찰자인 BIDDER가 1인 경우*/
			UPDATE SITE_WSTE_DISPOSAL_ORDER 
			SET 
				FIRST_PLACE 	= VAR_FIRST_PLACE, 
				SECOND_PLACE 	= NULL,
                UPDATED_AT		= VAR_REG_DT
			WHERE ID = IN_DISPOSER_ORDER_ID;
			/*SITE_WSTE_DISPOSAL_ORDER에서 FIRST_PLACE에는 VAR_FIRST_PLACE를, SECOND_PLACE에는 NULL을 저장한다.*/
		ELSE
			SELECT ID INTO VAR_SECOND_PLACE
			FROM COLLECTOR_BIDDING 
			WHERE 
				BIDDING_RANK 		= 2 AND 
				DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID;
			/*COLLECTOR_BIDDING에서 RANK가 2인 COLLECTOR_BIDDING.ID를 구하여 VAR_SECOND_PLACE에 반환한다.*/
				
			UPDATE SITE_WSTE_DISPOSAL_ORDER 
			SET 
				FIRST_PLACE 	= VAR_FIRST_PLACE, 
				SECOND_PLACE 	= VAR_SECOND_PLACE,
                UPDATED_AT		= VAR_REG_DT
			WHERE ID = IN_DISPOSER_ORDER_ID;
			/*SITE_WSTE_DISPOSAL_ORDER에서 FIRST_PLACE에는 VAR_FIRST_PLACE를, SECOND_PLACE에는 VAR_SECOND_PLACE를 저장한다.*/
		END IF;
	ELSE
    /*투찰자가 존재하지 않는 경우*/
		UPDATE SITE_WSTE_DISPOSAL_ORDER 
		SET 
			FIRST_PLACE 	= NULL, 
			SECOND_PLACE 	= NULL,
            UPDATED_AT		= VAR_REG_DT
		WHERE ID = IN_DISPOSER_ORDER_ID;
        /*SITE_WSTE_DISPOSAL_ORDER에 등록된 1순위자와 2순위자에 대한 정보를 모두 NULL로 교체한다.*/
    END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_bidding_rank_after_delete_company`(
	IN IN_COMP_ID			BIGINT,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_calc_bidding_rank_after_delete_company
Input param 	: 1개
Job 			: 사업자가 삭제된 후 모든 BIDDING RANK를 계산한다.
Update 			: 2022.04.25
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount_comp						INT DEFAULT 0;
    DECLARE endOfRow_comp						TINYINT DEFAULT FALSE;    
    DECLARE CUR_SITE_ID							BIGINT; 
    DECLARE COMP_CURSOR		 					CURSOR FOR 
	SELECT ID FROM COMP_SITE WHERE COMP_ID = IN_COMP_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow_comp = TRUE;
	
	OPEN COMP_CURSOR;	
	cloop_comp: LOOP
		
		FETCH COMP_CURSOR 
		INTO 
			CUR_SITE_ID;
		
		SET vRowCount_comp = vRowCount_comp + 1;
		IF endOfRow_comp THEN
			LEAVE cloop_comp;
		END IF;
        
        CALL sp_calc_bidding_rank_after_delete_site(
			CUR_SITE_ID,
            rtn_val,
            msg_txt
        );
		IF rtn_val > 0 THEN
			LEAVE cloop_comp;
        END IF;
	END LOOP;   
	CLOSE COMP_CURSOR;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_bidding_rank_after_delete_site`(
	IN IN_SITE_ID			BIGINT,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_calc_bidding_rank_after_delete_site
Input param 	: 1개
Job 			: 사이트가 삭제된 후 모든 BIDDING RANK를 계산한다.
Update 			: 2022.04.25
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT 	DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT; 
    DECLARE CUR_BIDDING_ID						BIGINT; 
    DECLARE CUR_FIRST_RANK_DROP					TINYINT; 
    DECLARE CUR_SECOND_RANK						BIGINT;
	DECLARE VAR_REG_DT							DATETIME 	DEFAULT NOW();
	DECLARE VAR_SECOND_PLACE					BIGINT 		DEFAULT NULL;
    DECLARE SITE_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
        B.ID,
        IF(C.COLLECT_ASK_END_AT IS NULL AND A.BIDDING_END_AT < NOW() AND B.BIDDING_RANK = 1,
			TRUE,
            FALSE
		),
        A.SECOND_PLACE
    FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN COLLECTOR_BIDDING B ON A.ID = B.DISPOSAL_ORDER_ID
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION C ON A.ID = C.DISPOSAL_ORDER_ID
	WHERE 
		A.IS_DELETED = FALSE AND
		B.COLLECTOR_ID = IN_SITE_ID AND
		(	
			(
				IF(A.VISIT_END_AT IS NOT NULL,
					A.BIDDING_END_AT >= NOW() AND
					A.VISIT_END_AT < NOW(),
					A.BIDDING_END_AT >= NOW()
				)
			) OR
			(
				C.COLLECT_ASK_END_AT IS NULL AND
                A.BIDDING_END_AT < NOW()
			)
        );
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    CALL sp_req_current_time(VAR_REG_DT);
	SET rtn_val = 0;
	SET msg_txt = 'success';
	OPEN SITE_CURSOR;	
	cloop: LOOP
		
		FETCH SITE_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_BIDDING_ID,
			CUR_FIRST_RANK_DROP,
			CUR_SECOND_RANK;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		CALL sp_req_last_bidder_set_bidding_end_date_now_for_cancel(
			CUR_ORDER_ID,
			CUR_BIDDING_ID,
			rtn_val,
			msg_txt
		);
		IF rtn_val = 0 THEN
			IF CUR_FIRST_RANK_DROP = TRUE THEN				/*1순위 예상낙찰자로서 회원탈퇴를 시도하는 경우*/
				SELECT SECOND_PLACE INTO VAR_SECOND_PLACE
                FROM SITE_WSTE_DISPOSAL_ORDER
                WHERE ID = CUR_ORDER_ID;
                
                CALL sp_calc_bidders(
					CUR_ORDER_ID
                );
                
                UPDATE SITE_WSTE_DISPOSAL_ORDER				/*입찰등록정보에 대한 변경절차를 실시한다*/
                SET 
					FIRST_PLACE 	= VAR_SECOND_PLACE,		/*2순위 예상낙찰자를 1순위 예상낙찰자로 변경*/
                    SECOND_PLACE 	= NULL,					/*2순위 예상낙찰자는 NULL로 처리*/
                    BIDDERS 		= BIDDERS - 1,			/*BIDDERS를 1 감소시킨다*/
					UPDATED_AT 		= VAR_REG_DT				/*레코드의 업데이트 일자를 현재로 변경한다*/
				WHERE ID 			= CUR_ORDER_ID;
                IF ROW_COUNT() = 1 THEN						/*입찰결과 정보변경이 성공한 경우*/
					UPDATE COLLECTOR_BIDDING				/*1순위 예상낙찰자에 대한 투찰정보변경절차를 실시한다*/
                    SET 
						WINNER 			= FALSE,			/*회원탈퇴한 사용자의 투찰정보중 WINNER를 FALSE 처리한다*/
                        BIDDING_RANK 	= NULL,				/*낙찰순위를 NULL처리한다*/
                        ACTIVE			= FALSE,			/*투찰정보를 비활성화처리한다*/
                        UPDATED_AT 		= VAR_REG_DT			/*레코드의 업데이트 일자를 현재로 변경한다*/
					WHERE ID = CUR_BIDDING_ID;
                    IF ROW_COUNT() = 1 THEN					/*1순위 예상낙찰자에 대한 투찰결과 정보변경이 성공한 경우*/
						UPDATE COLLECTOR_BIDDING			/*2순위 예상낙찰자에 대한 투찰정보변경절차를 실시한다*/
						SET 
							WINNER = 1,						/*2순위 예상낙찰자를 WINNER처리한다*/
							BIDDING_RANK = 1,				/*2순위 예상낙찰자의 순위를 1순위로 변경처리한다*/
							UPDATED_AT 		= VAR_REG_DT		/*레코드의 업데이트 일자를 현재로 변경한다*/
						WHERE ID = VAR_SECOND_PLACE;
						IF ROW_COUNT() = 0 THEN				/*2순위 예상낙찰자에 대한 투찰결과 정보변경이 실패한 경우*/
							SET rtn_val = 39205;
							SET msg_txt = 'failed to change second rank bidding information';
							LEAVE cloop;
						END IF;
                    ELSE									/*1순위 예상낙찰자에 대한 투찰결과 정보변경이 실패한 경우*/
						SET rtn_val = 39204;
						SET msg_txt = 'failed to change first rank bidding information';
						LEAVE cloop;
                    END IF;
				ELSE										/*입찰결과 정보변경이 실패한 경우*/
					SET rtn_val = 39203;
					SET msg_txt = 'failed to drop first place and change second place to first place';
					LEAVE cloop;
                END IF;
            ELSE											/*1순위가 아닌자로서 회원탈퇴를 시도하는 경우*/
				IF CUR_SECOND_RANK = CUR_BIDDING_ID THEN	/*2순위 예상낙찰자로서 회원탈퇴를 시도하는 경우*/                
					CALL sp_calc_bidders(
						CUR_ORDER_ID
					);
					UPDATE SITE_WSTE_DISPOSAL_ORDER			/*입찰등록정보에 대한 변경절차를 실시한다*/
					SET 
						SECOND_PLACE 	= NULL,				/*2순위 예상낙찰자를 NULL처리한다.*/
						BIDDERS 		= BIDDERS - 1,		/*BIDDERS를 1 감소시킨다*/
                        UPDATED_AT 		= VAR_REG_DT			/*레코드의 업데이트 일자를 현재로 변경한다*/
					WHERE ID 			= CUR_ORDER_ID;
					IF ROW_COUNT() = 1 THEN
						UPDATE COLLECTOR_BIDDING			/*2순위 예상낙찰자에 대한 투찰정보변경절차를 실시한다*/
                        SET
							BIDDING_RANK 	= NULL,			/*낙찰순위를 NULL처리한다*/
							ACTIVE			= FALSE,		/*투찰정보를 비활성화처리한다*/
                            UPDATED_AT 		= VAR_REG_DT		/*레코드의 업데이트 일자를 현재로 변경한다*/
						WHERE ID = CUR_BIDDING_ID;
						IF ROW_COUNT() = 0 THEN
							SET rtn_val = 39202;
							SET msg_txt = 'failed to change second rank bidding information';
							LEAVE cloop;
						END IF;
                    ELSE
						SET rtn_val = 39201;
                        SET msg_txt = 'failed to update second place null';
						LEAVE cloop;
					END IF;
                ELSE										/*1순위, 2순위가 아닌자로서 회원탈퇴를 시도하는 경우*/
					CALL sp_calc_bidding_rank(
						CUR_ORDER_ID
					);
                END IF;
            END IF;
		ELSE
			LEAVE cloop;
		END IF;
	END LOOP;   
	CLOSE SITE_CURSOR;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_bidding_rank_all`(
)
BEGIN

    DECLARE vRowCount 						INT DEFAULT 0;
    DECLARE endOfRow 						TINYINT 	DEFAULT FALSE;      
    DECLARE CUR_ID		 					BIGINT;  
	DECLARE VAR_REG_DT						DATETIME 	DEFAULT NOW();  
	DECLARE VAR_BIDDERS						INT 		DEFAULT 0;
	DECLARE VAR_FIRST_PLACE					BIGINT 		DEFAULT NULL;
	DECLARE VAR_SECOND_PLACE				BIGINT 		DEFAULT NULL;
    DECLARE TEMP_CURSOR 					CURSOR FOR 
    SELECT 
		ID
	FROM SITE_WSTE_DISPOSAL_ORDER;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;   
    	
	OPEN TEMP_CURSOR;	
    CALL sp_req_current_time(VAR_REG_DT);
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;	
    
		UPDATE COLLECTOR_BIDDING 
		SET BIDDING_RANK = NULL 
		WHERE DISPOSAL_ORDER_ID = CUR_ID;
		/*COLLECTOR_BIDDING 전체 레코드에 대해서 BIDDING_RANK를 NULL로 셋팅한다.*/
        
		SET @rank:=0;
		UPDATE COLLECTOR_BIDDING 
		SET 
			BIDDING_RANK			= @rank := @rank+1,
			UPDATED_AT				= VAR_REG_DT
		WHERE 
			BID_AMOUNT 				IS NOT NULL AND
			DISPOSAL_ORDER_ID 		= CUR_ID AND 
			DATE_OF_BIDDING			IS NOT NULL AND
			CANCEL_BIDDING 			= FALSE AND
			REJECT_BIDDING 			<> TRUE AND
			REJECT_BIDDING_APPLY	<> TRUE AND
			ACTIVE					= TRUE AND
            DELETED					= FALSE
		ORDER BY BID_AMOUNT, CREATED_AT ASC;
		/*COLLECTOR_BIDDING 전체 레코드에 대해서 BIDDING_RANK를 다시 계산한다.*/
    
		UPDATE COLLECTOR_BIDDING 
		SET 
			WINNER 				= FALSE, 
			UPDATED_AT 			= VAR_REG_DT
		WHERE DISPOSAL_ORDER_ID = CUR_ID;
		/*COLLECTOR_BIDDINGD 전체 레코드에 대하여 WINNER를 FALSE로 셋팅한다.*/
		
		UPDATE COLLECTOR_BIDDING 
		SET 
			WINNER 				= TRUE, 
			UPDATED_AT 			= VAR_REG_DT
		WHERE 
			DISPOSAL_ORDER_ID 	= CUR_ID AND 
			BIDDING_RANK 		= 1;
		/*COLLECTOR_BIDDINGD 레코드 중에서 BIDDING_RANK가 1인 레코드의 WINNER를 TRUE로 셋팅한다.*/
		
		SELECT COUNT(ID) INTO VAR_BIDDERS
		FROM COLLECTOR_BIDDING 
		WHERE 
			BIDDING_RANK IS NOT NULL AND
			DISPOSAL_ORDER_ID 	= CUR_ID;
		/*COLLECTOR_BIDDING의 전체 레코드에서 순위가 정해진 모든 레코드의 수를 구하여 VAR_BIDDERS에 반환한다.*/
		
		UPDATE SITE_WSTE_DISPOSAL_ORDER
		SET BIDDERS = VAR_BIDDERS
		WHERE ID = CUR_ID;
		/*새로이 갱신된 VAR_BIDDERS값을 SITE_WSTE_DISPOSAL_ORDER의 BIDDERS에 저장한다.*/        
    
		IF VAR_BIDDERS > 0 THEN
		/*투찰자가 1이상 존재하는 경우*/	
			SELECT CONCAT(CUR_ID, ':', VAR_BIDDERS);
			IF VAR_BIDDERS = 1 THEN
			/*적합투찰자인 BIDDER가 1인 경우*/
				SELECT ID INTO VAR_FIRST_PLACE
				FROM COLLECTOR_BIDDING 
				WHERE 
					BIDDING_RANK 		= 1 AND 
					DISPOSAL_ORDER_ID 	= CUR_ID;
				/*COLLECTOR_BIDDING에서 RANK가 1인 COLLECTOR_BIDDING.ID를 구하여 VAR_FIRST_PLACE에 반환한다.*/
					
				UPDATE SITE_WSTE_DISPOSAL_ORDER 
				SET 
					FIRST_PLACE = VAR_FIRST_PLACE, 
					SECOND_PLACE = NULL
				WHERE ID = CUR_ID;
				/*SITE_WSTE_DISPOSAL_ORDER에서 FIRST_PLACE에는 VAR_FIRST_PLACE를, SECOND_PLACE에는 NULL을 저장한다.*/
			ELSE
				SELECT ID INTO VAR_FIRST_PLACE
				FROM COLLECTOR_BIDDING 
				WHERE 
					BIDDING_RANK 		= 1 AND 
					DISPOSAL_ORDER_ID 	= CUR_ID;
				/*COLLECTOR_BIDDING에서 RANK가 1인 COLLECTOR_BIDDING.ID를 구하여 VAR_FIRST_PLACE에 반환한다.*/
					
				SELECT ID INTO VAR_SECOND_PLACE
				FROM COLLECTOR_BIDDING 
				WHERE 
					BIDDING_RANK 		= 2 AND 
					DISPOSAL_ORDER_ID 	= CUR_ID;
				/*COLLECTOR_BIDDING에서 RANK가 2인 COLLECTOR_BIDDING.ID를 구하여 VAR_SECOND_PLACE에 반환한다.*/
					
				UPDATE SITE_WSTE_DISPOSAL_ORDER 
				SET 
					FIRST_PLACE = VAR_FIRST_PLACE, 
					SECOND_PLACE = VAR_SECOND_PLACE
				WHERE ID = CUR_ID;
				/*SITE_WSTE_DISPOSAL_ORDER에서 FIRST_PLACE에는 VAR_FIRST_PLACE를, SECOND_PLACE에는 VAR_SECOND_PLACE를 저장한다.*/
			END IF;
		ELSE
		/*투찰자가 존재하지 않는 경우*/
			UPDATE SITE_WSTE_DISPOSAL_ORDER 
			SET 
				FIRST_PLACE = NULL, 
				SECOND_PLACE = NULL
			WHERE ID = CUR_ID;
			/*SITE_WSTE_DISPOSAL_ORDER에 등록된 1순위자와 2순위자에 대한 정보를 모두 NULL로 교체한다.*/
		END IF;

	END LOOP;   
	CLOSE TEMP_CURSOR;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_clct_trmt_vist_schedule_all`(
)
BEGIN

    DECLARE vRowCount 						INT DEFAULT 0;
    DECLARE endOfRow 						TINYINT 	DEFAULT FALSE;      
    DECLARE CUR_ID		 					BIGINT;       
    DECLARE CUR_VISIT_START_AT				DATETIME;      
    DECLARE CUR_VISIT_END_AT				DATETIME; 
    DECLARE TEMP_CURSOR 					CURSOR FOR 
    SELECT 
		ID,
        VISIT_START_AT,
        VISIT_END_AT
	FROM SITE_WSTE_DISPOSAL_ORDER;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;  
    
    UPDATE WSTE_CLCT_TRMT_TRANSACTION 
	SET 
		VISIT_START_AT = NULL, 
		VISIT_END_AT = NULL; 
	
	OPEN TEMP_CURSOR;
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID,
			CUR_VISIT_START_AT,
			CUR_VISIT_END_AT;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF; 
        
		UPDATE WSTE_CLCT_TRMT_TRANSACTION 
        SET 
			VISIT_START_AT = CUR_VISIT_START_AT, 
            VISIT_END_AT = CUR_VISIT_END_AT 
        WHERE DISPOSAL_ORDER_ID = CUR_ID;

	END LOOP;   
	CLOSE TEMP_CURSOR;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_collector_max_decision_at_all`(
)
BEGIN

    DECLARE vRowCount 						INT DEFAULT 0;
    DECLARE endOfRow 						TINYINT DEFAULT FALSE;      
    DECLARE CUR_ID		 					BIGINT;    
	DECLARE VAR_MAX_SELECT_AT				DATETIME 	DEFAULT NULL;  
	DECLARE VAR_MAX_SELECT2_AT				DATETIME 	DEFAULT NULL;  
	DECLARE VAR_COLLECTOR_MAX_DECISION_AT	DATETIME 	DEFAULT NULL;  
	DECLARE VAR_COLLECTOR_MAX_DECISION2_AT	DATETIME 	DEFAULT NULL;  
	DECLARE MAX_SELECTION_DURATION			VARCHAR(20)	DEFAULT NULL;  
    DECLARE TEMP_CURSOR 					CURSOR FOR 
    SELECT ID FROM SITE_WSTE_DISPOSAL_ORDER;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;  
    
	CALL sp_req_policy_direction(
	/*수거자가 배출자의 최종입찰선정에 응답을 할 수 있는 최대의 시간으로서 배출자의 최종낙찰자선정일로부터의 기간을 반환받는다(단위:시간)*/
		'max_selection_duration',
		MAX_SELECTION_DURATION
	);
    	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF; 
        
		UPDATE SITE_WSTE_DISPOSAL_ORDER SET COLLECTOR_MAX_DECISION_AT = NULL, COLLECTOR_MAX_DECISION2_AT = NULL WHERE ID = CUR_ID;
        SELECT MAX_SELECT_AT INTO VAR_MAX_SELECT_AT FROM SITE_WSTE_DISPOSAL_ORDER WHERE ID = CUR_ID;
        SELECT MAX_SELECT2_AT INTO VAR_MAX_SELECT2_AT FROM SITE_WSTE_DISPOSAL_ORDER WHERE ID = CUR_ID;
        IF VAR_MAX_SELECT_AT IS NOT NULL THEN
			SET VAR_COLLECTOR_MAX_DECISION_AT = ADDTIME(VAR_MAX_SELECT_AT, CONCAT(CAST(MAX_SELECTION_DURATION AS UNSIGNED), ':00:00'));
			IF VAR_MAX_SELECT2_AT IS NOT NULL THEN
				SET VAR_COLLECTOR_MAX_DECISION2_AT = ADDTIME(VAR_MAX_SELECT2_AT, CONCAT(CAST(MAX_SELECTION_DURATION AS UNSIGNED), ':00:00'));
            END IF;
			UPDATE SITE_WSTE_DISPOSAL_ORDER SET COLLECTOR_MAX_DECISION_AT = VAR_COLLECTOR_MAX_DECISION_AT, COLLECTOR_MAX_DECISION2_AT = VAR_COLLECTOR_MAX_DECISION2_AT WHERE ID = CUR_ID;
        END IF;

	END LOOP;   
	CLOSE TEMP_CURSOR;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_distance_with_geo`(
	IN IN_LAT1			DECIMAL(12,9),
	IN IN_LNG1			DECIMAL(12,9),
	IN IN_LAT2			DECIMAL(12,9),
	IN IN_LNG2			DECIMAL(12,9),
	OUT OUT_DIST			FLOAT
)
BEGIN
	DECLARE LAT_DIFF		FLOAT DEFAULT NULL;
	DECLARE LNG_DIFF		FLOAT DEFAULT NULL;
	DECLARE LAT_1			FLOAT DEFAULT NULL;
	DECLARE LAT_2			FLOAT DEFAULT NULL;
	DECLARE LNG_1			FLOAT DEFAULT NULL;
	DECLARE LNG_2			FLOAT DEFAULT NULL;
	DECLARE DIST			FLOAT DEFAULT NULL;
    
	SET LAT_DIFF = IN_LAT1 - IN_LAT2;
	SET LNG_DIFF = IN_LNG1 - IN_LNG2;
    SET LAT_1 = IN_LAT1 * PI() / 180;
    SET LNG_1 = IN_LNG1 * PI() / 180;
    SET LAT_2 = IN_LAT2 * PI() / 180;
    SET LNG_2 = IN_LNG2 * PI() / 180;
    SET DIST = 6378.137 * ACOS(COS(LAT_1)*COS(LAT_2)*COS(LNG_2 - LNG_1) + SIN(LAT_1) * SIN(LAT_2));
    SET OUT_DIST = DIST;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_make_decision_at`(
	IN IN_COLLECTOR_BIDDING_ID		BIGINT
)
BEGIN
	DECLARE VAR_REG_DT						DATETIME 	DEFAULT NOW();  
	DECLARE MAX_SELECTION_DURATION			VARCHAR(20)	DEFAULT NULL;  
	DECLARE VAR_MAX_DECISION_AT				DATETIME 	DEFAULT NULL;  
	DECLARE VAR_BIDDING_END_AT				DATETIME 	DEFAULT NULL;  
    
    CALL sp_req_current_time(VAR_REG_DT);
	CALL sp_req_policy_direction(
	/*수거자가 배출자의 최종입찰선정에 응답을 할 수 있는 최대의 시간으로서 배출자의 최종낙찰자선정일로부터의 기간을 반환받는다(단위:시간)*/
		'max_selection_duration',
		MAX_SELECTION_DURATION
	);

	SELECT B.BIDDING_END_AT INTO VAR_BIDDING_END_AT
    FROM COLLECTOR_BIDDING A 
    INNER JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID 
    WHERE A.ID = IN_COLLECTOR_BIDDING_ID;
    
	SET VAR_MAX_DECISION_AT = ADDTIME(VAR_BIDDING_END_AT, CONCAT(CAST(MAX_SELECTION_DURATION AS UNSIGNED), ':00:00'));
    
	UPDATE COLLECTOR_BIDDING 
    SET 
		MAX_DECISION_AT = VAR_MAX_DECISION_AT,
        UPDATED_AT		= VAR_REG_DT
    WHERE ID = IN_COLLECTOR_BIDDING_ID;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_make_decision_at_all`(
)
BEGIN

    DECLARE vRowCount 						INT DEFAULT 0;
    DECLARE endOfRow 						TINYINT DEFAULT FALSE;      
    DECLARE CUR_ID		 					BIGINT;   
	DECLARE MAX_SELECTION_DURATION			VARCHAR(20)	DEFAULT NULL;    
    DECLARE VAR_RECORD_COUNT				INT DEFAULT O;   
    DECLARE VAR_MAX_DECISION_AT				DATETIME DEFAULT NULL;   
    DECLARE VAR_BIDDING_END_AT				DATETIME DEFAULT NULL;   
    DECLARE TEMP_CURSOR 					CURSOR FOR 
    SELECT 
		ID
	FROM COLLECTOR_BIDDING;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;  
    
	CALL sp_req_policy_direction(
	/*수거자가 배출자의 최종입찰선정에 응답을 할 수 있는 최대의 시간으로서 배출자의 최종낙찰자선정일로부터의 기간을 반환받는다(단위:시간)*/
		'max_selection_duration',
		MAX_SELECTION_DURATION
	);
    	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF; 
        
        SELECT COUNT(ID) INTO VAR_RECORD_COUNT FROM COLLECTOR_BIDDING WHERE DATE_OF_BIDDING IS NOT NULL AND ID = CUR_ID;
        IF VAR_RECORD_COUNT = 1 THEN
			SELECT B.BIDDING_END_AT INTO VAR_BIDDING_END_AT FROM COLLECTOR_BIDDING A INNER JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID WHERE A.ID = CUR_ID;
			SET VAR_MAX_DECISION_AT = ADDTIME(VAR_BIDDING_END_AT, CONCAT(CAST(MAX_SELECTION_DURATION AS UNSIGNED), ':00:00'));
			UPDATE COLLECTOR_BIDDING SET MAX_DECISION_AT = VAR_MAX_DECISION_AT WHERE ID = CUR_ID;
        END IF;

	END LOOP;   
	CLOSE TEMP_CURSOR;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_max_decision_at`(
	IN IN_DISPOSER_ORDER_ID		BIGINT,
    IN IN_COLLECTOR_BIDDING_ID	BIGINT,
    IN IN_REG_DT				DATETIME
)
BEGIN
	DECLARE MAX_SELECTION_DURATION			VARCHAR(20)	DEFAULT NULL;  
	DECLARE VAR_COLLECTOR_BIDDING_ID		BIGINT	 	DEFAULT NULL;  
	DECLARE VAR_RECORD_COUNT				INT	 		DEFAULT 0;  
	DECLARE VAR_MAX_SELECT_AT				DATETIME 	DEFAULT NULL;  
	DECLARE VAR_MAX_SELECT2_AT				DATETIME 	DEFAULT NULL;  
	DECLARE VAR_MAX_DECISION_AT				DATETIME 	DEFAULT NULL;  
	DECLARE VAR_MAX_DECISION2_AT			DATETIME 	DEFAULT NULL;  
	DECLARE VAR_FIRST_PLACE					BIGINT	 	DEFAULT NULL;  
	DECLARE VAR_SECOND_PLACE				BIGINT	 	DEFAULT NULL;  
	DECLARE VAR_BIDDING_END_AT				DATETIME 	DEFAULT NULL;  

    /*SELECT ID INTO VAR_COLLECTOR_BIDDING_ID FROM COLLECTOR_BIDDING WHERE DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID;*/
	CALL sp_req_policy_direction(
	/*수거자가 배출자의 최종입찰선정에 응답을 할 수 있는 최대의 시간으로서 배출자의 최종낙찰자선정일로부터의 기간을 반환받는다(단위:시간)*/
		'max_selection_duration',
		MAX_SELECTION_DURATION
	);
        
	IF IN_COLLECTOR_BIDDING_ID IS NOT NULL THEN
		IF IN_COLLECTOR_BIDDING_ID = VAR_COLLECTOR_BIDDING_ID THEN
			SELECT COUNT(ID) INTO VAR_RECORD_COUNT
            FROM COLLECTOR_BIDDING 
            WHERE 
				DATE_OF_BIDDING 				IS NOT NULL AND 
                ID 								= IN_COLLECTOR_BIDDING_ID;
                
			IF VAR_RECORD_COUNT = 1 THEN
				SELECT B.BIDDING_END_AT INTO VAR_BIDDING_END_AT
                FROM COLLECTOR_BIDDING A 
                INNER JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID 
                WHERE A.ID = IN_COLLECTOR_BIDDING_ID;
     
				SET VAR_MAX_SELECT_AT = ADDTIME(
										VAR_BIDDING_END_AT, 
										CONCAT(
											CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
											':00:01'
										)
									);
                
				SET VAR_MAX_DECISION_AT = ADDTIME(
										VAR_MAX_SELECT_AT, 
										CONCAT(
											CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
											':00:01'
										)
									);
									
				SET VAR_MAX_SELECT2_AT = ADDTIME(
										VAR_MAX_DECISION_AT, 
										CONCAT(
											CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
											':00:01'
										)
									);
                                    
				SET VAR_MAX_DECISION2_AT = ADDTIME(
										VAR_MAX_SELECT2_AT, 
										CONCAT(
											CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
											':00:01'
										)
									);
                
				UPDATE COLLECTOR_BIDDING 
                SET 
					MAX_DECISION_AT 			= VAR_MAX_DECISION_AT, 
                    UPDATED_AT 					= IN_REG_DT 
                WHERE ID 						= IN_COLLECTOR_BIDDING_ID;
                
				UPDATE SITE_WSTE_DISPOSAL_ORDER 
                SET 
					MAX_SELECT_AT				= VAR_MAX_SELECT_AT,
					MAX_SELECT2_AT				= VAR_MAX_SELECT2_AT,
					COLLECTOR_MAX_DECISION_AT 	= VAR_MAX_DECISION_AT,  
                    COLLECTOR_MAX_DECISION2_AT 	= VAR_MAX_DECISION2_AT, 
                    UPDATED_AT 					= IN_REG_DT 
                WHERE ID 						= IN_DISPOSER_ORDER_ID;
            
				SELECT FIRST_PLACE, SECOND_PLACE INTO VAR_FIRST_PLACE, VAR_SECOND_PLACE
				FROM SITE_WSTE_DISPOSAL_ORDER
				WHERE ID = IN_DISPOSER_ORDER_ID;
				
				IF VAR_FIRST_PLACE IS NOT NULL THEN
					UPDATE COLLECTOR_BIDDING 
					SET MAX_DECISION_AT = VAR_MAX_DECISION_AT
					WHERE ID = VAR_FIRST_PLACE;
				END IF;
				
				IF VAR_SECOND_PLACE IS NOT NULL THEN
					UPDATE COLLECTOR_BIDDING 
					SET MAX_DECISION_AT = VAR_MAX_DECISION2_AT
					WHERE ID = VAR_SECOND_PLACE;
				END IF;
			END IF;
		END IF;
	ELSE
		SELECT BIDDING_END_AT INTO VAR_BIDDING_END_AT 
		FROM SITE_WSTE_DISPOSAL_ORDER
		WHERE ID = IN_DISPOSER_ORDER_ID;
 
		SET VAR_MAX_SELECT_AT = ADDTIME(
								VAR_BIDDING_END_AT, 
								CONCAT(
									CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
									':00:02'
								)
							);
		
		SET VAR_MAX_DECISION_AT = ADDTIME(
								VAR_MAX_SELECT_AT, 
								CONCAT(
									CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
									':00:02'
								)
							);
							
		SET VAR_MAX_SELECT2_AT = ADDTIME(
								VAR_MAX_DECISION_AT, 
								CONCAT(
									CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
									':00:02'
								)
							);
							
		SET VAR_MAX_DECISION2_AT = ADDTIME(
								VAR_MAX_SELECT2_AT, 
								CONCAT(
									CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
									':00:02'
								)
							);
/*            
		UPDATE COLLECTOR_BIDDING 
		SET 
			MAX_DECISION_AT 			= VAR_MAX_DECISION_AT, 
			UPDATED_AT 					= IN_REG_DT 
		WHERE ID 						= IN_COLLECTOR_BIDDING_ID;
*/            
		UPDATE SITE_WSTE_DISPOSAL_ORDER 
		SET 
			MAX_SELECT_AT				= VAR_MAX_SELECT_AT,
			MAX_SELECT2_AT				= VAR_MAX_SELECT2_AT,
			COLLECTOR_MAX_DECISION_AT 	= VAR_MAX_DECISION_AT,  
			COLLECTOR_MAX_DECISION2_AT 	= VAR_MAX_DECISION2_AT, 
			UPDATED_AT 					= IN_REG_DT 
		WHERE ID = IN_DISPOSER_ORDER_ID;
		
		SELECT FIRST_PLACE, SECOND_PLACE INTO VAR_FIRST_PLACE, VAR_SECOND_PLACE
		FROM SITE_WSTE_DISPOSAL_ORDER
		WHERE ID = IN_DISPOSER_ORDER_ID;
		
		IF VAR_FIRST_PLACE IS NOT NULL THEN
			UPDATE COLLECTOR_BIDDING 
			SET MAX_DECISION_AT = VAR_MAX_DECISION_AT
			WHERE ID = VAR_FIRST_PLACE;
		END IF;
		
		IF VAR_SECOND_PLACE IS NOT NULL THEN
			UPDATE COLLECTOR_BIDDING 
			SET MAX_DECISION_AT = VAR_MAX_DECISION2_AT
			WHERE ID = VAR_SECOND_PLACE;
		END IF;
	END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_max_decision_at_all_for_existing_transactions`(
)
BEGIN

    DECLARE vRowCount 						INT DEFAULT 0;
    DECLARE endOfRow 						TINYINT DEFAULT FALSE;      
    DECLARE CUR_ID		 					BIGINT;    
    DECLARE CUR_ORDER_ID		 			BIGINT;    
    DECLARE CUR_COLLECTOR_MAX_DECISION_AT	DATETIME;    
    DECLARE TEMP_CURSOR 					CURSOR FOR 
    SELECT 
		A.ID,
        A.DISPOSAL_ORDER_ID,
        B.COLLECTOR_MAX_DECISION_AT
	FROM WSTE_CLCT_TRMT_TRANSACTION A 
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;   
    	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID,
			CUR_ORDER_ID,
			CUR_COLLECTOR_MAX_DECISION_AT;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;	
    
		UPDATE WSTE_CLCT_TRMT_TRANSACTION 
		SET MAX_DECISION_AT = CUR_COLLECTOR_MAX_DECISION_AT 
		WHERE ID = CUR_ID AND COLLECTOR_BIDDING_ID IS NULL;
		/*COLLECTOR_BIDDING 전체 레코드에 대해서 BIDDING_RANK를 NULL로 셋팅한다.*/

	END LOOP;   
	CLOSE TEMP_CURSOR;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_max_select_at_all`(
)
BEGIN

    DECLARE vRowCount 						INT DEFAULT 0;
    DECLARE endOfRow 						TINYINT DEFAULT FALSE;      
    DECLARE CUR_ID		 					BIGINT;   
	DECLARE MAX_SELECTION_DURATION			VARCHAR(20)	DEFAULT NULL;   
	DECLARE VAR_BIDDING_END_AT				DATETIME 	DEFAULT NULL;  
	DECLARE VAR_MAX_SELECT_AT				DATETIME 	DEFAULT NULL;  
	DECLARE VAR_MAX_SELECT2_AT				DATETIME 	DEFAULT NULL;  
    DECLARE TEMP_CURSOR 					CURSOR FOR 
    SELECT ID FROM SITE_WSTE_DISPOSAL_ORDER;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;  
    
	CALL sp_req_policy_direction(
	/*수거자가 배출자의 최종입찰선정에 응답을 할 수 있는 최대의 시간으로서 배출자의 최종낙찰자선정일로부터의 기간을 반환받는다(단위:시간)*/
		'max_selection_duration',
		MAX_SELECTION_DURATION
	);
    	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF; 
        
        SELECT BIDDING_END_AT INTO VAR_BIDDING_END_AT FROM SITE_WSTE_DISPOSAL_ORDER WHERE ID = CUR_ID;
        SET VAR_MAX_SELECT_AT = ADDTIME(VAR_BIDDING_END_AT, CONCAT(CAST(MAX_SELECTION_DURATION AS UNSIGNED), ':00:00'));
        SET VAR_MAX_SELECT2_AT = ADDTIME(VAR_BIDDING_END_AT, CONCAT(CAST(MAX_SELECTION_DURATION AS UNSIGNED)*2, ':00:00'));
		UPDATE SITE_WSTE_DISPOSAL_ORDER SET MAX_SELECT_AT = VAR_MAX_SELECT_AT, MAX_SELECT2_AT = VAR_MAX_SELECT2_AT WHERE ID = CUR_ID;

	END LOOP;   
	CLOSE TEMP_CURSOR;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_calc_prospective_visitors`(
	IN IN_DISPOSER_ORDER_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_calc_prospective_visitors
Input param 	: 1개
Job 			: 방문예정자수를 계산하여 PROSPECTIVE_VISITORS에 저장한다.
Update 			: 2022.03.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT					DATETIME 	DEFAULT NOW();
	DECLARE VAR_PROSPECTIVE_VISITORS	INT 		DEFAULT 0;

    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) INTO VAR_PROSPECTIVE_VISITORS
	FROM COLLECTOR_BIDDING 
	WHERE 
		DISPOSAL_ORDER_ID 		= IN_DISPOSER_ORDER_ID AND 
		DATE_OF_VISIT 			IS NOT NULL AND
		CANCEL_VISIT 			= FALSE AND
		RESPONSE_VISIT 			= TRUE;
        
	UPDATE SITE_WSTE_DISPOSAL_ORDER 
    SET 
		PROSPECTIVE_VISITORS 	= VAR_PROSPECTIVE_VISITORS,
        UPDATED_AT				= VAR_REG_DT
    WHERE ID 					= IN_DISPOSER_ORDER_ID;
    
	CALL sp_calc_bidders(
		IN_DISPOSER_ORDER_ID
	);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_cancel_bidding`(
	IN IN_USER_ID					BIGINT,				/*입력값 : 사용자 고유등록번호(USERS.ID)*/
	IN IN_COLLECTOR_BIDDING_ID		BIGINT				/*입력값 : 입찰 고유등록번호(COLLECTOR_BIDDING.ID)*/
)
BEGIN

/*
Procedure Name 	: sp_cancel_bidding
Input param 	: 3개
Output param 	: 3개
Job 			: 폐기물 수집업자 등의 이전 입찰을 취소한다.
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.29
Version			: 0.0.4
AUTHOR 			: Leo Nam
Change			: COLLECTOR_BIDDING의 CANCEL_BIDDING 칼럼 상태를 TRUE로 변경함으로써 입찰을 포기하는 상태로 전환함(0.0.2)
				: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.3)
				: 서브 프로시저의 데이타 반환타입 통일(0.0.4)
*/	
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_PUSH_CATEGORY_ID				INT				DEFAULT 13;
	DECLARE VAR_REG_DT							DATETIME		DEFAULT NOW();
	DECLARE VAR_DISPOSAL_ORDER_ID				BIGINT			DEFAULT NULL;
	DECLARE VAR_CHK_COUNT						INT				DEFAULT 0;
	DECLARE VAR_USER_SITE_ID					BIGINT			DEFAULT NULL;
	DECLARE VAR_GIVEUP_BIDDING					TINYINT			DEFAULT NULL;
	DECLARE VAR_CANCEL_BIDDING					TINYINT			DEFAULT NULL;
	DECLARE VAR_BIDDING_RANK					INT				DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	SET VAR_PUSH_CATEGORY_ID = 13;
    CALL sp_req_current_time(VAR_REG_DT);
    
	CALL sp_req_user_exists_by_id(
	/*생성자가 존재하는지 체크한다.*/
		IN_USER_ID, 
		TRUE, 
		rtn_val,
		msg_txt
	);
	/*등록을 요청하는 사용자의 USER_ID가 이미 등록되어 있는 경우에는 @USER_EXISTS = 1, 그렇지 않은 경우에는 @USER_EXISTS = 0이 됨*/ 		
	IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우*/
		CALL sp_req_disposal_id_of_collector_bidding_id(
			IN_COLLECTOR_BIDDING_ID,
			VAR_DISPOSAL_ORDER_ID
		);
		
		CALL sp_req_bidding_end_date_expired(
		/*입찰마감일이 종료되었는지 검사한다. 종료되었으면 TRUE, 그렇지 않으면 FALSE반환*/
			VAR_DISPOSAL_ORDER_ID,
			rtn_val,
			msg_txt
		);
		IF rtn_val = 0 THEN
		/*입찰마감일이 종료되지 않은 경우*/
            SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID 
            FROM USERS 
            WHERE ID = IN_USER_ID;
            IF VAR_USER_SITE_ID IS NOT NULL THEN
				SELECT COUNT(ID) 
				INTO VAR_CHK_COUNT 
				FROM COLLECTOR_BIDDING 
				WHERE 
					ID = IN_COLLECTOR_BIDDING_ID AND
					DATE_OF_BIDDING IS NOT NULL;
				IF VAR_CHK_COUNT= 1 THEN
				/*사이트가 이전에 입찰한 사실이 있는 경우에는 입찰취소가 가능함*/
					SET VAR_PUSH_CATEGORY_ID = 15;
					CALL sp_push_collector_cancel_or_giveup_bidding(
						IN_USER_ID,
						VAR_DISPOSAL_ORDER_ID,
						IN_COLLECTOR_BIDDING_ID,
						VAR_PUSH_CATEGORY_ID,
						json_data,
						rtn_val,
						msg_txt
					);
					SELECT GIVEUP_BIDDING INTO VAR_GIVEUP_BIDDING 
                    FROM COLLECTOR_BIDDING 
                    WHERE ID = IN_COLLECTOR_BIDDING_ID;
                    IF VAR_GIVEUP_BIDDING = FALSE THEN
						SELECT CANCEL_BIDDING INTO VAR_CANCEL_BIDDING 
                        FROM COLLECTOR_BIDDING 
                        WHERE ID = IN_COLLECTOR_BIDDING_ID;
						IF VAR_CANCEL_BIDDING = FALSE THEN
							UPDATE COLLECTOR_BIDDING 
							SET 
								CANCEL_BIDDING 		= TRUE, 
								CANCEL_BIDDING_AT 	= VAR_REG_DT , 
								UPDATED_AT		 	= VAR_REG_DT 
							WHERE ID 				= IN_COLLECTOR_BIDDING_ID;
							/*입찰신청을 취소사태(비활성상태)로 변경한다.*/
							IF ROW_COUNT() = 0 THEN
							/*데이타베이스 입력에 실패한 경우*/
								SET rtn_val 		= 23801;
								SET msg_txt 		= 'db error occurred during bid cancellation';
								SIGNAL SQLSTATE '23000';
							ELSE
							/*데이타베이스 입력에 성공한 경우*/                                
								SELECT BIDDING_RANK INTO VAR_BIDDING_RANK
                                FROM COLLECTOR_BIDDING
                                WHERE ID = IN_COLLECTOR_BIDDING_ID;
                                IF VAR_BIDDING_RANK <= 2 THEN
									IF VAR_BIDDING_RANK = 1 THEN
										UPDATE SITE_WSTE_DISPOSAL_ORDER
                                        SET 
											COLLECTOR_MAX_DECISION_AT 	= VAR_REG_DT,
											MAX_SELECT_AT 				= VAR_REG_DT,
                                            UPDATED_AT					= VAR_REG_DT
                                        WHERE ID 						= VAR_DISPOSAL_ORDER_ID;
									ELSE
										UPDATE SITE_WSTE_DISPOSAL_ORDER
                                        SET 
											COLLECTOR_MAX_DECISION2_AT 	= VAR_REG_DT,
											MAX_SELECT2_AT 				= VAR_REG_DT,
                                            UPDATED_AT					= VAR_REG_DT
                                        WHERE ID 						= VAR_DISPOSAL_ORDER_ID;
									END IF;
									UPDATE COLLECTOR_BIDDING
									SET 
										MAX_DECISION_AT = VAR_REG_DT,
										UPDATED_AT		= VAR_REG_DT
									WHERE ID = IN_COLLECTOR_BIDDING_ID;
									SET rtn_val 		= 0;
									SET msg_txt 		= 'Success';
                                END IF;
								CALL sp_req_last_bidder_set_bidding_end_date_now_for_cancel(
									VAR_DISPOSAL_ORDER_ID,
									IN_COLLECTOR_BIDDING_ID,
									rtn_val,
									msg_txt
								);
								IF rtn_val = 0 THEN
									CALL sp_calc_bidding_rank(
										VAR_DISPOSAL_ORDER_ID
									);
								ELSE
									SIGNAL SQLSTATE '23000';
								END IF;
							END IF;
                        ELSE
							SET rtn_val 		= 23805;
							SET msg_txt 		= 'already canceled the bidding';
							SIGNAL SQLSTATE '23000';
                        END IF;
                    ELSE
						SET rtn_val 		= 23804;
						SET msg_txt 		= 'already given up the bidding';
						SIGNAL SQLSTATE '23000';
                    END IF;
				ELSE
				/*사이트가 이전에 입찰한 사실이 없는 경우에는 입찰권을 포기하게 함*/
					SET VAR_PUSH_CATEGORY_ID = 13;
					CALL sp_push_collector_cancel_or_giveup_bidding(
						IN_USER_ID,
						VAR_DISPOSAL_ORDER_ID,
						IN_COLLECTOR_BIDDING_ID,
						VAR_PUSH_CATEGORY_ID,
						json_data,
						rtn_val,
						msg_txt
					);
					SELECT CANCEL_BIDDING INTO VAR_CANCEL_BIDDING 
                    FROM COLLECTOR_BIDDING 
                    WHERE ID = IN_COLLECTOR_BIDDING_ID;
                    IF VAR_CANCEL_BIDDING = FALSE THEN
						SELECT GIVEUP_BIDDING INTO VAR_GIVEUP_BIDDING 
                        FROM COLLECTOR_BIDDING 
                        WHERE ID = IN_COLLECTOR_BIDDING_ID;
						IF VAR_GIVEUP_BIDDING = FALSE THEN
							UPDATE COLLECTOR_BIDDING 
							SET 
								GIVEUP_BIDDING 		= TRUE, 
								GIVEUP_BIDDING_AT 	= VAR_REG_DT,
                                UPDATED_AT			= VAR_REG_DT
							WHERE ID 				= IN_COLLECTOR_BIDDING_ID;
							/*입찰신청권한을 포기한다.*/
							IF ROW_COUNT() = 0 THEN
							/*데이타베이스 입력에 실패한 경우*/
								SET rtn_val 		= 23802;
								SET msg_txt 		= 'db error occurred during bid cancellation';
								SIGNAL SQLSTATE '23000';
							ELSE
							/*데이타베이스 입력에 성공한 경우*/                             
								SELECT BIDDING_RANK INTO VAR_BIDDING_RANK
                                FROM COLLECTOR_BIDDING
                                WHERE ID = IN_COLLECTOR_BIDDING_ID;
                                IF VAR_BIDDING_RANK <= 2 THEN
									IF VAR_BIDDING_RANK = 1 THEN
										UPDATE SITE_WSTE_DISPOSAL_ORDER
                                        SET 
											COLLECTOR_MAX_DECISION_AT 	= VAR_REG_DT,
											MAX_SELECT_AT 				= VAR_REG_DT,
                                            UPDATED_AT					= VAR_REG_DT
                                        WHERE ID 						= VAR_DISPOSAL_ORDER_ID;
									ELSE
										UPDATE SITE_WSTE_DISPOSAL_ORDER
                                        SET 
											COLLECTOR_MAX_DECISION2_AT 	= VAR_REG_DT,
											MAX_SELECT2_AT 				= VAR_REG_DT,
                                            UPDATED_AT					= VAR_REG_DT
                                        WHERE ID 						= VAR_DISPOSAL_ORDER_ID;
									END IF;
									UPDATE COLLECTOR_BIDDING
									SET 
										MAX_DECISION_AT = VAR_REG_DT,
										UPDATED_AT		= VAR_REG_DT
									WHERE ID = IN_COLLECTOR_BIDDING_ID;
									SET rtn_val 		= 0;
									SET msg_txt 		= 'Success';
                                END IF;
								CALL sp_req_last_bidder_set_bidding_end_date_now_for_cancel(
									VAR_DISPOSAL_ORDER_ID,
									IN_COLLECTOR_BIDDING_ID,
									rtn_val,
									msg_txt
								);
								IF rtn_val = 0 THEN
									CALL sp_calc_bidding_rank(
										VAR_DISPOSAL_ORDER_ID
									);
								ELSE
									SIGNAL SQLSTATE '23000';
								END IF;
							END IF;
                        ELSE
							SET rtn_val 		= 23807;
							SET msg_txt 		= 'already given up the bidding';
							SIGNAL SQLSTATE '23000';
                        END IF;
                    ELSE
						SET rtn_val 		= 23806;
						SET msg_txt 		= 'already canceled the bidding';
						SIGNAL SQLSTATE '23000';
                    END IF;
				END IF;
            ELSE
				SET rtn_val 		= 23803;
				SET msg_txt 		= 'user site does not exist';
				SIGNAL SQLSTATE '23000';
            END IF;
		ELSE
		/*입찰마감일이 종료된 경우 예외처리한다.*/
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
    /*사용자가 존재하지 않거나 유효하지 않은 경우*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
    
    CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_cancel_visiting`(
	IN IN_USER_ID					BIGINT,				/*입력값 : 사용자 고유등록번호(USERS.ID)*/
	IN IN_COLLECTOR_BIDDING_ID		BIGINT				/*입력값 : 입찰 고유등록번호(COLLECTOR_BIDDING.ID)*/
)
BEGIN

/*
Procedure Name 	: sp_cancel_visiting
Input param 	: 2개
Job 			: 폐기물 수집업자 등이 자신이 신청한 입찰건에 대한 방문을 취소한다.
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.03.18
Version			: 0.0.4
AUTHOR 			: Leo Nam
Change			: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.3)
				: 방문취소가 실행된 경우 전체 방문가능자수를 계산하여 SITE_WSTE_DISPOSAL_ORDER.PROSPECTIVE_VISITORS를 UPDATE한다.(0.0.4)
				
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_PUSH_CATEGORY_ID				INT				DEFAULT 4;
	DECLARE VAR_REG_DT							DATETIME		DEFAULT NOW();
	DECLARE VAR_DISPOSAL_ORDER_ID				BIGINT			DEFAULT NULL;
	DECLARE VAR_VISIT_END_AT					DATETIME		DEFAULT NULL;
	DECLARE VAR_BIDDING_EXISTS					TINYINT			DEFAULT NULL;
	DECLARE VAR_IS_ALREADY_CANCELED				TINYINT			DEFAULT NULL;
	DECLARE VAR_EMITTOR_RESPONSE_FOR_VISIT		TINYINT			DEFAULT NULL;
	DECLARE VAR_ITEM_COUNT						INT				DEFAULT 0;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
        /*COMMIT;*/
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  

	SET VAR_PUSH_CATEGORY_ID = 4;
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
	/*생성자가 존재하는지 체크한다.*/
		IN_USER_ID, 
		TRUE, 
		rtn_val,
		msg_txt
	);
	/*등록을 요청하는 사용자의 USER_ID가 이미 등록되어 있는 경우에는 @USER_EXISTS = 1, 그렇지 않은 경우에는 @USER_EXISTS = 0이 됨*/ 		
	IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우*/
		CALL sp_req_disposal_id_of_collector_bidding_id(
			IN_COLLECTOR_BIDDING_ID,
			VAR_DISPOSAL_ORDER_ID
		);
		
		SELECT VISIT_END_AT
		INTO VAR_VISIT_END_AT
		FROM SITE_WSTE_DISPOSAL_ORDER 
		WHERE 
			ID = VAR_DISPOSAL_ORDER_ID AND 
			ACTIVE = TRUE;
            
		SELECT COUNT(A.ID) INTO VAR_BIDDING_EXISTS
        FROM COLLECTOR_BIDDING A
        LEFT JOIN USERS B ON A.COLLECTOR_ID = B.AFFILIATED_SITE
        WHERE
			A.ID = IN_COLLECTOR_BIDDING_ID AND
            B.ID = IN_USER_ID;
		IF VAR_BIDDING_EXISTS = 1 THEN
		/*BIDDING이 존재하는 경우 정상처리한다.*/
			IF VAR_VISIT_END_AT >= VAR_REG_DT THEN
			/*방문마감일이 종료되지 않은 경우*/
				SELECT COUNT(ID) INTO VAR_ITEM_COUNT 
				FROM COLLECTOR_BIDDING 
				WHERE 
					ID 				= IN_COLLECTOR_BIDDING_ID AND 
					DATE_OF_VISIT 	IS NOT NULL;
				/*수거자가 방문신청을 한 사실이 있는지 확인하여 그 결과를 @TEMP_COUNT에 반환한다*/
				IF VAR_ITEM_COUNT = 1 THEN
				/*수거자가 방문신청을 한 사실이 존재하는 경우 정상처리한다.*/
					SELECT COUNT(ID) INTO VAR_IS_ALREADY_CANCELED 
					FROM COLLECTOR_BIDDING 
					WHERE 
						ID 				= IN_COLLECTOR_BIDDING_ID AND 
						CANCEL_VISIT 	= TRUE;
					/*수거자가 자신의 방문신청에 대하여 방문취소한 사실이 있는지 확인하여 그 결과를 VAR_IS_ALREADY_CANCELED 반환한다. 방문취소한 사실이 존재하는 경우 1, 그렇지 않으면 0*/
					IF VAR_IS_ALREADY_CANCELED = 0 THEN
					/*수거자가 자신의 방문신청에 대하여 방문취소한 사실이 존재하지 않는 경우 정상처리한다.*/
						SELECT RESPONSE_VISIT INTO VAR_EMITTOR_RESPONSE_FOR_VISIT 
						FROM COLLECTOR_BIDDING 
						WHERE ID = IN_COLLECTOR_BIDDING_ID;
						/*배출자가 수거자의 방문신청에 대한 수락 또는 거절의사를 확인하여 그 결과를 VAR_EMITTOR_RESPONSE_FOR_VISIT에 반환한다.*/
						IF VAR_EMITTOR_RESPONSE_FOR_VISIT IS NULL THEN
						/*배출자가 수거업체의 방문신청에 대하여 수락 또는 거절의사를 표시하지 않은 대기상태인 경우*/
							UPDATE COLLECTOR_BIDDING 
							SET 
								CANCEL_VISIT 		= TRUE, 
								CANCEL_VISIT_AT 	= VAR_REG_DT, 
								UPDATED_AT		 	= VAR_REG_DT 
							WHERE ID = IN_COLLECTOR_BIDDING_ID;
							/*방문신청을 취소상태(비활성상태)로 변경한다.*/
							IF ROW_COUNT() = 1 THEN
							/*데이타베이스 입력에 성공한 경우*/
								CALL sp_calc_bidding_rank(
									VAR_DISPOSAL_ORDER_ID
								);
								CALL sp_push_cancel_visit(
									IN_USER_ID,
									IN_COLLECTOR_BIDDING_ID,
									VAR_PUSH_CATEGORY_ID,
									json_data,
									rtn_val,
									msg_txt
								);
								IF rtn_val > 0 THEN
									SIGNAL SQLSTATE '23000';
								END IF;
							ELSE
							/*데이타베이스 입력에 실패한 경우*/
								SET rtn_val 		= 25606;
								SET msg_txt 		= 'record cancellation error';
								SIGNAL SQLSTATE '23000';
							END IF;
						ELSE
						/*배출자가 수거업체의 방문신청에 대하여 수락 또는 거절의사를 표시한 경우*/
							IF VAR_EMITTOR_RESPONSE_FOR_VISIT <> 0 THEN
							/*배출자가 수거자의 방문신청에 대하여 거절의사를 밝힌 경우가 아닌 경우에는 정상처리한다.*/
								UPDATE COLLECTOR_BIDDING 
								SET 
									CANCEL_VISIT 			= TRUE, 
									CANCEL_VISIT_AT 		= VAR_REG_DT, 
									UPDATED_AT		 		= VAR_REG_DT   
								WHERE ID = IN_COLLECTOR_BIDDING_ID;
								/*방문신청을 취소상태(비활성상태)로 변경한다.*/
								IF ROW_COUNT() = 1 THEN
								/*데이타베이스 입력에 성공한 경우*/
									CALL sp_calc_bidder_and_prospective_visitors(
										VAR_DISPOSAL_ORDER_ID
									);
									CALL sp_push_cancel_visit(
										IN_USER_ID,
										IN_COLLECTOR_BIDDING_ID,
										VAR_PUSH_CATEGORY_ID,
										json_data,
										rtn_val,
										msg_txt
									);
                                    IF rtn_val > 0 THEN
										SIGNAL SQLSTATE '23000';
                                    END IF;
								ELSE
								/*데이타베이스 입력에 실패한 경우*/
									SET rtn_val 		= 25601;
									SET msg_txt 		= 'record cancellation error';
									SIGNAL SQLSTATE '23000';
								END IF;
							ELSE
							/*배출자가 수거자의 방문신청에 대하여 거절의사를 이미 밝힌 경우에는 정상처리한다.*/
								SET rtn_val 		= 25605;
								SET msg_txt 		= 'The emitter has already refused to visit';
								SIGNAL SQLSTATE '23000';
							END IF;
						END IF;
					ELSE
					/*수거자가 자신의 방문신청에 대하여 방문취소한 사실이 존재하는 경우 예외처리한다.*/
						SET rtn_val 		= 25604;
						SET msg_txt 		= 'The collector has already canceled the visit';
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*수거자가 방문신청을 한 사실이 존재하지 않는 경우 예외처리한다.*/
					SET rtn_val 		= 25603;
					SET msg_txt 		= 'No fact that the collector has requested a visit';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*방문마감일이 종료된 경우 예외처리한다.*/
				SET rtn_val 		= 25602;
				SET msg_txt 		= 'The visit date has already passed or No visit request plan';
				SIGNAL SQLSTATE '23000';
			END IF;
        ELSE
		/*BIDDING이 존재하지 않는 경우 예외처리한다.*/
			SET rtn_val 		= 25607;
			SET msg_txt 		= 'bidding does not exist';
			SIGNAL SQLSTATE '23000';
        END IF;
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_auth_to_create_user`(
	IN IN_TARGET_CLASS		INT,
    IN IN_TARGET_SITE_ID	BIGINT,
    IN IN_CREATOR_CLASS		INT,
    IN IN_CREATOR_SITE_ID	BIGINT,
    OUT OUT_TARGET_COMP_ID	BIGINT,
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_CREATOR_COMP_ID					BIGINT 			DEFAULT NULL;
	DECLARE VAR_TARGET_COMP_ID					BIGINT 			DEFAULT NULL;
	DECLARE VAR_TARGET_COMP_PID					BIGINT 			DEFAULT NULL;
	DECLARE VAR_CREATOR_SITE_HEAD_OFFICE		TINYINT			DEFAULT NULL;
    
	CALL sp_check_if_site_exists(
		IN_TARGET_SITE_ID,
        rtn_val,
        msg_txt
    );    
    IF  rtn_val = 0 THEN
		CALL sp_check_if_site_exists(
			IN_CREATOR_SITE_ID,
			rtn_val,
			msg_txt
		);    
		IF  rtn_val = 0 THEN
			CALL sp_check_if_class_exists(
				IN_CREATOR_CLASS,
				rtn_val,
				msg_txt
			);    
			IF  rtn_val = 0 THEN
				CALL sp_check_if_class_exists(
					IN_TARGET_CLASS,
					rtn_val,
					msg_txt
				);    
				IF rtn_val = 0 THEN
				/*생성하고자 하는 사용자의 CLASS가 유효한 경우 정상처리한다.*/
					SELECT COMP_ID INTO VAR_CREATOR_COMP_ID 
                    FROM COMP_SITE 
                    WHERE ID = IN_CREATOR_SITE_ID;
                    
					SELECT COMP_ID INTO VAR_TARGET_COMP_ID 
                    FROM COMP_SITE 
                    WHERE ID = IN_TARGET_SITE_ID;
                    
					SELECT P_COMP_ID INTO VAR_TARGET_COMP_PID 
                    FROM COMPANY 
                    WHERE ID = VAR_TARGET_COMP_ID;
                    
					SELECT HEAD_OFFICE INTO VAR_CREATOR_SITE_HEAD_OFFICE 
                    FROM COMP_SITE 
                    WHERE ID = IN_CREATOR_SITE_ID;
                    
                    SET OUT_TARGET_COMP_ID = VAR_TARGET_COMP_ID;
					
					IF IN_CREATOR_CLASS = 101 THEN
						IF IN_TARGET_CLASS < 200 THEN
							IF N_TARGET_CLASS = 101 THEN
								SET rtn_val = 31602;
								SET msg_txt = 'Cannot create system superuser';
							ELSE
								SET rtn_val = 0;
								SET msg_txt = 'success01';
							END IF;
						ELSE
							SET rtn_val = 0;
							SET msg_txt = 'success02';
						END IF;
					ELSE
						IF IN_CREATOR_CLASS = 102 THEN
							IF IN_TARGET_CLASS < 200 THEN
								IF IN_TARGET_CLASS > IN_CREATOR_CLASS THEN
									SET rtn_val = 0;
									SET msg_txt = 'success03';
								ELSE
									SET rtn_val = 31603;
									SET msg_txt = 'chium admins cannot create a higher authority than themselves';
								END IF;
							ELSE
								SET rtn_val = 0;
								SET msg_txt = 'success04';
							END IF;
						ELSE
							IF IN_CREATOR_CLASS = 201 OR IN_CREATOR_CLASS = 202 THEN
								IF IN_TARGET_SITE_ID = 0 THEN
									SET rtn_val = 31615;
									SET msg_txt = 'The operator of the business cannot create individual users';
                                ELSE
									IF VAR_CREATOR_COMP_ID = VAR_TARGET_COMP_ID THEN
										IF IN_CREATOR_SITE_ID = IN_TARGET_SITE_ID THEN
											IF IN_TARGET_CLASS > IN_CREATOR_CLASS THEN
												SET rtn_val = 0;
												SET msg_txt = 'success05';
											ELSE
												SET rtn_val = 31609;
												SET msg_txt = 'In the same workplace, only users with lower authority than the creator can be created';
											END IF;
										ELSE
											IF VAR_CREATOR_SITE_HEAD_OFFICE = TRUE THEN
												IF IN_TARGET_CLASS = 201 THEN
													SET rtn_val = 0;
													SET msg_txt = 'success06';
												ELSE
													SET rtn_val = 31611;
													SET msg_txt = 'User rights for other sites that the head office administrator can create are limited to 201';
												END IF;
											ELSE
												SET rtn_val = 31610;
												SET msg_txt = 'Only the head office administrator can create users for other sites';
											END IF;
										END IF;
									ELSE
										IF VAR_TARGET_COMP_PID = VAR_CREATOR_COMP_ID THEN
											IF VAR_CREATOR_SITE_HEAD_OFFICE = TRUE THEN
												IF IN_TARGET_CLASS = 201 THEN
													IF IN_CREATOR_CLASS = 201 THEN
														SET rtn_val = 0;
														SET msg_txt = 'success07';
													ELSE
														SET rtn_val = 31605;
														SET msg_txt = 'Lack of authority to create users in subsidiaries in non-headquarters locations';
													END IF;
												ELSE
													SET rtn_val = 31606;
													SET msg_txt = 'Permission is limited to 201 for users belonging to subsidiaries that can be created in other than the headquarters';
												END IF;
											ELSE
												SET rtn_val = 31607;
												SET msg_txt = 'Subsidiary users cannot be created for business sites other than the headquarters';
											END IF;
										ELSE
											SET rtn_val = 31608;
											SET msg_txt = 'impossible to create a user belonging to a business other than a subsidiary';
										END IF;
									END IF;
                                END IF;
							ELSE
								SET rtn_val = 31604;
								SET msg_txt = 'Business general manager cannot create users';
							END IF;
						END IF;
					END IF;
				ELSE
				/*생성하고자 하는 사용자의 CLASS가 유효하지 않은 경우 예외처리한다.*/
					SET rtn_val = rtn_val;
					SET msg_txt = msg_txt;
				END IF;
			ELSE
				IF IN_TARGET_CLASS = 201 THEN
					IF IN_TARGET_SITE_ID = 0 THEN
						SET rtn_val = 0;
						SET msg_txt = 'success08';
                    ELSE
						SET rtn_val = 31612;
						SET msg_txt = 'The site to which an individual user belongs must be 0';
                    END IF;
                ELSE
					SET rtn_val = 31616;
					SET msg_txt = 'Permissions for individual users must be 201';
                END IF;
			END IF;
		ELSE
			SET rtn_val = rtn_val;
			SET msg_txt = msg_txt;
		END IF;
    ELSE
		SET rtn_val = rtn_val;
		SET msg_txt = msg_txt;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_auth_to_delete_company`(
	IN DELETER_ID					BIGINT,
    IN TARGET_COMP_ID				BIGINT,
    OUT OUT_TARGET_COMP_ID			INT,
    OUT OUT_TARGET_SITE_ID			INT,
    OUT OUT_COUNT_SITE_USERS		INT,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN
	CALL sp_req_user_exists_by_id(
    /*삭제자가 존재하며 유효한지 검사한다.*/
		DELETER_ID,
        TRUE,
        @rtn_val,
        @msg_txt
    );
    IF @rtn_val = 0 THEN
    /*삭제자가 존재하며 유효한 경우 정상처리한다.*/
		CALL sp_req_company_exists(
        /*삭제 대상 사업자가 존재하며 유효한지 검사한다*/
			TARGET_COMP_ID,
			TRUE,
			@rtn_val,
			@msg_txt
        );
        IF @rtn_val = 0 THEN
        /*삭제대상 사업자가 존재하며 유효한 경우 정상처리한다*/
			SELECT BELONG_TO, AFFILIATED_SITE, CLASS 
            INTO @DELETER_COMP_ID, @DELETER_HEAD_OFFICE, @DELETER_CLASS
            FROM V_USERS
            WHERE ID = DELETER_ID;
            
            IF TARGET_COMP_ID = @DELETER_COMP_ID THEN
            /*삭제대상 사업자가 삭제자가 소속하고 있는 사업자인 경우 정상처리한다.*/
				CALL sp_check_auth_to_delete_company_2(
					@DELETER_HEAD_OFFICE,
					@DELETER_CALSS,
					TARGET_COMP_ID,
					@TARGET_SITE_ID,
					@TARGET_SITE_HEAD_OFFICE,
					@COUNT_SITE_USERS,
					@rtn_val,
					@msg_txt
                );
                IF @rtn_val = 0 THEN
                /*사업자 삭제가 가능한 경우 정상처리한다.*/
					SET OUT_TARGET_COMP_ID = TARGET_COMP_ID;
					SET OUT_TARGET_SITE_ID = @TARGET_SITE_ID;
					SET OUT_COUNT_SITE_USERS = @COUNT_SITE_USERS;
                ELSE
                /*사업자 삭제가 불가능한 경우 예외처리한다.*/
					SET rtn_val = @rtn_val;
					SET msg_txt = @msg_txt;
                END IF;
            ELSE
            /*삭제대상 사업자가 삭제자가 소속하고 있는 사업자가 아닌 경우*/
				SELECT P_COMP_ID 
                INTO @TARGET_COMP_PID 
                FROM COMPANY 
                WHERE ID = TARGET_COMP_ID;
                IF @TARGET_COMP_PID = @DELETER_COMP_ID THEN
					CALL sp_check_auth_to_delete_company_2(
						@DELETER_HEAD_OFFICE,
						@DELETER_CALSS,
						TARGET_COMP_ID,
						@TARGET_SITE_ID,
						@TARGET_SITE_HEAD_OFFICE,
						@COUNT_SITE_USERS,
						@rtn_val,
						@msg_txt
					);
					IF @rtn_val = 0 THEN
					/*사업자 삭제가 가능한 경우 정상처리한다.*/
						SET OUT_TARGET_COMP_ID = TARGET_COMP_ID;
						SET OUT_TARGET_SITE_ID = @TARGET_SITE_ID;
						SET OUT_COUNT_SITE_USERS = @COUNT_SITE_USERS;
					ELSE
					/*사업자 삭제가 불가능한 경우 예외처리한다.*/
						SET rtn_val = @rtn_val;
						SET msg_txt = @msg_txt;
					END IF;
                ELSE
					SET rtn_val = 32001;
					SET msg_txt = 'impossible to delete a business that is not a subsidiary';
                END IF;
            END IF;
        ELSE
        /*삭제대상 사업자가 존재하지 않거나 유효하지 않은 경우 예외처리한다*/
			SET rtn_val = @rtn_val;
			SET msg_txt = @msg_txt;
        END IF;
    ELSE
    /*삭제자가 존재하지 않거나 유효하지 않은 경우 예외처리한다.*/
		SET rtn_val = @rtn_val;
		SET msg_txt = @msg_txt;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_auth_to_delete_company_2`(
    IN DELETER_HEAD_OFFICE				TINYINT,
    IN DELETER_CALSS					INT,
    IN TARGET_COMP_ID					BIGINT,
    OUT OUT_TARGET_SITE_ID				BIGINT,
    OUT OUT_TARGET_SITE_HEAD_OFFICE		TINYINT,
    OUT OUT_COUNT_SITE_USERS			INT,
    OUT rtn_val							INT,
    OUT msg_txt							VARCHAR(200)
)
BEGIN
	IF DELETER_HEAD_OFFICE = TRUE THEN
		IF DELETER_CLASS = 201 THEN
			SELECT COUNT(ID) 
            INTO @COUNT_COMP_SITE 
            FROM COMP_SITE 
            WHERE COMP_ID = TARGET_COMP_ID;
            
            IF @COUNT_COMP_SITE = 1 THEN
				SELECT ID 
                INTO @TARGET_SITE_ID 
                FROM COMP_SITE 
                WHERE COMP_ID = TARGET_COMP_ID;
                SET OUT_TARGET_SITE_ID = @TARGET_SITE_ID ;
                
                SELECT HEAD_OFFICE 
                INTO @TARGET_SITE_HEAD_OFFICE 
                FROM COMP_SITE 
                WHERE ID = @TARGET_SITE_ID;
                
                SET OUT_TARGET_SITE_HEAD_OFFICE = @TARGET_SITE_HEAD_OFFICE ;
                
                IF @TARGET_SITE_HEAD_OFFICE = TRUE THEN
					SELECT COUNT(ID) 
                    INTO @COUNT_SITE_USERS 
                    FROM USERS 
                    WHERE AFFILIATED_SITE = @TARGET_SITE_ID;
					SET OUT_COUNT_SITE_USERS = @COUNT_SITE_USERS ;
                ELSE
					SET rtn_val = 32104;
					SET msg_txt = 'Sites other than the head office cannot be deleted when the company is to be deleted';
                END IF;
            ELSE
				SET rtn_val = 32103;
				SET msg_txt = 'A business has more than one site';
            END IF;	
        ELSE
			SET rtn_val = 32102;
			SET msg_txt = 'The deleter does not have the authority to delete the company';
        END IF;
    ELSE
		SET rtn_val = 32101;
		SET msg_txt = 'Deleter does not belong to head office';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_cert_code`(
	IN IN_ID				BIGINT,
    IN IN_PHONE_NO			VARCHAR(20),
    IN IN_CERT_CODE			INT
)
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
	END;  
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    
    SELECT COUNT(ID) 
    INTO @DUPLICATED_NUMBER 
    FROM USERS 
    WHERE PHONE = IN_PHONE_NO;
    SET @DUPLICATED_NUMBER = 0;
    IF @DUPLICATED_NUMBER = 0 THEN
		SELECT COUNT(ID) 
		INTO @HAVE_SENT 
		FROM CELL_PHONE_CERTIFICATION 
		WHERE 
			ID 			= IN_ID AND 
			PHONE_NO 	= IN_PHONE_NO;			
		IF @HAVE_SENT = 1 THEN        
			SELECT COUNT(ID) 
			INTO @IS_CERTIFICATED 
			FROM CELL_PHONE_CERTIFICATION 
			WHERE ID = IN_ID;
			IF @IS_CERTIFICATED = 1 THEN
				CALL sp_req_policy_direction(
					'max_verification_time_out', 
					@max_verification_time_out
				);
				SELECT CERT_CODE, CREATED_AT 
				INTO @CERT_CODE, @CREATED_AT
				FROM CELL_PHONE_CERTIFICATION 
				WHERE ID = IN_ID;
/*
				IF NOW() >= ADDTIME(@CREATED_AT, CONCAT('0:', @max_verification_time_out, ':00')) THEN
*/
					IF @CERT_CODE = IN_CERT_CODE THEN
						UPDATE CELL_PHONE_CERTIFICATION
						SET 
							CERTIFICATED_AT = NOW(),
                            RESULT = TRUE
						WHERE ID = IN_ID;
						IF ROW_COUNT() = 1 THEN
							SELECT JSON_ARRAYAGG(JSON_OBJECT(
								'ID', IN_ID,
								'PHONE_NO', IN_PHONE_NO,
								'CERT_CODE', IN_CERT_CODE,
								'CREATED_AT', @CREATED_AT,
								'TIMEOUT', @max_verification_time_out
							)) INTO @json_data;
							SET @rtn_val = 0;
							SET @msg_txt = 'success';
						ELSE
							SELECT JSON_ARRAYAGG(JSON_OBJECT(
								'ID', IN_ID,
								'PHONE_NO', IN_PHONE_NO,
								'CERT_CODE', IN_CERT_CODE,
								'CREATED_AT', @CREATED_AT,
								'TIMEOUT', @max_verification_time_out
							)) INTO @json_data;
							SET @rtn_val = 32405;
							SET @msg_txt = 'Failed to record authentication after completion';
						END IF;
					ELSE
						SELECT JSON_ARRAYAGG(JSON_OBJECT(
							'ID', IN_ID,
							'PHONE_NO', IN_PHONE_NO,
							'CERT_CODE', IN_CERT_CODE,
							'CREATED_AT', @CREATED_AT,
							'TIMEOUT', @max_verification_time_out
						)) INTO @json_data;
						SET @rtn_val = 32404;
						SET @msg_txt = 'Verification code does not match';
					END IF;
/*
				ELSE
					SELECT JSON_ARRAYAGG(JSON_OBJECT(
						'ID', IN_ID,
						'PHONE_NO', IN_PHONE_NO,
						'CERT_CODE', IN_CERT_CODE,
						'CREATED_AT', @CREATED_AT,
						'TIMEOUT', @max_verification_time_out
					)) INTO @json_data;
					SET @rtn_val = 32403;
					SET @msg_txt = 'authentication timeout';
				END IF;
*/
			ELSE
				SELECT JSON_ARRAYAGG(JSON_OBJECT(
					'ID', IN_ID,
					'PHONE_NO', IN_PHONE_NO,
					'CERT_CODE', IN_CERT_CODE,
					'CREATED_AT', NULL,
					'TIMEOUT', NULL
				)) INTO @json_data;
				SET @rtn_val = 32402;
				SET @msg_txt = 'Verification code does not exist';
			END IF;
		ELSE
			SELECT JSON_ARRAYAGG(JSON_OBJECT(
				'ID', IN_ID,
				'PHONE_NO', IN_PHONE_NO,
				'CERT_CODE', IN_CERT_CODE,
				'CREATED_AT', NULL,
				'TIMEOUT', NULL
			)) INTO @json_data;
			SET @rtn_val = 32401;
			SET @msg_txt = 'not the phone number that generated the verification code';
		END IF;
    ELSE
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'ID', IN_ID,
			'PHONE_NO', IN_PHONE_NO,
			'CERT_CODE', IN_CERT_CODE,
			'CREATED_AT', NULL,
			'TIMEOUT', NULL
		)) INTO @json_data;
		SET @rtn_val = 32406;
		SET @msg_txt = 'Phone number already exists';
    END IF;
    COMMIT;
    CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_bcode_valid`(
	IN IN_BCODE				VARCHAR(10),
    OUT OUT_VALID			TINYINT
)
BEGIN
	SELECT COUNT(B_CODE) INTO OUT_VALID
	FROM KIKCD_B
	WHERE 
		B_CODE = IN_BCODE AND
		CANCELED_DATE IS NULL;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_class_exists`(
	IN IN_CLASS_ID			INT,
    OUT rtn_val			INT,
    OUT msg_txt			VARCHAR(200)
)
BEGIN
	DECLARE VAR_CLASS_EXISTS	INT 	DEFAULT 0;
    
	SELECT COUNT(ID) INTO VAR_CLASS_EXISTS 
    FROM USERS_CLASS 
    WHERE ID = IN_CLASS_ID;
    
    IF VAR_CLASS_EXISTS = 0 THEN 
		SET rtn_val = 31501;
		SET msg_txt = 'CLASS does not exist';		
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'success';		
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_lat_valid`(
	IN IN_LAT				DECIMAL(12,9),
    OUT OUT_VALID			TINYINT
)
BEGIN
	IF IN_LAT <> 0 AND IN_LAT IS NOT NULL THEN
		SET OUT_VALID = 1;
    ELSE
		SET OUT_VALID = 0;
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_license_exists`(
	IN IN_USER_ID			BIGINT
)
BEGIN
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_AFFILIATED_SITE					BIGINT 			DEFAULT NULL;
	DECLARE VAR_PERMIT_REG_IMG_PATH				VARCHAR(255) 	DEFAULT NULL;
	DECLARE VAR_LICENSE_CONFIRMED				TINYINT			DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,			/*사이트를 개설하려는 자의 고유등록번호*/
        TRUE,					/*ACTIVE가 TRUE인 상태(활성화 상태)인 사용자에 한정*/
		rtn_val,
		msg_txt
    );
    IF rtn_val = 0 THEN
		SELECT AFFILIATED_SITE 
        INTO VAR_AFFILIATED_SITE 
        FROM USERS WHERE ID = IN_USER_ID;
        IF VAR_AFFILIATED_SITE > 0 THEN
			SELECT B.PERMIT_REG_IMG_PATH, B.LICENSE_CONFIRMED
            INTO VAR_PERMIT_REG_IMG_PATH, VAR_LICENSE_CONFIRMED
            FROM USERS A 
            LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID
            WHERE A.ID = IN_USER_ID;
            
            IF VAR_PERMIT_REG_IMG_PATH IS NOT NULL THEN
            /*등록증 이미지가 업로드 된 경우*/
				SELECT JSON_ARRAYAGG(
					JSON_OBJECT(
						'LICENSE_REGISTERED'		, TRUE, 
						'LICENSE_CONFIRMED'			, VAR_LICENSE_CONFIRMED, 
						'LICENSE_PATH'				, VAR_PERMIT_REG_IMG_PATH
					)
				) 
				INTO json_data; 
            ELSE
            /*등록증 이미지가 업로드 되지 않은 경우*/
				SELECT JSON_ARRAYAGG(
					JSON_OBJECT(
						'LICENSE_REGISTERED'		, FALSE, 
						'LICENSE_CONFIRMED'			, VAR_LICENSE_CONFIRMED, 
						'LICENSE_PATH'				, VAR_PERMIT_REG_IMG_PATH
					)
				) 
				INTO json_data; 
            END IF;
        ELSE
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'LICENSE_REGISTERED'		, NULL, 
					'LICENSE_CONFIRMED'			, NULL, 
					'LICENSE_PATH'				, NULL
				)
			) 
			INTO json_data; 
        END IF;
    ELSE
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'LICENSE_REGISTERED'		, NULL, 
				'LICENSE_CONFIRMED'			, NULL, 
				'LICENSE_PATH'				, NULL
			)
		) 
		INTO json_data; 
    END IF;
    COMMIT;   
    SET rtn_val = 0;   
    SET msg_txt = 'success';
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_lng_valid`(
	IN IN_LNG				DECIMAL(12,9),
    OUT OUT_VALID			TINYINT
)
BEGIN
	IF IN_LNG <> 0 AND IN_LNG IS NOT NULL THEN
		SET OUT_VALID = 1;
    ELSE
		SET OUT_VALID = 0;
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_phone_number_exists`(
	IN IN_PHONE				VARCHAR(20),			/*입력값: 체크할 전화번호*/
    OUT OUT_PHONE_EXISTS	TINYINT
)
BEGIN

/*
Procedure Name 	: sp_check_if_phone_number_exists
Input param 	: 3개
Job 			: 등록하고자 하는 휴대폰번호의 이중등록여부 검사(이중등록이 아닌 경우 0 반환)
Update 			: 2022.03.10
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE INCLUDE_INACTIVE_PHONE			VARCHAR(20) 	DEFAULT NULL;
    
    CALL sp_req_policy_direction(
		'include_inactive_phone', 
        INCLUDE_INACTIVE_PHONE
	);
    IF INCLUDE_INACTIVE_PHONE = '1' THEN
    /*핸드폰 중복체크시 비활성화된 번호를 사용가능한 번호로 분류하고자 하는 경우*/
		SELECT COUNT(ID) INTO OUT_PHONE_EXISTS 
		FROM USERS 
		WHERE 
			PHONE = IN_PHONE AND 
			ACTIVE = TRUE;
    ELSE
    /*핸드폰 중복체크시 비활성화된 번호를 사용가능한 번호로 분류하지 않는 경우*/
		SELECT COUNT(ID) INTO OUT_PHONE_EXISTS 
		FROM USERS 
		WHERE 
			PHONE = IN_PHONE;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_second_place_on`(
	IN IN_ORDER_ID				BIGINT,
	IN IN_BIDDING_ID			BIGINT,
    OUT OUT_SECOND_PLACE_ON		TINYINT
)
BEGIN
	SELECT COUNT(ID) INTO OUT_SECOND_PLACE_ON
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID = IN_ORDER_ID AND
        BIDDERS > 1 AND
        SECOND_PLACE = IN_BIDDING_ID AND
        (
			COLLECTOR_SELECTION_CONFIRMED = FALSE OR 
            (
				COLLECTOR_SELECTION_CONFIRMED IS NULL AND 
                COLLECTOR_MAX_DECISION_AT <= NOW()
            )
        ) AND 
        COLLECTOR_MAX_DECISION2_AT > NOW() AND
        COLLECTOR_SELECTION_CONFIRMED2 IS NULL;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_site_exists`(
	IN IN_SITE_ID		INT,
    OUT rtn_val			INT,
    OUT msg_txt			VARCHAR(200)
)
BEGIN
	IF IN_SITE_ID IS NOT NULL THEN
		IF IN_SITE_ID = 0 THEN
			SET rtn_val = 0;
			SET msg_txt = 'success';	
        ELSE
			SELECT COUNT(ID) INTO @SITE_EXISTS 
            FROM COMP_SITE 
            WHERE ID = IN_SITE_ID;
            
			IF @SITE_EXISTS = 0 THEN 
				SET rtn_val = 31701;
				SET msg_txt = 'Site ID does not exist';		
			ELSE
				SET rtn_val = 0;
				SET msg_txt = 'success';		
			END IF;
        END IF;
    ELSE
		SET rtn_val = 31702;
		SET msg_txt = 'Site ID should not be null';	
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_transaction_report_exists`(
	IN IN_REPORT_ID		INT,
    OUT rtn_val			INT,
    OUT msg_txt			VARCHAR(200)
)
BEGIN
	DECLARE VAR_REPORT_EXISTS	INT 	DEFAULT 0;
    
	IF IN_REPORT_ID IS NOT NULL THEN
		SELECT COUNT(ID) INTO VAR_REPORT_EXISTS 
		FROM TRANSACTION_REPORT 
		WHERE ID = IN_REPORT_ID;
		
		IF VAR_REPORT_EXISTS = 0 THEN 
			SET rtn_val = 35902;
			SET msg_txt = 'Transaction Report ID does not exist';		
		ELSE
			SET rtn_val = 0;
			SET msg_txt = 'success';		
		END IF;
    ELSE
		SET rtn_val = 35901;
		SET msg_txt = 'Transaction Report ID should not be null';	
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_trmt_biz_code_valid`(
	IN IN_TRMT_BIZ_CODE						VARCHAR(4),
    OUT OUT_TRMT_BIZ_CODE_VALID				INT
)
BEGIN
	SELECT COUNT(CODE) INTO OUT_TRMT_BIZ_CODE_VALID
    FROM WSTE_TRMT_BIZ
    WHERE CODE = IN_TRMT_BIZ_CODE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_trmt_method_valid`(
	IN IN_TRMT_METHOD_CODE					VARCHAR(4),
    OUT OUT_TRMT_METHOD_CODE_VALID			INT
)
BEGIN
	SELECT COUNT(CODE) INTO OUT_TRMT_METHOD_CODE_VALID
    FROM WSTE_TRMT_METHOD 
    WHERE CODE = IN_TRMT_METHOD_CODE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_wste_class_code_valid`(
	IN IN_WSTE_CLASS_CODE			VARCHAR(8),
    OUT OUT_VALID					TINYINT
)
BEGIN
	SELECT COUNT(CODE) INTO OUT_VALID
	FROM WSTE_CLS_CODE
	WHERE 
		CODE = IN_WSTE_CLASS_CODE;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_if_wste_code_valid`(
	IN IN_WSTE_CODE				VARCHAR(8),
    OUT OUT_VALID					TINYINT
)
BEGIN
	SELECT COUNT(CODE) INTO OUT_VALID
	FROM WSTE_CODE
	WHERE 
		CODE = IN_WSTE_CODE AND
		DISPLAY = TRUE;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_time_stamp_current_state`()
BEGIN

    DECLARE vRowCount 								INT 				DEFAULT 0;
    DECLARE endOfRow 								TINYINT 			DEFAULT FALSE;   
    DECLARE CUR_ID									BIGINT;
    DECLARE CUR_USER_NAME							VARCHAR(255);
    DECLARE VAR_TIME_STAMP_START					TIMESTAMP;
    DECLARE VAR_TIME_STAMP_END						TIMESTAMP;
    DECLARE VAR_TIME_ELAPSED						TIMESTAMP;
    DECLARE VAR_ITEM_COUNT							INT;
	DECLARE rtn_val									INT 				DEFAULT 0;
	DECLARE msg_txt									VARCHAR(200) 		DEFAULT 'success';
	DECLARE json_data								JSON 				DEFAULT NULL;
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
	SELECT 
		ID,
        USER_NAME
	FROM USERS
    WHERE USER_CURRENT_TYPE = 2
    ORDER BY ID ASC;
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;        
    
	CREATE TEMPORARY TABLE IF NOT EXISTS CHECK_TIME_STAMP_TEMP (
		ID									BIGINT, 
		USER_NAME							VARCHAR(255), 
		TIME_ELAPSED						FLOAT,
        ITEM_COUNT							INT
	);         
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID,
			CUR_USER_NAME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		CHECK_TIME_STAMP_TEMP(
			ID,
			USER_NAME
		)
		VALUES(
			CUR_ID,
			CUR_USER_NAME
		);
        
		SET VAR_TIME_STAMP_START = unix_timestamp(now(6));
        CALL sp_retrieve_current_state(
			CUR_ID
        );
		SET VAR_TIME_STAMP_END = unix_timestamp(now(6));
		SELECT VAR_TIME_ELAPSED = VAR_TIME_STAMP_END - VAR_TIME_STAMP_START;
        
		SELECT COUNT(A.ID) INTO VAR_ITEM_COUNT
		FROM COLLECTOR_BIDDING A
		LEFT JOIN V_BIDDING_STATE_NAME B ON A.ID = B.COLLECTOR_BIDDING_ID
		LEFT JOIN USERS C ON A.COLLECTOR_ID = C.AFFILIATED_SITE
		LEFT JOIN COMP_SITE D ON A.COLLECTOR_ID = D.ID
		LEFT JOIN COMPANY E ON D.COMP_ID = E.ID
		LEFT JOIN SITE_WSTE_DISPOSAL_ORDER F ON A.DISPOSAL_ORDER_ID = F.ID
		LEFT JOIN V_TRANSACTION_STATE G ON G.COLLECTOR_BIDDING_ID = A.ID
		WHERE 
			C.ID = CUR_ID AND
			(C.CLASS = 201 OR C.CLASS = 202) AND
			A.ORDER_VISIBLE = TRUE AND
			C.ACTIVE = TRUE AND
			D.ACTIVE = TRUE AND
			E.ACTIVE = TRUE AND
			B.STATE_CODE NOT IN (202, 207, 211, 230, 238, 239, 241, 244, 246, 249) AND 
			IF(F.IS_DELETED = TRUE, B.STATE_CODE NOT IN (202, 207, 210, 229, 239, 244), B.STATE_CODE NOT IN (0)) AND
			(G.TRANSACTION_STATE_CODE NOT IN (211) OR G.TRANSACTION_STATE_CODE IS NULL);
        
        UPDATE CHECK_TIME_STAMP_TEMP
        SET 
			TIME_ELAPSED = VAR_TIME_ELAPSED,
			ITEM_COUNT = VAR_ITEM_COUNT
        WHERE ID = CUR_ID;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'						, ID, 
			'USER_NAME'					, USER_NAME, 
			'TIME_ELAPSED'				, TIME_ELAPSED, 
			'ITEM_COUNT'				, ITEM_COUNT
		)
	) 
	INTO json_data
	FROM CHECK_TIME_STAMP_TEMP;
	
    DROP TABLE IF EXISTS CHECK_TIME_STAMP_TEMP;
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_check_user_auth`(
	IN IN_USER_REG_ID		VARCHAR(200),
	IN IN_USER_NAME			VARCHAR(20),
    IN IN_PHONE				VARCHAR(20)
)
BEGIN

/*
Procedure Name 	: sp_check_user_auth
Input param 	: 3개
Job 			: 사용자의 등록여부를 반환한다
Update 			: 2022.04.19
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_USER_COUNT		INT 			DEFAULT 0;
	DECLARE rtn_val				INT 			DEFAULT 0;
	DECLARE msg_txt				VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data			JSON 			DEFAULT NULL;
    
	SELECT COUNT(ID) INTO VAR_USER_COUNT
    FROM USERS
    WHERE USER_ID = IN_USER_REG_ID;
    
    IF VAR_USER_COUNT = 1 THEN
    /*사용자 등록아이디가 존재하는 경우 정상처리한다.*/
		SELECT COUNT(ID) INTO VAR_USER_COUNT
		FROM USERS
		WHERE 
			USER_ID = IN_USER_REG_ID AND
            USER_NAME = IN_USER_NAME;
        
		IF VAR_USER_COUNT = 1 THEN
		/*사용자 이름이 일치하는 경우 정상처리한다*/	
			SELECT COUNT(ID) INTO VAR_USER_COUNT
			FROM USERS
			WHERE 
				USER_ID = IN_USER_REG_ID AND
				USER_NAME = IN_USER_NAME AND
				PHONE = IN_PHONE;
			IF VAR_USER_COUNT = 1 THEN
            /*사용자 등록 연락처가 일치하는 경우 정상처리한다.*/
				SET rtn_val = 0;
				SET msg_txt = 'success';
            ELSE
            /*사용자 등록 연락처가 일치하지 않는 경우 예외처리한다.*/
				SET rtn_val = 38303;
				SET msg_txt = 'user phone does not exist';
            END IF;
		ELSE
		/*사용자 이름이 일치하지 않는 경우 예외처리한다*/		
			SET rtn_val = 38402;
			SET msg_txt = 'user name does not match';
		END IF;
    ELSE
    /*사용자 등록아이디가 존재하지 않는 경우 예외처리한다.*/
		SET rtn_val = 38401;
		SET msg_txt = 'user ID does not exist';
    END IF;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_collector_make_final_decision_on_bidding`(
	IN IN_USER_ID					BIGINT,				/*입력값 : 사용자 고유등록번호(USERS.ID)*/
	IN IN_COLLECTOR_BIDDING_ID		BIGINT,				/*입력값 : 입찰 고유등록번호(COLLECTOR_BIDDING.ID)*/
	IN IN_FINAL_DECISION			TINYINT				/*입력값 : 최종입찰에 대한 거절여부 결정(TRUE:수락, FALSE:거절)*/
)
BEGIN

/*
Procedure Name 	: sp_collector_make_final_decision_on_bidding
Input param 	: 3개
Job 			: 폐기물 수집운반업자가 배출자로부터 최종 낙찰자로 선정된 이후 최종결정을 한다.
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.27
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.2)
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME		DEFAULT NOW();
	DECLARE VAR_DISPOSAL_ORDER_ID				BIGINT 			DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID					BIGINT 			DEFAULT NULL;
	DECLARE VAR_IS_USER_SITE_FINAL_BIDDER		TINYINT			DEFAULT NULL;
	DECLARE VAR_BIDDING_RANK					INT				DEFAULT NULL;
	DECLARE VAR_COLLECTOR_ID					BIGINT			DEFAULT NULL;
	DECLARE MAX_SELECTION_DURATION				VARCHAR(20)		DEFAULT NULL;
	DECLARE VAR_COLLECTOR_MAX_DECISION2_AT		DATETIME		DEFAULT NULL;
	DECLARE VAR_PUSH_CATEGORY_ID				INT				DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
	/*생성자가 존재하는지 체크한다.*/
		IN_USER_ID, 
		TRUE, 
		rtn_val,
		msg_txt
	);
	/*등록을 요청하는 사용자의 USER_ID가 이미 등록되어 있는 경우에는 @USER_EXISTS = 1, 그렇지 않은 경우에는 @USER_EXISTS = 0이 됨*/ 		
	IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우*/
		CALL sp_req_disposal_id_of_collector_bidding_id(
			IN_COLLECTOR_BIDDING_ID,
			VAR_DISPOSAL_ORDER_ID
		);
		CALL sp_req_site_id_of_user_reg_id(
		/*사용자 고유등록번호로 사용자가 소속한 사이트의 고유등록번호를 반환한다.*/
			IN_USER_ID,
			VAR_USER_SITE_ID,
			rtn_val,
			msg_txt
		);
		IF rtn_val = 0 THEN
		/*사이트가 정상(개인사용자는 제외됨)적인 경우*/
			/*사이트가 배출자로부터 최종 선택을 받은 사이트인지 검사한다.*/
            /*
			CALL sp_req_is_site_final_bidder(
				VAR_USER_SITE_ID,
				VAR_IS_USER_SITE_FINAL_BIDDER
			);
			IF VAR_IS_USER_SITE_FINAL_BIDDER = TRUE THEN
            */
			/*사이트가 배출자로부터 최종 낙찰자로 선정된 경우*/
				UPDATE COLLECTOR_BIDDING 
				SET 
					MAKE_DECISION 		= IN_FINAL_DECISION, 
					MAKE_DECISION_AT 	= VAR_REG_DT,
					UPDATED_AT 			= VAR_REG_DT  
				WHERE ID = IN_COLLECTOR_BIDDING_ID;
				/*최종처리결정에 대한 거부권(TRUE:수락, FALSE:거부)을 행사한다.*/
				IF ROW_COUNT() = 1 THEN
				/*데이타베이스 입력에 성공한 경우*/
					SELECT BIDDING_RANK, COLLECTOR_ID INTO VAR_BIDDING_RANK, VAR_COLLECTOR_ID 
                    FROM COLLECTOR_BIDDING 
                    WHERE ID = IN_COLLECTOR_BIDDING_ID;
                    
					IF VAR_BIDDING_RANK = 1 THEN
						CALL sp_req_policy_direction(
						/*수거자가 배출자의 최종입찰선정에 응답을 할 수 있는 최대의 시간으로서 배출자의 최종낙찰자선정일로부터의 기간을 반환받는다(단위:시간)*/
							'max_selection_duration',
							MAX_SELECTION_DURATION
						);
						SET VAR_COLLECTOR_MAX_DECISION2_AT = ADDTIME(
															VAR_REG_DT, 
															CONCAT(
																CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
																':00:00'
															)
														);
						UPDATE SITE_WSTE_DISPOSAL_ORDER 
						SET 
							COLLECTOR_MAX_DECISION2_AT 			= VAR_COLLECTOR_MAX_DECISION2_AT ,
							COLLECTOR_SELECTION_CONFIRMED 		= IN_FINAL_DECISION,  
							COLLECTOR_SELECTION_CONFIRMED_AT 	= VAR_REG_DT,
                            COLLECTOR_BIDDING_ID				= IF(IN_FINAL_DECISION = TRUE, IN_COLLECTOR_BIDDING_ID, NULL),
                            SUCCESS_BIDDER						= IF(IN_FINAL_DECISION = TRUE, VAR_COLLECTOR_ID, NULL),
							UPDATED_AT 							= VAR_REG_DT
						WHERE ID 								= VAR_DISPOSAL_ORDER_ID;
						IF ROW_COUNT() = 1 THEN
							CALL sp_calc_bidder_and_prospective_visitors(
								VAR_DISPOSAL_ORDER_ID
							);
							IF IN_FINAL_DECISION = TRUE THEN
							/*최종결정을 수락한 경우에는 CLCT_TRMT_TRANSACTION에 이미 생성되어 있는 작업을 UPDATE한다.*/
								UPDATE WSTE_CLCT_TRMT_TRANSACTION
								SET
									ACCEPT_ASK_END			= IN_FINAL_DECISION,
									ACCEPT_ASK_END_AT		= VAR_REG_DT,
									VISIT_END_AT			= IF(VISIT_END_AT IS NULL, NULL, VAR_REG_DT),
									COLLECTOR_ID 			= VAR_COLLECTOR_ID,
									COLLECTOR_BIDDING_ID 	= IN_COLLECTOR_BIDDING_ID,
									UPDATED_AT 				= VAR_REG_DT
								WHERE 
									DISPOSAL_ORDER_ID 	= VAR_DISPOSAL_ORDER_ID AND
                                    IN_PROGRESS			= TRUE;
								IF ROW_COUNT() = 1 THEN
								/*WSTE_CLCT_TRMT_TRANSACTION에 이미 생성되어 있는 작업사항 중 수거자결정 내용 변경에 성공한 경우*/
									CALL sp_create_chat_room(
										IN_USER_ID,
										VAR_DISPOSAL_ORDER_ID,
										IN_COLLECTOR_BIDDING_ID,
										1,
										118,
										rtn_val,
										msg_txt                                
									);
									IF rtn_val = 0 THEN
										SET VAR_PUSH_CATEGORY_ID = 23;
										CALL sp_push_collector_make_final_decision(
											IN_USER_ID,
											VAR_DISPOSAL_ORDER_ID,
											IN_COLLECTOR_BIDDING_ID,
											NULL,
											VAR_PUSH_CATEGORY_ID,
											json_data,
											rtn_val,
											msg_txt
										);
										IF rtn_val > 0 THEN
											SIGNAL SQLSTATE '23000';
										END IF;
                                    ELSE
										SIGNAL SQLSTATE '23000';
                                    END IF;
								ELSE
								/*WSTE_CLCT_TRMT_TRANSACTION에 이미 생성되어 있는 작업사항 중 수거자결정 내용 변경에 실패한 경우 예외처리한다.*/
									SET rtn_val 		= 24102;
									SET msg_txt 		= 'Failed to change job information';
									SIGNAL SQLSTATE '23000';
								END IF;
							ELSE
								SET VAR_PUSH_CATEGORY_ID = 24;
								CALL sp_push_collector_make_final_decision(
									IN_USER_ID,
									VAR_DISPOSAL_ORDER_ID,
									IN_COLLECTOR_BIDDING_ID,
									NULL,
									VAR_PUSH_CATEGORY_ID,
									json_data,
									rtn_val,
									msg_txt
								);
								IF rtn_val > 0 THEN
									SIGNAL SQLSTATE '23000';
								END IF;
							END IF;
						ELSE
							SET rtn_val 		= 24104;
							SET msg_txt 		= 'Failed to change emitter record';
							SIGNAL SQLSTATE '23000';
						END IF;
                    ELSE
						IF VAR_BIDDING_RANK = 2 THEN
							UPDATE SITE_WSTE_DISPOSAL_ORDER 
							SET 
								COLLECTOR_SELECTION_CONFIRMED2 		= IN_FINAL_DECISION,  
								COLLECTOR_SELECTION_CONFIRMED2_AT 	= VAR_REG_DT,
								COLLECTOR_BIDDING_ID				= IF(IN_FINAL_DECISION = TRUE, IN_COLLECTOR_BIDDING_ID, NULL),
								SUCCESS_BIDDER						= IF(IN_FINAL_DECISION = TRUE, VAR_COLLECTOR_ID, NULL),
								UPDATED_AT 							= VAR_REG_DT
							WHERE ID 								= VAR_DISPOSAL_ORDER_ID;
							IF ROW_COUNT() = 1 THEN
								IF IN_FINAL_DECISION = TRUE THEN
								/*최종결정을 수락한 경우에는 CLCT_TRMT_TRANSACTION에 이미 생성되어 있는 작업을 UPDATE한다.*/
									UPDATE WSTE_CLCT_TRMT_TRANSACTION
									SET
										ACCEPT_ASK_END			= IN_FINAL_DECISION,
										ACCEPT_ASK_END_AT		= VAR_REG_DT,
                                        VISIT_END_AT			= IF(VISIT_END_AT IS NULL, NULL, VAR_REG_DT),
										COLLECTOR_ID 			= VAR_COLLECTOR_ID,
										COLLECTOR_BIDDING_ID 	= IN_COLLECTOR_BIDDING_ID,
										UPDATED_AT 				= VAR_REG_DT
									WHERE 
										DISPOSAL_ORDER_ID 	= VAR_DISPOSAL_ORDER_ID AND
										IN_PROGRESS			= TRUE;
									IF ROW_COUNT() = 1 THEN
									/*WSTE_CLCT_TRMT_TRANSACTION에 이미 생성되어 있는 작업사항 중 수거자결정 내용 변경에 성공한 경우*/
										CALL sp_create_chat_room(
											IN_USER_ID,
											VAR_DISPOSAL_ORDER_ID,
											IN_COLLECTOR_BIDDING_ID,
											1,
											118,
											rtn_val,
											msg_txt                                
										);
										IF rtn_val = 0 THEN
											SET VAR_PUSH_CATEGORY_ID = 23;
											CALL sp_push_collector_make_final_decision(
												IN_USER_ID,
												VAR_DISPOSAL_ORDER_ID,
												IN_COLLECTOR_BIDDING_ID,
												NULL,
												VAR_PUSH_CATEGORY_ID,
												json_data,
												rtn_val,
												msg_txt
											);
											IF rtn_val > 0 THEN
												SIGNAL SQLSTATE '23000';
											END IF;
										ELSE
											SIGNAL SQLSTATE '23000';
                                        END IF;
									ELSE
									/*WSTE_CLCT_TRMT_TRANSACTION에 이미 생성되어 있는 작업사항 중 수거자결정 내용 변경에 실패한 경우 예외처리한다.*/
										SET rtn_val 		= 24107;
										SET msg_txt 		= 'Failed to change job information';
										SIGNAL SQLSTATE '23000';
									END IF;
								ELSE
									SET VAR_PUSH_CATEGORY_ID = 24;
									CALL sp_push_collector_make_final_decision(
										IN_USER_ID,
										VAR_DISPOSAL_ORDER_ID,
										IN_COLLECTOR_BIDDING_ID,
										NULL,
										VAR_PUSH_CATEGORY_ID,
										json_data,
										rtn_val,
										msg_txt
									);
                                    IF rtn_val > 0 THEN
										SIGNAL SQLSTATE '23000';
                                    END IF;
								END IF;
							ELSE
								SET rtn_val 		= 24106;
								SET msg_txt 		= 'Failed to change emitter record';
								SIGNAL SQLSTATE '23000';
							END IF;
						ELSE
							SET rtn_val 		= 24105;
							SET msg_txt 		= 'Failed to change emitter record';
							SIGNAL SQLSTATE '23000';
						END IF;
                    END IF;
				ELSE
				/*데이타베이스 입력에 실패한 경우*/
					SET rtn_val 		= 24101;
					SET msg_txt 		= 'db error occurred during bid cancellation';
					SIGNAL SQLSTATE '23000';
				END IF;
			/*ELSE*/
			/*사이트가 배출자로부터 최종 낙찰자로 선정되지 경우*/
            /*
				SET rtn_val 		= 24103;
				SET msg_txt 		= 'Only the site selected as the final successful bidder can accept or reject';
				SIGNAL SQLSTATE '23000';
			END IF;
            */
        ELSE
		/*사이트가 정상(개인사용자는 제외됨)적이지 않은 경우*/
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 존재하지 않거나 유효하지 않은 경우*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_collector_response_to_discharged_end_at`(
	IN IN_USER_ID						BIGINT,			/*입력값: 수거업체 관리자 아이디(USERS.ID)*/
	IN IN_TRANSACTION_ID				BIGINT,			/*입력값: 폐기물 수거단위작업 코드(WSTE_CLCT_TRMT_TRANSACTION.ID)*/
	IN IN_RESPONSE						TINYINT,		/*입력값: 배출업체의 최종처리일 요청에 대한 수거업체의 응답으로서 수락인 경우에는 TRUE, 거절인 경우에는 FALSE*/
    IN IN_REJECT_REASON					VARCHAR(255)	/*입력값: 수거자가 배출자의 수거요청에 대하여 거절하는 경우 입력해야 하는 거절 사유*/
)
BEGIN

/*
Procedure Name 	: sp_collector_response_to_discharged_end_at
Input param 	: 3개
Job 			: 폐기물 수거업체가 배출업체가 결정한 폐기물 최종처리일자까지 폐기물을 수거할지의 여부를 결정 통보한다.
Update 			: 2022.03.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/	
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_TRANSACTION_EXISTS				INT 			DEFAULT 0;
	DECLARE VAR_REJECT_REASON					VARCHAR(255) 	DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_DISPOSAL_ORDER_ID				BIGINT		 	DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_ID				BIGINT		 	DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT			 	DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    SET VAR_REJECT_REASON = IN_REJECT_REASON;
    CALL sp_req_current_time(VAR_REG_DT);
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );	
    
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다*/
		SELECT COUNT(ID) 
        INTO VAR_TRANSACTION_EXISTS 
        FROM WSTE_CLCT_TRMT_TRANSACTION 
        WHERE ID = IN_TRANSACTION_ID;
        IF VAR_TRANSACTION_EXISTS = 1 THEN
        /*트랜잭션이 존재한다면 정상처리한다.*/
			CALL sp_req_current_time(VAR_REG_DT);
			SELECT DISPOSAL_ORDER_ID, COLLECTOR_SITE_ID 
			INTO VAR_DISPOSAL_ORDER_ID, VAR_COLLECTOR_SITE_ID 
			FROM WSTE_CLCT_TRMT_TRANSACTION 
			WHERE ID = IN_TRANSACTION_ID;
            
			UPDATE WSTE_CLCT_TRMT_TRANSACTION 
			SET 
				IN_PROGRESS 		= IN_RESPONSE,
				ACCEPT_ASK_END 		= IN_RESPONSE,
				ACCEPT_ASK_END_AT 	= VAR_REG_DT,
				COLLECTOR_ID 		= VAR_COLLECTOR_SITE_ID,
				REJECT_REASON 		= VAR_REJECT_REASON,
				UPDATED_AT 			= VAR_REG_DT
			WHERE ID 				= IN_TRANSACTION_ID;
			IF ROW_COUNT() = 1 THEN
			/*수거자의 최종승낙절차가 성공적으로 완료된 경우에는 정상처리한다.*/
				IF IN_RESPONSE IS NOT NULL THEN
					IF IN_RESPONSE = TRUE THEN
					/*수거업체가 배출자의 수거요청일을 받아들이면서 수락하는 경우에는 계약이 정상적으로 처리되는 것이므로 
					WSTE_CLCT_TRMT_TRANSACTION의 COLLECT_ASK_END_AT에 수거요청일을 기록하고 IN_PROCESS를 TRUE로 처리한다.
					다만 기존에 같은 DISPOSAL_ORDER_ID와 COLLECTOR_BIDDING_ID을 공유하는 트랜잭션 중에서 IN_PROCESS = TRUE가 있는 경우에는
					예외처리해야한다.*/					
						SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID 
						FROM USERS 
						WHERE ID = IN_USER_ID;
						IF VAR_USER_SITE_ID > 0 THEN
						/*사용자가 사업자의 소속관리자인 경우 정상처리한다.*/	
							IF VAR_USER_SITE_ID = VAR_COLLECTOR_SITE_ID THEN
							/*사용자가 소속한 사이트가 기존거래 사이트인 경우 정상처리한다.*/
								SELECT CLASS INTO VAR_USER_CLASS 
								FROM USERS 
								WHERE ID = IN_USER_ID;
								IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
								/*사용자에게 권한이 있는 경우 정상처리한다.*/
									CALL sp_push_collector_accept_ask_end(
										IN_USER_ID,
										VAR_DISPOSAL_ORDER_ID,
										NULL,
										IN_TRANSACTION_ID,
										29,
										json_data,
										rtn_val,
										msg_txt
									);
									IF rtn_val > 0 THEN
										SIGNAL SQLSTATE '23000';
									END IF;
								ELSE
								/*사용자에게 권한이 없는 경우 예외처리한다.*/
									SET rtn_val 		= 34805;
									SET msg_txt 		= 'users not authorized';
									SIGNAL SQLSTATE '23000';
								END IF;
							ELSE
							/*사용자가 소속한 사이트가 기존거래 사이트가 아닌 경우 예외처리한다.*/
								SET rtn_val 		= 34804;
								SET msg_txt 		= 'users not belong to the site';
								SIGNAL SQLSTATE '23000';
							END IF;
						ELSE
						/*사용자가 개인인 경우 예외처리한다.*/
							SET rtn_val 		= 34803;
							SET msg_txt 		= 'Not available for individual users';
							SIGNAL SQLSTATE '23000';
						END IF;
					ELSE
					/*수거업체가 배출자의 수거요청일을 거부하면서 거절하는 경우에는 계약이 체결되지 않는 상태로서 정상처리한다.*/
					/*뭔가 처리할게 있을거 같은데.... .쩌업~~~*/
						CALL sp_push_collector_accept_ask_end(
							IN_USER_ID,
							VAR_DISPOSAL_ORDER_ID,
							NULL,
							IN_TRANSACTION_ID,
							30,
							json_data,
							rtn_val,
							msg_txt
						);
						IF rtn_val > 0 THEN
							SIGNAL SQLSTATE '23000';
						END IF;
					END IF;
				ELSE
				/*IN_RESPONSE가 NULL인 경우에는 예외처리한다*/
					SET rtn_val 		= 34802;
					SET msg_txt 		= 'Response must be TRUE or FALSE but NULL';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*수거자의 최종승낙절차에 오류가 발생한 경우에는 예외처리한다.*/
				SET rtn_val 		= 34806;
				SET msg_txt 		= 'failed to update record';
				SIGNAL SQLSTATE '23000';
			END IF;
        ELSE
        /*트랜잭션이 존재하지 않는다면 예외처리한다.*/
			SET rtn_val 		= 34801;
			SET msg_txt 		= 'transaction does not exist';
			SIGNAL SQLSTATE '23000';
        END IF;
	ELSE
		SIGNAL SQLSTATE '23000';
    END IF;   
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_confirm_transaction_report`(
	IN IN_USER_ID					BIGINT,
	IN IN_REPORT_ID					BIGINT,
	IN IN_RESPONSE					BIGINT
)
BEGIN

/*
Procedure Name 	: sp_confirm_transaction_report
Input param 	: 3개
Job 			: 수거자가 제출한 보고서를 승인 또는 거절한다.
Update 			: 2022.04.01
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT		 	DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT			 	DEFAULT NULL;
	DECLARE VAR_CREATED_AT						DATETIME	 	DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_DISPOSER_ORDER_ID				BIGINT		 	DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/	
		SELECT DISPOSER_SITE_ID
		INTO VAR_DISPOSER_SITE_ID
		FROM TRANSACTION_REPORT 
		WHERE ID = IN_REPORT_ID;
        
        SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID
        FROM USERS
        WHERE ID = IN_USER_ID;
		IF VAR_DISPOSER_SITE_ID = VAR_USER_SITE_ID THEN
		/*사용자가 정보변경 대상이 되는 사이트에 소속한 관리자인 경우*/
			CALL sp_req_user_class_by_user_reg_id(
			/*사용자의 권한을 구한다.*/
			IN_USER_ID,
			VAR_USER_CLASS
			);
			IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
			/*관리자가 정보를 변경할 권한이 있는 경우*/
				CALL sp_check_if_transaction_report_exists(
				/*리포트가 존재하는지 검사한다.*/
					IN_REPORT_ID,
					rtn_val,
					msg_txt
				);
				IF rtn_val = 0 THEN
				/*리포트가 존재하는 경우 정상처리한다.*/
					SELECT CREATED_AT, TRANSACTION_ID, DISPOSER_ORDER_ID 
                    INTO VAR_CREATED_AT, VAR_TRANSACTION_ID, VAR_DISPOSER_ORDER_ID
                    FROM TRANSACTION_REPORT 
                    WHERE ID = IN_REPORT_ID;
					/*수거자가 리포트를 제출할 준비가 되었는지 검사하여 @REPORTED_AT에 반환한다.*/
					
					IF VAR_CREATED_AT IS NOT NULL THEN
					/*수거자가 리포트를 제출한 경우*/
						UPDATE TRANSACTION_REPORT 
						SET 
							CONFIRMED 					= IN_RESPONSE, 
							UPDATED_AT 					= VAR_REG_DT,
							CONFIRMED_AT 				= VAR_REG_DT,
                            TRANSACTION_COMPLETED_AT	= IF(IN_RESPONSE = TRUE, VAR_REG_DT, NULL),
							DISPOSER_MANAGER_ID 		= IN_USER_ID
						WHERE ID = IN_REPORT_ID;
						IF ROW_COUNT() = 1 THEN
						/*정보가 성공적으로 변경되었다면*/
							IF IN_RESPONSE = TRUE THEN
								UPDATE WSTE_CLCT_TRMT_TRANSACTION
                                SET 
									IN_PROGRESS 		= FALSE,
                                    UPDATED_AT 			= VAR_REG_DT,
                                    CONFIRMER_ID		= IN_USER_ID,
                                    CONFIRMED_AT		= VAR_REG_DT,
                                    UPDATED_AT			= VAR_REG_DT,
                                    CONFIRMED			= IN_RESPONSE
								WHERE ID = VAR_TRANSACTION_ID;
								IF ROW_COUNT() = 1 THEN
									UPDATE SITE_WSTE_DISPOSAL_ORDER
                                    SET CLOSE_AT = VAR_REG_DT
                                    WHERE ID = VAR_DISPOSER_ORDER_ID;
                                    IF ROW_COUNT() = 1 THEN
										CALL sp_get_transaction_report(
											IN_REPORT_ID,
											json_data
										);
                                        CALL sp_set_site_undeleted(
											IN_REPORT_ID
                                        );
										SET rtn_val = 0;
										SET msg_txt = 'success';
                                    ELSE
										SET rtn_val = 36006;
										SET msg_txt = 'Failed to change contract expiration date';
										SIGNAL SQLSTATE '23000';
                                    END IF;
                                ELSE
									SET json_data = NULL;
									SET rtn_val = 36005;
									SET msg_txt = 'Transaction Closing Failed';
									SIGNAL SQLSTATE '23000';
                                END IF;
							ELSE
								SET rtn_val = 0;
								SET msg_txt = 'success';
                            END IF;
						ELSE
						/*정보변경에 실패했다면 예외처리한다.*/
							SET rtn_val = 36004;
							SET msg_txt = 'Report approval failure';
							SIGNAL SQLSTATE '23000';
						END IF;
					ELSE
					/*수거자가 리포트를 제출하지 경우*/
						SET rtn_val = 36003;
						SET msg_txt = 'Report not submitted by the collector';
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*리포트가 존재하지 않는 경우 예외처리한다.*/
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*관리자가 정보를 변경할 권한이 없는 경우*/
				SET rtn_val = 36002;
				SET msg_txt = 'User does not have permission to change information';
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
		/*사용자가 정보변경 대상이 되는 사이트에 소속한 관리자가 아닌 경우 예외처리한다.*/
			SET rtn_val = 36001;
			SET msg_txt = 'The user is not an administrator of the site';
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_convert_json_to_record`(
	IN IN_JSON_DATA						JSON,
    IN IN_TITLE							VARCHAR(50),
    OUT rtn_val							INT
)
BEGIN

/*
Procedure Name 	: sp_convert_json_to_record
Input param 	: 2개
Output param 	: 1개
Job 			: 파라미터로 입력받은 JSON데이타를 테이블 형식으로 반환함. 에러가 발생하는 경우에는 rtn_val을 통하여 0을 반환함
Update 			: 2022.01.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	IF IN_TITLE = 'WSTE_LIST_DISCHARGED' THEN
		SELECT * FROM JSON_TABLE(IN_JSON_DATA, "$[*]" COLUMNS(
			WSTE_CLASS_CODE 		VARCHAR(100) 					PATH "$.WSTE_CLASS_CODE",
			WSTE_APPERANCE 			VARCHAR(100) 					PATH "$.WSTE_APPERANCE",
			UNIT 					ENUM('Kg','m3','전체견적가')		PATH "$.UNIT",
			QUANTITY 				FLOAT							PATH "$.QUANTITY"
		)) AS WSTE_LIST;
		SET rtn_val = 1;
	ELSE
		IF IN_TITLE = 'WSTE_REG_PHOTO' THEN
			SELECT * FROM JSON_TABLE(IN_JSON_DATA, "$[*]" COLUMNS(
				FILE_NAME				VARCHAR(100) 					PATH "$.FILE_NAME",
				PATH 					VARCHAR(255)					PATH "$.PATH"
			)) AS WSTE_PHOTO;
			SET rtn_val = 1;
		ELSE
			SET rtn_val = 0;
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_count_items_in_list`(
	IN IN_LIST			VARCHAR(200),
    OUT OUT_COUNT		VARCHAR(200),
    OUT OUT1		VARCHAR(200),
    OUT OUT2		VARCHAR(200),
    OUT OUT3		VARCHAR(200)	
)
BEGIN

/*
Procedure Name 	: sp_count_items_in_list
Input param 	: 1개
Output param 	: 1개
Job 			: 파라미터로 받은 리스트 안에 있는 아이템의 갯수를 반환한다.
Update 			: 2022.01.10
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	SET @IN_ARRAY = IN_LIST;
    SET @ITEM = NULL;
    SET @SEPERATOR = ',' COLLATE utf8mb4_unicode_ci;
    /*리스트의 아이템을 분리하는 식별자로서 comma(,)를 사용하는 것으로 정의함. 식별자는 언제든지 변경가능함*/
    
    IF @IN_ARRAY IS NULL OR @IN_ARRAY = '' THEN
		SET @LIST_COUNT = 0;
    ELSE
		SET @LIST_COUNT = 1;
		WHILE (LOCATE(@SEPERATOR, @IN_ARRAY) > 0) DO
			SET @ITEM = SUBSTRING(@IN_ARRAY, 1, LOCATE(@SEPERATOR, @IN_ARRAY) - 1);
			SET @IN_ARRAY = SUBSTRING(@IN_ARRAY, LOCATE(@SEPERATOR, @IN_ARRAY) + 1);  
            IF (LOCATE(@SEPERATOR, @IN_ARRAY) = 0) THEN
				SET OUT3 = @IN_ARRAY;
			ELSE
				SET OUT1 = @ITEM;
            END IF;
			SET @LIST_COUNT = @LIST_COUNT + 1;
		END WHILE;
    END IF;
    
    SET OUT_COUNT = @IN_ARRAY;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_count_items_in_lists`(
	IN IN_LIST			VARCHAR(200),
    OUT OUT_COUNT		INT
)
BEGIN

/*
Procedure Name 	: sp_count_items_in_lists
Input param 	: 1개
Output param 	: 1개
Job 			: 파라미터로 받은 리스트 안에 있는 아이템의 갯수를 반환한다.
Update 			: 2022.01.10
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SET @IN_ARRAY = IN_LIST;
    SET @ITEM = NULL;
    IF @IN_ARRAY IS NULL OR @IN_ARRAY = '' THEN
		SET @LIST_COUNT = 0;
    ELSE
		SET @LIST_COUNT = 1;
		WHILE (LOCATE(',', @IN_ARRAY) > 0) DO
			SET @ITEM = SUBSTRING(@IN_ARRAY, 1, LOCATE(',', @IN_ARRAY) - 1);
			SET @IN_ARRAY = SUBSTRING(@IN_ARRAY, LOCATE(',', @IN_ARRAY) + 1);   
			SET @LIST_COUNT = @LIST_COUNT + 1;
		END WHILE;
    END IF;
    
    SET OUT_COUNT = @LIST_COUNT;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_count_lists`(
	IN IN_LIST			VARCHAR(200),
    OUT OUT_COUNT		INT
)
BEGIN
	SET @IN_ARRAY = IN_LIST;
    SET @ITEM = NULL;
    SET @LIST_COUNT = 0;
    
	WHILE (LOCATE(',', @IN_ARRAY) > 0) DO
		SET @ITEM = SUBSTRING(@IN_ARRAY, 1, LOCATE(',', @IN_ARRAY) - 1);
		SET @IN_ARRAY = SUBSTRING(@IN_ARRAY, LOCATE(',', @IN_ARRAY) + 1);   
		SET @LIST_COUNT = @LIST_COUNT + 1;
	END WHILE;
    
    SET OUT_COUNT = @LIST_COUNT;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_cert_code`(
	IN IN_PHONE_NO			VARCHAR(20)
)
BEGIN
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_DUPLICATED_NUMBER				INT			 	DEFAULT NULL;
	DECLARE MIN_REQ_CERT_CODE_DURATION			VARCHAR(20) 	DEFAULT NULL;
	DECLARE VAR_RECENT_CALL_COUNT				INT			 	DEFAULT NULL;
	DECLARE VAR_ID								BIGINT		 	DEFAULT NULL;
	DECLARE VAR_PHONE_NO						VARCHAR(20) 	DEFAULT NULL;
	DECLARE VAR_CERT_CODE						INT			 	DEFAULT NULL;
	DECLARE VAR_USER_ID							BIGINT		 	DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;  
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    IF IN_PHONE_NO IS NULL OR IN_PHONE_NO = '' THEN
		SET rtn_val = 32303;
		SET msg_txt = 'Phone number should not be null or empty';
		SIGNAL SQLSTATE '23000';
    ELSE
		SELECT COUNT(ID) INTO VAR_DUPLICATED_NUMBER 
        FROM USERS 
        WHERE PHONE = IN_PHONE_NO;
        SET VAR_DUPLICATED_NUMBER = 0;
		IF VAR_DUPLICATED_NUMBER = 0 THEN
			CALL sp_req_policy_direction(
				'min_req_cert_code_duration', 
				MIN_REQ_CERT_CODE_DURATION
			);
            
			SELECT COUNT(ID) INTO VAR_RECENT_CALL_COUNT 
            FROM CELL_PHONE_CERTIFICATION 
            WHERE 
				PHONE_NO = IN_PHONE_NO AND 
                NOW() <= ADDTIME(
							CREATED_AT, 
                            CONCAT(
								'00:00:', 
                                MIN_REQ_CERT_CODE_DURATION
							)
						);
			IF VAR_RECENT_CALL_COUNT > 0 THEN
				SELECT MAX(ID) INTO VAR_ID 
                FROM CELL_PHONE_CERTIFICATION 
                WHERE PHONE_NO = IN_PHONE_NO;
                
				SELECT PHONE_NO, CERT_CODE INTO VAR_PHONE_NO, VAR_CERT_CODE 
                FROM CELL_PHONE_CERTIFICATION 
                WHERE ID = VAR_ID;
                
				SELECT ID INTO VAR_USER_ID
                FROM USERS 
                WHERE 
					PHONE = IN_PHONE_NO AND
                    ACTIVE = TRUE;
                
				SELECT JSON_ARRAYAGG(JSON_OBJECT(
					'ID'				, VAR_ID,
					'UID'				, VAR_USER_ID,
					'PHONE_NO'			, IN_PHONE_NO,
					'CERT_CODE'			, VAR_CERT_CODE,
					'MIN_GEN_CYCLE'		, MIN_REQ_CERT_CODE_DURATION,
					'CERT_CODE_TIMEOUT'	, MIN_REQ_CERT_CODE_DURATION
				)) INTO json_data;
				SET rtn_val = 0;
				SET msg_txt = 'success';
			ELSE            
				SELECT CAST(RAND()* 900000 AS UNSIGNED) + 100000 INTO VAR_CERT_CODE; 
				INSERT INTO CELL_PHONE_CERTIFICATION(
					PHONE_NO,
					CERT_CODE
				) VALUES(
					IN_PHONE_NO,
					VAR_CERT_CODE
				);
                
				
				SELECT LAST_INSERT_ID() INTO VAR_ID;
				IF VAR_ID IS NOT NULL THEN
					SELECT ID INTO VAR_USER_ID
					FROM USERS 
					WHERE 
						PHONE = IN_PHONE_NO AND
						ACTIVE = TRUE;
					SELECT JSON_ARRAYAGG(JSON_OBJECT(
						'ID', 					VAR_ID,
						'UID', 					VAR_USER_ID,
						'PHONE_NO', 			IN_PHONE_NO,
						'CERT_CODE', 			VAR_CERT_CODE,
						'MIN_GEN_CYCLE', 		MIN_REQ_CERT_CODE_DURATION,
						'CERT_CODE_TIMEOUT', 	MIN_REQ_CERT_CODE_DURATION
					)) INTO json_data;
					SET rtn_val = 0;
					SET msg_txt = 'success';
				ELSE
					SELECT JSON_ARRAYAGG(JSON_OBJECT(
						'ID', 					NULL,
						'UID', 					NULL,
						'PHONE_NO', 			NULL,
						'CERT_CODE', 			NULL,
						'MIN_GEN_CYCLE', 		MIN_REQ_CERT_CODE_DURATION,
						'CERT_CODE_TIMEOUT', 	MIN_REQ_CERT_CODE_DURATION
					)) INTO json_data; 
					SET rtn_val = 32301;
					SET msg_txt = 'Failed to generate verification code';
					SIGNAL SQLSTATE '23000';
				END IF;
			END IF;
        ELSE
			SET rtn_val = 32302;
			SET msg_txt = 'Phone number already registered';
			SIGNAL SQLSTATE '23000';
        END IF;
    END IF;
    
    CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_cert_code2`(
	IN IN_PHONE_NO			VARCHAR(20)
)
BEGIN
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_RECENT_CALL_COUNT				INT			 	DEFAULT NULL;
	DECLARE VAR_ID								BIGINT		 	DEFAULT NULL;
	DECLARE VAR_CERT_CODE						INT			 	DEFAULT NULL;
	DECLARE VAR_PHONE_NO						VARCHAR(20) 	DEFAULT NULL;
	DECLARE VAR_DUPLICATED_NUMBER				INT			 	DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;  
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    IF IN_PHONE_NO IS NULL OR IN_PHONE_NO = '' THEN
		SET rtn_val = 32303;
		SET msg_txt = 'Phone number should not be null or empty';
		SIGNAL SQLSTATE '23000';
    ELSE
		SELECT COUNT(ID) INTO VAR_RECENT_CALL_COUNT 
        FROM CELL_PHONE_CERTIFICATION 
        WHERE 
			PHONE_NO 		= IN_PHONE_NO AND 
            CREATED_AT 		>= ADDTIME(NOW(), '00:00:01');
        IF VAR_RECENT_CALL_COUNT > 0 THEN
			SELECT MAX(ID) INTO VAR_ID 
            FROM CELL_PHONE_CERTIFICATION 
            WHERE PHONE_NO = IN_PHONE_NO;
            
            SELECT PHONE_NO, CERT_CODE INTO VAR_PHONE_NO, VAR_CERT_CODE 
            FROM CELL_PHONE_CERTIFICATION 
            WHERE ID = VAR_ID;
            
			SELECT JSON_ARRAYAGG(JSON_OBJECT(
				'ID', 			VAR_ID,
				'PHONE_NO', 	IN_PHONE_NO,
				'CERT_CODE', 	VAR_CERT_CODE
			)) INTO json_data;
			SET rtn_val = 0;
			SET msg_txt = 'success';
        ELSE
			SELECT COUNT(ID) INTO VAR_DUPLICATED_NUMBER 
            FROM USERS 
            WHERE PHONE = IN_PHONE_NO;
            
			IF VAR_DUPLICATED_NUMBER = 0 THEN
				SELECT CAST(RAND()* 900000 AS UNSIGNED) + 100000 INTO VAR_CERT_CODE; 
				INSERT INTO CELL_PHONE_CERTIFICATION(
					PHONE_NO,
					CERT_CODE
				) VALUES(
					IN_PHONE_NO,
					VAR_CERT_CODE
				);
				
				SELECT LAST_INSERT_ID() INTO VAR_ID;
				IF VAR_ID IS NOT NULL THEN
					SELECT JSON_ARRAYAGG(JSON_OBJECT(
						'ID'			, VAR_ID,
						'PHONE_NO'		, IN_PHONE_NO,
						'CERT_CODE'		, VAR_CERT_CODE
					)) INTO json_data;
					SET rtn_val = 0;
					SET msg_txt = 'success';
				ELSE
					SELECT JSON_ARRAYAGG(JSON_OBJECT(
						'ID'			, NULL,
						'PHONE_NO'		, NULL,
						'CERT_CODE'		, NULL
					)) INTO json_data; 
					SET rtn_val = 32301;
					SET msg_txt = 'Failed to generate verification code';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
				SET rtn_val = 32302;
				SET msg_txt = 'Phone number already exists';
				SIGNAL SQLSTATE '23000';
			END IF;
        END IF;
    END IF;
    
    CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_chat_room`(
	IN IN_USER_ID				BIGINT,
    IN IN_ORDER_ID				BIGINT,
    IN IN_BIDDING_ID			BIGINT,
    IN IN_CONFIRMED				TINYINT,
    IN IN_STATE					INT,
    OUT rtn_val					INT,
    OUT msg_txt					VARCHAR(200)
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_DISPOSER_USER_ID				BIGINT		 	DEFAULT NULL;
	DECLARE VAR_CHAT_ROOM_EXISTS				INT		 		DEFAULT NULL;
    
    CALL sp_req_current_time(VAR_REG_DT);
    
    SELECT DISPOSER_ID INTO VAR_DISPOSER_USER_ID
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE ID = IN_ORDER_ID;
    
    SELECT COUNT(ID) INTO VAR_CHAT_ROOM_EXISTS
    FROM CHAT_ROOMS
    WHERE
		ORDER_ID = IN_ORDER_ID AND
        BIDDING_ID = IN_BIDDING_ID AND
        STATE = IN_STATE;
	
    IF VAR_CHAT_ROOM_EXISTS = 0 THEN
		INSERT INTO CHAT_ROOMS(
			ORDER_ID,
			BIDDING_ID,
			DISPOSER_USER_ID,
			COLLECTOR_USER_ID,
            CONFIRMED,
            STATE,
            CONFIRMED_AT,
            UPDATED_AT,
			CREATED_AT
		) VALUES(
			IN_ORDER_ID,
			IN_BIDDING_ID,
			VAR_DISPOSER_USER_ID,
			IN_USER_ID,
			IN_CONFIRMED,
			IN_STATE,
            IF(CONFIRMED = TRUE,
				VAR_REG_DT,
                NULL
            ),
            IF(CONFIRMED = TRUE,
				VAR_REG_DT,
                NULL
            ),
			VAR_REG_DT
		);
		IF ROW_COUNT() = 1 THEN
			SET rtn_val = 0;
			SET msg_txt = 'success';
		ELSE
			SET rtn_val = 40102;
			SET msg_txt = 'failed to create a chat room';
		END IF;
    ELSE
		SET rtn_val = 40101;
		SET msg_txt = 'chat room already exists';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_collector`(
	IN IN_USER_ID 					BIGINT,				/*입력값 : 사용자 고유등록번호*/
	IN IN_SITE_ID 					BIGINT,				/*입력값 : 수거자 업체등으로 등록할 사이트 고유등록번호(COMP_SITE.ID)*/
	IN IN_TRMT_BIZ_CODE 			VARCHAR(4),			/*입력값 : 사업자 분류코드로서 WSTE_TRMT_BIZ에 등록된 종류별 코드임, 2~7까지의 코드 사용가능*/
	IN IN_PERMIT_REG_CODE 			VARCHAR(100),		/*입력값 : 수거자등의 허가 또는 신고번호*/
	IN IN_PERMIT_REG_IMG_PATH		VARCHAR(200),		/*입력값 : 수거자등의 허가 또는 신고증명서 등록 이미지 저장 경로*/
	IN IN_WSTE_CODE_LIST			VARCHAR(255)		/*입력값 : 폐기물 코드 리스트*/
    )
BEGIN

/*
Procedure Name 	: sp_create_collector
Input param 	: 6개
Job 			: 수거자등의 업체 등록
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.29
Version			: 0.0.5
AUTHOR 			: Leo Nam
Change			: JWT 입력변수 삭제(0.0.3) / 폐기물 종류 정보(IN_WSTE_CLS) 입력
				: COMP_SITE 테이블 변경에 따른 로직 일부 수정(0.0.3)
				: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.4)
                : 서브 프로시저의 데이타 반환타입 통일(0.0.5)
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_COMP_ID							BIGINT		 	DEFAULT NULL;
	DECLARE VAR_REGISTRATION_RIGHT				INT		 		DEFAULT NULL;
	DECLARE VAR_IS_USER_BELONGS_TO_HEAD_OFFICE	TINYINT			DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;
	START TRANSACTION;
    /*트랜잭션 시작*/
    
    CALL sp_req_current_time(
		VAR_REG_DT
    );
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    CALL sp_req_same_company_permit_code_exists(
    /*체크할 등록번호로 등록된 사업자가 존재하는지 체크한 후 존재한다면 1, 그렇지 않으면 0을 반환하게 됨*/
		IN_PERMIT_REG_CODE, 
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*같은 등록번호를 가진 사업자가 존재하지 않는 경우에는 정상처리 진행한다.*/         
        CALL sp_req_user_exists_by_id(
			IN_USER_ID, 
            TRUE, 
			rtn_val,
			msg_txt
        );
        /*IN_USER_ID가 이미 등록되어 있는 사용자인지 체크한다. 
        등록되어 있는 경우에는 @USER_EXISTS = 1, 
        그렇지 않은 경우에는 @USER_EXISTS = 0을 반환한다.*/
        
        IF rtn_val = 0 THEN
        /*이미 등록되어 있는 사용자인 경우에는 관리자(member.admin)인지 검사한 후 
        member.admin인 경우에는 사업자 생성권한을 부여하고 
        그렇지 않은 경우에는 예외처리한다.*/
			CALL sp_req_comp_id_of_site(
            /*사이트 아이디로 사업자 고유등록번호를 반환한다.*/
				IN_SITE_ID,
                VAR_COMP_ID
            );
            
			CALL sp_req_super_permission_by_userid(
				IN_USER_ID, 
                VAR_COMP_ID, 
                VAR_REGISTRATION_RIGHT,
                VAR_IS_USER_BELONGS_TO_HEAD_OFFICE,
				rtn_val,
				msg_txt
            );
			/*VAR_REGISTRATION_RIGHT로 사업자 등록을 요청하는 사용자의 권한을 구분한다.*/
			
			IF VAR_REGISTRATION_RIGHT IN (1, 2, 3, 5) THEN
			/*등록을 요청하는 사용자(IN_USER_ID)가 시스템 관리자(1, 2)인 경우, 
            모회사의 관리자가 자회사의 정보를 입력하는 경우(3), 
            자신이 속한 사업에 대한 정보를 입력하는 경우(5)로서 정상처리 진행한다.*/
				UPDATE COMP_SITE 
                /*사이트에 허가증 정보를 반영하여 변경적용한다.*/
                SET 
					PERMIT_REG_CODE 			= IN_PERMIT_REG_CODE, 
					PERMIT_REG_IMG_PATH 		= IN_PERMIT_REG_IMG_PATH, 
					UPDATED_AT			 		= VAR_REG_DT
                WHERE ID = IN_SITE_ID;
			
				IF ROW_COUNT() = 1 THEN
				/*사업자 레코드가 정상적으로 생성된 경우에는 정상처리한다.*/
					CALL sp_update_site_wste_lists_without_handler(
                    /*폐기물 리스트를 업데이트 한다.*/
						IN_USER_ID,
                        IN_WSTE_CODE_LIST,
                        IN_SITE_ID,
                        VAR_REG_DT,
                        rtn_val,
                        msg_txt
                    );
                    
                    IF rtn_val = 0 THEN
						SET rtn_val 		= 0;
						SET msg_txt 		= 'Success';
                    ELSE
						SIGNAL SQLSTATE '23000';
                    END IF;
				ELSE
				/*사업자 레코드가 정상적으로 생성되지 않은 경우에는 예외처리한다.*/
					SET rtn_val 		= 21901;
					SET msg_txt 		= 'Failed to add collection and transport business permission to members';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*@P_COMP_ID로 반환되는 값이 0인 경우에는 IN_USER_ID가 관리자(member.admin:201)로서의 
            권한이 없는 상황이기때문에 사업자 생성로직을 중단한 후 예외처리해야 한다.*/
            /*사업자를 생성하는 로직에는 관리자 정보가 필수이기때문에 
            치움의 sys.admin이 스스로 회원사로 가입할 사업자를 생성할 수 없다.*/
				SET rtn_val 		= 21902;
				SET msg_txt 		= 'user not authorized to modify site information';
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
        /*변경요청을 시도하는 사용자가 유효하지 않은 사용자인 경우에는 예외처리한다.*/
			SIGNAL SQLSTATE '23000';
        END IF;
	ELSE   
    /*같은 등록번호를 가진 사업자가 존재하는 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
	COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_collector_bidding`(
	IN IN_COLLECTOR_SITE_ID		BIGINT, 
	IN IN_DISPOSER_ORDER_ID		BIGINT, 
	IN IN_ACTIVE				TINYINT, 
	IN IN_DATE_OF_VISIT			DATETIME, 
	IN IN_REG_DT				DATETIME,
    OUT OUT_BIDDING_ID			BIGINT,
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200)		/*출력값 : 처리결과 문자열*/

)
BEGIN
	DECLARE VAR_ALREADY_BIDDING					INT		 		DEFAULT NULL;
    
    SELECT COUNT(ID) INTO VAR_ALREADY_BIDDING 
    FROM COLLECTOR_BIDDING 
    WHERE 
		COLLECTOR_ID 		= IN_COLLECTOR_SITE_ID AND 
        DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID AND 
        ACTIVE 				= IN_ACTIVE;
        
    IF VAR_ALREADY_BIDDING = 0 THEN
    /*이미 입찰한 사실이 없는 경우 정상처리한다.*/
		INSERT INTO COLLECTOR_BIDDING (
			COLLECTOR_ID, 
			DISPOSAL_ORDER_ID, 
			ACTIVE, 
			DATE_OF_VISIT, 
			CREATED_AT, 
			UPDATED_AT
		) VALUES (
			IN_COLLECTOR_SITE_ID, 
			IN_DISPOSER_ORDER_ID, 
			IN_ACTIVE, 
			IN_DATE_OF_VISIT, 
			IN_REG_DT, 
			IN_REG_DT
		);
		IF ROW_COUNT() = 1 THEN
		/*정상적으로 입력완료된 경우*/
        /*
			CALL sp_req_collect_bidding_max_id(
				@COLLECTOR_BIDDING_ID
			);
			SET OUT_BIDDING_ID = @COLLECTOR_BIDDING_ID;
		*/
            SELECT LAST_INSERT_ID() INTO OUT_BIDDING_ID;
			INSERT INTO FINAL_BIDDER_MANAGEMENT (
				DISPOSER_ORDER_ID,
				COLLECTOR_BIDDING_ID
			) VALUES (
				IN_DISPOSER_ORDER_ID,
				OUT_BIDDING_ID
			);
            IF ROW_COUNT() = 1 THEN
				SET rtn_val = 0;
				SET msg_txt = 'success';
            ELSE
				SET rtn_val = 25203;
				SET msg_txt = 'Failed to create final bidder management rocord';
            END IF;
		ELSE
		/*정상적으로 입력되지 않은 경우*/
			SET rtn_val = 25201;
			SET msg_txt = 'Failed to create collector_bidding record';
		END IF;
    ELSE
    /*이미 입찰한 사실이 있는 경우 정상처리한다.*/
		SET rtn_val = 25202;
		SET msg_txt = 'already bid';
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_company`(
	IN IN_USER_REG_ID			VARCHAR(50),		/*입력값 : 관리자아이디*/
    IN IN_PWD 					VARCHAR(100),		/*입력값 : 관리자암호*/
    IN IN_USER_NAME 			VARCHAR(20),		/*입력값 : 관리자이름*/
    IN IN_PHONE 				VARCHAR(20),		/*입력값 : 관리자 핸드폰 번호*/
    IN IN_COMP_NAME 			VARCHAR(100),		/*입력값 : 사업자 상호*/
    IN IN_REP_NAME 				VARCHAR(50),		/*입력값 : 대표자 이름*/
    IN IN_KIKCD_B_CODE 			VARCHAR(10),		/*입력값 : 사무실 소재지 시군구 법정동코드로서 10자리 코드*/
    IN IN_ADDR 					VARCHAR(255),		/*입력값 : 사무실 소재지 상세주소*/
    IN IN_LNG 					DECIMAL(12,9),		/*입력값 : 사무실 좌표 경도*/
    IN IN_LAT 					DECIMAL(12,9),		/*입력값 : 사무실 좌표 위도*/
    IN IN_CONTACT 				VARCHAR(100),		/*입력값 : 사무실 연락처*/
    IN IN_TRMT_BIZ_CODE 		VARCHAR(4),			/*입력값 : 사업자 분류코드로서 WSTE_TRMT_BIZ에 등록된 종류별 코드임*/
    IN IN_BIZ_REG_CODE 			VARCHAR(12),		/*입력값 : 사업자번호*/
	IN IN_AGREE_TERMS			TINYINT,			/*입력값 : 약관동의여부(동의시 1)*/
	IN IN_SOCIAL_NO				VARCHAR(20),		/*입력값 : 주민등록번호*/
    IN IN_BIZ_REG_IMG_PATH		VARCHAR(255),		/*입력값 : 사업자 분류코드로서 WSTE_TRMT_BIZ에 등록된 종류별 코드임*/
	IN IN_CONTACT_PATH			INT					/*입력값 : 접속경로*/
    )
BEGIN

/*
Procedure Name 	: sp_create_company
Input param 	: 13개
Job 			: 사업자 생성을 한 후 기본 사이트 1개를 추가해주는 로직으로 변경(사업자 기반에서 사업자가 개설한 사이트 기반으로 중심 변경)
Update 			: 2022.02.11
Version			: 0.0.7
AUTHOR 			: Leo Nam
Change			: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.6)
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_SITE_ID							BIGINT		 	DEFAULT NULL;
	DECLARE VAR_USER_ID							BIGINT		 	DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    /*사이트가 소재하는 주소지에 대한 위도 경도값은 NULL처리 한다.*/
    
    CALL sp_create_company_without_handler(
		IN_USER_REG_ID,
		IN_PWD,
		IN_USER_NAME,
		IN_PHONE,
		IN_COMP_NAME,
		IN_REP_NAME,
		IN_KIKCD_B_CODE,
		IN_ADDR,
		IN_LNG,
		IN_LAT,
		IN_CONTACT,
		IN_TRMT_BIZ_CODE,
		IN_BIZ_REG_CODE,
		IN_BIZ_REG_IMG_PATH,
		IN_SOCIAL_NO,
		IN_AGREE_TERMS,
		IN_CONTACT_PATH,
		rtn_val,
		msg_txt,
		VAR_SITE_ID,
		VAR_USER_ID
    );
    
    IF rtn_val = 0 THEN
	/*사업자 개설에 성공한 경우*/
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'SITE_ID'			, VAR_SITE_ID,
                'USER_REG_ID'		, VAR_USER_ID
			)
		) 
        INTO json_data;
    ELSE
	/*사업자 개설에 실패한 경우*/
		SET json_data 		= NULL;
		SIGNAL SQLSTATE '23000';
    END IF;
	COMMIT;    
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_company_without_handler`(
	IN IN_USER_REG_ID 		VARCHAR(50),		/*입력값 : 관리자아이디*/
    IN IN_PWD 				VARCHAR(100),		/*입력값 : 관리자암호*/
    IN IN_USER_NAME 		VARCHAR(20),		/*입력값 : 관리자이름*/
    IN IN_PHONE 			VARCHAR(20),		/*입력값 : 관리자 핸드폰 번호*/
    IN IN_COMP_NAME 		VARCHAR(100),		/*입력값 : 사업자 상호*/
    IN IN_REP_NAME 			VARCHAR(50),		/*입력값 : 대표자 이름*/
    IN IN_KIKCD_B_CODE 		VARCHAR(10),		/*입력값 : 사무실 소재지 시군구 법정동코드로서 10자리 코드*/
    IN IN_ADDR 				VARCHAR(300),		/*입력값 : 사무실 소재지 상세주소*/
    IN IN_LNG		 		DECIMAL(12,9),		/*입력값 : 사업자 소재지의 경도값*/
    IN IN_LAT		 		DECIMAL(12,9),		/*입력값 : 사업자 소재지의 위도값*/
    IN IN_CONTACT 			VARCHAR(100),		/*입력값 : 사무실 연락처*/
    IN IN_TRMT_BIZ_CODE 	VARCHAR(4),			/*입력값 : 사업자 분류코드로서 WSTE_TRMT_BIZ에 등록된 종류별 코드임*/
    IN IN_BIZ_REG_CODE 		VARCHAR(12),		/*입력값 : 사업자번호*/
    IN IN_BIZ_REG_IMG_PATH	VARCHAR(255),		/*입력값 : 사업자번호*/
	IN IN_SOCIAL_NO			VARCHAR(20),		/*입력값 : 주민등록번호*/
	IN IN_AGREE_TERMS		TINYINT,			/*입력값 : 약관동의여부(동의시 1)*/
	IN IN_CONTACT_PATH		INT,				/*입력값 : 서비스접속경로*/
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(200),		/*출력값 : 처리결과 문자열*/
    OUT OUT_SITE_ID			BIGINT,				/*출력값 : 사업자 사이트 등록 고유번호*/
    OUT OUT_USER_ID			BIGINT				/*출력값 : 사용자 등록 고유번호*/
    )
BEGIN

/*
Procedure Name 	: sp_create_company_without_handler
Input param 	: 13개
Output param 	: 3개
Job 			: COMPANY테이블과 USERS테이블에 각각 입력 PARAM값을 분리하여 INSERT 하는 작업을 수행(COMMIT)하며 중도에 에러발생시 예외처리코드 반환함
				: 이 프로시저를 호출한 프로시저에서 처리결과값을 받아서 예외처리해야 함
				: 사업자에 대한 기본 사이트 개설 기능 추가
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.27
Version			: 0.0.4
AUTHOR 			: Leo Nam
Changes			: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.4)
*/
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_CREATOR_REG_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_P_COMP_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_COMP_MAX_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_MAX_SITE_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_SITE_REG_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_USER_MAX_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_USER_CURRENT_TYPE				INT		 		DEFAULT NULL;
    
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    SET IN_AGREE_TERMS = TRUE;
    IF IN_AGREE_TERMS = TRUE THEN
    /*약관에 동의한 경우 정상처리한다.*/
		CALL sp_req_use_same_company_reg_id(
			IN_BIZ_REG_CODE, 
			rtn_val, 
			msg_txt
		);
		/*체크할 사업자등록번호로 등록된 사업자가 존재하는지 체크한 후 
        존재한다면 1, 
        그렇지 않으면 0을 반환하게 됨*/
		
		IF rtn_val = 0 THEN
		/*같은 사업자등록번호를 가진 사업자가 존재하지 않는 경우에는 정상처리 진행한다.*/ 
			
			CALL sp_req_user_exists(
				IN_USER_REG_ID, 
				TRUE, 
				rtn_val, 
				msg_txt
			);
			/*IN_USER_REG_ID가 이미 등록되어 있는 사용자인지 체크한다. 
            등록되어 있는 경우에는 @USER_EXISTS = 1, 
            그렇지 않은 경우에는 @USER_EXISTS = 0을 반환한다.*/
			/*이미 등록되어 있는 사용자인 경우에는 관리자(member.admin)인지 검사한 후 
            member.admin인 경우에는 사업자 생성권한을 부여하고 
            그렇지 않은 경우에는 예외처리한다.*/
			/*등록되어 있지 않은 경우에는 신규사업자 생성으로 간주하고 정상처리 진행한다.*/
			
			IF rtn_val = 0 THEN
			/*이미 등록되어 있는 사용자인 경우에는 관리자(member.admin)인지 검사한 후 
            member.admin인 경우에는 사업자 생성권한을 부여하고 
            그렇지 않은 경우에는 예외처리한다.*/
				CALL sp_req_user_regid_by_user_id(
					IN_USER_REG_ID,
                    OUT_USER_ID
                );
                SET VAR_CREATOR_REG_ID = OUT_USER_ID;
				CALL sp_member_admin_account_exists(
					IN_USER_REG_ID, 
					rtn_val, 
					msg_txt
				);
				
				IF rtn_val = 0 THEN
				/*사용자에게 사업자를 생성할 권한이 있는 경우*/
					CALL sp_req_comp_max_id(VAR_COMP_MAX_ID);
                    CALL sp_req_comp_id_of_user_by_id(
						VAR_CREATOR_REG_ID,
                        VAR_P_COMP_ID
                    );
					CALL sp_insert_company(
						VAR_COMP_MAX_ID, 
						IN_COMP_NAME, 
						IN_REP_NAME, 
						IN_KIKCD_B_CODE, 
						IN_ADDR, 
						IN_LNG, 
						IN_LAT, 
						IN_CONTACT, 
						IN_TRMT_BIZ_CODE, 
						IN_BIZ_REG_CODE, 
						IN_BIZ_REG_IMG_PATH, 
						VAR_P_COMP_ID, 
						VAR_REG_DT, 
						VAR_REG_DT, 
						rtn_val, 
						msg_txt
					);
				
					IF rtn_val = 0 THEN
					/*사업자 레코드가 정상적으로 생성된 경우 기본 사이트 개설 절차를 진행한다.*/
						CALL sp_req_comp_site_max_id(
							VAR_MAX_SITE_ID
						);
						/*지금 개설할 사이트를 위한 고유번호(COMP_SITE.ID)로 사용할 ID를 VAR_MAX_SITE_ID를 통하여 반환한다.*/
						CALL sp_create_site_without_handler(
							VAR_CREATOR_REG_ID, 
							VAR_COMP_MAX_ID, 
							IN_KIKCD_B_CODE, 
							IN_ADDR, 
							VAR_MAX_SITE_ID, 
							IN_COMP_NAME, 
							0, 
							VAR_REG_DT, 
							IN_CONTACT, 
							IN_TRMT_BIZ_CODE, 
							IN_LNG, 
							IN_LAT, 
							TRUE, 
							VAR_SITE_REG_ID, 
							rtn_val, 
							msg_txt
						);
						IF rtn_val = 0 THEN
							SET rtn_val = 0;
							SET msg_txt = 'Success3';
							SET OUT_SITE_ID = VAR_SITE_REG_ID;
						END IF;
					END IF;
				END IF;
			ELSE
			/*등록되어 있지 않은 경우에는 신규사업자 생성으로 간주하고 정상처리 진행한다.*/

				CALL sp_req_use_same_phone(
					IN_PHONE, 
					0, 
					TRUE, 
					rtn_val, 
					msg_txt
				);

				/*등록하려는 핸드폰이 이미 등록되어 있다면 @CHK_COUNT=1, 아니면 @CHK_COUNT=0*/
				IF rtn_val = 0 THEN
				/*등록하려는 핸드폰이 등록되어 있지 않은 경우*/
					CALL sp_req_comp_max_id(VAR_COMP_MAX_ID);
                    SET VAR_P_COMP_ID = 0;
					CALL sp_insert_company(
						VAR_COMP_MAX_ID, 
						IN_COMP_NAME, 
						IN_REP_NAME, 
						IN_KIKCD_B_CODE, 
						IN_ADDR, 
						IN_LNG, 
						IN_LAT, 
						IN_CONTACT, 
						IN_TRMT_BIZ_CODE, 
						IN_BIZ_REG_CODE, 
						IN_BIZ_REG_IMG_PATH, 
						VAR_P_COMP_ID, 
						VAR_REG_DT, 
						VAR_REG_DT, 
						rtn_val, 
						msg_txt
					);
				
					IF rtn_val = 0 THEN
					/*사업자 레코드가 정상적으로 생성된 경우에는 사용자 계정 생성과정을 정상처리 진행한다.*/
						CALL sp_req_user_max_id(VAR_USER_MAX_ID);
						SET OUT_USER_ID = VAR_USER_MAX_ID;
                        
                        SELECT USER_TYPE INTO VAR_USER_CURRENT_TYPE
                        FROM WSTE_TRMT_BIZ
                        WHERE CODE = IN_TRMT_BIZ_CODE;
                        
						CALL sp_insert_user(
							VAR_USER_MAX_ID, 
							IN_USER_REG_ID, 
							IN_PWD, 
							IN_USER_NAME, 
							IN_PHONE, 
							VAR_COMP_MAX_ID, 
							NULL, 
							201, 
							NULL, 
							IN_SOCIAL_NO, 
							IN_AGREE_TERMS, 
							VAR_REG_DT, 
							VAR_REG_DT, 
							VAR_USER_CURRENT_TYPE, 
							IN_CONTACT_PATH, 
							rtn_val, 
							msg_txt
						);
						IF rtn_val = 0 THEN
						/*사용자 레코드가 정상적으로 생성된 경우에는 정상처리 진행한다.*/  
							CALL sp_req_comp_site_max_id(
								VAR_MAX_SITE_ID
							);
							/*지금 개설할 사이트를 위한 고유번호(COMP_SITE.ID)로 사용할 ID를 VAR_MAX_SITE_ID를 통하여 반환한다.*/
							CALL sp_create_site_without_handler(
								VAR_USER_MAX_ID, 
								VAR_COMP_MAX_ID, 
								IN_KIKCD_B_CODE, 
								IN_ADDR, 
								VAR_MAX_SITE_ID, 
								IN_COMP_NAME, 
								0, 
								VAR_REG_DT, 
								IN_CONTACT, 
								IN_TRMT_BIZ_CODE, 
								IN_LNG, 
								IN_LAT, 
								TRUE, 
								VAR_SITE_REG_ID, 
								rtn_val, 
								msg_txt
							);
							IF rtn_val = 0 THEN
							/*사이트가 정상적으로 개설된 경우*/
								SET OUT_SITE_ID = VAR_SITE_REG_ID;
								UPDATE USERS 
                                SET 
									AFFILIATED_SITE 	= VAR_SITE_REG_ID,
                                    UPDATED_AT			= VAR_REG_DT
                                WHERE ID = VAR_USER_MAX_ID;
								/*신규사용자의 소속 사이트(AFFILIATED_SITE)를 현재 생성된 사이트로 업데이트 한다.*/
								
								IF ROW_COUNT() = 1 THEN
								/*사용자의 소속 사이트 정보에 대한 업데이트가 성공한 경우*/
									SET rtn_val = 0;
									SET msg_txt = 'Success1';
									/*사용자 레코드가 정상적으로 생성된 경우에는 최종 COMMIT 처리하여 레코드 생성을 확인한다.*/
									/*0을 반환함으로써 모든 트랜잭션이 성공하였음을 알린다.*/
								ELSE
								/*사용자의 소속 사이트 정보에 대한 업데이트가 실패한 경우*/
									SET rtn_val = 20003;
									SET msg_txt = 'Failed to modify affiliated site information';
								END IF;
							END IF;
						END IF;
					ELSE  
					/*사업자 레코드가 정상적으로 생성되지 않은 경우에는 ROLLBACK처리한다.*/
						SET rtn_val = 20002;
						SET msg_txt = 'company record creation failed';
					END IF;
				END IF;
			END IF;
		END IF;
    ELSE
    /*약관에 동의하지 않은 경우 예외처리한다.*/ 
		SET rtn_val = 20001;
		SET msg_txt = 'not agree to the terms';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_order_code`(
	IN IN_REG_DT					DATETIME,					/*입력값 : 등록일자*/
    OUT OUT_ORDER_CODE 				VARCHAR(10)					/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_create_order_code
Input param 	: 1개
Job 			: 오더 코드를 작성한다.
Update 			: 2022.04.10
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    DECLARE VAR_YEAR 				VARCHAR(10) DEFAULT NULL;
    DECLARE VAR_MONTH 				VARCHAR(10) DEFAULT NULL;
    DECLARE VAR_YEAR_MONTH			VARCHAR(10) DEFAULT NULL;
    DECLARE VAR_MONTH_COUNT_TEMP	INT 		DEFAULT NULL;
    DECLARE VAR_MONTH_COUNT			INT 		DEFAULT NULL;
    
	SET VAR_YEAR = RIGHT(YEAR(IN_REG_DT), 2);
	IF MONTH(IN_REG_DT) < 10 THEN
		SET VAR_MONTH = CONCAT('0', MONTH(IN_REG_DT));
	ELSE
		SET VAR_MONTH = MONTH(IN_REG_DT);
	END IF;
    
    SET VAR_YEAR_MONTH = CONCAT(VAR_YEAR, VAR_MONTH);
    SELECT COUNT(ID) INTO VAR_MONTH_COUNT_TEMP
    FROM SITE_WSTE_DISPOSAL_ORDER 
    WHERE 
		YEAR(IN_REG_DT) 	= YEAR(CREATED_AT) AND 
        MONTH(IN_REG_DT) 	= MONTH(CREATED_AT);
        
	SET VAR_MONTH_COUNT = VAR_MONTH_COUNT_TEMP + 1;
	IF VAR_MONTH_COUNT < 10 THEN
		SET OUT_ORDER_CODE = CONCAT(VAR_YEAR_MONTH, '-0000', VAR_MONTH_COUNT);
    ELSE
		IF VAR_MONTH_COUNT < 100 THEN
			SET OUT_ORDER_CODE = CONCAT(VAR_YEAR_MONTH, '-000', VAR_MONTH_COUNT);
		ELSE
			IF VAR_MONTH_COUNT < 1000 THEN
				SET OUT_ORDER_CODE = CONCAT(VAR_YEAR_MONTH, '-00', VAR_MONTH_COUNT);
			ELSE
				IF VAR_MONTH_COUNT < 10000 THEN
					SET OUT_ORDER_CODE = CONCAT(VAR_YEAR_MONTH, '-0', VAR_MONTH_COUNT);
				ELSE
					SET OUT_ORDER_CODE = CONCAT(VAR_YEAR_MONTH, '-', VAR_MONTH_COUNT);
				END IF;
			END IF;
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_question`(
	IN IN_PHONE					VARCHAR(45),
    IN IN_EMAIL					VARCHAR(100),
    IN IN_QUEST_CLASS			INT,
    IN IN_CONTENTS				VARCHAR(255)
)
BEGIN

/*
Procedure Name 	: sp_create_question
Input param 	: 4개
Job 			: 문의하기 내용 입력하기
Update 			: 2022.01.27
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.2)
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(VAR_REG_DT);
	INSERT INTO QUESTIONS (
		PHONE, 
        EMAIL, 
        QUEST_CLASS, 
        CONTENTS,
        CREATED_AT,
        UPDATED_AT
	) 
	VALUES (
		IN_PHONE, 
        IN_EMAIL, 
        IN_QUEST_CLASS, 
        IN_CONTENTS,
        VAR_REG_DT,
        VAR_REG_DT
	);
    
    IF ROW_COUNT() = 1 THEN    
		SET rtn_val 		= 0;
		SET msg_txt 		= 'success';
		SET json_data 		= NULL;
    ELSE
		SET rtn_val 		= 25501;
		SET msg_txt 		= 'writing failure';
		SET json_data 		= NULL;
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_site`(
	IN IN_USER_ID			BIGINT,				/*입력값 : 사이트 등록자 아이디(USER.ID)*/
	IN IN_COMP_ID			BIGINT,				/*입력값 : 사업자 고유등록번호*/
	IN IN_KIKCD_B_CODE		VARCHAR(10),		/*입력값 : 사이트가 소재하는 주소지에 대한 시군구 법정동코드*/
	IN IN_ADDR				VARCHAR(255),		/*입력값 : 사이트가 소재하는 주소지에 대한 시군구 주소를 제외한 상세주소*/
	IN IN_SITE_NAME			VARCHAR(255),		/*입력값 : 사이트 이름*/
	IN IN_CONTACT			VARCHAR(100)		/*입력값 : 사이트 연락처*/
)
BEGIN

/*
Procedure Name 	: sp_create_site
Input param 	: 6개
Job 			: 예외처리 핸들러를 가지고 사이트를 개설하는 경우로서 사용자가 사이트를 추가로 개설하려는 경우에 사용한다.
				: 최초의 사이트는 사업자 개설시 자동으로 1개소가 개설됨
Update 			: 2022.01.27
Version			: 0.0.6
AUTHOR 			: Leo Nam
Change			: Creator 정보 입력 부분 삭제(0.0.3)
				: 기존 사업자 고유등록정보를 INPUT PARAM으로 받는 방식에서 사업자등록번호를 INPUT PARAM으로 받아서 사업자를 식별하는 방식으로 변경
				: 사업자등록번호를 사업자고유등록번호(COMPANY.ID)로 변경
				: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.6)
				: 사이트의 최초 환경설정 기능 추가(0.0.6)
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_LAT								DECIMAL(12,9) 	DEFAULT NULL;
	DECLARE VAR_LNG								DECIMAL(12,9) 	DEFAULT NULL;
	DECLARE VAR_HEAD_OFFICE						TINYINT		 	DEFAULT NULL;
	DECLARE VAR_PERMISSION						INT			 	DEFAULT NULL;
	DECLARE VAR_IS_SITE_HEAD_OFFICE				TINYINT		 	DEFAULT NULL;
	DECLARE VAR_MAX_SITE_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_SITE_REG_ID						BIGINT		 	DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    SET VAR_LAT = NULL, VAR_LNG = NULL;
    /*사이트 소재지의 위경도는 NULL값으로 하고 시스템 관리자에 의하여 그 값(위경도 계산 API 사용하여 일괄적으로 처리)이 정해짐*/
    
    SET VAR_HEAD_OFFICE = FALSE;
    /*추가로 개설되는 사이트는 모두 HEAD_OFFICE가 아님*/
    /*HEAD_OFFICE는 삭제가 불가능하고 사업자를 삭제하는 경우에만 삭제가 되므로 사업자는 최소 1개의 사이트를 가지게 됨*/
    
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,			/*사이트를 개설하려는 자의 고유등록번호*/
        TRUE,					/*ACTIVE가 TRUE인 상태(활성화 상태)인 사용자에 한정*/
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우*/           
		CALL sp_req_whether_site_is_open(
		/*사업자가 추가로 사이트를 개설할 수 있는지 여부를 반환한다.*/
			IN_COMP_ID,
			rtn_val,
			msg_txt
		);
		
		IF rtn_val = 0 THEN
		/*사업자가 추가로 사이트를 개설할 수 있는 경우*/
			CALL sp_req_super_permission_by_userid(
				IN_USER_ID,
				IN_COMP_ID,
				VAR_PERMISSION,
				VAR_IS_SITE_HEAD_OFFICE,
				rtn_val,
				msg_txt
			);
			
			IF VAR_PERMISSION = 1 OR VAR_PERMISSION = 2 OR ((VAR_PERMISSION = 3 OR VAR_PERMISSION = 5) AND VAR_IS_SITE_HEAD_OFFICE = TRUE) THEN
			/*사이트를 개설할 권한이 있는 경우*/
			/*1. 치움서비스의 관리자 그룹에 속하는 사용자인 경우*/
			/*2. 사용자가 속한 사이트가 HEAD OFFICE이면서 사용자의 권한이 201인 경우*/
				CALL sp_req_comp_site_max_id(
					VAR_MAX_SITE_ID
				);
				/*지금 개설할 사이트를 위한 고유번호(COMP_SITE.ID)로 사용할 ID를 VAR_MAX_SITE_ID를 통하여 반환한다.*/
            
				CALL sp_create_site_without_handler(
					IN_USER_ID,
                    IN_COMP_ID,
					IN_KIKCD_B_CODE,
					IN_ADDR,
					VAR_MAX_SITE_ID,
					IN_SITE_NAME,
                    NULL,
					VAR_REG_DT,
					IN_CONTACT,
					VAR_LAT,
					VAR_LNG,
					VAR_HEAD_OFFICE,
					VAR_SITE_REG_ID,
					rtn_val,
					msg_txt
                );
				
				IF rtn_val = 0 THEN
				/*사이트 개설에 성공한 경우*/
					CALL sp_create_site_configuration(
                    /*사이트에 대한 최초의 환경설정을 한다.*/
						VAR_SITE_REG_ID,
						rtn_val,
						msg_txt
                    );
                    IF rtn_val > 0 THEN
                    /*사이트의 환경설정에 실패한 경우*/
						SIGNAL SQLSTATE '23000';
                    END IF;
				ELSE
				/*사이트 개설에 실패한 경우*/
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*사이트를 개설할 권한이 없는 경우*/
				SET rtn_val 		= 21401;
				SET msg_txt 		= 'No authority to open a site';
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
		/*사업자가 추가로 사이트를 개설할 수 없는 경우*/
			SIGNAL SQLSTATE '23000';
		END IF;
	ELSE
    /*사용자가 존재하지 않는 경우*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_site_configuration`(
    IN IN_SITE_ID				BIGINT,						/*사이트 고유등록번호(COMP_SITE.ID)*/
    IN IN_REG_DT				DATETIME,					/*생성일시*/
	OUT rtn_val					INT,						/*출력값 : 처리결과 코드*/
	OUT msg_txt 				VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_create_site_configuration
Input param 	: 1개
Job 			: 최초의 환경설정을 구성한다.
Update 			: 2022.01.27
Version			: 0.0.2
AUTHOR 			: Leo Nam
Changes			: Create_Site에 삽입가능하도록 Nested Procedure Type으로 변경(0.0.2)
*/
    
	INSERT INTO SITE_CONFIGURATION (
		SITE_ID, 
        NOTICE, 
        PUSH, 
        CREATED_AT, 
        UPDATED_AT
	) 
	VALUES (
		IN_SITE_ID, 
        TRUE, 
        TRUE, 
        IN_REG_DT, 
        IN_REG_DT
	);
    IF ROW_COUNT() = 1 THEN
		SET rtn_val 		= 0;
		SET msg_txt 		= 'Success';
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SET rtn_val 		= 24901;
		SET msg_txt 		= 'user account does not exist';
		SIGNAL SQLSTATE '23000';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_site_without_handler`(
	IN IN_USER_ID			BIGINT,				/*입력값 : 사이트 등록자 아이디(USER.ID)*/
	IN IN_COMP_ID			BIGINT,				/*입력값 : 사업자 고유등록번호*/
	IN IN_KIKCD_B_CODE		VARCHAR(10),		/*입력값 : 사이트가 소재하는 주소지에 대한 시군구 법정동코드*/
	IN IN_ADDR				VARCHAR(255),		/*입력값 : 사이트가 소재하는 주소지에 대한 시군구 주소를 제외한 상세주소*/
	IN IN_SITE_ID			BIGINT,				/*입력값 : 사이트 등록번호*/
	IN IN_SITE_NAME			VARCHAR(255),		/*입력값 : 사이트 이름*/
	IN IN_SITE_ORDER		INT,				/*입력값 : 활성화된 사이트 개설순서*/
	IN IN_REG_DT			DATETIME,			/*입력값 : 레코드 생성일시*/
	IN IN_CONTACT			VARCHAR(100),		/*입력값 : 사이트 연락처*/
	IN IN_TRMT_BIZ_CODE		VARCHAR(4),			/*입력값 : 사업자 분류코드로서 WSTE_TRMT_BIZ에 등록된 종류별 코드임*/
    IN IN_LNG				DECIMAL(12,9),		/*입력값 : 사이트가 소재하는 주소의 경도값*/
    IN IN_LAT				DECIMAL(12,9),		/*입력값 : 사이트가 소재하는 주소의 위도값*/
    IN IN_HEAD_OFFICE		TINYINT,			/*입력값 : 최초로 사업자가 개설될 때 동시에 개설되는 사이트는 TRUE, 추가로 개설되는 사이트는 FALSE 값을 가지게 됨*/
	OUT OUT_SITE_REG_ID		BIGINT,				/*출력값 : 사이트고유등록번호가 반환함*/
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_create_site_without_handler
Input param 	: 11개
Output param 	: 3개
Job 			: IN_COMP_REG_CODE를 사업자 등록번호로 사용하는 사이트를 개설한다.
				: 최초의 사이트(HEAD_OFFICE)를 생성할때만 사용해야 함.
				: 추가 사이트를 생성하는 경우에는 sp_create_site를 사용해야 함.
				: 사이트가 주로 사업을 영위하는 사무소로서의 지위를 가질수 있도록 관리정보를 확장함.
Update 			: 2022.02.19
Version			: 0.0.4
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_MAX_SITE_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_LAT_VALID						TINYINT		 	DEFAULT NULL;
	DECLARE VAR_LNG_VALID						TINYINT		 	DEFAULT NULL;
	DECLARE VAR_BCODE_VALID						TINYINT		 	DEFAULT NULL;
	DECLARE VAR_TRMT_BIZ_CODE_VALID				TINYINT		 	DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_COUNT_OF_SIGUNGU_ADDED			INT	 			DEFAULT 0;

	SET VAR_MAX_SITE_ID = IN_SITE_ID;
    CALL sp_check_if_lat_valid(
		IN_LAT,
        VAR_LAT_VALID
    );
    IF VAR_LAT_VALID = 1 THEN
		CALL sp_check_if_lng_valid(
			IN_LNG,
			VAR_LNG_VALID
		);
		IF VAR_LNG_VALID = 1 THEN
			CALL sp_check_if_bcode_valid(
				IN_KIKCD_B_CODE,
				VAR_BCODE_VALID
			);
			IF VAR_BCODE_VALID = 1 THEN
				CALL sp_check_if_trmt_biz_code_valid(
					IN_TRMT_BIZ_CODE,
					VAR_TRMT_BIZ_CODE_VALID
				);
				IF VAR_TRMT_BIZ_CODE_VALID = 1 THEN
					INSERT INTO COMP_SITE(
						ID,
						COMP_ID,
						KIKCD_B_CODE,
						ADDR,
						CONTACT,
						LNG,
						LAT,
						SITE_NAME,
						ACTIVE,
						TRMT_BIZ_CODE,
						CREATOR_ID,
						HEAD_OFFICE,
						CREATED_AT,
						CONFIRMED_AT,
						UPDATED_AT
					) VALUES (
						VAR_MAX_SITE_ID,
						IN_COMP_ID,
						IN_KIKCD_B_CODE,
						IN_ADDR,
						IN_CONTACT,
						IN_LNG,
						IN_LAT,
						IN_SITE_NAME,
						TRUE,
						IN_TRMT_BIZ_CODE,
						IN_USER_ID,
						IN_HEAD_OFFICE,
						IN_REG_DT,
						IN_REG_DT,
						IN_REG_DT
					);
					
					IF ROW_COUNT() = 1 THEN
					/*사이트 개설에 성공한 경우*/
						CALL sp_insert_sigungu(
							VAR_MAX_SITE_ID, 
							CONCAT(LEFT(IN_KIKCD_B_CODE, 5), '00000'), 
							2, 		/*디폴트: 2, 무료: 1, 유료: 0*/
							VAR_REG_DT,
							VAR_COUNT_OF_SIGUNGU_ADDED
						);
						IF VAR_COUNT_OF_SIGUNGU_ADDED = 1 THEN
						/*영업지역에 대한 저장이 성공적인 경우*/
							SET OUT_SITE_REG_ID = VAR_MAX_SITE_ID;
							SET rtn_val = 0;
							SET msg_txt = 'success';
						ELSE
						/*영업지역에 대한 저장에 실패한 경우 예외처리한다.*/
							SET OUT_SITE_REG_ID = 0;
							SET rtn_val = 22402;
							SET msg_txt = 'Failed to set default region';
						END IF;
					ELSE
					/*사이트 개설에 실패한 경우*/
						SET OUT_SITE_REG_ID = 0;
						SET rtn_val = 22401;
						SET msg_txt = 'Failed to open site';
					END IF;
				ELSE
					SET OUT_SITE_REG_ID = 0;
					SET rtn_val = 22403;
					SET msg_txt = 'treatment business code is not valid';
				END IF;
            ELSE
				SET OUT_SITE_REG_ID = 0;
				SET rtn_val = 22404;
				SET msg_txt = 'bcode is not valid';
            END IF;
		ELSE
			SET OUT_SITE_REG_ID = 0;
			SET rtn_val = 22405;
			SET msg_txt = 'Longitude is not valid';
		END IF;
    ELSE
		SET OUT_SITE_REG_ID = 0;
		SET rtn_val = 22406;
		SET msg_txt = 'Latitue is not valid';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_site_wste_discharge_order`(
	IN IN_USER_ID					BIGINT,						/*입렦값 : 폐기물 배출 주체의 고유등록번호(USERS.ID)*/
	IN IN_COLLECTOR_SITE_ID			BIGINT,						/*입렦값 : 기존거래로 등록할 때 등록할 기존 업체 사이트의 고유등록번호(COMP_SITE.ID), 기존업체와의 거래가 아닌 경우에는 NULL 사용*/
	IN IN_KIKCD_B_CODE				VARCHAR(10),				/*입렦값 : 폐기물 배출지가 소재하는 소재지의 시군구코드(KIKCD_B.B_CODE)*/
	IN IN_ADDR						VARCHAR(200),				/*입렦값 : 폐기물 배출지가 소재하는 소재지의 시군구 이하 상세주소*/
	IN IN_LAT						DECIMAL(12,9),				/*입렦값 : 폐기물 발생지 위도값*/
	IN IN_LNG						DECIMAL(12,9),				/*입렦값 : 폐기물 발생지 경도값*/
	IN IN_VISIT_START_AT			DATETIME,					/*입렦값 : 폐기물 배출지에서 요구하는 방문시작일로서 NULL인 경우에는 방문 불필요*/
	IN IN_VISIT_END_AT				DATETIME,					/*입렦값 : 폐기물 배출지에서 요구하는 방문종료일로서 NULL인 경우에는 방문 불필요*/
	IN IN_BIDDING_END_AT			DATETIME,					/*입렦값 : 폐기물 처리 용역 입찰 종료일*/
	IN IN_OPEN_AT					DATETIME,					/*입렦값 : 폐기물 배출 시작일*/
	IN IN_CLOSE_AT					DATETIME,					/*입렦값 : 폐기물 배출 종료일*/
	IN IN_WSTE_CLASS				JSON,						/*입렦값 : 폐기물 배출지에서 배출되는 폐기물의 종류 리스트*/
	IN IN_PHOTO_LIST				JSON,						/*입렦값 : 폐기물 배출지에서 배출되는 폐기물의 사진 리스트*/
	IN IN_NOTE						VARCHAR(255)				/*입력값 : 폐기물 배출시 요청사항*/
)
BEGIN

/*
Procedure Name 	: sp_create_site_wste_discharge_order
Input param 	: 11개
Job 			: 폐기물 배출 작업 ORDER를 작성(SITE_WSTE_DISPOSAL_ORDER)한다.
Update 			: 2022.03.17
Version			: 0.0.9
AUTHOR 			: Leo Nam
Change			: 폐기물 배출 사이트의 고유등록번호도 저장하게 됨으로써 입력값으로 IN_SITE_ID 받아서 sp_insert_site_wste_discharge_order_without_handler에 전달해준다.
				: 폐기물 배출자의 타입을 프론트에서 입력받는 방식을 삭제하고 DB에서 구분을 하는 방식으로 전환(0.0.4)
				: 기존거래업체와의 재거래를 위한 컬럼 추가로 인한 로직 변경(0.0.5)
				: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.6)
				: VISIT_START_AT 칼럼 추가(0.0.7)
				: IN_VISIT_END_AT이 시간이 없이 날짜만 존재하는 경우에는 IN_VISIT_END_AT에 1일을 추가해준다.(0.0.9)
				: 사용자의 현재 타입에 따른 배출권한 제한(0.0.8)
*/
    DECLARE json_data											JSON DEFAULT NULL;
    DECLARE rtn_val												INT DEFAULT 0;
    DECLARE msg_txt												VARCHAR(200) DEFAULT NULL;
    DECLARE REG_DT												DATETIME DEFAULT NOW();
    DECLARE VAR_VISIT_END_AT									DATETIME DEFAULT NULL;
    DECLARE JSON_PUSH_INFO										JSON DEFAULT NULL;
    DECLARE VAR_REF_DATE										DATETIME DEFAULT NULL;
    DECLARE DURATION_BIDDING_END_DATE_AFTER_THE_VISIT_CLOSING	VARCHAR(20) DEFAULT NULL;
    DECLARE MAX_DISPOSAL_DURATION								VARCHAR(20) DEFAULT NULL;
    DECLARE VAR_BIDDING_END_AT									DATETIME DEFAULT NULL;
    DECLARE VAR_CLOSE_AT										DATETIME DEFAULT NULL;
    DECLARE VAR_OPEN_AT											DATETIME DEFAULT NULL;
    DECLARE VAR_DISPOSER_TYPE									VARCHAR(20) DEFAULT NULL;
    DECLARE VAR_USER_SITE_ID									BIGINT DEFAULT NULL;
    DECLARE VAR_USER_CURRENT_TYPE_CODE							INT DEFAULT NULL;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*DISPOSER가 유효한 경우에는 정상처리한다.*/
		IF IN_VISIT_END_AT IS NOT NULL THEN
			SET VAR_VISIT_END_AT = CAST(CONCAT(DATE(IN_VISIT_END_AT), ' ', '23:59:55') AS DATETIME);
			SET VAR_REF_DATE = VAR_VISIT_END_AT;
		ELSE
			SET VAR_VISIT_END_AT = NULL;
			SET VAR_REF_DATE = REG_DT;
        END IF;
        
		IF IN_BIDDING_END_AT IS NOT NULL THEN
			SET VAR_BIDDING_END_AT = CAST(CONCAT(DATE(IN_BIDDING_END_AT), ' ', '23:59:59') AS DATETIME);
		ELSE
			CALL sp_req_policy_direction(
			/*입찰종료일을 자동결정하기 위하여 방문종료일로부터의 기간을 반환받는다. 입찰종료일일은 방문종료일 + duration_bidding_end_date_after_the_visit_closing으로 한다.1*/
				'duration_bidding_end_date_after_the_visit_closing',
				DURATION_BIDDING_END_DATE_AFTER_THE_VISIT_CLOSING
			);
			SET VAR_BIDDING_END_AT = ADDTIME(
				VAR_REF_DATE, 
				CONCAT(
					CAST(DURATION_BIDDING_END_DATE_AFTER_THE_VISIT_CLOSING AS UNSIGNED), 
					':00:00'
				)
			);
        END IF;
        
		IF IN_CLOSE_AT IS NOT NULL THEN
			SET VAR_CLOSE_AT = CAST(CONCAT(DATE(IN_CLOSE_AT), ' ', '23:59:59') AS DATETIME);
		ELSE
			CALL sp_req_policy_direction(
			/*입찰마감일로부터 배출종료일까지의 최소 소요기간(단위: day)을 반환받는다. 입찰종료일일은 방문종료일 + duration_bidding_end_date_after_the_visit_closing으로 한다.*/
				'max_disposal_duration',
				MAX_DISPOSAL_DURATION
			);
			SET VAR_CLOSE_AT = DATE_ADD(VAR_BIDDING_END_AT, INTERVAL CAST(MAX_DISPOSAL_DURATION AS UNSIGNED) DAY);
        END IF;
        
        IF IN_OPEN_AT IS NOT NULL THEN
			SET VAR_OPEN_AT = IN_OPEN_AT;
        ELSE
			SET VAR_OPEN_AT = REG_DT;
        END IF;
        
        SELECT USER_CURRENT_TYPE INTO VAR_USER_CURRENT_TYPE_CODE
		FROM USERS WHERE ID = IN_USER_ID;
        
        IF VAR_USER_CURRENT_TYPE_CODE = 2 THEN
        /*사용자의 현재 타입정보가 배출자인 경우에는 정상처리한다.*/
			SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID FROM USERS WHERE ID = IN_USER_ID;	
			IF VAR_USER_SITE_ID = 0 THEN
			/*배출자의 지위가 개인인 경우*/
				SET VAR_DISPOSER_TYPE = 'person';
				CALL sp_insert_site_wste_discharge_order_without_handler(
					IN_USER_ID,
					IN_COLLECTOR_SITE_ID,
					VAR_USER_SITE_ID,
					VAR_DISPOSER_TYPE,
					IN_KIKCD_B_CODE,
					IN_ADDR,
					IN_VISIT_START_AT,
					VAR_VISIT_END_AT,
					VAR_BIDDING_END_AT,
					VAR_OPEN_AT,
					VAR_CLOSE_AT,
					IN_WSTE_CLASS,
					IN_PHOTO_LIST,
					IN_NOTE,
					IN_LAT,
					IN_LNG,
					REG_DT,
					JSON_PUSH_INFO,
					rtn_val,
					msg_txt
				);
				IF rtn_val = 0 THEN
				/*프로시저 실행에 성공한 경우*/
					SET json_data = JSON_PUSH_INFO;
				ELSE
				/*프로시저 실행에 실패한 경우*/
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*배출자의 지위가 사업자(사이트)인 경우*/
				SET VAR_DISPOSER_TYPE = 'company';
				CALL sp_req_site_exists(
				/*사이트가 유효한지 검사한다.*/
					VAR_USER_SITE_ID,
					TRUE,
					rtn_val,
					msg_txt
				);
				IF rtn_val = 0 THEN
				/*사이트가 유효한 경우*/
					SET msg_txt = NULL;
					CALL sp_insert_site_wste_discharge_order_without_handler(
						IN_USER_ID,
						IN_COLLECTOR_SITE_ID,
						VAR_USER_SITE_ID,
						VAR_DISPOSER_TYPE,
						IN_KIKCD_B_CODE,
						IN_ADDR,
						IN_VISIT_START_AT,
						VAR_VISIT_END_AT,
						VAR_BIDDING_END_AT,
						VAR_OPEN_AT,
						VAR_CLOSE_AT,
						IN_WSTE_CLASS,
						IN_PHOTO_LIST,
						IN_NOTE,
						IN_LAT,
						IN_LNG,
						REG_DT,
						JSON_PUSH_INFO,
						rtn_val,
						msg_txt
					);
					IF rtn_val = 0 THEN
					/*프로시저 실행에 성공한 경우*/
						SET json_data = JSON_PUSH_INFO;
					ELSE
					/*프로시저 실행에 실패한 경우*/
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*사이트가 유효하지 않은 경우 예외처리 한다.*/
					SIGNAL SQLSTATE '23000';
				END IF;
			END IF;
        ELSE
        /*사용자의 현재 타입정보가 배출자가 아닌 경우에는 예외처리한다.*/
			SET rtn_val = 31001;
			SET msg_txt = 'Discharge is not possible with the current user type';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*CREATOR가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;   
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_site_wste_discharge_order_TEST`(
	IN IN_USER_ID					BIGINT,						/*입렦값 : 폐기물 배출 주체의 고유등록번호(USERS.ID)*/
	IN IN_COLLECTOR_SITE_ID			BIGINT,						/*입렦값 : 기존거래로 등록할 때 등록할 기존 업체 사이트의 고유등록번호(COMP_SITE.ID), 기존업체와의 거래가 아닌 경우에는 NULL 사용*/
	IN IN_KIKCD_B_CODE				VARCHAR(10),				/*입렦값 : 폐기물 배출지가 소재하는 소재지의 시군구코드(KIKCD_B.B_CODE)*/
	IN IN_ADDR						VARCHAR(200),				/*입렦값 : 폐기물 배출지가 소재하는 소재지의 시군구 이하 상세주소*/
	IN IN_LAT						DECIMAL(12,9),				/*입렦값 : 폐기물 발생지 위도값*/
	IN IN_LNG						DECIMAL(12,9),				/*입렦값 : 폐기물 발생지 경도값*/
	IN IN_VISIT_START_AT			DATETIME,					/*입렦값 : 폐기물 배출지에서 요구하는 방문시작일로서 NULL인 경우에는 방문 불필요*/
	IN IN_VISIT_END_AT				DATETIME,					/*입렦값 : 폐기물 배출지에서 요구하는 방문종료일로서 NULL인 경우에는 방문 불필요*/
	IN IN_BIDDING_END_AT			DATETIME,					/*입렦값 : 폐기물 처리 용역 입찰 종료일*/
	IN IN_OPEN_AT					DATETIME,					/*입렦값 : 폐기물 배출 시작일*/
	IN IN_CLOSE_AT					DATETIME,					/*입렦값 : 폐기물 배출 종료일*/
	IN IN_WSTE_CLASS				JSON,						/*입렦값 : 폐기물 배출지에서 배출되는 폐기물의 종류 리스트*/
	IN IN_PHOTO_LIST				JSON,						/*입렦값 : 폐기물 배출지에서 배출되는 폐기물의 사진 리스트*/
	IN IN_NOTE						VARCHAR(255)				/*입력값 : 폐기물 배출시 요청사항*/
)
BEGIN

/*
Procedure Name 	: sp_create_site_wste_discharge_order
Input param 	: 11개
Job 			: 폐기물 배출 작업 ORDER를 작성(SITE_WSTE_DISPOSAL_ORDER)한다.
Update 			: 2022.03.17
Version			: 0.0.9
AUTHOR 			: Leo Nam
Change			: 폐기물 배출 사이트의 고유등록번호도 저장하게 됨으로써 입력값으로 IN_SITE_ID 받아서 sp_insert_site_wste_discharge_order_without_handler에 전달해준다.
				: 폐기물 배출자의 타입을 프론트에서 입력받는 방식을 삭제하고 DB에서 구분을 하는 방식으로 전환(0.0.4)
				: 기존거래업체와의 재거래를 위한 컬럼 추가로 인한 로직 변경(0.0.5)
				: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.6)
				: VISIT_START_AT 칼럼 추가(0.0.7)
				: IN_VISIT_END_AT이 시간이 없이 날짜만 존재하는 경우에는 IN_VISIT_END_AT에 1일을 추가해준다.(0.0.9)
				: 사용자의 현재 타입에 따른 배출권한 제한(0.0.8)
*/
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET @json_data 		= NULL;
		CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(@REG_DT);
    SET @PUSH_INFO = NULL;
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		@rtn_val,
		@msg_txt
    );
    
    IF @rtn_val = 0 THEN
    /*DISPOSER가 유효한 경우에는 정상처리한다.*/
		IF IN_VISIT_END_AT IS NOT NULL THEN
			SET @VISIT_END_AT = CAST(CONCAT(DATE(IN_VISIT_END_AT), ' ', '23:59:55') AS DATETIME);
			SET @REF_DATE = @VISIT_END_AT;
		ELSE
			SET @VISIT_END_AT = NULL;
			SET @REF_DATE = @REG_DT;
        END IF;
        
		IF IN_BIDDING_END_AT IS NOT NULL THEN
			SET @BIDDING_END_AT = CAST(CONCAT(DATE(IN_BIDDING_END_AT), ' ', '23:59:59') AS DATETIME);
		ELSE
			CALL sp_req_policy_direction(
			/*입찰종료일을 자동결정하기 위하여 방문종료일로부터의 기간을 반환받는다. 입찰종료일일은 방문종료일 + duration_bidding_end_date_after_the_visit_closing으로 한다.1*/
				'duration_bidding_end_date_after_the_visit_closing',
				@duration_bidding_end_date_after_the_visit_closing
			);
			SET @BIDDING_END_AT = ADDTIME(
				@REF_DATE, 
				CONCAT(
					CAST(@duration_bidding_end_date_after_the_visit_closing AS UNSIGNED), 
					':00:00'
				)
			);
        END IF;
        
		IF IN_CLOSE_AT IS NOT NULL THEN
			SET @CLOSE_AT = CAST(CONCAT(DATE(IN_CLOSE_AT), ' ', '23:59:59') AS DATETIME);
		ELSE
			CALL sp_req_policy_direction(
			/*입찰마감일로부터 배출종료일까지의 최소 소요기간(단위: day)을 반환받는다. 입찰종료일일은 방문종료일 + duration_bidding_end_date_after_the_visit_closing으로 한다.*/
				'max_disposal_duration',
				@max_disposal_duration
			);
			SET @CLOSE_AT = DATE_ADD(@BIDDING_END_AT, INTERVAL @max_disposal_duration DAY);
        END IF;
        
        IF IN_OPEN_AT IS NOT NULL THEN
			SET @OPEN_AT = IN_OPEN_AT;
        ELSE
			SET @OPEN_AT = @REG_DT;
        END IF;
        
        SELECT USER_CURRENT_TYPE INTO @USER_CURRENT_TYPE_CODE
		FROM USERS WHERE ID = IN_USER_ID;
        
        IF @USER_CURRENT_TYPE_CODE = 2 THEN
        /*사용자의 현재 타입정보가 배출자인 경우에는 정상처리한다.*/
			SELECT AFFILIATED_SITE INTO @USER_SITE_ID FROM USERS WHERE ID = IN_USER_ID;	
			IF @USER_SITE_ID = 0 THEN
			/*배출자의 지위가 개인인 경우*/
				SET @DISPOSER_TYPE 	= 'person';
				CALL sp_insert_site_wste_discharge_order_without_handler_TEST(
					IN_USER_ID,
					IN_COLLECTOR_SITE_ID,
					@USER_SITE_ID,
					@DISPOSER_TYPE,
					IN_KIKCD_B_CODE,
					IN_ADDR,
					IN_VISIT_START_AT,
					@VISIT_END_AT,
					@BIDDING_END_AT,
					@OPEN_AT,
					@CLOSE_AT,
					IN_WSTE_CLASS,
					IN_PHOTO_LIST,
					IN_NOTE,
					IN_LAT,
					IN_LNG,
					@REG_DT,
					@PUSH_INFO,
					@rtn_val,
					@msg_txt
				);
				IF @rtn_val = 0 THEN
				/*프로시저 실행에 성공한 경우*/
					SET @json_data = @PUSH_INFO;
					SET @rtn_val = 0;
					SET @msg_txt = 'Success';
				ELSE
				/*프로시저 실행에 실패한 경우*/
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*배출자의 지위가 사업자(사이트)인 경우*/
				SET @DISPOSER_TYPE = 'company';
				CALL sp_req_site_exists(
				/*사이트가 유효한지 검사한다.*/
					@USER_SITE_ID,
					TRUE,
					@rtn_val,
					@msg_txt
				);
				IF @rtn_val = 0 THEN
				/*사이트가 유효한 경우*/
					CALL sp_insert_site_wste_discharge_order_without_handler_TEST(
						IN_USER_ID,
						IN_COLLECTOR_SITE_ID,
						@USER_SITE_ID,
						@DISPOSER_TYPE,
						IN_KIKCD_B_CODE,
						IN_ADDR,
						IN_VISIT_START_AT,
						@VISIT_END_AT,
						@BIDDING_END_AT,
						@OPEN_AT,
						@CLOSE_AT,
						IN_WSTE_CLASS,
						IN_PHOTO_LIST,
						IN_NOTE,
						IN_LAT,
						IN_LNG,
						@REG_DT,
						@PUSH_INFO,
						@rtn_val,
						@msg_txt
					);
					IF @rtn_val = 0 THEN
					/*프로시저 실행에 성공한 경우*/
						SET @json_data = @PUSH_INFO;
						SET @rtn_val = 0;
						SET @msg_txt = 'Success';
					ELSE
					/*프로시저 실행에 실패한 경우*/
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*사이트가 유효하지 않은 경우 예외처리 한다.*/
					SIGNAL SQLSTATE '23000';
				END IF;
			END IF;
        ELSE
        /*사용자의 현재 타입정보가 배출자가 아닌 경우에는 예외처리한다.*/
			SET @rtn_val = 31001;
			SET @msg_txt = 'Discharge is not possible with the current user type';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*CREATOR가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;   
	CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_site_wste_discharged`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,						/*입력값 : SITE_WSTE_DISPOSAL_ID.ID*/
	IN REG_DT							DATETIME,					/*입력값 : 데이타 생성일시*/
	IN IN_JSON_DATA						JSON,						/*입력값 : 폐기물 등록 리스트*/
	OUT rtn_val							INT,						/*출력값 : 처리결과 코드*/
	OUT msg_txt 						VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_create_site_wste_discharged
Input param 	: 3개
Output param 	: 2개
Job 			: 배출자가 등록한 폐기물 대분류를 등록한다. 입력 데이타는 JSON(향후 1 이상의 데이타를 입력 받을 수 있으므로)으로 입력 받는다.
Update 			: 2022.01.22
Version			: 0.0.2
AUTHOR 			: Leo Nam
IN_JSON_DATA	: JSON 데이타에서 사용하는 KEY와 VALUE 타입
Change			: 입력값 IN_SITE_WSTE_REG_ID를 IN_DISPOSER_ORDER_ID로 변경함(0.0.2)
*/
    
    DECLARE vRowCount INT DEFAULT 0;
    DECLARE endOfRow TINYINT DEFAULT FALSE;
    
    DECLARE CUR_WSTE_CLASS_CODE INT;
    DECLARE CUR_WSTE_APPEARANCE INT;
    DECLARE CUR_UNIT VARCHAR(20);
    DECLARE CUR_QUANTITY FLOAT;
    
    DECLARE WSTE_CODE_CURSOR CURSOR FOR 
	SELECT WSTE_CLASS_CODE, WSTE_APPEARANCE, UNIT, QUANTITY 
    FROM JSON_TABLE(IN_JSON_DATA, "$[*]" COLUMNS(
    /*JSON 데이타에서 사용하는 KEY와 VALUE 타입*/
		WSTE_CLASS_CODE 		INT 							PATH "$.WSTE_CLASS_CODE",
		WSTE_APPEARANCE			INT			 					PATH "$.WSTE_APPEARANCE",
		UNIT 					ENUM('Kg','m³','식','전체견적가')	PATH "$.UNIT",
		QUANTITY 				FLOAT							PATH "$.QUANTITY"
	)) AS WSTE_LIST;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	OPEN WSTE_CODE_CURSOR;	
	cloop: LOOP
		FETCH WSTE_CODE_CURSOR 
        INTO 
			CUR_WSTE_CLASS_CODE,
			CUR_WSTE_APPEARANCE,
			CUR_UNIT,
			CUR_QUANTITY;   
        
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		SET vRowCount = vRowCount + 1;
        
		INSERT INTO 
        WSTE_DISCHARGED_FROM_SITE(
			DISPOSAL_ORDER_ID, 
            WSTE_CLASS, 
            WSTE_APPEARANCE, 
            QUANTITY, 
            UNIT,
            CREATED_AT,
            UPDATED_AT
		)
        VALUES(
			IN_DISPOSER_ORDER_ID, 
            CUR_WSTE_CLASS_CODE, 
            CUR_WSTE_APPEARANCE, 
            CUR_QUANTITY, 
            /*IF(CUR_UNIT = "전체견적가", '식', CUR_UNIT), */
            CUR_UNIT,
            REG_DT, 
            REG_DT
		);
        IF vRowCount > 0 THEN
        /*폐기물 정보가 존재하는 경우 경우*/
			IF ROW_COUNT() = 0 THEN
				SET rtn_val = 22701;
				SET msg_txt = 'Failed to enter waste information';
				LEAVE cloop;
			ELSE
				SET rtn_val = 0;
				SET msg_txt = 'Success';
			END IF;
        ELSE
        /*폐기물 정보가 없는 경우 예외처리한다.*/
			SET rtn_val = 22702;
			SET msg_txt = 'Waste information does not exist';
			LEAVE cloop;
        END IF;
	END LOOP;   
	CLOSE WSTE_CODE_CURSOR;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_site_wste_photo_information`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,
	IN IN_TRANSACTION_ID				BIGINT,
	IN IN_REG_DT						DATETIME,
	IN IN_CLASS_CODE					ENUM('입찰','처리'),
	IN IN_JSON_DATA						JSON,
	OUT rtn_val							INT,
	OUT msg_txt 						VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_create_site_wste_discharged
Input param 	: 3개
Output param 	: 2개
Job 			: 폐기물 배출 및 처리시 업로드 되는 사진에 대한 정보를 저장한다.
Update 			: 2022.01.22
Version			: 0.0.2
AUTHOR 			: Leo Nam
IN_JSON_DATA	: JSON 데이타에서 사용하는 KEY와 VALUE 타입
Change			: SITE_WSTE_REG_ID를 IN_DISPOSER_ORDER_ID로 변경(0.0.2)
				: WSTE_REGISTRATION_PHOTO의 SITE_WSTE_REG_ID 컬럼 이름도 DISPOSAL_ORDER_ID로 변경(0.0.2)
*/
    
    DECLARE vRowCount INT DEFAULT 0;
    DECLARE endOfRow TINYINT DEFAULT FALSE;
    
    DECLARE CUR_FILE_NAME 		VARCHAR(100);
    DECLARE CUR_IMG_PATH 		VARCHAR(255);
    DECLARE CUR_FILE_SIZE 		FLOAT;
    
    DECLARE PHOTO_CURSOR CURSOR FOR 
	SELECT FILE_NAME, IMG_PATH, FILE_SIZE 
    FROM JSON_TABLE(IN_JSON_DATA, "$[*]" COLUMNS(
    /*JSON 데이타에서 사용하는 KEY와 VALUE 타입*/
		FILE_NAME 				VARCHAR(100) 		PATH "$.FILE_NAME",
		IMG_PATH 				VARCHAR(255)		PATH "$.IMG_PATH",
		FILE_SIZE				FLOAT				PATH "$.FILE_SIZE"
	)) AS PHOTO_LIST;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	OPEN PHOTO_CURSOR;	
	cloop: LOOP
		FETCH PHOTO_CURSOR 
        INTO 
			CUR_FILE_NAME,
			CUR_IMG_PATH,
			CUR_FILE_SIZE;   
        
        IF CUR_IMG_PATH IS NOT NULL THEN
			SET vRowCount = vRowCount + 1;
			IF endOfRow THEN
				SET rtn_val = 0;
				SET msg_txt = 'Success';
				LEAVE cloop;
			END IF;
			
			INSERT INTO 
			WSTE_REGISTRATION_PHOTO(
				DISPOSAL_ORDER_ID, 
				FILE_NAME, 
				IMG_PATH, 
				FILE_SIZE, 
				ACTIVE,
				CLASS_CODE,
				CREATED_AT,
				UPDATED_AT,
				TRANSACTION_ID
			)
			VALUES(
				IN_DISPOSER_ORDER_ID, 
				CUR_FILE_NAME, 
				CUR_IMG_PATH, 
				CUR_FILE_SIZE, 
				TRUE, 
				IN_CLASS_CODE, 
				IN_REG_DT, 
				IN_REG_DT,
				IN_TRANSACTION_ID
			);
			
			IF ROW_COUNT() = 0 THEN
				SET rtn_val = 22801;
				SET msg_txt = 'Failed to insert uploaded images information';
				LEAVE cloop;
			ELSE
				SET rtn_val = 0;
				SET msg_txt = 'Success';
			END IF;
        ELSE
			SET rtn_val = 22802;
			SET msg_txt = 'image path should not be null';
			LEAVE cloop;
        END IF;
	END LOOP;   
	CLOSE PHOTO_CURSOR;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_transaction_info_in_process`(
	IN IN_USER_ID						BIGINT,								/*입력값 : 사용자의 고유등록번호(USERS.ID)*/
	IN IN_COLLECTOR_BIDDING_ID			BIGINT,								/*입력값 : COLLECTOR_BIDDING.ID*/
	IN IN_WSTE_CODE						VARCHAR(8),							/*입력값 : 폐기물 코드*/
	IN IN_WSTE_QUANTITY					FLOAT,								/*입력값 : 폐기물 중량(수량)*/
	IN IN_WSTE_PRICE_UNIT				FLOAT,								/*입력값 : 폐기물 처리 단가*/
	IN IN_WSTE_UNIT						ENUM('Kg','m³','식','전체견적가'),		/*입력값 : 폐기물 처리 단위*/
	IN IN_WSTE_TRMT_METHOD				VARCHAR(4),							/*입력값 : 폐기물 처리 방법*/
	IN IN_IMG_LIST						JSON,								/*입력값 : 처리사진 등록 리스트*/
	IN IN_COMPLETED_AT					DATETIME,							/*입력값 : 폐기물 처리일자*/
	OUT rtn_val							INT,								/*출력값 : 처리결과 코드*/
	OUT msg_txt 						VARCHAR(200)						/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_create_transaction_info_in_process
Input param 	: 9개
Output param 	: 2개
Job 			: 수거자가 자신이 처리한 폐기물에 대한 내역을 등록한다. 사진 데이타는 JSON으로 입력 받는다.
Update 			: 2022.01.25
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_USER_SITE_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT		 	DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_ID				BIGINT		 	DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT			 	DEFAULT NULL;
        
	CALL sp_req_user_exists_by_id(
    /*등록하려는 사용자의 유효성을 검사한다.*/
		IN_USER_ID, 
		TRUE, 
		rtn_val,
		msg_txt
	);
	
	IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우*/
		CALL sp_req_collector_bidding_exists(
        /*폐기물 처리작업이 존재하는지 검사한다.*/
			IN_COLLECTOR_BIDDING_ID,
            TRUE,
			rtn_val,
			msg_txt
        );
        IF rtn_val = 0 THEN
        /*트랜잭션이 존재하는 경우*/        
			CALL sp_req_site_id_of_user_reg_id(
			/*사용자가 소속한 사이트의 고유등록번호를 반환한다.*/
				IN_USER_ID,
				VAR_USER_SITE_ID,
				rtn_val,
				msg_txt
			);
			IF rtn_val = 0 THEN
			/*사이트가 정상(개인사용자는 제외됨)적인 경우*/
				CALL sp_req_site_id_of_collector_bidding(
				/*COLLECTOR_BIDDING의 수거자와 배출자에 대한 사이트 고유등록번호를 반환한다.*/
					IN_COLLECTOR_BIDDING_ID,
					VAR_DISPOSER_SITE_ID,
					VAR_COLLECTOR_SITE_ID
				);
				IF VAR_USER_SITE_ID = VAR_COLLECTOR_SITE_ID THEN
				/*사용자가 수거자 소속의 관리자인 경우*/
					CALL sp_req_user_class_by_user_reg_id(
					/*사이트의 관리자인 사용자의 권한을 반환한다.*/
						IN_USER_ID,
						VAR_USER_CLASS
					);
					IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
					/*사용자자 트랜잭션 작업을 등록할 권한이 있는 경우*/
						CALL sp_insert_transaction_info_in_process_woh(
						/*폐기물 처리정보를 데이타베이스에 등록한다.*/
							IN_USER_ID,					/*입력값 : 사용자의 고유등록번호(USERS.ID)*/
							IN_TRANSACTION_ID,			/*입력값 : WSTE_CLCT_TRMT_TRANSACTION.ID*/
							IN_WSTE_CODE,				/*입력값 : 폐기물 코드*/
							IN_WSTE_QUANTITY,			/*입력값 : 폐기물 중량(수량)*/
							IN_WSTE_PRICE_UNIT,			/*입력값 : 폐기물 처리 단가*/
							IN_WSTE_UNIT,				/*입력값 : 폐기물 처리 단위*/
							IN_WSTE_TRMT_METHOD,		/*입력값 : 폐기물 처리 방법*/
							IN_IMG_LIST,				/*입력값 : 처리사진 등록 리스트*/
							IN_COMPLETED_AT,			/*입력값 : 폐기물 처리일자*/
							rtn_val,					/*출력값 : 처리결과 코드*/
							msg_txt					/*출력값 : 처리결과 문자열*/
						);
					ELSE
					/*사용자자 트랜잭션 작업을 등록할 권한이 없는 경우 예외처리한다.*/
						SET rtn_val = 25101;
						SET msg_txt = 'User does not have permission';
					END IF;
				ELSE
				/*사용자가 수거자 소속의 관리자가 아닌 경우 예외처리한다.*/
					SET rtn_val = 25102;
					SET msg_txt = 'The user is not affiliated with the collector site';
				END IF;
			END IF;
        END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_user`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 사용자계정을 생성하는 사용자의 아이디*/
	IN IN_USER_REG_ID 			VARCHAR(50),		/*입력값 : 생성할 사용자아이디*/
	IN IN_PWD 					VARCHAR(200),		/*입력값 : 생성할 사용자암호*/
	IN IN_USER_NAME 			VARCHAR(20),		/*입력값 : 생성할 사용자이름*/
	IN IN_PHONE 				VARCHAR(20),		/*입력값 : 생성할 사용자 등록 핸드폰 번호*/
	IN IN_CLASS 				INT,				/*입력값 : 생성할 사용자 클래스 ID로서 USERS_CLASS에 등록된 ID를 참조함, NULL인 경우에는 201(member.admin)으로 등록된다.*/
	IN IN_SITE_ID				BIGINT,				/*입력값 : 사업자의 관리자가 하부 조직을 만드는 경우에 입력되는 사이트의 고유번호(COMP_SITE.ID)값으로서 개인회원등록의 경우에는 NULL값을 입력받게 됨*/
	IN IN_DEPARTMENT			VARCHAR(20),		/*입력값 : 소속부서*/
	IN IN_SOCIAL_NO				VARCHAR(20),		/*입력값 : 주민등록번호*/
	IN IN_AGREE_TERMS			TINYINT	,			/*입력값 : 약관동의여부(동의시 1)*/
	IN IN_CONTACT_PATH			INT					/*입력값 : 접속경로*/
    )
BEGIN

/*
Procedure Name 	: sp_create_user
Input param 	: 9개
Job 			: 사용자 생성
Update 			: 2022.02.01
Version			: 0.0.10
AUTHOR 			: Leo Nam
Changes			: sp_req_super_permission의 변경에 따른 변경 적용
				: 입력변수 중 IN_COMP_ID를 IN_SITE_ID로 변경적용함(0.0.7)
				: CREATOR의 식별자를 기존 아이디에서 고유등록번호로 변경(0.0.8)
				: 일부 불필요한 로직 삭제(0.0.8)
				: FCM, JWT 입력부분 삭제(0.0.9)
				: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.9)
				: 유효성 검사 적용(0.0.10)
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_USER_REG_ID						BIGINT 			DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME		DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;  
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    IF IN_USER_REG_ID IS NOT NULL AND LENGTH(IN_USER_REG_ID) > 0 THEN
    /*사용자 아이디를 입력한 경우*/
		CALL sp_req_user_exists(
        /*사용자 아이디가 중복되었는지 검사한다.*/
			IN_USER_REG_ID,
            NULL,   
			rtn_val,
			msg_txt
        );
        IF rtn_val > 0 THEN
        /*중복된 사용자가 존재하지 않는 경우*/
			IF IN_PWD IS NOT NULL THEN
            /*사용자 암호를 입력한 경우*/
				IF IN_USER_NAME IS NOT NULL THEN
                /*사용자 이름을 입력한 경우*/
					IF IN_PHONE IS NOT NULL THEN
                    /*전화번호를 입력한 경우*/
						CALL sp_req_use_same_phone(
                        /*전화번호의 이중등록을 검사한다.*/
							IN_PHONE, 
							0, 
							TRUE, 
							rtn_val, 
							msg_txt                            
                        );
                        IF rtn_val = 0 THEN
                        /*전화번호가 이중등록되지 않은 경우*/
							IF IN_CLASS IS NULL THEN
								SET IN_CLASS = 201;
                            END IF;
							IF IN_SITE_ID IS NULL THEN
								SET IN_SITE_ID = 0;
                            END IF;
							CALL sp_create_user_without_handler(
								IN_USER_ID,				/*입력값 : 사용자계정을 생성하는 사용자의 아이디*/
								IN_USER_REG_ID,			/*입력값 : 생성할 사용자아이디*/
								IN_PWD,					/*입력값 : 생성할 사용자암호*/
								IN_USER_NAME,			/*입력값 : 생성할 사용자이름*/
								IN_PHONE,				/*입력값 : 생성할 사용자 등록 핸드폰 번호*/
								IN_CLASS,				/*입력값 : 생성할 사용자 클래스 ID로서 USERS_CLASS에 등록된 ID를 참조함, NULL인 경우에는 201(member.admin)으로 등록된다.*/
								IN_SITE_ID,				/*입력값 : 사업자의 관리자가 하부 조직을 만드는 경우에 입력되는 사이트의 고유번호(COMP_SITE.ID)값으로서 개인회원등록의 경우에는 NULL값을 입력받게 됨*/
								IN_DEPARTMENT,			/*입력값 : 소속부서*/
								IN_SOCIAL_NO,			/*입력값 : 주민등록번호*/
								IN_AGREE_TERMS,			/*입력값 : 약관동의여부*/
                                IN_CONTACT_PATH,		/*입력값 : 서비스접속경로*/
								VAR_USER_REG_ID,		/*출력값 : 사용자 등록이 완료된 후 등록사용자에게 부여된 고유등록번호*/
								rtn_val,				/*출력값 : 처리결과 반환값*/
								msg_txt				/*출력값 : 처리결과 문자열*/
							);
							
							IF rtn_val = 0 THEN
							/*사용자 생성에 성공한 경우*/
								SELECT JSON_ARRAYAGG(JSON_OBJECT('user_reg_id', VAR_USER_REG_ID)) INTO json_data;
							ELSE
							/*사용자 생성에 실패한 경우*/
								SET json_data 		= NULL;
								SIGNAL SQLSTATE '23000';
							END IF;
                        ELSE
                        /*전화번호가 이중등록된 경우에는 예외처리한다.*/
							SET json_data 		= NULL;
							SIGNAL SQLSTATE '23000';
                        END IF;
                    ELSE
                    /*전화번호를 입력하지 않은 경우* 예외처리한다.*/
						SET rtn_val = 24205;
						SET msg_txt = 'No phone number entered';
						SET json_data 		= NULL;
						SIGNAL SQLSTATE '23000';
                    END IF;
                ELSE
                /*사용자 이름을 입력하지 않은 경우 예외처리한다.*/
					SET rtn_val = 24204;
					SET msg_txt = 'No user name entered';
					SET json_data 		= NULL;
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사용자 암호를 입력하지 않은 경우 예외처리한다.*/
				SET rtn_val = 24203;
				SET msg_txt = 'No user password entered';
				SET json_data 		= NULL;
				SIGNAL SQLSTATE '23000';
            END IF;
        ELSE
        /*중복된 사용자가 존재하는 경우 예외처리한다.*/   
			SET rtn_val = 24202;
			SET msg_txt = 'Duplicate User ID';
			SET json_data 		= NULL;
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자 아이디를 입력하지 않은 경우 예외처리한다.*/      
		SET rtn_val = 24201;
		SET msg_txt = 'Do not enter user ID';
		SET json_data 		= NULL;
		SIGNAL SQLSTATE '23000';
    END IF;
	COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_user_without_handler`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 사용자계정을 생성하는 사용자의 아이디*/
	IN IN_USER_REG_ID 			VARCHAR(50),		/*입력값 : 생성할 사용자아이디*/
    IN IN_PWD 					VARCHAR(200),		/*입력값 : 생성할 사용자암호*/
    IN IN_USER_NAME 			VARCHAR(20),		/*입력값 : 생성할 사용자이름*/
    IN IN_PHONE 				VARCHAR(20),		/*입력값 : 생성할 사용자 등록 핸드폰 번호*/
    IN IN_CLASS 				INT,				/*입력값 : 생성할 사용자 클래스 ID로서 USERS_CLASS에 등록된 ID를 참조함, NULL인 경우에는 201(member.admin)으로 등록된다.*/
    IN IN_SITE_ID				BIGINT,				/*입력값 : 사용자가 속하게 될 사이트의 고유등록번호*/
    IN IN_DEPARTMENT			VARCHAR(20),		/*입력값 : 소속부서*/
	IN IN_SOCIAL_NO				VARCHAR(20),		/*입력값 : 주민등록번호*/
	IN IN_AGREE_TERMS			TINYINT,			/*입력값 : 약관동의여부(동의시 1)*/
    IN IN_CONTACT_PATH			INT,
    OUT OUT_USER_ID				BIGINT,				/*출력값 : 사용자 등록이 완료된 후 등록사용자에게 부여된 고유등록번호*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200)		/*출력값 : 처리결과 문자열*/
    )
BEGIN

/*
Procedure Name 	: sp_create_user_without_handler
Input param 	: 9개
Output param 	: 3개
Job 			: USERS테이블에 입력 PARAM값을 INSERT 하는 작업을 수행(COMMIT)하며 중도에 에러발생시 예외처리 코드 반환함
				: 사용자 등록은 기본적으로 개인사용자가 개인회원으로 등록하는 경우에 사용된다.
				: 또한 사업자의 mypage에서 super user(member.admin:201)가 조직내 관리자(member.manager:202) 또는 조직내 업무에 필요한 다른 직원(member.employee:299)을 등록하는 경우에도 사용된다.
                : 예외 또는 에러에 대한 handler가 없는 로직임
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.02.16
Version			: 0.1.0
AUTHOR 			: Leo Nam
Changes			: 사이트에 등록할 수 있는 사용자 제한규정(정책사항)을 적용함
				: 사용자 생성자의 사이트 사용자 생성 권한 체크 로직 수정(0.0.3)
				: 등록사용자에 대한 담당자 자동 배정 로직 추가(0.0.5)
				: CREATOR의 식별자를 USERS.USER_ID에서 USERS.ID로 변경(0.0.6)
				: CREATOR_REG_ID가 NULL로 입력될때에는 개인사용자가 스스로 자신을 개인회원으로 등록하는 것으로 간주하고 CREATOR와 등록할 아이디를 동일시 한다.(0.0.7)
				: 사용자 타입에 system(치움서비스 관리자)타입 추가(0.0.7)
				: 생성자 유효성 체크 로직 일부 수정(0.0.8)
				: FCM, JWT 입력부분 삭제(0.0.9)
				: 주민번호 입력부분 추가(0.1.0)
*/
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_USER_MAX_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_USER_TYPE						VARCHAR(20)	 	DEFAULT NULL;
	DECLARE VAR_CREATOR_CLASS					INT			 	DEFAULT NULL;
	DECLARE VAR_CREATOR_SITE_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_TARGET_COMP_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_USER_CURRENT_TYPE				INT		 		DEFAULT NULL;
    
    SET VAR_USER_CURRENT_TYPE = 2;
    
	SET rtn_val = -1;
	SET msg_txt = 'Nothing happened2';			
    
    CALL sp_req_current_time(
		VAR_REG_DT
	);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    CALL sp_req_user_max_id(
		VAR_USER_MAX_ID
    );  
    
    SET OUT_USER_ID = VAR_USER_MAX_ID;
    /*등록된 사용자 중에서 가장 큰 고유번호(ID) + 1을 반환한다.*/
    
    IF IN_SITE_ID = 0 AND IN_CLASS = 201 THEN
		SET VAR_USER_TYPE = 'user';
    ELSE
		IF IN_CLASS < 200 THEN
			SET VAR_USER_TYPE = 'system';
        ELSE
			SET VAR_USER_TYPE = 'company';
        END IF;
    END IF;   
    
	CALL sp_req_user_exists(
	/*생성할 사용자 아이디가 이미 존재하는지 체크한다.*/
		IN_USER_REG_ID, 
		TRUE, 
		rtn_val, 
		msg_txt
	);
	/*등록하고자 하는 사용자의 USER_ID가 이미 등록되어 있는 경우에는 
    @USER_EXISTS = 1, 그렇지 않은 경우에는 @USER_EXISTS = 0이 됨*/	
        
	IF rtn_val <> 0 THEN
	/*등록사용자가 존재하지 않는 경우에는 정상처리함*/
			
		CALL sp_req_use_same_phone(
			IN_PHONE, 
			IN_SITE_ID, 
			TRUE, 
			rtn_val, 
			msg_txt
		);
        
        IF rtn_val = 0 THEN
        /*같은 번호로 등록된 핸드폰이 없다면*/
			CALL sp_req_user_exists_by_id(
			/*생성자가 존재하는지 체크한다.*/
				IN_USER_ID, 
				TRUE, 
				rtn_val,
				msg_txt
			);
			/*등록을 요청하는 사용자의 USER_ID가 이미 등록되어 있는 경우에는 
            @USER_EXISTS = 1, 그렇지 않은 경우에는 @USER_EXISTS = 0이 됨*/ 		
			IF IN_USER_ID IS NOT NULL AND rtn_val = 0 THEN
			/*CREATOR가 존재하는 경우*/				
				CALL sp_req_whether_user_can_be_added(
				/*현재 사이트에 사용자를 추가할 수 있는지 여부를 반환한다.*/
					IN_SITE_ID,
					TRUE,
					rtn_val,
					msg_txt
				);					
				IF rtn_val = 0 THEN
				/*사이트에 사용자 추가가 가능한 경우*/
					CALL sp_req_user_class_by_user_reg_id(
						IN_USER_ID,
						VAR_CREATOR_CLASS
					);
					
					SELECT AFFILIATED_SITE INTO VAR_CREATOR_SITE_ID 
                    FROM USERS 
                    WHERE ID = IN_USER_ID;
					
					CALL sp_check_auth_to_create_user(
						IN_CLASS,
						IN_SITE_ID,
						VAR_CREATOR_CLASS,
						VAR_CREATOR_SITE_ID,
						VAR_TARGET_COMP_ID,
						rtn_val,
						msg_txt
					);
					IF rtn_val = 0 THEN
					/*사용자를 추가할 권한이 있는 경우는 정상처리한다.*/                            
						CALL sp_insert_user(
							VAR_USER_MAX_ID, 
							IN_USER_REG_ID, 
							IN_PWD, 
							IN_USER_NAME, 
							IN_PHONE, 
							VAR_TARGET_COMP_ID, 
							IN_SITE_ID, 
							IN_CLASS, 
							IN_DEPARTMENT, 
							IN_SOCIAL_NO, 
							IN_AGREE_TERMS, 
							VAR_REG_DT, 
							VAR_REG_DT, 
                            VAR_USER_CURRENT_TYPE,
                            IN_CONTACT_PATH,
							rtn_val,
							msg_txt
						);
						IF rtn_val = 0 THEN
						/*사용자 입력에 성공한 경우*/
							CALL sp_cs_confirm_account(
							/*등록된 사용자에게 CS의 담당자가 배정된다.*/
								VAR_USER_MAX_ID,
								IN_SITE_ID,
								IN_CLASS,
								VAR_USER_TYPE,
								rtn_val,
								msg_txt
							);
						END IF;
					END IF;
				END IF;
			ELSE
			/*CREATOR가 존재하지 않는 경우-개인사용자*/		
				CALL sp_insert_user(
					VAR_USER_MAX_ID, 
					IN_USER_REG_ID, 
					IN_PWD, 
					IN_USER_NAME, 
					IN_PHONE, 
					0, 
					0, 
					IN_CLASS, 
					NULL, 
					IN_SOCIAL_NO, 
					IN_AGREE_TERMS, 
					VAR_REG_DT, 
					VAR_REG_DT, 
                    VAR_USER_CURRENT_TYPE,
                    IN_CONTACT_PATH,
					rtn_val,
					msg_txt
				);
				IF rtn_val = 0 THEN
				/*사용자 입력에 성공한 경우*/
					CALL sp_cs_confirm_account(
					/*등록된 사용자에게 CS의 담당자가 배정된다.*/
						VAR_USER_MAX_ID,
						IN_SITE_ID,
						IN_CLASS,
						VAR_USER_TYPE,
						rtn_val,
						msg_txt
					);
				END IF;
			END IF;
		END IF;
	ELSE
	/*등록사용자가 존재하는 경우에는 이중등록이므로 예외처리함*/
		SET rtn_val = 20103;
		SET msg_txt = 'User already exists';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_create_wste_trmt_transaction_details`(
	IN IN_USER_ID					BIGINT,						/*입렦값 : 폐기물 수거 및 처리업체 관리자의 고유등록번호(USERS.ID)*/
	IN IN_COLLECT_BIDDING_ID		BIGINT,						/*입렦값 : 폐기물 처리용역 고유등록번호(COLLECTOR_BIDDING.ID)*/
	IN IN_TRMT_END_AT				DATETIME,					/*입렦값 : 폐기물 최종 처리일자*/
	IN IN_WSTE_LISTS				JSON,						/*입렦값 : 폐기물 배출지에서 배출되는 폐기물의 종류 리스트*/
	IN IN_PHOTO_LISTS				JSON,						/*입렦값 : 폐기물 배출지에서 배출되는 폐기물의 사진 리스트*/
    OUT rtn_val 					INT,						/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_create_wste_trmt_transaction_details
Input param 	: 10개
Output param 	: 2개
Job 			: 폐기물 배출 작업 ORDER를 작성(SITE_WSTE_DISPOSAL_ORDER)한다.
Update 			: 2022.01.23
Version			: 0.0.5
AUTHOR 			: Leo Nam
Change			: 폐기물 배출 사이트의 고유등록번호도 저장하게 됨으로써 입력값으로 IN_SITE_ID 받아서 sp_insert_site_wste_discharge_order_without_handler에 전달해준다.
				: 폐기물 배출자의 타입을 프론트에서 입력받는 방식을 삭제하고 DB에서 구분을 하는 방식으로 전환(0.0.4)
				: 기존거래업체와의 재거래를 위한 컬럼 추가로 인한 로직 변경(0.0.5)
*/
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NOW();
	DECLARE VAR_BELONG_TO						BIGINT		 	DEFAULT NULL;
    
    CALL sp_req_current_time(VAR_REG_DT);
    
	CALL sp_req_user_exists_by_id(
    /*사용자가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/
		CALL sp_req_user_affiliation_by_user_id(
        /*수거자가 개인회원인지 사업자 회원인지 구분한다. 
        개인이면 0, 사업자의 관리자이면 사이트의 고유등록번호를 반환한다.*/
			IN_USER_ID,
            VAR_BELONG_TO
        );
		IF VAR_BELONG_TO > 0 THEN
        /*수거자의 지위가 사업자(사이트)인 경우*/
            CALL sp_req_site_exists(
            /*사이트가 유효한지 검사한다.*/
				VAR_BELONG_TO,
                TRUE,
				rtn_val,
				msg_txt
            );
            IF rtn_val = 0 THEN
            /*사이트가 유효한 경우*/
				CALL sp_insert_wste_transaction_without_handler(
					IN_USER_ID,
					IN_COLLECT_BIDDING_ID,
					IN_TRMT_END_AT,
					IN_WSTE_LISTS,
					IN_PHOTO_LISTS,
					VAR_REG_DT,
					rtn_val,
					msg_txt
                );
                IF rtn_val = 0 THEN
                /*프로시저 실행에 성공한 경우*/
					SET rtn_val = 0;
					SET msg_txt = 'Completed registration of waste discharge operation';
                END IF;
            END IF;
        ELSE
        /*수거자의 지위가 개인인 경우에는 예외처리한다.*/
			SET rtn_val = 0;
			SET msg_txt = 'Individual members cannot dispose of waste';
        END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_cs_confirm_account`(
	IN IN_USER_ID				BIGINT,								/*사용자 고유등록번호*/
	IN IN_SITE_ID				BIGINT,								/*사이트 고유등록번호*/
	IN IN_CLASS					BIGINT,								/*사용자 권한*/
	IN IN_TYPE					ENUM('user','company','system'),	/*사용자 권한*/
	OUT rtn_val					INT,								/*처리결과코드*/
    OUT msg_txt 				VARCHAR(100)						/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_cs_confirm_account
Input param 	: 4개
Output param 	: 2개
Job 			: 등록된 사용자 및 사이트에 대한 확인 및 담당자 배정절차 진행
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.28
Version			: 0.0.5
AUTHOR 			: Leo Nam
CHANGE			: sp이름을 sp_cs_confirm_user => sp_cs_confirm_account로 변경(0.0.3)
				: user, company 타입의 계정을 분류(0.0.3)
				: user type에 system(치움서비스 관리자) 타입 추가(0.0.4)
*/
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NOW();
	
    CALL sp_req_current_time(
		VAR_REG_DT
    );
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    IF IN_TYPE = 'user' OR IN_TYPE = 'system' THEN
    /*담당자를 배정해야 하는 대상 type이 user인 일반개인회원이거나 type이 system인 치움서비스 관리자인 경우*/          
        CALL sp_cs_confirm_account_of_person(
			IN_USER_ID,
			IN_SITE_ID,
			IN_CLASS,
			IN_TYPE,
			VAR_REG_DT,
			rtn_val,
			msg_txt
        );
    ELSE
    /*담당자를 배정해야 하는 대상 type이 site인 경우*/        
        CALL sp_cs_confirm_account_of_site(
			IN_USER_ID,
			IN_SITE_ID,
			IN_CLASS,
			IN_TYPE,
			VAR_REG_DT,
			rtn_val,
			msg_txt
        );
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_cs_confirm_account_of_person`(
	IN IN_USER_ID				BIGINT,								/*입력값 : 사용자 고유등록번호*/
	IN IN_SITE_ID				BIGINT,								/*입력값 : 사이트 고유등록번호*/
	IN IN_CLASS					BIGINT,								/*입력값 : 사용자 권한*/
	IN IN_TYPE					ENUM('user','company','system'),	/*입력값 : 사용자 권한*/
	IN IN_REG_DT				DATETIME,							/*입력값 : 날짜*/
	OUT rtn_val					INT,								/*출력값 : 처리결과코드*/
    OUT msg_txt 				VARCHAR(100)						/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_cs_confirm_account_of_person
Input param 	: 4개
Output param 	: 2개
Job 			: 등록된 사용자에 대한 확인 및 담당자 배정절차 진행
Update 			: 2022.03.04
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_CS_MANAGER_ID					INT		 		DEFAULT NULL;
	    
	IF IN_CLASS > 101 AND IN_CLASS < 200 AND IN_SITE_ID = 0 AND IN_TYPE = 'system' THEN
	/*치움시스템 관리자 생성인 경우*/
		SET VAR_CS_MANAGER_ID = 0;
	ELSE
	/*치움시스템 관리자가 아닌 사용자 생성인 경우*/
		CALL sp_req_cs_manager_in_charge(
			VAR_CS_MANAGER_ID
		);
		/*CS 담당자 고유등록번호를 가져온다.*/
	END IF;
	
	UPDATE USERS 
	SET 
		CS_MANAGER_ID = VAR_CS_MANAGER_ID,
		CONFIRMED = 0,
		/*시스템에 의한 담당자 배정이므로 CONFIRMED는 0으로 셋팅한다.*/
		/*이 부분은 배정된 담당자의 실질 확인 후 
        담당자가 발생시키는 이벤트(sp_cs_comfirm_account_manually)에 의하여 1로 셋팅될 수 있다.*/
		CONFIRMED_AT = NULL,
		/*CONFIRMED_AT의 값 또한 NULL로 셋팅하게 되지만 
        담당자의 실질 확인 후 담당자가 발생시키는 
        이벤트(sp_cs_comfirm_account_manually)에 의하여 날짜가 셋팅될 수 있다.*/
		UPDATED_AT = IN_REG_DT
	WHERE ID = IN_USER_ID;
		
	IF ROW_COUNT() = 1 THEN
	/*업데이트에 성공한 경우*/
		SET rtn_val = 0;
		SET msg_txt = 'Success';
	ELSE
	/*업데이트에 실패한 경우*/
		SET rtn_val = 21501;
		SET msg_txt = 'Assignment of contact to individual user failed';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_cs_confirm_account_of_site`(
	IN IN_USER_ID				BIGINT,								/*입력값 : 사용자 고유등록번호*/
	IN IN_SITE_ID				BIGINT,								/*입력값 : 사이트 고유등록번호*/
	IN IN_CLASS					BIGINT,								/*입력값 : 사용자 권한*/
	IN IN_TYPE					ENUM('user','company','system'),	/*입력값 : 사용자 권한*/
	IN IN_REG_DT				DATETIME,							/*입력값 : 날짜*/
	OUT rtn_val					INT,								/*출력값 : 처리결과코드*/
    OUT msg_txt 				VARCHAR(100)						/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_cs_confirm_account
Input param 	: 4개
Output param 	: 2개
Job 			: 등록된 사이트에 대한 확인 및 담당자 배정절차 진행
Update 			: 2022.03.04
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_CS_COMPANY_MANAGER_ID			INT		 		DEFAULT NULL;
	DECLARE VAR_COMP_ID							BIGINT	 		DEFAULT NULL;
	DECLARE VAR_CS_MANAGER_ID					BIGINT	 		DEFAULT NULL;
	    
	CALL sp_req_cs_manager_id_of_company(
	/*사이트와 사이트가 속한 사업자에 대한 담당자 배정등의 작업을 */
		IN_SITE_ID,					/*사이트의 고유등록번호*/
		VAR_CS_COMPANY_MANAGER_ID		/*사이트가 소속한 사업자를 관리하는 치움서비스 관리담당자의 고유등록번호*/
	);
	
	IF VAR_CS_COMPANY_MANAGER_ID IS NOT NULL THEN
	/*사이트가 소속한 사업자를 관리하는 치움서비스 관리담당자가 이미 결정되어 있는 경우*/
	/*사이트에 대한 치움서비스 담당관리자를 사이트가 소속하고 있는 사업자의 담당관리자로 결정한다.*/
		UPDATE COMP_SITE 
		SET 
			CS_MANAGER_ID = VAR_CS_COMPANY_MANAGER_ID,
			CONFIRMED = 0,
			/*시스템에 의한 담당자 배정이므로 CONFIRMED는 0으로 셋팅한다.*/
			/*이 부분은 배정된 담당자의 실질 확인 후 담당자가 발생시키는 
            이벤트(sp_cs_comfirm_account_manually)에 의하여 1로 셋팅될 수 있다.*/
			CONFIRMED_AT = NULL,
			/*CONFIRMED_AT의 값 또한 NULL로 셋팅하게 되지만 
            담당자의 실질 확인 후 담당자가 발생시키는 
            이벤트(sp_cs_comfirm_account_manually)에 의하여 날짜가 셋팅될 수 있다.*/
			UPDATED_AT = IN_REG_DT
		WHERE ID = IN_SITE_ID;
		
		IF ROW_COUNT() = 1 THEN
		/*업데이트에 성공한 경우*/
			SET rtn_val = 0;
			SET msg_txt = 'Success';
		ELSE
		/*업데이트에 실패한 경우*/
			SET rtn_val = 21502;
			SET msg_txt = 'Failed to assign contact to site';
		END IF;
	ELSE
	/*사이트가 소속한 사업자를 관리하는 치움서비스 관리담당자가 없는 경우*/
		CALL sp_req_comp_id_of_site(
		/*사이트가 소속한 사업자의 고유 등록번호를 VAR_COMP_ID를 통하여 반환한다.*/
			IN_SITE_ID,				/*사이트의 고유등록번호*/
			VAR_COMP_ID				/*사이트가 소속한 사업자의 고유등록번호*/
		);
		
		CALL sp_req_cs_manager_in_charge(
			VAR_CS_MANAGER_ID
		);
		/*CS_MANAGER 아이디를 VAR_CS_MANAGER_ID을 통하여 반환받는다.*/
		UPDATE COMPANY
		SET 
			CS_MANAGER_ID = VAR_CS_MANAGER_ID,
			CONFIRMED = 0,
			/*시스템에 의한 담당자 배정이므로 CONFIRMED는 0으로 셋팅한다.*/
			/*이 부분은 배정된 담당자의 실질 확인 후 
            담당자가 발생시키는 이벤트(sp_cs_comfirm_account_manually)에 의하여 1로 셋팅될 수 있다.*/
			CONFIRMED_AT = NULL,
			/*CONFIRMED_AT의 값 또한 NULL로 셋팅하게 되지만 
            담당자의 실질 확인 후 담당자가 발생시키는 
            이벤트(sp_cs_comfirm_account_manually)에 의하여 날짜가 셋팅될 수 있다.*/
			UPDATED_AT = IN_REG_DT
		WHERE ID = VAR_COMP_ID;
		
		IF ROW_COUNT() = 0 THEN
		/*업데이트에 실패한 경우*/
			SET rtn_val = 21503;
			SET msg_txt = 'Failed to assign contact to company';
		ELSE
		/*업데이트에 성공한 경우*/
		/*사이트에도 CS 담당 관리자를 배정한다.*/
			UPDATE COMP_SITE
			SET 
				CS_MANAGER_ID = VAR_CS_MANAGER_ID,
				CONFIRMED = 0,
				/*시스템에 의한 담당자 배정이므로 CONFIRMED는 0으로 셋팅한다.*/
				/*이 부분은 배정된 담당자의 실질 확인 후 
                담당자가 발생시키는 이벤트(sp_cs_comfirm_account_manually)에 의하여 1로 셋팅될 수 있다.*/
				CONFIRMED_AT = NULL,
				/*CONFIRMED_AT의 값 또한 NULL로 셋팅하게 되지만 
                담당자의 실질 확인 후 담당자가 발생시키는 
                이벤트(sp_cs_comfirm_account_manually)에 의하여 날짜가 셋팅될 수 있다.*/
				UPDATED_AT = IN_REG_DT
			WHERE ID = IN_SITE_ID;                
		
			IF ROW_COUNT() = 0 THEN
			/*업데이트에 실패한 경우*/
				SET rtn_val = 21504;
				SET msg_txt = 'Failed to assign contact to site';
			ELSE
			/*업데이트에 성공한 경우*/
				SET rtn_val = 0;
				SET msg_txt = 'Success';
			END IF;
		END IF;            
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_cursorDemo`(
	IN IN_COMP_ID		BIGINT
)
BEGIN
	DECLARE endOfRow BOOLEAN DEFAULT FALSE;
	DECLARE vRowCount INT DEFAULT 0 ;
	DECLARE COMP_ID BIGINT;
    
	DECLARE SUBSIDIARY_CURSOR CURSOR FOR SELECT ID FROM COMPANY WHERE P_COMP_ID = IN_COMP_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	OPEN SUBSIDIARY_CURSOR;	
	cloop: LOOP
		FETCH SUBSIDIARY_CURSOR INTO COMP_ID;
		SELECT endOfRow;
		SELECT * FROM COMPANY WHERE ID = COMP_ID; 
		/*UPDATE COMPANY SET ACTIVE = FALSE, UPDATED_AT = @REG_DT, RECOVERY_TAG = @REG_DT WHERE P_COMP_ID = COMP_ID;
		SET vRowCount = vRowCount + 1;*/
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
	END LOOP;   
	CLOSE SUBSIDIARY_CURSOR;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_delete_all_information_depend_on_company_without_handler`(
	IN IN_COMP_ID					BIGINT,
    OUT rtn_val						INT,				/*출력값 : 처리결과 반환값*/   
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/ 
)
BEGIN

/*
Procedure Name 	: sp_delete_all_information_depend_on_company_without_handler
Input param 	: 1개
Output param 	: 2개
Job 			: 사업자와 관련된 종속사업자, 사이트, 사용자 모두 삭제하게 됨
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
CHANGE			: 
*/

	DECLARE endOfRow 							BOOLEAN 		DEFAULT FALSE;
	DECLARE vRowCount 							INT 			DEFAULT 0;
	DECLARE VAR_COMP_ID 						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_COUNT_OF_CHILD_COMP				INT			 	DEFAULT 0;
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
    
	DECLARE SUBSIDIARY_CURSOR CURSOR FOR 
    /*입력 받은 사업자를 모기업으로 하는 종속사업자의 고유등록번호를 SUBSIDIARY_CURSOR에 등록한다.*/
    SELECT ID 
    FROM COMPANY 
    WHERE 
		P_COMP_ID = IN_COMP_ID AND 
        ACTIVE = TRUE;
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    /*커서가 끝에 도달하면 endOfRow를 TRUE로 셋팅한다.*/
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    SELECT COUNT(ID) INTO VAR_COUNT_OF_CHILD_COMP 
    FROM COMPANY 
    WHERE 
		ID = IN_COMP_ID AND 
        ACTIVE = TRUE;
    /*삭제대상이 되는 레코드의 수를 VAR_COUNT_OF_CHILD_COMP에 저장한다.*/
    
	OPEN SUBSIDIARY_CURSOR;	
	cloop: LOOP
		SET VAR_COMP_ID = NULL;
		FETCH SUBSIDIARY_CURSOR INTO VAR_COMP_ID;
		SELECT endOfRow;
		UPDATE COMPANY 
        SET 
			ACTIVE = FALSE, 
            UPDATED_AT = VAR_REG_DT, 
            RECOVERY_TAG = VAR_REG_DT 
        WHERE 
			ID = VAR_COMP_ID AND 
            ACTIVE = TRUE;
            
        IF ROW_COUNT() = 1 THEN
			SET vRowCount = vRowCount + 1;
        END IF;
        
		IF endOfRow THEN
			IF vRowCount = VAR_COUNT_OF_CHILD_COMP THEN
				SET rtn_val = 0;
				SET msg_txt = 'Success';
            ELSE
				SET rtn_val = 28201;
				SET msg_txt = 'Failed to delete company information';
				SIGNAL SQLSTATE '23000';
            END IF;
			LEAVE cloop;
		END IF;
	END LOOP;   
	CLOSE SUBSIDIARY_CURSOR;
    COMMIT;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_delete_company`(
	IN IN_USER_ID 			BIGINT,				/*입력값 : 관리자아이디*/
    IN IN_COMP_ID	 		BIGINT				/*입력값 : 사업자 고유번호*/
    )
BEGIN

/*
Procedure Name 	: sp_delete_company
Input param 	: 2개
Output param 	: 2개
Job 			: 사업자 정보 삭제(ACTIVE = FALSE)
				: 사업자 정보 삭제시 사업자에 종속된 사업자, 사이트, 사용자 모두 삭제처리됨
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.28
Version			: 0.0.3
AUTHOR 			: Leo Nam
Change			: 사업자 삭제에 대한 기능을 Nested Procedure(sp_delete_company_without_handler)를 사용하여 처리함
				: 사용자 식별자를 사용자 아이디(USERS.USER_NAME)에서 사용자 고유등록번호(USER.ID)로 변경함(0.0.2)
				: 로깅 기능 삭제(유보)(0.0.3)
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_PERMISSION						INT				DEFAULT NULL;
	DECLARE VAR_IS_USER_SITE_HEAD_OFFICE		TINYINT			DEFAULT NULL;
	DECLARE VAR_PARENT_COMP_ID					BIGINT			DEFAULT NULL;
	DECLARE VAR_USER_COMP_ID					BIGINT			DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    /*CALL sp_req_use_same_company_reg_id(IN_BIZ_REG_CODE, @BIZ_REG_CODE_EXISTS);*/ 
	CALL sp_req_user_exists_by_id(
		IN_USER_ID, 
		TRUE, 
		rtn_val,
		msg_txt
	);
	/*IN_USER_ID가 이미 등록되어 있는 사용자인지 체크한다. 
    등록되어 있는 경우에는 @USER_EXISTS = 1, 
    그렇지 않은 경우에는 @USER_EXISTS = 0을 반환한다.*/
	/*이미 등록되어 있는 사용자인 경우에는 관리자(member.admin)인지 검사한 후 
    member.admin인 경우에는 사업자 생성권한을 부여하고 그렇지 않은 경우에는 예외처리한다.*/
	/*등록되어 있지 않은 경우에는 신규사업자 생성으로 간주하고 정상처리 진행한다.*/
	
	IF rtn_val = 0 THEN
	/*이미 등록되어 있는 사용자인 경우에는 관리자(member.admin)인지 검사한 후 
    member.admin인 경우에는 사업자 생성권한을 부여하고 그렇지 않은 경우에는 예외처리한다.*/
		/*체크할 사업자등록번호로 등록된 사업자가 존재하는지 체크한 후 
        존재한다면 1, 그렇지 않으면 0을 반환하게 됨*/
		CALL sp_req_company_validation(
			IN_COMP_ID, 
			rtn_val, 
			msg_txt
		);
		
		IF rtn_val > 0 THEN
		/*사업자가 활성화되어 있는 사업자가 아닌 경우*/
			SIGNAL SQLSTATE '23000';
		ELSE   
		/*같은 사업자등록번호를 가진 사업자가 존재하는 경우에는 정상처리 진행한다.*/        
			CALL sp_req_super_permission_by_userid(
				IN_USER_ID, 
				IN_COMP_ID, 
				VAR_PERMISSION, 
				VAR_IS_USER_SITE_HEAD_OFFICE,
				rtn_val,
				msg_txt
			);
			IF VAR_PERMISSION IN (1, 2) THEN
			/*IN_USER_ID가 sys.admin:101, 102인 경우*/
				CALL sp_req_parent_comp_id(
					IN_COMP_ID, 
					VAR_PARENT_COMP_ID
				);
				/*사업자의 모기업 사업자 아이디를 구하여 VAR_PARENT_COMP_ID에 저장한다.*/
				IF VAR_PARENT_COMP_ID = 0 THEN
				/*모기업 사업자가 없는 경우(VAR_PARENT_COMP_ID = 0)는 
                다른 사업자에 의하여 생성된 사업자가 아니므로 sys.admin에 의하여 삭제가 가능함*/
				/*다른 사업자에 의하여 생성된 사업자는 시스템에 의하여 삭제가 불가능하다.*/
					CALL sp_delete_company_without_handler(
					/*사업자정보를 삭제하는 절차를 진행한다.*/
						IN_USER_ID,					/*사용자 등록 고유번호(USERS.ID)*/
						IN_COMP_ID,						/*사업자 등록 고유번호(COMPANY.ID)*/
						rtn_val,						/*처리결과 반환값*/
						msg_txt						/*처리결과 문자열*/
					);
                    
					IF rtn_val > 0 THEN
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*모기업 사업자가 있는 경우(VAR_PARENT_COMP_ID <> 0)는 
                다른 사업자에 의하여 생성된 사업자이므로 sys.admin에 의하여 
                삭제가 불가능하며 해당 사업자를 생성한 모기업 사업자의 관리자에 의하여만 
                삭제가 가능함. 예외처리함.*/
					SET rtn_val = 20601;
					SET msg_txt = 'Subsidiaries cannot be deleted by the system administrator';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*IN_USER_ID가 sys.admin:101, 102이 아닌 경우*/
				IF VAR_PERMISSION = 3 THEN
					/*사업자의 모기업 사업자 고유등록번호를 구하여 VAR_PARENT_COMP_ID에 저장한다.*/   
					/*PERMISSION = 3인 경우에는 사용자의 권한(USER.CLASS)은 그 사업자의 최고권한인 201이다.*/   
					/*따라서 사용자가 삭제 대상사업자에 속하면서 최고권한을 가지고 있으므로 유일한 사업자 삭제 권한자이다.*/   
					CALL sp_req_comp_id_of_user_by_id(
						IN_USER_ID, 
						VAR_USER_COMP_ID
					);
					/*사업자 정보 삭제 요청을 하는 사용자가 소속한 사업자의 고유등록번호를 구하여 VAR_USER_COMP_ID에 저장함*/
					CALL sp_delete_company_without_handler(
					/*사업자정보를 삭제하는 절차를 진행한다.*/
						IN_USER_ID,					/*사용자 등록 고유번호(USERS.ID)*/
						IN_COMP_ID,						/*사업자 등록 고유번호(COMPANY.ID)*/
						rtn_val,						/*처리결과 반환값*/
						msg_txt						/*처리결과 문자열*/
					);
                    
					IF rtn_val > 0 THEN
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
					SET rtn_val = 20602;
					SET msg_txt = CONCAT('Users do not have the right to delete company information', msg_txt);
					SIGNAL SQLSTATE '23000';
				END IF;
			END IF;
		END IF;
	ELSE
	/*사업자 정보에 대한 삭제 요청을 한 사용자가 확인되지 않는 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
	END IF;
    COMMIT;
    
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_delete_company_2`(
    IN TARGET_COMP_ID			BIGINT,
    IN IN_TARGET_SITE_ID		BIGINT,
    IN IN_COUNT_SITE_USERS		INT,
    OUT rtn_val					INT,
    OUT msg_txt					VARCHAR(200)
)
BEGIN
                    
	UPDATE USERS 
	SET ACTIVE = FALSE 
	WHERE AFFILIATED_SITE = IN_TARGET_SITE_ID;
	
	IF ROW_COUNT() = IN_COUNT_SITE_USERS THEN
		UPDATE COMP_SITE 
		SET ACTIVE = FALSE 
		WHERE ID = IN_TARGET_SITE_ID;
		
		IF ROW_COUNT() = 1 THEN
			UPDATE COMPANY 
			SET ACTIVE = FALSE 
			WHERE ID = TARGET_COMP_ID;
			
			IF ROW_COUNT() = 1 THEN
				SET rtn_val = 0;
				SET msg_txt = 'Success';
			ELSE
				SET rtn_val = 32203;
				SET msg_txt = 'Company deactivation failed';
			END IF;
		ELSE
			SET rtn_val = 32202;
			SET msg_txt = 'Site deactivation failed';
		END IF;
	ELSE
		SET rtn_val = 32201;
		SET msg_txt = 'Users deactivation failed';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_delete_company_without_handler`(
	IN IN_USER_ID			BIGINT,				/*사용자 아이디*/
	IN IN_COMP_ID			BIGINT,				/*사업자의 고유등록번호*/
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_delete_company_without_handler
Input param 	: 2개
Output param 	: 2개
Job 			: 사업자 등록정보 삭제시 종속 사이트와 종속 사용자 모두 삭제 처리한다.
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.17
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
    
    CALL sp_req_current_time(VAR_REG_DT);
    
	UPDATE COMPANY 
    SET 
		ACTIVE 			= FALSE, 
        UPDATED_AT 		= VAR_REG_DT, 
        RECOVERY_TAG 	= VAR_REG_DT 
    WHERE ID = IN_COMP_ID;
    /*대상이 되는 사업자의 ACTIVE 상태를 FALSE로 변경해준다.*/
    
	IF ROW_COUNT() = 1 THEN
	/*사업자가 성공적으로 삭제된 경우에는 종속 사이트를 모두 삭제한다.*/
		UPDATE COMP_SITE 
        SET 
			ACTIVE 				= FALSE, 
            UPDATED_AT 			= VAR_REG_DT, 
            RECOVERY_TAG 		= VAR_REG_DT 
		WHERE COMP_ID 			= IN_COMP_ID;
		/*삭제 대상 사업자의 종속 사이트에 대한 모든 정보를 삭제처리한다.*/
		IF ROW_COUNT() = 1 THEN
		/*사이트 삭제가 정상적으로 처리된 경우*/   
			UPDATE USERS 
            SET 
				ACTIVE 			= FALSE, 
                UPDATED_AT 		= VAR_REG_DT, 
                RECOVERY_TAG 	= VAR_REG_DT 
            WHERE BELONG_TO 	= IN_COMP_ID;
			/*삭제 대상 사업자를 모기업으로 하는 모든 종속 사업자에 대한 정보 삭제처리 진행한다.*/
			IF ROW_COUNT() = 0 THEN
			/*사용자가 삭제되지 않은 상태인 경우에는 예외처리함*/
				SET rtn_val = 21803;
				SET msg_txt = 'Failure to delete user information related to the company';
			ELSE
			/*사업자 삭제가 정상적으로 처리된 경우*/  				
				UPDATE SITE_WSTE_DISPOSAL_ORDER
                SET 
					IS_DELETED = TRUE,
                    ACTIVE = FALSE,
                    UPDATED_AT = VAR_REG_DT
				WHERE SITE_ID IN (SELECT ID FROM COMP_SITE WHERE COMP_ID = IN_COMP_ID);
                
                UPDATE COLLECTOR_BIDDING
                SET
					DELETED = TRUE,
                    ACTIVE = FALSE,
                    UPDATED_AT = VAR_REG_DT
				WHERE COLLECTOR_ID IN (SELECT ID FROM COMP_SITE WHERE COMP_ID = IN_COMP_ID);
                
				CALL sp_calc_bidding_rank_after_delete_company(
					IN_COMP_ID,
                    rtn_val,
                    msg_txt
				);
			END IF;
		ELSE
		/*사이트가 삭제되지 않은 상태인 경우에는 예외처리함*/
			SET rtn_val = 21802;
			SET msg_txt = 'Deletion Failed for Subsidiaries';
		END IF;
	ELSE
	/*사업자가 삭제되지 않은 상태인 경우에는 예외처리함*/
		SET rtn_val = 21801;
		SET msg_txt = 'Company information has not been deleted';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_delete_company_without_handler_2`(
    IN IN_COMPANY_ID					BIGINT,				/*입력값 : 삭제할 사업자 아이디*/
    IN IN_REG_DT						DATETIME,			/*입력값 : 실행 시간*/
    OUT rtn_val 						INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 						VARCHAR(200)		/*출력값 : 처리결과 문자열*/
    
)
BEGIN

/*
Procedure Name 	: sp_delete_company_without_handler_2
Input param 	: 2개
Job 			: 사업자를 삭제하는 기능
Update 			: 2022.01.29
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_COUNT_OF_DELETED_COMPANY		INT			 	DEFAULT NULL;
    
    SELECT COUNT(ID) INTO VAR_COUNT_OF_DELETED_COMPANY
    FROM COMPANY
    WHERE 
		ACTIVE = FALSE AND
		ID = IN_COMPANY_ID;
	IF VAR_COUNT_OF_DELETED_COMPANY = 0 THEN
    /*사업자가 아직 삭제가 되지 않은 경우 정상처리한다.*/
		UPDATE COMPANY 
		SET 
			ACTIVE 			= FALSE, 
			UPDATED_AT 		= IN_REG_DT 
		WHERE ID 			= IN_COMPANY_ID;
			
		IF ROW_COUNT() = 1 THEN
		/*모든 트랜잭션이 성공한 경우에만 로그를 한다.*/
			CALL sp_calc_bidding_rank_after_delete_company(
				IN_COMPANY_ID,
                rtn_val,
                msg_txt
			);
		ELSE
		/*변경이 적용되지 않은 경우*/
			SET rtn_val = 37002;
			SET msg_txt = 'Failed to delete company account';
		END IF;
    ELSE
    /*사업자가 이미 삭제된 경우에는 예외처리한다.*/
		SET rtn_val = 37001;
		SET msg_txt = 'company already deleted';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_delete_post`(
	IN IN_USER_ID 				BIGINT,				/*입력값 : 관리자아이디(USERS.ID)*/
    IN IN_POST_ID 				BIGINT				/*입력값 : 글 등록번호*/
    )
BEGIN

/*
Procedure Name 	: sp_update_post
Input param 	: 4개
Job 			: POST 삭제
Update 			: 2022.03.14
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(VAR_REG_DT);
    
	CALL sp_req_user_exists_by_id(
		IN_USER_ID, 
		TRUE, 
		rtn_val, 
		msg_txt
	);
	
	IF rtn_val = 0 THEN
	/*사용자가 존재하는 경우에는 정상처리함*/
		CALL sp_req_user_own_post(
			IN_USER_ID, 
			IN_POST_ID, 
			rtn_val,
			msg_txt
		);
		IF rtn_val = 0 THEN
		/*사용자가 포스트에 대한 작성자인 경우 정상처리한다.*/
			UPDATE POSTS 
			SET 
				ACTIVE 				= FALSE,
                UPDATED_AT			= VAR_REG_DT
			WHERE ID 				= IN_POST_ID;
			/*변경사항을 적용한다.*/
			
			IF ROW_COUNT() = 0 THEN
			/*저장이 되지 않은 경우에는 예외처리한다.*/
				SET rtn_val = 33201;
				SET msg_txt = 'Post has not deleted';
				SIGNAL SQLSTATE '23000';
			ELSE
				SET rtn_val = 0;
				SET msg_txt = 'success';
			END IF;
		ELSE
		/*사용자가 포스트에 대한 작성자가 아닌 경우 예외처리한다.*/
			SIGNAL SQLSTATE '23000';
		END IF;
	ELSE
	/*사사용자가 존재하지 않는 경우에는 예외처리함*/
		SIGNAL SQLSTATE '23000';
	END IF;
	COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_delete_review_without_handler`(
	IN IN_USER_ID					BIGINT,
	IN IN_POST_ID					BIGINT,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_req_delete_review
Input param 	: 2개
Job 			: 배출자가 리뷰를 삭제한다
Update 			: 2022.04.07
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;	
	DECLARE VAR_DELETED							TINYINT		 	DEFAULT NULL;	

    CALL sp_req_current_time(VAR_REG_DT);
    
	SELECT DELETED
	INTO VAR_DELETED
	FROM POSTS 
	WHERE ID = IN_POST_ID;
    
	IF VAR_DELETED = FALSE THEN
		UPDATE POSTS
		SET 
			DELETED = TRUE,
			DELETED_AT = VAR_REG_DT,
			UPDATED_AT = VAR_REG_DT,
			DELETER_ID = IN_USER_ID
		WHERE ID = IN_POST_ID;
		IF ROW_COUNT() = 1 THEN
		/*삭제가 성공적으로 마무리 된 경우 정상처리한다.*/
			SET rtn_val = 0;
			SET msg_txt = 'success';
		ELSE
		/*삭제가 성공적으로 마무리 되지 않은 경우 예외처리한다.*/
			SET rtn_val = 36502;
			SET msg_txt = 'fail to delete the review';
		END IF;
	ELSE
	/*이전에 이미 삭제한 경우 예외처리한다.*/
		SET rtn_val = 36501;
		SET msg_txt = 'Review already deleted';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_delete_sigungu`(
	IN IN_USER_ID			BIGINT,				/*입력값 : 사업지역을 삭제하고자 하는 사이트의 관리자(USERS.ID)*/
	IN IN_SIGUNGU_CODE		VARCHAR(10)			/*입력값 : 삭제하고자 하는 시군구코드(KIKCD_B.B_CODE)*/
)
BEGIN

/*
Procedure Name 	: sp_delete_sigungu
Input param 	: 2개
Job 			: 수집운반업자 등의 허가를 갖춘 사이트가 사업지역을 삭제한다.(시군구 단위)
Update 			: 2022.03.29
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/		
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_SITE_ID							BIGINT		 	DEFAULT NULL;	
	DECLARE VAR_AREA_COUNT						INT		 		DEFAULT 0;	
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;		
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 존재한다면*/
		CALL sp_req_site_id_of_user_reg_id(
        /*사용자가 소속한 사이트의 고유등록번호를 구한다.*/
			IN_USER_ID,
            VAR_SITE_ID,
			rtn_val,
			msg_txt
        );
		IF rtn_val = 0 THEN
		/*사이트가 정상(개인사용자는 제외됨)적인 경우*/
			CALL sp_req_is_site_collector(
            /*사이트가 수거자등인지 검사한다.*/
				VAR_SITE_ID,
				rtn_val,
				msg_txt
            );
            IF rtn_val = 0 THEN
            /*사이트가 수거자 종류이면*/
				SELECT COUNT(ID) INTO VAR_AREA_COUNT
                FROM BUSINESS_AREA
                WHERE 
					SITE_ID = VAR_SITE_ID AND
                    KIKCD_B_CODE = IN_SIGUNGU_CODE AND
                    ACTIVE = TRUE;                
                IF VAR_AREA_COUNT > 0 THEN
                /*시군구가 사이트에 등록되어 있는 경우*/
					UPDATE BUSINESS_AREA
                    SET
						ACTIVE = FALSE,
                        DELETED_AT = VAR_REG_DT
					WHERE 
						SITE_ID = VAR_SITE_ID AND
						KIKCD_B_CODE = IN_SIGUNGU_CODE AND
						ACTIVE = TRUE;  
					IF ROW_COUNT() = 1 THEN
                    /*성공적으로 삭제가 완료된 경우 정상처리한다.*/
						SET rtn_val 		= 0;
						SET msg_txt 		= 'success';
                    ELSE
                    /*삭제에 실패한 경우 예외처리한다.*/
						SET rtn_val 		= 35501;
						SET msg_txt 		= 'Failed to delete region of interest';
						SIGNAL SQLSTATE '23000';
                    END IF;
                ELSE
                /*시군구가 사이트에 등록되어 있지 않은 경우*/
					SET rtn_val 		= 35502;
					SET msg_txt 		= 'Unregistered area of ​​interest';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사이트가 수거자 종류가 아니면*/
				SIGNAL SQLSTATE '23000';
            END IF;
		ELSE
		/*사이트가 존재하지 않거나 유효하지 않은(개인사용자의 경우) 경우*/
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
    /*사용자가 존재하지 않거나 유효하지 않다면*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;   
    
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_delete_site_without_handler`(
    IN IN_SITE_ID						BIGINT,				/*입력값 : 삭제할 사이트 아이디*/
    IN IN_REG_DT						DATETIME,			/*입력값 : 실행 시간*/
    OUT rtn_val 						INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 						VARCHAR(200)		/*출력값 : 처리결과 문자열*/
    
)
BEGIN

/*
Procedure Name 	: sp_delete_user
Input param 	: 1개
Job 			: 사이트를 삭제하는 기능
Update 			: 2022.01.29
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_COUNT_OF_DELETED_SITE			INT		 		DEFAULT 0;	
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;	
    
    SELECT COUNT(ID) INTO VAR_COUNT_OF_DELETED_SITE
    FROM COMP_SITE
    WHERE 
		ACTIVE = FALSE AND
		ID = IN_SITE_ID;
	IF VAR_COUNT_OF_DELETED_SITE = 0 THEN
    /*사이트가 아직 삭제가 되지 않은 경우 정상처리한다.*/
		UPDATE COMP_SITE 
		SET 
			ACTIVE 			= FALSE, 
			UPDATED_AT 		= VAR_REG_DT 
		WHERE ID 			= IN_SITE_ID;
			
		IF ROW_COUNT() = 1 THEN
		/*모든 트랜잭션이 성공한 경우에만 로그를 한다.*/
			CALL sp_calc_bidding_rank_after_delete_site(
				IN_SITE_ID,
                rtn_val,
                msg_txt
			);
		ELSE
		/*변경이 적용되지 않은 경우*/
			SET rtn_val = 36902;
			SET msg_txt = 'Failed to delete site account';
		END IF;
    ELSE
    /*사이트가 이미 삭제된 경우에는 예외처리한다.*/
		SET rtn_val = 36901;
		SET msg_txt = 'site already deleted';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_delete_user`(
    IN IN_USER_ID						BIGINT,				/*입력값 : 계정 정보를 삭제하는 사용자 아이디*/
    IN IN_TARGET_USER_ID				BIGINT				/*입력값 : 삭제할 사용자 아이디*/
)
BEGIN

/*
Procedure Name 	: sp_delete_user
Input param 	: 2개
Job 			: 개인정보를 삭제하는 기능
Update 			: 2022.01.29
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/	
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT		 	DEFAULT NULL;	
	DECLARE VAR_USER_CLASS						INT		 		DEFAULT NULL;		
	DECLARE VAR_TARGET_USER_CLASS				INT		 		DEFAULT NULL;	
	DECLARE VAR_TARGET_USER_SITE_ID				BIGINT		 	DEFAULT NULL;		
	DECLARE VAR_COUNT_OF_USERS					INT		 		DEFAULT NULL;		
	DECLARE VAR_HEAD_OFFICE						TINYINT		 	DEFAULT NULL;		
	DECLARE VAR_USER_COMP_ID					BIGINT		 	DEFAULT NULL;		
	DECLARE VAR_COUNT_OF_NO_HEAD_OFFICE			INT		 		DEFAULT NULL;		
	DECLARE VAR_P_COMP_ID						BIGINT		 	DEFAULT NULL;		
	DECLARE VAR_COUNT_OF_CHILD_COMPANY			INT		 		DEFAULT NULL;			

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(
		VAR_REG_DT
    );
    
    call sp_req_user_exists_by_id(
		IN_USER_ID, 
        TRUE,
        rtn_val, 
        msg_txt
    );
    IF rtn_val = 0 THEN
    /*요청자가 인증된 사용자인 경우*/ 
		call sp_req_user_exists_by_id(
			IN_TARGET_USER_ID, 
			TRUE,
			rtn_val, 
			msg_txt
		);
		
		IF rtn_val = 0 THEN
		/*삭제 대상자가 인증된 사용자인 경우*/ 
			SELECT AFFILIATED_SITE, CLASS INTO VAR_USER_SITE_ID, VAR_USER_CLASS
			FROM USERS
			WHERE 
				ID = IN_USER_ID AND
				ACTIVE = TRUE;
				
			SELECT AFFILIATED_SITE, CLASS INTO VAR_TARGET_USER_SITE_ID, VAR_TARGET_USER_CLASS
			FROM USERS
			WHERE 
				ID = IN_TARGET_USER_ID AND
				ACTIVE = TRUE;
            IF VAR_USER_SITE_ID = 0 THEN
            /*사용자가 개인 사용자인 경우*/
				IF IN_USER_ID = IN_TARGET_USER_ID THEN
                /*삭제대상이 자신인 경우 정상처리한다.*/
					CALL sp_delete_user_without_handler(
						IN_TARGET_USER_ID,
						VAR_REG_DT,
						rtn_val,
						msg_txt
					);
					IF rtn_val = 0 THEN
					/*사용자 삭제에 성공한 경우 종료처리한다.*/
						SET rtn_val = 0;
						SET msg_txt = 'Success';
					ELSE
					/*사용자 삭제에 실패한 경우 예외처리한다.*/
						SIGNAL SQLSTATE '23000';
					END IF;
                ELSE
                /*삭제대상이 자신이 아닌 경우 예외처리한다.*/
					SET rtn_val = 26705;
					SET msg_txt = 'Individual users can only be deleted by themselves';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사용자가 사업자의 관리자 사용자인 경우*/
				IF IN_USER_ID = IN_TARGET_USER_ID THEN
				/*사용자와 삭제대상 사용자가 동일인인 경우*/			
					IF VAR_USER_SITE_ID = VAR_TARGET_USER_SITE_ID THEN
					/*삭제자와 삭제대상자의 사이트가 동일한 경우 정상처리한다.*/
						SELECT COUNT(ID) INTO VAR_COUNT_OF_USERS
						FROM USERS
						WHERE AFFILIATED_SITE = VAR_USER_SITE_ID;
						
						IF VAR_COUNT_OF_USERS = 1 THEN
						/*사이트에 소속하고 있는 활성 사용자가 1인인 경우*/
							CALL sp_delete_user_without_handler(
								IN_TARGET_USER_ID,
								VAR_REG_DT,
								rtn_val,
								msg_txt
							);
							IF rtn_val = 0 THEN
							/*사용자 삭제에 성공한 경우 정상처리한다.*/
								CALL sp_delete_site_without_handler(
									VAR_USER_SITE_ID,
									VAR_REG_DT,
									rtn_val,
									msg_txt
								);
								IF rtn_val = 0 THEN
								/*사이트 삭제에 성공한 경우 정상처리한다.*/
									SELECT HEAD_OFFICE, COMP_ID INTO VAR_HEAD_OFFICE, VAR_USER_COMP_ID
									FROM COMP_SITE
									WHERE ID = VAR_USER_SITE_ID;
									CALL sp_delete_company_without_handler_2(
										VAR_USER_COMP_ID,
										VAR_REG_DT,
										rtn_val,
										msg_txt
									);
									IF rtn_val = 0 THEN
									/*사업자 삭제에 성공한 경우 정상처리한다.*/
										IF VAR_HEAD_OFFICE = FALSE THEN
										/*현재 소속 사이트가 HEAD OFFICE가 아닌 경우 종료처리한다*/
											SET rtn_val = 0;
											SET msg_txt = 'Success';
										ELSE
										/*현재 소속 사이트가 HEAD OFFICE인 경우*/
											SELECT COUNT(ID) INTO VAR_COUNT_OF_NO_HEAD_OFFICE
											FROM COMP_SITE
											WHERE COMP_ID = VAR_USER_COMP_ID;
											IF VAR_COUNT_OF_NO_HEAD_OFFICE = 0 THEN
											/*동일한 사업자에서 파생된 다른 사이트가 존재하지 않는 경우 정상처리한다.*/
												SELECT P_COMP_ID INTO VAR_P_COMP_ID
												FROM COMPANY
												WHERE ID = VAR_USER_COMP_ID;
												IF VAR_P_COMP_ID > 0 THEN
												/*현재 소속 사업자가 모회사가 아닌 경우 종료처리한다.*/
													SET rtn_val = 0;
													SET msg_txt = 'Success';
												ELSE
												/*현재 소속 사업자가 모회사인 경우*/
													SELECT COUNT(ID) INTO VAR_COUNT_OF_CHILD_COMPANY
													FROM COMPANY
													WHERE P_COMP_ID = VAR_USER_COMP_ID;
													IF VAR_COUNT_OF_CHILD_COMPANY = 0 THEN
													/*사용자가 소속한 사업자를 모회사로 하는 종속사업자가 존재하지 않는 경우 종료처리한다.*/
														SET rtn_val = 0;
														SET msg_txt = 'Success';
													ELSE
													/*사용자가 소속한 사업자를 모회사로 하는 종속사업자가 존재하는 경우 예외처리한다.*/
														SET rtn_val = 26705;
														SET msg_txt = 'Non-deletion of parent company with subsidiaries';
														SIGNAL SQLSTATE '23000';
													END IF;
												END IF;
											ELSE
											/*동일한 사업자에서 파생된 다른 사이트가 존재하는 경우 종료처리한다.*/
												SET rtn_val = 0;
												SET msg_txt = 'Success';
											END IF;
										END IF;
									ELSE
									/*사업자 삭제에 실패한 경우 예외처리한다.*/
										SIGNAL SQLSTATE '23000';
									END IF;
								ELSE
								/*사이트 삭제에 실패한 경우 예외처리한다.*/
									SIGNAL SQLSTATE '23000';
								END IF;
							ELSE
							/*사용자 삭제에 실패한 경우 예외처리한다.*/
								SIGNAL SQLSTATE '23000';
							END IF;
						ELSE
						/*사이트에 소속하고 있는 활성 사용자가 1인 이상인 경우*/
							IF VAR_USER_CLASS > 201 THEN
							/*최고권한자가 아닌 경우에는 정상처리한다.*/
								CALL sp_delete_user_without_handler(
									IN_TARGET_USER_ID,
									VAR_REG_DT,
									rtn_val,
									msg_txt
								);
								IF rtn_val = 0 THEN
								/*사용자 삭제에 성공한 경우 종료처리한다.*/
									SET rtn_val = 0;
									SET msg_txt = 'Success';
								ELSE
								/*사용자 삭제에 실패한 경우 예외처리한다.*/
									SIGNAL SQLSTATE '23000';
								END IF;
							ELSE
							/*최고권한자인 경우에는 예외처리한다.*/
								SET rtn_val = 26704;
								SET msg_txt = 'If a general user exists, the super user cannot be deleted';
								SIGNAL SQLSTATE '23000';
							END IF;
						END IF;
					ELSE
					/*삭제자와 삭제대상자의 사이트가 동일하지 않은 경우 예외처리한다.*/
						SET rtn_val = 26703;
						SET msg_txt = 'Non-deletion of parent company with subsidiaries';
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*사용자와 삭제대상 사용자가 동일인이 아닌 경우*/
					IF VAR_USER_SITE_ID = VAR_TARGET_USER_SITE_ID THEN
					/*사용자 사이트와 삭제 대상 사용자의 사이트가 동일한 경우*/
						IF VAR_USER_CLASS < VAR_TARGET_USER_CLASS THEN
						/*사용자가 다른 사용자를 삭제할 권한이 있는 경우 정상처리한다.*/
							CALL sp_delete_user_without_handler(
								IN_TARGET_USER_ID,
								VAR_REG_DT,
								rtn_val,
								msg_txt
							);
							IF rtn_val = 0 THEN
							/*사용자 삭제에 성공한 경우 종료처리한다.*/
								SET rtn_val = 0;
								SET msg_txt = 'Success';
							ELSE
							/*사용자 삭제에 실패한 경우 예외처리한다.*/
								SIGNAL SQLSTATE '23000';
							END IF;
						ELSE
						/*사용자가 다른 사용자를 삭제할 권한이 없는 경우 예외처리한다.*/
							SET rtn_val = 26702;
							SET msg_txt = 'No permission to delete other users';
							SIGNAL SQLSTATE '23000';
						END IF;
					ELSE
					/*사용자 사이트와 삭제 대상 사용자의 사이트가 동일하지 않은 경우 예외처리한다.*/
						SET rtn_val = 26701;
						SET msg_txt = 'Cannot delete users from other sites';
						SIGNAL SQLSTATE '23000';
					END IF;
				END IF;
            END IF;
		ELSE 
		/*삭제 대상자가 인증되지 않은 사용자인 경우*/  
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE   
    /*요청자가 인증되지 않은 사용자인 경우*/
		SIGNAL SQLSTATE '23000';
	END IF;
	COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_delete_user_without_handler`(
    IN IN_USER_ID						BIGINT,				/*입력값 : 삭제할 사용자 아이디*/
    IN IN_REG_DT						DATETIME,			/*입력값 : 실행 시간*/
    OUT rtn_val 						INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 						VARCHAR(200)		/*출력값 : 처리결과 문자열*/
    
)
BEGIN

/*
Procedure Name 	: sp_delete_user
Input param 	: 2개
Job 			: 개인정보를 삭제하는 기능
Update 			: 2022.01.29
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/	
	DECLARE VAR_COUNT_OF_DELETED_USERS			INT		 		DEFAULT NULL;	
    
    SELECT COUNT(ID) INTO VAR_COUNT_OF_DELETED_USERS
    FROM USERS
    WHERE 
		ACTIVE = FALSE AND
		ID = IN_USER_ID;
	IF VAR_COUNT_OF_DELETED_USERS = 0 THEN
    /*사용자가 아직 삭제가 되지 않은 경우 정상처리한다.*/
		UPDATE USERS 
		SET 
			ACTIVE 			= FALSE, 
			UPDATED_AT 		= IN_REG_DT 
		WHERE ID 			= IN_USER_ID;
			
		IF ROW_COUNT() = 1 THEN
		/*모든 트랜잭션이 성공한 경우에만 로그를 한다.*/				
			UPDATE SITE_WSTE_DISPOSAL_ORDER
			SET 
				IS_DELETED = TRUE,
				ACTIVE = FALSE,
				UPDATED_AT = IN_REG_DT
			WHERE 
				DISPOSER_ID = IN_USER_ID AND
                SITE_ID = 0;
			SET rtn_val = 0;
			SET msg_txt = 'Success';
		ELSE
		/*변경이 적용되지 않은 경우*/
			SET rtn_val = 36802;
			SET msg_txt = 'Failed to delete user account';
		END IF;
    ELSE
    /*사용자가 이미 삭제된 경우에는 예외처리한다.*/
		SET rtn_val = 36801;
		SET msg_txt = 'user already deleted';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_disposer_change_discharged_end_at`(
	IN IN_USER_ID						BIGINT,			/*입력값: 배출업체 관리자 아이디(USERS.ID)*/
	IN IN_DISPOSER_ORDER_ID				BIGINT,			/*입력값: 폐기물 입찰등록번호(SITE_WSTE_DISPOSAL_ORDER.ID)*/
	IN IN_COLLECTOR_BIDDING_ID			BIGINT,			/*입력값: 수거업체 투찰번호(COLLECTOR_BIDDING.ID)*/
	IN IN_DISCHARGED_AT					DATETIME		/*입력값: 배출업체가 변경 또는 결정하고자 하는 처리예정일자*/
)
BEGIN

/*
Procedure Name 	: sp_disposer_change_discharged_end_at
Input param 	: 4개
Job 			: 폐기물 배출업체 또는 사용자가 폐기물 처리예정일을 변경 또는 결정한다.
Update 			: 2022.03.25
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/		
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT		 	DEFAULT NULL;	
	DECLARE VAR_DISPOSER_ID						BIGINT		 	DEFAULT NULL;	
	DECLARE VAR_COLLECTOR_ID					BIGINT		 	DEFAULT NULL;	
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT		 	DEFAULT NULL;	
	DECLARE VAR_USER_CLASS						INT		 		DEFAULT NULL;	
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );	
    
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다*/
		SELECT AFFILIATED_SITE 
		INTO VAR_USER_SITE_ID 
		FROM USERS 
		WHERE ID = IN_USER_ID;
        
		IF VAR_USER_SITE_ID = 0 THEN
		/*개인사용자인 경우*/
			SELECT DISPOSER_ID, COLLECTOR_ID
			INTO VAR_DISPOSER_ID, VAR_COLLECTOR_ID
			FROM SITE_WSTE_DISPOSAL_ORDER 
			WHERE ID = IN_DISPOSER_ORDER_ID;
			IF VAR_DISPOSER_ID = IN_USER_ID THEN
			/*사용자가 배출등록자와 동일한 경우 정상처리한다.*/
				CALL sp_disposer_change_discharged_end_at_without_handler(
					IN_DISPOSER_ORDER_ID,
					IN_COLLECTOR_BIDDING_ID,
					IN_DISCHARGED_AT,
					rtn_val,
					msg_txt
				);
			ELSE
			/*사용자가 배출등록자와 동일하지 않은 경우 예외처리한다.*/
				SET rtn_val 		= 34903;
				SET msg_txt 		= 'Users are not waste discharger';
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
		/*사업자사용자인 경우*/
			SELECT SITE_ID INTO VAR_DISPOSER_SITE_ID 
            FROM SITE_WSTE_DISPOSAL_ORDER 
            WHERE ID = IN_DISPOSER_ORDER_ID;
			IF VAR_USER_SITE_ID = VAR_DISPOSER_SITE_ID THEN
			/*사용자가 폐기물배출사이트의 소속인 경우에는 정상처리한다.*/
				SELECT CLASS INTO VAR_USER_CLASS 
                FROM USERS 
                WHERE ID = IN_USER_ID;
				IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
				/*사용자에게 권한이 있는 경우에는 정상처리한다.*/
					CALL sp_disposer_change_discharged_end_at_without_handler(
						IN_DISPOSER_ORDER_ID,
						IN_COLLECTOR_BIDDING_ID,
						IN_DISCHARGED_AT,
						rtn_val,
						msg_txt
					);
				ELSE
				/*사용자에게 권한이 없는 경우에는 예외처리한다.*/
					SET rtn_val 		= 34902;
					SET msg_txt 		= 'User not authorized';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*사용자가 폐기물배출사이트의 소속이 아닌 경우에는 예외처리한다.*/
				SET rtn_val 		= 34901;
				SET msg_txt 		= 'Users does not belong to the site';
				SIGNAL SQLSTATE '23000';
			END IF;
		END IF;	
    END IF; 
	SET json_data 		= NULL;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);	
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_disposer_change_discharged_end_at_without_handler`(
    IN IN_DISPOSER_ORDER_ID				BIGINT,
	IN IN_COLLECTOR_BIDDING_ID			BIGINT,
	IN IN_DISCHARGED_AT					DATETIME,
    OUT rtn_val							INT,
    OUT msg_txt							VARCHAR(200)
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;		
	DECLARE VAR_TRANSACTION_COUNT				INT		 		DEFAULT NULL;		
	DECLARE VAR_TRANSACTION_ID					BIGINT		 	DEFAULT NULL;		
	DECLARE VAR_BIDDING_RANK					INT		 		DEFAULT NULL;		
	DECLARE VAR_FIRST_SELECTED					BIGINT	 		DEFAULT NULL;		
	DECLARE VAR_COLLECTOR_SELECTION_CONFIRMED	TINYINT	 		DEFAULT NULL;		
	DECLARE VAR_TRANSACTION_COUNT_IN_PROGRESS	INT		 		DEFAULT NULL;	
    
	CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) INTO VAR_TRANSACTION_COUNT
	FROM WSTE_CLCT_TRMT_TRANSACTION
	WHERE DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID;
	IF VAR_TRANSACTION_COUNT > 0 THEN
		SELECT COUNT(ID) INTO VAR_TRANSACTION_COUNT_IN_PROGRESS
		FROM WSTE_CLCT_TRMT_TRANSACTION
		WHERE 
			DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND
			IN_PROGRESS = TRUE;
            
		IF VAR_TRANSACTION_COUNT_IN_PROGRESS = 0 THEN
			SET rtn_val 		= 35209;
			SET msg_txt 		= 'transaction in progress does not exist';
		ELSE
			IF VAR_TRANSACTION_COUNT_IN_PROGRESS = 1 THEN
				SELECT ID INTO VAR_TRANSACTION_ID
				FROM WSTE_CLCT_TRMT_TRANSACTION
				WHERE 
					DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID AND
					IN_PROGRESS 		= TRUE;
                    
				UPDATE WSTE_CLCT_TRMT_TRANSACTION 
				SET 
					COLLECT_ASK_END_AT 	= IN_DISCHARGED_AT,
					UPDATED_AT 			= VAR_REG_DT
				WHERE ID 				= VAR_TRANSACTION_ID;
				IF ROW_COUNT() = 1 THEN   
					SELECT BIDDING_RANK 
					INTO VAR_BIDDING_RANK 
					FROM COLLECTOR_BIDDING
					WHERE ID = IN_COLLECTOR_BIDDING_ID;  
					
					IF VAR_BIDDING_RANK = 1 THEN
						CALL sp_setup_first_place_schedule(
							IN_DISPOSER_ORDER_ID,
							rtn_val,
							msg_txt
						);
					ELSE
						IF VAR_BIDDING_RANK = 2 THEN
							SELECT SELECTED INTO VAR_FIRST_SELECTED
							FROM SITE_WSTE_DISPOSAL_ORDER
							WHERE ID = IN_DISPOSER_ORDER_ID;
							
							IF VAR_FIRST_SELECTED > 0 THEN
								SELECT COLLECTOR_SELECTION_CONFIRMED
								INTO VAR_COLLECTOR_SELECTION_CONFIRMED
								FROM SITE_WSTE_DISPOSAL_ORDER
								WHERE ID = IN_DISPOSER_ORDER_ID;
								
								IF VAR_COLLECTOR_SELECTION_CONFIRMED IS NOT NULL THEN
									IF VAR_COLLECTOR_SELECTION_CONFIRMED = TRUE THEN
										SET rtn_val 		= 35208;
										SET msg_txt 		= 'The bid has already been awarded to the 1st place bidder';
									ELSE
										CALL sp_setup_second_place_schedule(
											IN_DISPOSER_ORDER_ID,
											rtn_val,
											msg_txt
										);
									END IF;
								ELSE
									CALL sp_setup_second_place_schedule(
										IN_DISPOSER_ORDER_ID,
                                        rtn_val,
                                        msg_txt
                                    );
								END IF;
							ELSE
								SET rtn_val 		= 35205;
								SET msg_txt 		= 'should request from the 1st priority site';
							END IF;
						ELSE
							SET rtn_val 		= 35204;
							SET msg_txt 		= 'sites with 3rd place or less';
						END IF;
					END IF;
				ELSE
					SET rtn_val 		= 35203;
					SET msg_txt 		= 'failed to update record';
				END IF;
			ELSE
				SET rtn_val 		= 35202;
				SET msg_txt 		= 'Must have 1 active transaction';
			END IF;
		END IF;
	ELSE
		SET rtn_val 		= 35201;
		SET msg_txt 		= 'transaction does not exist';
	END IF;
    
    

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_disposer_reject_visit`(
	IN IN_USER_ID					BIGINT,						/*취소신청을 하는 사용자의 고유등록번호(USERS.ID)*/
	IN IN_COLLECTOR_BIDDING_ID		BIGINT						/*sp_req_disposal_order_details에서 반환된 업체정보 JSON데이타의 ID(COLLECTOR_BIDDING_ID)임*/
)
BEGIN

/*
Procedure Name 	: sp_disposer_reject_visit
Input param 	: 2개
Job 			: 배출자가 수거자의 방문신청을 거절한다.
Update 			: 2022.01.28
Version			: 0.0.2
AUTHOR 			: Leo Nam
				: 반환 타입은 레코드를 사용하기로 함. 모든 프로시저에 공통으로 적용(0.0.2)
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;		
	DECLARE VAR_USER_SITE_ID					BIGINT		 	DEFAULT NULL;		
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT		 	DEFAULT NULL;		
	DECLARE VAR_USER_CLASS						INT		 		DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_DISPOSER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    
    IF rtn_val = TRUE THEN
    /*사용자가 존재하는 사용자인 경우 정상처리한다.*/
		CALL sp_req_site_id_of_user_reg_id(
		/*사용자가 소속하고 있는 사이트의 고유등록번호를 반환한다.*/
			IN_USER_ID,
			VAR_USER_SITE_ID
		);
		
		CALL sp_req_dispoer_site_id_of_collector_bidding_id(
		/*입찰신청을 한 배출자의 사이트 등록번호를 반환한다.*/
			IN_COLLECTOR_BIDDING_ID,
			VAR_DISPOSER_SITE_ID
		);
		
		IF VAR_USER_SITE_ID = VAR_DISPOSER_SITE_ID THEN
		/*사용자가 배출자 사이트의 소속인 경우에는 정상처리한다.*/
			CALL sp_req_user_class_by_user_reg_id(
            /*사용자의 권한(CLASS)를 반환한다.*/
				IN_USER_ID,
                VAR_USER_CLASS
            );
            IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
			/*사용자에게 권한이 있는 경우 정상처리한다.*/
				UPDATE COLLECTOR_BIDDING 
                SET 
					REJECT_VISIT 		= TRUE, 
                    REJECT_VISIT_AT 	= VAR_REG_DT, 
                    UPDATED_AT 			= VAR_REG_DT 
                WHERE ID 				= IN_COLLECTOR_BIDDING_ID;
                /*사용자가 해당 수거자의 방문에 대하여 거절의사를 표시한다.*/
                IF ROW_COUNT() = 1 THEN
                /*정보변경에 성공한 경우*/
					SET rtn_val = 0;
					SET msg_txt = 'Success';
                ELSE
                /*정보변경에 실패한 경우 예외처리한다.*/
					SET rtn_val = 24404;
					SET msg_txt = 'User does not have permission';
                    SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
			/*사용자에게 권한이 없는 경우 예외처리한다.*/
				SET rtn_val = 24403;
				SET msg_txt = 'User does not have permission';
                SIGNAL SQLSTATE '23000';
            END IF;
		ELSE
		/*사용자가 배출자 사이트의 소속이 아닌 경우에는 예외처리한다.*/
			SET rtn_val = 24402;
			SET msg_txt = 'User is not a member of the site';
            SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
    /*사용자가 존재하지 않는 사용자인 경우 예외처리한다.*/
		SET rtn_val = 24401;
		SET msg_txt = 'User account is invalid';
        SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
    
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_disposer_response_visit`(
	IN IN_USER_ID					BIGINT,						/*입력값 : 취소신청을 하는 사용자의 고유등록번호(USERS.ID)*/
	IN IN_COLLECTOR_BIDDING_ID		BIGINT,						/*입력값 : sp_req_disposal_order_details에서 반환된 업체정보 JSON데이타의 ID(COLLECTOR_BIDDING_ID)임*/
	IN IN_RESPONSE					TINYINT						/*입력값 : 수락인 경우 TRUE, 거절인 경우 FALSE*/
)
BEGIN

/*
Procedure Name 	: sp_disposer_reject_visit
Input param 	: 3개
Job 			: 배출자가 수거자의 방문신청을 응답(수락/거절)한다.
Update 			: 2022.03.19
Version			: 0.0.3
AUTHOR 			: Leo Nam
Changes			: 배출자의 방문수락 또는 거절 의사가 발생하는 경우 전체 방문가능자수를 계산하여 SITE_WSTE_DISPOSAL_ORDER.PROSPECTIVE_VISITORS를 UPDATE한다.(0.0.3)
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;		
	DECLARE VAR_USER_SITE_ID					BIGINT		 	DEFAULT NULL;		
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT		 	DEFAULT NULL;	
	DECLARE VAR_USER_CLASS						INT		 		DEFAULT NULL;		
	DECLARE VAR_DISPOSER_ORDER_ID				BIGINT		 	DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
	SET @PUSH_CATEGORY_ID = 2;
    CALL sp_req_current_time(VAR_REG_DT);
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 사용자인 경우 정상처리한다.*/
		CALL sp_req_site_id_of_user_reg_id(
		/*사용자가 소속하고 있는 사이트의 고유등록번호를 반환한다.*/
			IN_USER_ID,
			VAR_USER_SITE_ID,
			rtn_val,
			msg_txt
		);
		IF VAR_USER_SITE_ID IS NOT NULL THEN
		/*사이트가 유효한 경우 경우*/
			CALL sp_req_disposer_site_id_of_collector_bidding_id(
			/*입찰신청을 한 배출자의 사이트 등록번호를 반환한다.*/
				IN_COLLECTOR_BIDDING_ID,
				VAR_DISPOSER_SITE_ID
			);
			
			IF VAR_USER_SITE_ID = VAR_DISPOSER_SITE_ID THEN
			/*사용자가 배출자 사이트의 소속인 경우에는 정상처리한다.*/
				CALL sp_req_user_class_by_user_reg_id(
				/*사용자의 권한(CLASS)를 반환한다.*/
					IN_USER_ID,
					VAR_USER_CLASS
				);
				IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
				/*사용자에게 권한이 있는 경우 정상처리한다.*/
					UPDATE COLLECTOR_BIDDING 
                    SET 
						RESPONSE_VISIT 		= IN_RESPONSE, 
                        RESPONSE_VISIT_AT 	= VAR_REG_DT , 
                        UPDATED_AT		 	= VAR_REG_DT 
                    WHERE ID = IN_COLLECTOR_BIDDING_ID;
					/*사용자가 해당 수거자의 방문에 대하여 거절의사를 표시한다.*/
					IF ROW_COUNT() = 1 THEN
					/*정보변경에 성공한 경우*/
						SELECT DISPOSAL_ORDER_ID INTO VAR_DISPOSER_ORDER_ID 
                        FROM COLLECTOR_BIDDING 
                        WHERE ID = IN_COLLECTOR_BIDDING_ID;
						CALL sp_push_disposer_response_visit_1(
							IN_USER_ID,
							VAR_DISPOSER_ORDER_ID,
							IN_COLLECTOR_BIDDING_ID,
							json_data,
							rtn_val,
							msg_txt
						);
						CALL sp_calc_bidder_and_prospective_visitors(
							VAR_DISPOSER_ORDER_ID
						);
                        UPDATE CHAT_ROOMS 
                        SET 
							STATE = 102,
							CONFIRMED = IN_RESPONSE,
                            UPDATED_AT = VAR_REG_DT,
                            CONFIRMED_AT = VAR_REG_DT
                        WHERE 
							ORDER_ID = VAR_DISPOSER_ORDER_ID AND 
                            BIDDING_ID = IN_COLLECTOR_BIDDING_ID;
					ELSE
					/*정보변경에 실패한 경우 예외처리한다.*/
						SET rtn_val = 24404;
						SET msg_txt = 'User does not have permission';
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*사용자에게 권한이 없는 경우 예외처리한다.*/
					SET rtn_val = 24403;
					SET msg_txt = 'User does not have permission';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*사용자가 배출자 사이트의 소속이 아닌 경우에는 예외처리한다.*/
				SET rtn_val = 24402;
				SET msg_txt = 'User is not a member of the site';
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
		/*사이트가 존재하지 않거나 유효하지 않은(개인사용자의 경우) 경우*/
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
    /*사용자가 존재하지 않는 사용자인 경우 예외처리한다.*/
        SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
    
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_address_with_bcode`(
	IN IN_BCODE				VARCHAR(10),
    OUT OUT_ADDRESS_INFO	JSON
)
BEGIN
	
	CREATE TEMPORARY TABLE IF NOT EXISTS ADDRESS_INFO_TEMP (
		B_CODE					VARCHAR(10),
		SI_DO					VARCHAR(20),
		SI_GUN_GU				VARCHAR(20),
        EUP_MYEON_DONG			VARCHAR(20),
        DONG_RI					VARCHAR(20),
        JACHIGU					TINYINT
	);     
    
    INSERT INTO ADDRESS_INFO_TEMP (
		B_CODE,
		SI_DO,
		SI_GUN_GU,
        EUP_MYEON_DONG,
        DONG_RI,
        JACHIGU
	)
	SELECT 
		B_CODE,
		SI_DO,
		SI_GUN_GU,
        EUP_MYEON_DONG,
        DONG_RI,
        JACHIGU
	FROM KIKCD_B 
	WHERE 
		B_CODE = IN_BCODE AND
        CANCELED_DATE IS NULL;	
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'B_CODE'					, B_CODE, 
			'SI_DO'						, SI_DO, 
			'SI_GUN_GU'					, SI_GUN_GU, 
			'EUP_MYEON_DONG'			, EUP_MYEON_DONG,
			'DONG_RI'					, DONG_RI,
			'JACHIGU'					, JACHIGU
		)
	) 
	INTO OUT_ADDRESS_INFO 
	FROM ADDRESS_INFO_TEMP;	
	DROP TABLE IF EXISTS ADDRESS_INFO_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_bidding_info`(
	IN IN_BIDDING_ID					BIGINT,
    OUT OUT_BIDDING_INFO				JSON
)
BEGIN   
    
	CREATE TEMPORARY TABLE IF NOT EXISTS TRANSACTION_INFO_TEMP (
		ID								BIGINT,
		COLLECTOR_ID					BIGINT,
		DISPOSAL_ORDER_ID				BIGINT,
		BID_AMOUNT						INT,
		TRMT_METHOD						VARCHAR(4),
		GREENHOUSE_GAS					FLOAT,
		WINNER							TINYINT,
		ACTIVE							TINYINT,
        BIDDING_RANK					INT,
        STATUS_CODE						INT,
        CREATED_AT						DATETIME,
        DELETED							TINYINT,
        DELETED_AT						DATETIME,
        DATE_OF_VISIT					DATETIME,
        RESPONSE_VISIT					TINYINT,
        RESPONSE_VISIT_AT				DATETIME,
        CANCEL_VISIT					TINYINT,
        CANCEL_VISIT_AT					DATETIME,
        REJECT_BIDDING_APPLY			TINYINT,
        REJECT_BIDDING_APPLY_AT			DATETIME,
        GIVEUP_BIDDING					TINYINT,
        GIVEUP_BIDDING_AT				DATETIME,
        DATE_OF_BIDDING					DATETIME,
        CANCEL_BIDDING					TINYINT,
        CANCEL_BIDDING_AT				DATETIME,
        REJECT_BIDDING					TINYINT,
        REJECT_BIDDING_AT				DATETIME,
        SELECTED						TINYINT,
        SELECTED_AT						DATETIME,
        MAKE_DECISION					TINYINT,
        MAKE_DECISION_AT				DATETIME,
        MAX_DECISION_AT					DATETIME,
        ORDER_VISIBLE					TINYINT,
        ORDER_VISIBLE_CHANGED_AT		DATETIME,
        BIDDING_VISIBLE					TINYINT,
        BIDDING_VISIBLE_CHANGED_AT		DATETIME,
        UPDATED_AT						DATETIME,
        TRANSACTION_ID					BIGINT,
        STATIC_STATE					INT
	);     
    
    
	INSERT INTO 
	TRANSACTION_INFO_TEMP(
		ID,
		COLLECTOR_ID,
		DISPOSAL_ORDER_ID,
		BID_AMOUNT,
		TRMT_METHOD,
		GREENHOUSE_GAS,
		WINNER,
		ACTIVE,
        BIDDING_RANK,
        STATUS_CODE,
        CREATED_AT,
        DELETED,
        DELETED_AT,
        DATE_OF_VISIT,
        RESPONSE_VISIT,
        RESPONSE_VISIT_AT,
        CANCEL_VISIT,
        CANCEL_VISIT_AT,
        REJECT_BIDDING_APPLY,
        REJECT_BIDDING_APPLY_AT,
        GIVEUP_BIDDING,
        GIVEUP_BIDDING_AT,
        DATE_OF_BIDDING,
        CANCEL_BIDDING,
        CANCEL_BIDDING_AT,
        REJECT_BIDDING,
        REJECT_BIDDING_AT,
        SELECTED,
        SELECTED_AT,
        MAKE_DECISION,
        MAKE_DECISION_AT,
        MAX_DECISION_AT,
        ORDER_VISIBLE,
        ORDER_VISIBLE_CHANGED_AT,
        BIDDING_VISIBLE,
        BIDDING_VISIBLE_CHANGED_AT,
        UPDATED_AT,
        TRANSACTION_ID,
        STATIC_STATE
	)
	SELECT 
		ID,
		COLLECTOR_ID,
		DISPOSAL_ORDER_ID,
		BID_AMOUNT,
		TRMT_METHOD,
		GREENHOUSE_GAS,
		WINNER,
		ACTIVE,
        BIDDING_RANK,
        STATUS_CODE,
        CREATED_AT,
        DELETED,
        DELETED_AT,
        DATE_OF_VISIT,
        RESPONSE_VISIT,
        RESPONSE_VISIT_AT,
        CANCEL_VISIT,
        CANCEL_VISIT_AT,
        REJECT_BIDDING_APPLY,
        REJECT_BIDDING_APPLY_AT,
        GIVEUP_BIDDING,
        GIVEUP_BIDDING_AT,
        DATE_OF_BIDDING,
        CANCEL_BIDDING,
        CANCEL_BIDDING_AT,
        REJECT_BIDDING,
        REJECT_BIDDING_AT,
        SELECTED,
        SELECTED_AT,
        MAKE_DECISION,
        MAKE_DECISION_AT,
        MAX_DECISION_AT,
        ORDER_VISIBLE,
        ORDER_VISIBLE_CHANGED_AT,
        BIDDING_VISIBLE,
        BIDDING_VISIBLE_CHANGED_AT,
        UPDATED_AT,
        TRANSACTION_ID,
        STATIC_STATE
	FROM COLLECTOR_BIDDING
    WHERE ID = IN_BIDDING_ID; 
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'							, ID, 
		'COLLECTOR_ID'					, COLLECTOR_ID, 
		'DISPOSAL_ORDER_ID'				, DISPOSAL_ORDER_ID, 
		'BID_AMOUNT'					, BID_AMOUNT, 
		'TRMT_METHOD'					, TRMT_METHOD, 
		'GREENHOUSE_GAS'				, GREENHOUSE_GAS, 
		'WINNER'						, WINNER, 
		'ACTIVE'						, ACTIVE, 
		'BIDDING_RANK'					, BIDDING_RANK, 
		'STATUS_CODE'					, STATUS_CODE, 
		'CREATED_AT'					, CREATED_AT, 
		'DELETED'						, DELETED, 
		'DELETED_AT'					, DELETED_AT, 
		'DATE_OF_VISIT'					, DATE_OF_VISIT, 
		'RESPONSE_VISIT'				, RESPONSE_VISIT, 
		'RESPONSE_VISIT_AT'				, RESPONSE_VISIT_AT, 
		'CANCEL_VISIT'					, CANCEL_VISIT, 
        'CANCEL_VISIT_AT'				, CANCEL_VISIT_AT,
        'REJECT_BIDDING_APPLY'			, REJECT_BIDDING_APPLY,
		'REJECT_BIDDING_APPLY_AT'		, REJECT_BIDDING_APPLY_AT, 
		'GIVEUP_BIDDING'				, GIVEUP_BIDDING, 
		'GIVEUP_BIDDING_AT'				, GIVEUP_BIDDING_AT, 
		'DATE_OF_BIDDING'				, DATE_OF_BIDDING, 
		'CANCEL_BIDDING'				, CANCEL_BIDDING, 
		'CANCEL_BIDDING_AT'				, CANCEL_BIDDING_AT, 
		'REJECT_BIDDING'				, REJECT_BIDDING, 
		'REJECT_BIDDING_AT'				, REJECT_BIDDING_AT, 
		'SELECTED'						, SELECTED, 
		'SELECTED_AT'					, SELECTED_AT, 
		'MAKE_DECISION'					, MAKE_DECISION, 
		'MAKE_DECISION_AT'				, MAKE_DECISION_AT, 
		'MAX_DECISION_AT'				, MAX_DECISION_AT, 
		'ORDER_VISIBLE'					, ORDER_VISIBLE, 
		'ORDER_VISIBLE_CHANGED_AT'		, ORDER_VISIBLE_CHANGED_AT, 
		'BIDDING_VISIBLE'				, BIDDING_VISIBLE, 
		'BIDDING_VISIBLE_CHANGED_AT'	, BIDDING_VISIBLE_CHANGED_AT, 
		'UPDATED_AT'					, UPDATED_AT, 
		'TRANSACTION_ID'				, TRANSACTION_ID, 
		'STATIC_STATE'					, STATIC_STATE
	)) 
	INTO OUT_BIDDING_INFO
	FROM TRANSACTION_INFO_TEMP
    WHERE ID = IN_BIDDING_ID;     
	DROP TABLE IF EXISTS TRANSACTION_INFO_TEMP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_bidding_lists`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    IN IN_STATE_CATEGORY_ID			INT,
    OUT OUT_BIDDING_LIST			JSON
)
BEGIN
		
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'COLLECTOR_BIDDING_ID'			, A.ID, 
				'COLLECTOR_SITE_ID'				, A.COLLECTOR_ID, 
                'COLLECTOR_SI_DO'				, C.SI_DO, 
                'COLLECTOR_SI_GUN_GU'			, C.SI_GUN_GU, 
                'COLLECTOR_STATE'				, D.STATE, 
                'COLLECTOR_STATE_CODE'			, D.STATE_CODE, 
                'COLLECTOR_LAT'					, B.LAT, 
                'COLLECTOR_LNG'					, B.LNG, 
                'COLLECTOR_SITE_NAME'			, B.SITE_NAME, 
                'COLLECTOR_TRMT_BIZ_CODE'		, B.TRMT_BIZ_CODE, 
                'COLLECTOR_TRMT_BIZ_NM'			, E.NAME, 
                'COLLECTOR_BID_AMOUNT'			, A.BID_AMOUNT, 
                'COLLECTOR_GREENHOUSE_GAS'		, A.GREENHOUSE_GAS, 
                'COLLECTOR_WINNER'				, A.WINNER, 
                'COLLECTOR_ACTIVE'				, A.ACTIVE, 
                'COLLECTOR_CANCEL_VISIT'		, A.CANCEL_VISIT, 
                'COLLECTOR_CANCEL_BIDDING'		, A.CANCEL_BIDDING, 
                'COLLECTOR_DATE_OF_VISIT'		, A.DATE_OF_VISIT, 
                'COLLECTOR_DATE_OF_BIDDING'		, A.DATE_OF_BIDDING, 
                'COLLECTOR_SELECTED'			, A.SELECTED, 
                'COLLECTOR_SELECTED_AT'			, A.SELECTED_AT, 
                'COLLECTOR_MAKE_DECISION'		, A.MAKE_DECISION, 
                'COLLECTOR_MAKE_DECISION_AT'	, A.MAKE_DECISION_AT,
                'DISPOSER_RESPONSE_VISIT'		, A.RESPONSE_VISIT, 
                'DISPOSER_RESPONSE_VISIT_AT'	, A.RESPONSE_VISIT_AT,
                'DISPOSER_REJECT_BIDDING'		, A.REJECT_BIDDING, 
                'DISPOSER_REJECT_BIDDING_AT'	, A.REJECT_BIDDING_AT, 
                'COLLECTOR_STATE_CATEGORY_ID'	, D.STATE_CATEGORY_ID, 
                'COLLECTOR_STATE_CATEGORY'		, D.STATE_CATEGORY
			)
		) 
        INTO OUT_BIDDING_LIST
        FROM COLLECTOR_BIDDING A 
        LEFT JOIN COMP_SITE B ON A.COLLECTOR_ID = B.ID
        LEFT JOIN KIKCD_B C ON B.KIKCD_B_CODE = C.B_CODE
        LEFT JOIN V_BIDDING_STATE_NAME D ON A.ID = D.COLLECTOR_BIDDING_ID
        LEFT JOIN WSTE_TRMT_BIZ E ON B.TRMT_BIZ_CODE = E.CODE
        WHERE 
			A.DISPOSAL_ORDER_ID 		= IN_DISPOSER_ORDER_ID AND
            D.STATE_CATEGORY_ID 		>= IN_STATE_CATEGORY_ID AND
            D.STATE_PID					<> 211 AND
            D.STATE_CODE				<> 211;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_bidding_lists_2`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    OUT OUT_BIDDING_LIST			JSON
)
BEGIN
		
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'COLLECTOR_BIDDING_ID'			, A.ID, 
				'COLLECTOR_SITE_ID'				, A.COLLECTOR_ID, 
                'COLLECTOR_SI_DO'				, C.SI_DO, 
                'COLLECTOR_SI_GUN_GU'			, C.SI_GUN_GU, 
                'COLLECTOR_STATE'				, D.STATE, 
                'COLLECTOR_STATE_CODE'			, D.STATE_CODE, 
                'COLLECTOR_LAT'					, B.LAT, 
                'COLLECTOR_LNG'					, B.LNG, 
                'COLLECTOR_SITE_NAME'			, B.SITE_NAME, 
                'COLLECTOR_TRMT_BIZ_CODE'		, B.TRMT_BIZ_CODE, 
                'COLLECTOR_TRMT_BIZ_NM'			, E.NAME, 
                'COLLECTOR_BID_AMOUNT'			, A.BID_AMOUNT, 
                'COLLECTOR_GREENHOUSE_GAS'		, A.GREENHOUSE_GAS, 
                'COLLECTOR_WINNER'				, A.WINNER, 
                'COLLECTOR_ACTIVE'				, A.ACTIVE, 
                'COLLECTOR_CANCEL_VISIT'		, A.CANCEL_VISIT, 
                'COLLECTOR_CANCEL_BIDDING'		, A.CANCEL_BIDDING, 
                'COLLECTOR_DATE_OF_VISIT'		, A.DATE_OF_VISIT, 
                'COLLECTOR_DATE_OF_BIDDING'		, A.DATE_OF_BIDDING, 
                'COLLECTOR_SELECTED'			, A.SELECTED, 
                'COLLECTOR_SELECTED_AT'			, A.SELECTED_AT, 
                'COLLECTOR_MAKE_DECISION'		, A.MAKE_DECISION, 
                'COLLECTOR_MAKE_DECISION_AT'	, A.MAKE_DECISION_AT,
                'DISPOSER_RESPONSE_VISIT'		, A.RESPONSE_VISIT, 
                'DISPOSER_RESPONSE_VISIT_AT'	, A.RESPONSE_VISIT_AT,
                'DISPOSER_REJECT_BIDDING'		, A.REJECT_BIDDING, 
                'DISPOSER_REJECT_BIDDING_AT'	, A.REJECT_BIDDING_AT, 
                'COLLECTOR_STATE_CATEGORY_ID'	, D.STATE_CATEGORY_ID, 
                'COLLECTOR_STATE_CATEGORY'		, D.STATE_CATEGORY
			)
		) 
        INTO OUT_BIDDING_LIST
        FROM COLLECTOR_BIDDING A 
        LEFT JOIN COMP_SITE B ON A.COLLECTOR_ID = B.ID
        LEFT JOIN KIKCD_B C ON B.KIKCD_B_CODE = C.B_CODE
        LEFT JOIN V_BIDDING_STATE_NAME D ON A.ID = D.COLLECTOR_BIDDING_ID
        LEFT JOIN WSTE_TRMT_BIZ E ON B.TRMT_BIZ_CODE = E.CODE
        WHERE 
			IF(IN_DISPOSER_ORDER_ID IS NOT NULL,
				A.DISPOSAL_ORDER_ID 		= IN_DISPOSER_ORDER_ID AND
				D.STATE_PID					<> 211 AND
				D.STATE_CODE				<> 211,
				D.STATE_PID					<> 211 AND
				D.STATE_CODE				<> 211
			);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_bidding_lists_3`(
	IN IN_COLLECTOR_SITE_ID			BIGINT,
    OUT OUT_BIDDING_LIST			JSON
)
BEGIN
		DECLARE VAR_OUT_BIDDING_LIST			JSON;
		DECLARE VAR_OUT_TRANSACTION_LIST		JSON;
        
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'BIDDING_ID'			, A.ID, 
				'STATE'					, B.STATE, 
				'STATE_CODE'			, B.STATE_CODE, 
				'BID_AMOUNT'			, A.BID_AMOUNT, 
				'GREENHOUSE_GAS'		, A.GREENHOUSE_GAS, 
				'WINNER'				, A.WINNER, 
				'CANCEL_VISIT'			, A.CANCEL_VISIT, 
				'CANCEL_BIDDING'		, A.CANCEL_BIDDING, 
				'DATE_OF_VISIT'			, A.DATE_OF_VISIT, 
				'DATE_OF_BIDDING'		, A.DATE_OF_BIDDING, 
				'SELECTED'				, A.SELECTED, 
				'SELECTED_AT'			, A.SELECTED_AT, 
				'MAKE_DECISION'			, A.MAKE_DECISION, 
				'MAKE_DECISION_AT'		, A.MAKE_DECISION_AT,
				'RESPONSE_VISIT'		, A.RESPONSE_VISIT, 
				'RESPONSE_VISIT_AT'		, A.RESPONSE_VISIT_AT,
				'REJECT_BIDDING'		, A.REJECT_BIDDING, 
				'REJECT_BIDDING_AT'		, A.REJECT_BIDDING_AT, 
				'STATE_CATEGORY_ID'		, B.STATE_CATEGORY_ID, 
				'STATE_CATEGORY'		, B.STATE_CATEGORY, 
				'CREATED_AT'			, A.CREATED_AT, 
				'ORDER_ID'				, C.ID, 
				'ORDER_CODE'			, C.ORDER_CODE
			)
		) 
        INTO VAR_OUT_BIDDING_LIST
        FROM COLLECTOR_BIDDING A 
        LEFT JOIN V_BIDDING_STATE_NAME B 		ON A.ID = B.COLLECTOR_BIDDING_ID
        LEFT JOIN SITE_WSTE_DISPOSAL_ORDER C 	ON A.DISPOSAL_ORDER_ID = C.ID
        WHERE A.COLLECTOR_ID		 			= IN_COLLECTOR_SITE_ID
        ORDER BY A.ID DESC;
        
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'TRANSACTION_ID'		, A.ID, 
				'STATE'					, B.STATE, 
				'STATE_CODE'			, B.STATE_CODE, 
				'DATE_OF_VISIT'			, A.DATE_OF_VISIT, 
				'STATE_CATEGORY_ID'		, B.STATE_CATEGORY_ID, 
				'STATE_CATEGORY'		, B.STATE_CATEGORY
			)
		) 
        INTO VAR_OUT_TRANSACTION_LIST
        FROM WSTE_CLCT_TRMT_TRANSACTION A 
        LEFT JOIN V_TRANSACTION_STATE_NAME B 	ON A.ID	= B.TRANSACTION_ID
        WHERE 
			A.COLLECTOR_ID		 		= IN_COLLECTOR_SITE_ID AND
            A.COLLECTOR_BIDDING_ID		= NULL
        ORDER BY A.ID DESC;
        
        SELECT JSON_OBJECT(
			'BIDDINGS'					, VAR_OUT_BIDDING_LIST,
			'TRANSACTIONS'				, VAR_OUT_TRANSACTION_LIST,
            'BIDDING_COUNT'				, JSON_LENGTH(VAR_OUT_BIDDING_LIST),
            'TRANSACTION_COUNT'			, JSON_LENGTH(VAR_OUT_TRANSACTION_LIST)
        ) INTO OUT_BIDDING_LIST;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_bidding_lists_4`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    OUT OUT_BIDDING_LIST			JSON
)
BEGIN
		
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'COLLECTOR_BIDDING_ID'			, A.ID, 
			'COLLECTOR_SITE_ID'				, A.COLLECTOR_ID, 
			'COLLECTOR_SI_DO'				, C.SI_DO, 
			'COLLECTOR_SI_GUN_GU'			, C.SI_GUN_GU, 
			'COLLECTOR_STATE'				, D.STATE, 
			'COLLECTOR_STATE_CODE'			, D.STATE_CODE, 
			'COLLECTOR_LAT'					, B.LAT, 
			'COLLECTOR_LNG'					, B.LNG, 
			'COLLECTOR_SITE_NAME'			, B.SITE_NAME, 
			'COLLECTOR_TRMT_BIZ_CODE'		, B.TRMT_BIZ_CODE, 
			'COLLECTOR_TRMT_BIZ_NM'			, E.NAME, 
			'COLLECTOR_BID_AMOUNT'			, A.BID_AMOUNT, 
			'COLLECTOR_GREENHOUSE_GAS'		, A.GREENHOUSE_GAS, 
			'COLLECTOR_WINNER'				, A.WINNER, 
			'COLLECTOR_ACTIVE'				, A.ACTIVE, 
			'COLLECTOR_CANCEL_VISIT'		, A.CANCEL_VISIT, 
			'COLLECTOR_CANCEL_BIDDING'		, A.CANCEL_BIDDING, 
			'COLLECTOR_DATE_OF_VISIT'		, A.DATE_OF_VISIT, 
			'COLLECTOR_DATE_OF_BIDDING'		, A.DATE_OF_BIDDING, 
			'COLLECTOR_SELECTED'			, A.SELECTED, 
			'COLLECTOR_SELECTED_AT'			, A.SELECTED_AT, 
			'COLLECTOR_MAKE_DECISION'		, A.MAKE_DECISION, 
			'COLLECTOR_MAKE_DECISION_AT'	, A.MAKE_DECISION_AT,
			'COLLECTOR_PHONE'				, F.PHONE,
			'DISPOSER_RESPONSE_VISIT'		, A.RESPONSE_VISIT, 
			'DISPOSER_RESPONSE_VISIT_AT'	, A.RESPONSE_VISIT_AT,
			'DISPOSER_REJECT_BIDDING'		, A.REJECT_BIDDING, 
			'DISPOSER_REJECT_BIDDING_AT'	, A.REJECT_BIDDING_AT, 
			'COLLECTOR_STATE_CATEGORY_ID'	, D.STATE_CATEGORY_ID, 
			'COLLECTOR_STATE_CATEGORY'		, D.STATE_CATEGORY
		)
	) 
	INTO OUT_BIDDING_LIST
	FROM COLLECTOR_BIDDING A 
	LEFT JOIN COMP_SITE B ON A.COLLECTOR_ID = B.ID
	LEFT JOIN KIKCD_B C ON B.KIKCD_B_CODE = C.B_CODE
	LEFT JOIN V_BIDDING_STATE_NAME D ON A.ID = D.COLLECTOR_BIDDING_ID
	LEFT JOIN WSTE_TRMT_BIZ E ON B.TRMT_BIZ_CODE = E.CODE
    LEFT JOIN USERS F ON B.ID = F.AFFILIATED_SITE
	WHERE 
		A.DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND
        F.CLASS = 201;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_bidding_state`(
	IN IN_ORDER_ID					BIGINT,
    OUT OUT_STATE					TINYINT
)
BEGIN
	SELECT COUNT(ID) INTO @RECORD_COUNT
    FROM COLLECTOR_BIDDING
    WHERE 
		DISPOSAL_ORDER_ID = IN_ORDER_ID AND
        CHECK_STATE = FALSE;
        
	IF @RECORD_COUNT > 0 THEN
		SET OUT_STATE = TRUE;
    ELSE
		SET OUT_STATE = FALSE;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_business_area`(
	IN IN_SITE_ID					BIGINT,
    OUT OUT_BUSINESS_AREA			JSON
)
BEGIN

/*
Procedure Name 	: sp_get_business_area
Input param 	: 1개
Output param 	: 1개
Job 			: 푸시를 보내기 위한 수거자 정보를 반환한다.
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 				INT 			DEFAULT 0;
    DECLARE endOfRow 				TINYINT 		DEFAULT FALSE;   
	DECLARE CUR_ID					BIGINT		 	DEFAULT NULL;
	DECLARE CUR_SITE_ID				BIGINT		 	DEFAULT NULL;
	DECLARE CUR_KIKCD_B_CODE		VARCHAR(10)	 	DEFAULT NULL;
	DECLARE CUR_IS_DEFAULT			TINYINT		 	DEFAULT NULL;
	DECLARE CUR_CREATED_AT			DATETIME	 	DEFAULT NULL;
	DECLARE CUR_ACTIVE				TINYINT		 	DEFAULT NULL;
	DECLARE CUR_DELETED_AT			DATETIME	 	DEFAULT NULL;
	DECLARE VAR_BCODE_INFO			JSON		 	DEFAULT NULL;
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
	
	SELECT 
		A.ID, 
        A.SITE_ID,
        A.KIKCD_B_CODE,
        A.IS_DEFAULT,
        A.CREATED_AT,
        A.ACTIVE,
        A.DELETED_AT
	FROM BUSINESS_AREA A
	WHERE 
		A.SITE_ID = IN_SITE_ID AND
        A.ACTIVE = TRUE AND
        A.DELETED_AT IS NULL;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    SET OUT_BUSINESS_AREA = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS GET_BUSINESS_AREA_TEMP (
		ID					BIGINT,
		SITE_ID				BIGINT,
		KIKCD_B_CODE		VARCHAR(10),
		IS_DEFAULT			TINYINT,
		CREATED_AT			DATETIME,
		ACTIVE				TINYINT,
		DELETED_AT			DATETIME,
		BCODE_INFO			JSON
	);  
    
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ID,
			CUR_SITE_ID,
			CUR_KIKCD_B_CODE,
			CUR_IS_DEFAULT,
			CUR_CREATED_AT,
			CUR_ACTIVE,
			CUR_DELETED_AT;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
        SELECT JSON_OBJECT(
			'B_CODE',			B_CODE,
			'SI_DO',			SI_DO,
			'SI_GUN_GU',		SI_GUN_GU,
			'EUP_MYEON_DONG',	EUP_MYEON_DONG,
			'DONG_RI',			DONG_RI,
			'CREATED_DATE',		CREATED_DATE,
			'CANCELED_DATE',	CANCELED_DATE,
			'JACHIGU',			JACHIGU
        ) INTO VAR_BCODE_INFO
        FROM KIKCD_B
        WHERE B_CODE = CUR_KIKCD_B_CODE;
        
		INSERT INTO 
		GET_BUSINESS_AREA_TEMP(
			ID,
			SITE_ID,
			KIKCD_B_CODE,
			IS_DEFAULT,
			CREATED_AT,
			ACTIVE,
			DELETED_AT,
            BCODE_INFO
		)
		VALUES(
			CUR_ID,
			CUR_SITE_ID,
			CUR_KIKCD_B_CODE,
			CUR_IS_DEFAULT,
			CUR_CREATED_AT,
			CUR_ACTIVE,
			CUR_DELETED_AT,
            VAR_BCODE_INFO
		);
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'				, ID,
		'SITE_ID'			, SITE_ID,
		'KIKCD_B_CODE'		, KIKCD_B_CODE,
		'IS_DEFAULT'		, IS_DEFAULT,
		'CREATED_AT'		, CREATED_AT,
		'ACTIVE'			, ACTIVE,
		'DELETED_AT'		, DELETED_AT,
		'BCODE_INFO'		, BCODE_INFO
	)) 
    INTO OUT_BUSINESS_AREA FROM GET_BUSINESS_AREA_TEMP;
    
	DROP TABLE IF EXISTS GET_BUSINESS_AREA_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_collector_bidding_wste_lists`(
	IN IN_COLLECTOR_BIDDING_ID			BIGINT,
    OUT OUT_WSTE_LIST					JSON
)
BEGIN	

/*
Procedure Name 	: sp_get_collector_bidding_wste_lists
Input param 	: 1개
Job 			: 폐기물 수집업자가 투찰(견적)할 때의 폐기물 리스트를 반환한다. 폐기물 수집업자가 실제로 수거한 폐기물 리스트는 WSTE_CLCT_TRMT_TRANSACTION에서 관리된다. 
Update 			: 2022.04.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
				
*/
        
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'ID'				, A.ID, 
			'WSTE_NM'			, B.NAME, 
            'UNIT'				, A.UNIT, 
            'UNIT_PRICE'		, A.UNIT_PRICE, 
            'VOLUME'			, A.VOLUME, 
            'TRMT_METHOD_NM'	, C.NAME, 
            'TRMT_CODE'			, A.TRMT_CODE
		)) 
        INTO OUT_WSTE_LIST 
        FROM BIDDING_DETAILS A
        LEFT JOIN WSTE_CODE B ON A.WSTE_CODE = B.CODE
        LEFT JOIN WSTE_TRMT_METHOD C ON A.TRMT_CODE = C.CODE
        WHERE 
			A.COLLECTOR_BIDDING_ID = IN_COLLECTOR_BIDDING_ID AND
            A.ACTIVE = TRUE;
		/*DISPOSAL_ORDER_ID에 등록된 폐기물 종류 중 하나만 불러온다.*/
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_collector_bidding_wste_lists_2`(
	IN IN_COLLECTOR_BIDDING_ID			BIGINT,
    OUT OUT_WSTE_LIST					JSON
)
BEGIN	

/*
Procedure Name 	: sp_get_collector_bidding_wste_lists_2
Input param 	: 1개
Job 			: 폐기물 수집업자가 투찰(견적)할 때의 폐기물 리스트를 반환한다. 폐기물 수집업자가 실제로 수거한 폐기물 리스트는 WSTE_CLCT_TRMT_TRANSACTION에서 관리된다. 
Update 			: 2022.04.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
				
*/
        
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'							, ID, 
		'DISPOSAL_ORDER_ID'				, DISPOSAL_ORDER_ID, 
		'COLLECTOR_BIDDING_ID'			, COLLECTOR_BIDDING_ID, 
		'WSTE_NM'						, WSTE_NM, 
		'WSTE_CODE'						, WSTE_CODE, 
		'UNIT'							, UNIT, 
		'UNIT_PRICE'					, UNIT_PRICE, 
		'VOLUME'						, VOLUME, 
		'TRMT_METHOD_CODE'				, TRMT_METHOD_CODE, 
		'TRMT_METHOD_NM'				, TRMT_METHOD_NM, 
		'ACTIVE'						, ACTIVE, 
		'GREENHOUSE_GAS'				, GREENHOUSE_GAS, 
		'CREATED_AT'					, CREATED_AT
	)) 
	INTO OUT_WSTE_LIST 
	FROM V_BIDDING_DETAILS 
	WHERE COLLECTOR_BIDDING_ID = IN_COLLECTOR_BIDDING_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_collector_img_lists`(
	IN IN_TRANSACTION_ID			BIGINT,
    OUT OUT_IMG_LIST				JSON
)
BEGIN
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'FILE_NAME'			, FILE_NAME, 
			'IMG_PATH'			, IMG_PATH, 
			'FILE_SIZE'			, FILE_SIZE
		)
	) 
	INTO OUT_IMG_LIST 
	FROM WSTE_REGISTRATION_PHOTO  
	WHERE 
		TRANSACTION_ID = IN_TRANSACTION_ID AND
        ACTIVE = TRUE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_collector_list_for_push`(
	IN IN_ORDER_ID					BIGINT,
	IN IN_TITLE						VARCHAR(255),
	IN IN_BODY						VARCHAR(255),
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_get_collector_list_for_push
Input param 	: 1개
Output param 	: 1개
Job 			: 푸시를 보내기 위한 수거자 정보를 반환한다.
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_COLLECTOR_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)	 	DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_REPORT_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON		 	DEFAULT NULL;
	
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COLLECTOR_ID, ORDER_CODE INTO VAR_COLLECTOR_ID, VAR_ORDER_CODE
	FROM SITE_WSTE_DISPOSAL_ORDER
	WHERE ID = IN_ORDER_ID;
	
	SELECT ID INTO VAR_TRANSACTION_ID
	FROM WSTE_CLCT_TRMT_TRANSACTION
	WHERE DISPOSAL_ORDER_ID = IN_ORDER_ID;
	
	SELECT ID INTO VAR_REPORT_ID
	FROM TRANSACTION_REPORT
	WHERE DISPOSER_ORDER_ID = IN_ORDER_ID;
	
	CALL sp_req_current_time(VAR_REG_DT);
	IF VAR_COLLECTOR_ID IS NULL THEN
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'				, B.ID,
				'USER_NAME'				, B.USER_NAME,
				'FCM'					, B.FCM,
				'AVATAR_PATH'			, B.AVATAR_PATH,
				'PHONE'					, B.PHONE,
				'TITLE'					, IN_TITLE,
				'BODY'					, IN_BODY,
				'ORDER_ID'				, IN_ORDER_ID,
				'BIDDING_ID'			, A.ID,
				'TRANSACTION_ID'		, VAR_TRANSACTION_ID,
				'REPORT_ID'				, VAR_REPORT_ID,
				'CATEGORY_ID'			, IN_CATEGORY_ID,
				'CREATED_AT'			, VAR_REG_DT
			)
		) 
		INTO VAR_PUSH_INFO
		FROM COLLECTOR_BIDDING A 
		LEFT JOIN USERS B ON A.COLLECTOR_ID = B.AFFILIATED_SITE
		WHERE 
			B.ACTIVE 				= TRUE AND 
			B.PUSH_ENABLED 			= TRUE AND
			A.ACTIVE 				= TRUE AND
			A.DELETED 				= FALSE AND
			A.RESPONSE_VISIT 		= TRUE AND
			A.CANCEL_VISIT 			= FALSE AND
			A.REJECT_BIDDING_APPLY 	= FALSE AND
			A.GIVEUP_BIDDING 		= FALSE AND
			A.CANCEL_BIDDING 		= FALSE AND
			A.REJECT_BIDDING 		= FALSE AND
			A.BIDDING_VISIBLE 		= TRUE AND
			A.ORDER_VISIBLE 		= TRUE AND
			A.DISPOSAL_ORDER_ID 	= IN_ORDER_ID;
	ELSE
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'				, B.ID,
				'USER_NAME'				, B.USER_NAME,
				'FCM'					, B.FCM,
				'AVATAR_PATH'			, B.AVATAR_PATH,
				'PHONE'					, B.PHONE,
				'TITLE'					, IN_TITLE,
				'BODY'					, IN_BODY,
				'ORDER_ID'				, IN_ORDER_ID,
				'BIDDING_ID'			, NULL,
				'TRANSACTION_ID'		, VAR_TRANSACTION_ID,
				'REPORT_ID'				, VAR_REPORT_ID,
				'CATEGORY_ID'			, IN_CATEGORY_ID,
				'CREATED_AT'			, VAR_REG_DT
			)
		) 
		INTO VAR_PUSH_INFO
		FROM WSTE_CLCT_TRMT_TRANSACTION A 
		LEFT JOIN USERS B ON A.COLLECTOR_SITE_ID = B.AFFILIATED_SITE
		WHERE 
			B.ACTIVE = TRUE AND 
			B.PUSH_ENABLED = TRUE AND
			A.IN_PROGRESS = TRUE AND
			A.ACCEPT_ASK_END = TRUE AND
			A.DISPOSAL_ORDER_ID = IN_ORDER_ID;
	END IF;
	
	CALL sp_insert_push(
		0,
		VAR_PUSH_INFO,
		rtn_val,
		msg_txt
	);
		
	SET OUT_TARGET_LIST = VAR_PUSH_INFO;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_collector_list_for_push_2`(
	IN IN_ORDER_ID					BIGINT,
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_get_collector_list_for_push_2
Input param 	: 1개
Output param 	: 1개
Job 			: 푸시를 보내기 위한 수거자 정보를 반환한다.
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_ORDER_EXISTS					INT		 		DEFAULT 0;
	DECLARE VAR_COLLECTOR_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)	 	DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_REPORT_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON		 	DEFAULT NULL;
	
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) 
    INTO VAR_ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID 				= IN_ORDER_ID AND
        IS_DELETED 		= FALSE AND
        ACTIVE		 	= TRUE;
        
    IF VAR_ORDER_EXISTS = 1 THEN
		SELECT COLLECTOR_ID, ORDER_CODE INTO VAR_COLLECTOR_ID, VAR_ORDER_CODE
        FROM SITE_WSTE_DISPOSAL_ORDER
        WHERE ID = IN_ORDER_ID;
        
		SELECT ID INTO VAR_TRANSACTION_ID
        FROM WSTE_CLCT_TRMT_TRANSACTION
        WHERE DISPOSAL_ORDER_ID = IN_ORDER_ID;
        
        SELECT ID INTO VAR_REPORT_ID
        FROM TRANSACTION_REPORT
        WHERE DISPOSER_ORDER_ID = IN_ORDER_ID;
        
		CALL sp_req_current_time(VAR_REG_DT);
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'				, B.ID,
				'USER_NAME'				, B.USER_NAME,
				'FCM'					, B.FCM,
				'AVATAR_PATH'			, B.AVATAR_PATH,
				'PHONE'					, B.PHONE,
				'TITLE'					, CONCAT('[', VAR_ORDER_CODE, ']', '유찰알림'),
				'BODY'					, '해당입찰에 유찰되었습니다.',
				'ORDER_ID'				, IN_ORDER_ID,
				'BIDDING_ID'			, A.ID,
				'TRANSACTION_ID'		, VAR_TRANSACTION_ID,
				'REPORT_ID'				, VAR_REPORT_ID,
				'CATEGORY_ID'			, IN_CATEGORY_ID,
				'CREATED_AT'			, VAR_REG_DT
			)
		) 
		INTO VAR_PUSH_INFO
		FROM COLLECTOR_BIDDING A 
		LEFT JOIN USERS B ON A.COLLECTOR_ID = B.AFFILIATED_SITE
		WHERE 
			B.ACTIVE 				= TRUE AND 
			B.PUSH_ENABLED 			= TRUE AND
			A.ACTIVE 				= TRUE AND
			A.DELETED 				= FALSE AND
			A.RESPONSE_VISIT 		= TRUE AND
			A.CANCEL_VISIT 			= FALSE AND
			A.REJECT_BIDDING_APPLY 	= FALSE AND
			A.GIVEUP_BIDDING 		= FALSE AND
			A.CANCEL_BIDDING 		= FALSE AND
			A.REJECT_BIDDING 		= FALSE AND
			A.BIDDING_VISIBLE 		= TRUE AND
			A.ORDER_VISIBLE 		= TRUE AND
			A.DISPOSAL_ORDER_ID 	= IN_ORDER_ID AND
			A.BIDDING_RANK = 1;
        
        CALL sp_insert_push(
			0,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
        );
            
		SET OUT_TARGET_LIST = VAR_PUSH_INFO;
    ELSE
		SET rtn_val = 38901;
        SET msg_txt = 'order does not exist';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_collector_list_for_push_3`(
	IN IN_ORDER_ID					BIGINT,
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_get_collector_list_for_push_3
Input param 	: 1개
Output param 	: 1개
Job 			: 푸시를 보내기 위한 수거자 정보를 반환한다.
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_ORDER_EXISTS					INT		 		DEFAULT 0;
	DECLARE VAR_COLLECTOR_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)	 	DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_REPORT_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON		 	DEFAULT NULL;
	
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) 
    INTO VAR_ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID 				= IN_ORDER_ID AND
        IS_DELETED 		= FALSE AND
        ACTIVE		 	= TRUE;
        
    IF VAR_ORDER_EXISTS = 1 THEN
		SELECT COLLECTOR_ID, ORDER_CODE INTO VAR_COLLECTOR_ID, VAR_ORDER_CODE
        FROM SITE_WSTE_DISPOSAL_ORDER
        WHERE ID = IN_ORDER_ID;
        
		SELECT ID INTO VAR_TRANSACTION_ID
        FROM WSTE_CLCT_TRMT_TRANSACTION
        WHERE DISPOSAL_ORDER_ID = IN_ORDER_ID;
        
        SELECT ID INTO VAR_REPORT_ID
        FROM TRANSACTION_REPORT
        WHERE DISPOSER_ORDER_ID = IN_ORDER_ID;
        
		CALL sp_req_current_time(VAR_REG_DT);
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'				, B.ID,
				'USER_NAME'				, B.USER_NAME,
				'FCM'					, B.FCM,
				'AVATAR_PATH'			, B.AVATAR_PATH,
				'PHONE'					, B.PHONE,
				'TITLE'					, IF(A.BIDDING_RANK = 1, CONCAT('[', VAR_ORDER_CODE, ']', '유찰알림'), CONCAT('[', VAR_ORDER_CODE, ']', '낙찰알림')),
				'BODY'					, IF(A.BIDDING_RANK = 1, '해당입찰에 유찰되었습니다.', '2순위로 낙찰되었습니다.'), 
				'ORDER_ID'				, IN_ORDER_ID,
				'BIDDING_ID'			, A.ID,
				'TRANSACTION_ID'		, VAR_TRANSACTION_ID,
				'REPORT_ID'				, VAR_REPORT_ID,
				'CATEGORY_ID'			, IN_CATEGORY_ID,
				'CREATED_AT'			, VAR_REG_DT
			)
		) 
		INTO VAR_PUSH_INFO
		FROM COLLECTOR_BIDDING A 
		LEFT JOIN USERS B ON A.COLLECTOR_ID = B.AFFILIATED_SITE
		WHERE 
			B.ACTIVE 				= TRUE AND 
			B.PUSH_ENABLED 			= TRUE AND
			A.ACTIVE 				= TRUE AND
			A.DELETED 				= FALSE AND
			A.RESPONSE_VISIT 		= TRUE AND
			A.CANCEL_VISIT 			= FALSE AND
			A.REJECT_BIDDING_APPLY 	= FALSE AND
			A.GIVEUP_BIDDING 		= FALSE AND
			A.CANCEL_BIDDING 		= FALSE AND
			A.REJECT_BIDDING 		= FALSE AND
			A.BIDDING_VISIBLE 		= TRUE AND
			A.ORDER_VISIBLE 		= TRUE AND
			A.DISPOSAL_ORDER_ID 	= IN_ORDER_ID AND
			(A.BIDDING_RANK <= 2);
        
        CALL sp_insert_push(
			0,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
        );
            
		SET OUT_TARGET_LIST = VAR_PUSH_INFO;
    ELSE
		SET rtn_val = 38901;
        SET msg_txt = 'order does not exist';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_collector_list_for_push_4`(
	IN IN_ORDER_ID					BIGINT,
	IN IN_TITLE						VARCHAR(255),
	IN IN_BODY						VARCHAR(255),
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_get_collector_list_for_push_4
Input param 	: 1개
Output param 	: 1개
Job 			: 푸시를 보내기 위한 수거자 정보를 반환한다.
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_ORDER_EXISTS					INT		 		DEFAULT 0;
	DECLARE VAR_COLLECTOR_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)	 	DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_REPORT_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON		 	DEFAULT NULL;
	
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COLLECTOR_ID, ORDER_CODE INTO VAR_COLLECTOR_ID, VAR_ORDER_CODE
	FROM SITE_WSTE_DISPOSAL_ORDER
	WHERE ID = IN_ORDER_ID;
	
	SELECT ID INTO VAR_TRANSACTION_ID
	FROM WSTE_CLCT_TRMT_TRANSACTION
	WHERE DISPOSAL_ORDER_ID = IN_ORDER_ID;
	
	SELECT ID INTO VAR_REPORT_ID
	FROM TRANSACTION_REPORT
	WHERE DISPOSER_ORDER_ID = IN_ORDER_ID;
	
	CALL sp_req_current_time(VAR_REG_DT);
	IF VAR_COLLECTOR_ID IS NULL THEN
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'				, B.ID,
				'USER_NAME'				, B.USER_NAME,
				'FCM'					, B.FCM,
				'AVATAR_PATH'			, B.AVATAR_PATH,
				'PHONE'					, B.PHONE,
				'TITLE'					, IN_TITLE,
				'BODY'					, IN_BODY,
				'ORDER_ID'				, IN_ORDER_ID,
				'BIDDING_ID'			, A.ID,
				'TRANSACTION_ID'		, VAR_TRANSACTION_ID,
				'REPORT_ID'				, VAR_REPORT_ID,
				'CATEGORY_ID'			, IN_CATEGORY_ID,
				'CREATED_AT'			, VAR_REG_DT
			)
		) 
		INTO VAR_PUSH_INFO
		FROM COLLECTOR_BIDDING A 
		LEFT JOIN USERS B ON A.COLLECTOR_ID = B.AFFILIATED_SITE
		WHERE 
			B.ACTIVE 				= TRUE AND 
			B.PUSH_ENABLED 			= TRUE AND
			A.ACTIVE 				= TRUE AND
			A.DELETED 				= FALSE AND
			A.RESPONSE_VISIT 		= TRUE AND
			A.CANCEL_VISIT 			= FALSE AND
			A.REJECT_BIDDING_APPLY 	= FALSE AND
			A.GIVEUP_BIDDING 		= FALSE AND
			A.CANCEL_BIDDING 		= FALSE AND
			A.REJECT_BIDDING 		= FALSE AND
			A.BIDDING_VISIBLE 		= TRUE AND
			A.ORDER_VISIBLE 		= TRUE AND
			A.DISPOSAL_ORDER_ID 	= IN_ORDER_ID;
	ELSE
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'				, B.ID,
				'USER_NAME'				, B.USER_NAME,
				'FCM'					, B.FCM,
				'AVATAR_PATH'			, B.AVATAR_PATH,
				'PHONE'					, B.PHONE,
				'TITLE'					, IN_TITLE,
				'BODY'					, IN_BODY,
				'ORDER_ID'				, IN_ORDER_ID,
				'BIDDING_ID'			, NULL,
				'TRANSACTION_ID'		, VAR_TRANSACTION_ID,
				'REPORT_ID'				, VAR_REPORT_ID,
				'CATEGORY_ID'			, IN_CATEGORY_ID,
				'CREATED_AT'			, VAR_REG_DT
			)
		) 
		INTO VAR_PUSH_INFO
		FROM WSTE_CLCT_TRMT_TRANSACTION A 
		LEFT JOIN USERS B ON A.COLLECTOR_SITE_ID = B.AFFILIATED_SITE
		WHERE 
			B.ACTIVE = TRUE AND 
			B.PUSH_ENABLED = TRUE AND
			A.IN_PROGRESS = TRUE AND
			A.ACCEPT_ASK_END = TRUE AND
			A.DISPOSAL_ORDER_ID = IN_ORDER_ID;
	END IF;
	
	CALL sp_insert_push(
		0,
		VAR_PUSH_INFO,
		rtn_val,
		msg_txt
	);
		
	SET OUT_TARGET_LIST = VAR_PUSH_INFO;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_collector_list_share_business_areas`(
	IN IN_B_CODE					VARCHAR(10),
    OUT OUT_COLLECTOR_LIST			JSON
)
BEGIN
	DECLARE VAR_BCODE_EXISTS					INT		 		DEFAULT 0;
	DECLARE VAR_SI_DO							VARCHAR(20)		DEFAULT NULL;
	DECLARE VAR_SI_GUN_GU						VARCHAR(20)		DEFAULT NULL;
	DECLARE VAR_MESSAGE							VARCHAR(200)	DEFAULT NULL;
	
	SELECT COUNT(B_CODE) INTO VAR_BCODE_EXISTS
    FROM KIKCD_B
    WHERE 
		B_CODE = IN_B_CODE AND
        CANCELED_DATE IS NULL;
    IF VAR_BCODE_EXISTS = 1 THEN
		SELECT SI_DO, SI_GUN_GU
        INTO VAR_SI_DO, VAR_SI_GUN_GU
        FROM KIKCD_B
        WHERE
			B_CODE = IN_B_CODE AND
			CANCELED_DATE IS NULL;
		SET VAR_MESSAGE = CONCAT(VAR_SI_DO, ' ', VAR_SI_GUN_GU, '에 신규 폐기물이 등록되었습니다.');
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'	, C.ID, 
				'FCM'		, C.FCM,
                'MSG'		, VAR_MESSAGE
			)
		) 
		INTO OUT_COLLECTOR_LIST
		FROM BUSINESS_AREA A 
		LEFT JOIN COMP_SITE B ON A.SITE_ID = B.ID
		LEFT JOIN USERS C ON B.ID = C.AFFILIATED_SITE
		WHERE 
			A.ACTIVE 					= TRUE AND
			B.ACTIVE 					= TRUE AND
			C.ACTIVE	 				= TRUE AND
            C.PUSH_ENABLED				= TRUE AND
			LEFT(A.KIKCD_B_CODE, 5) 	= LEFT(IN_B_CODE, 5);
    ELSE
		SET OUT_COLLECTOR_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_collector_lists`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,
    IN IN_STATE_CATEGORY_CODE			INT,
    OUT OUT_COLLECTOR_LIST				JSON
)
BEGIN	
	DECLARE VAR_ID_COUNT						INT		 		DEFAULT 0;
    
	SELECT COUNT(A.ID) INTO VAR_ID_COUNT
	FROM COLLECTOR_BIDDING A 
	LEFT JOIN USERS B ON A.COLLECTOR_ID = B.AFFILIATED_SITE
	LEFT JOIN COMP_SITE C ON A.COLLECTOR_ID = C.ID
	LEFT JOIN WSTE_TRMT_BIZ D ON C.TRMT_BIZ_CODE = D.CODE
	LEFT JOIN SITE_WSTE_DISPOSAL_ORDER E ON A.DISPOSAL_ORDER_ID = E.ID
    LEFT JOIN V_BIDDING_STATE_NAME F ON A.ID = F.COLLECTOR_BIDDING_ID
	WHERE 
		E.ID 						= IN_DISPOSER_ORDER_ID AND
		F.STATE_CATEGORY_ID	IN (4, 5) AND A.BIDDING_RANK <= 2 AND
        F.STATE_CODE IN (226, 236, 245);
        
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'							, A.ID, 
			'COLLECTOR_SITE_ID'				, A.COLLECTOR_ID, 
			'COLLECTOR_SITE_NM'				, C.SITE_NAME, 
			'BIZ'							, D.NAME, 
			'DIST'							, SQRT((POW((C.LAT - E.LAT), 2) + POW((C.LNG - E.LNG), 2))), 
			'STATE'							, F.STATE,
			'STATE_CODE'					, F.STATE_CODE,
			'DISPOSER_SITE_ID'				, E.SITE_ID,
			'COLLECTOR_DATE_OF_VISIT'		, A.DATE_OF_VISIT,
			'COLLECTOR_DATE_OF_BIDDING'		, A.DATE_OF_BIDDING,
			'COLLECTOR_SELECTED_AT'			, A.SELECTED_AT,
			'COLLECTOR_MAKE_DECISION_AT'	, A.MAKE_DECISION_AT,
			'COLLECTOR_AVATAR_PATH'			, B.AVATAR_PATH,
			'COLLECTOR_MANAGER_ID'			, B.ID,
			'COLLECTOR_CONTACT'				, C.CONTACT,
			'COLLECTOR_MANAGER_PHONE'		, B.PHONE,
			'TRMT_BIZ_NM'					, D.NAME,
			'BIDDING_RANK'					, A.BIDDING_RANK,
			'COLLECTOR_WINNER'				, A.WINNER,
			'TRANSACTION_ID'				, E.TRANSACTION_ID,
			'BIDDING_DELETED'				, A.DELETED,
			'BIDDING_DELETED_AT'			, A.DELETED_AT,
			'COLLECTOR_ACTIVE'				, C.ACTIVE
		)
	) 
	INTO OUT_COLLECTOR_LIST 
	FROM COLLECTOR_BIDDING A 
	LEFT JOIN USERS B ON A.COLLECTOR_ID = B.AFFILIATED_SITE
	LEFT JOIN COMP_SITE C ON A.COLLECTOR_ID = C.ID
	LEFT JOIN WSTE_TRMT_BIZ D ON C.TRMT_BIZ_CODE = D.CODE
	LEFT JOIN SITE_WSTE_DISPOSAL_ORDER E ON A.DISPOSAL_ORDER_ID = E.ID
    LEFT JOIN V_BIDDING_STATE_NAME F ON A.ID = F.COLLECTOR_BIDDING_ID
	WHERE 
		E.ID 						= IN_DISPOSER_ORDER_ID AND
		F.STATE_CATEGORY_ID			>= IN_STATE_CATEGORY_CODE AND
		IF 
		(IN_STATE_CATEGORY_CODE IN (4, 5), 
			A.BIDDING_RANK <= 2 AND (IF(VAR_ID_COUNT = 2, (F.STATE_CODE IN(226, 236)), (F.STATE_CODE IN (226, 236, 245)))), 
			A.BIDDING_RANK >= 0 OR A.BIDDING_RANK IS NULL
		)
	ORDER BY A.BIDDING_RANK ASC;
	/*수거자정보를 JSON형태로 변환한다.*/
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_collector_lists_2`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,
    IN IN_STATE_CATEGORY_CODE			INT,
    OUT OUT_COLLECTOR_LIST				JSON
)
BEGIN	
		
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'COLLECTOR_BIDDING_ID'			, A.ID, 
			'COLLECTOR_SITE_ID'				, A.COLLECTOR_ID, 
			'COLLECTOR_SI_DO'				, G.SI_DO, 
			'COLLECTOR_SI_GUN_GU'			, G.SI_GUN_GU, 
			'COLLECTOR_STATE'				, F.STATE, 
			'COLLECTOR_STATE_CODE'			, F.STATE_CODE, 
			'COLLECTOR_LAT'					, C.LAT, 
			'COLLECTOR_LNG'					, C.LNG, 
			'COLLECTOR_SITE_NAME'			, C.SITE_NAME, 
			'COLLECTOR_TRMT_BIZ_CODE'		, C.TRMT_BIZ_CODE, 
			'COLLECTOR_TRMT_BIZ_NM'			, D.NAME, 
			'COLLECTOR_BID_AMOUNT'			, A.BID_AMOUNT, 
			'COLLECTOR_GREENHOUSE_GAS'		, A.GREENHOUSE_GAS, 
			'COLLECTOR_WINNER'				, A.WINNER, 
			'COLLECTOR_ACTIVE'				, A.ACTIVE, 
			'COLLECTOR_CANCEL_VISIT'		, A.CANCEL_VISIT, 
			'COLLECTOR_CANCEL_BIDDING'		, A.CANCEL_BIDDING, 
			'COLLECTOR_DATE_OF_VISIT'		, A.DATE_OF_VISIT, 
			'COLLECTOR_DATE_OF_BIDDING'		, A.DATE_OF_BIDDING, 
			'COLLECTOR_SELECTED'			, A.SELECTED, 
			'COLLECTOR_SELECTED_AT'			, A.SELECTED_AT, 
			'COLLECTOR_MAKE_DECISION'		, A.MAKE_DECISION, 
			'COLLECTOR_MAKE_DECISION_AT'	, A.MAKE_DECISION_AT, 
			'DISPOSER_RESPONSE_VISIT'		, A.RESPONSE_VISIT, 
			'DISPOSER_RESPONSE_VISIT_AT'	, A.RESPONSE_VISIT_AT,
			'DISPOSER_REJECT_BIDDING'		, A.REJECT_BIDDING, 
			'DISPOSER_REJECT_BIDDING_AT'	, A.REJECT_BIDDING_AT, 
			'COLLECTOR_STATE_CATEGORY_ID'	, F.STATE_CATEGORY_ID, 
			'COLLECTOR_STATE_CATEGORY'		, F.STATE_CATEGORY, 
			'BIDDING_RANK'					, A.BIDDING_RANK, 
			'COLLECTOR_WINNER'				, A.WINNER,
			'AVATAR_PATH'					, B.AVATAR_PATH
		)
	) 
	INTO OUT_COLLECTOR_LIST
	FROM COLLECTOR_BIDDING A 
	LEFT JOIN USERS B ON A.COLLECTOR_ID = B.AFFILIATED_SITE
	LEFT JOIN COMP_SITE C ON A.COLLECTOR_ID = C.ID
	LEFT JOIN WSTE_TRMT_BIZ D ON C.TRMT_BIZ_CODE = D.CODE
	LEFT JOIN SITE_WSTE_DISPOSAL_ORDER E ON A.DISPOSAL_ORDER_ID = E.ID
    LEFT JOIN V_BIDDING_STATE_NAME F ON A.ID = F.COLLECTOR_BIDDING_ID
	LEFT JOIN KIKCD_B G ON C.KIKCD_B_CODE = G.B_CODE
	WHERE 
		E.ID				 		= IN_DISPOSER_ORDER_ID AND 
		F.STATE_CATEGORY_ID 		>= IN_STATE_CATEGORY_CODE AND
		F.STATE_PID					<> 211 AND
		F.STATE_CODE				<> 211 AND
		(B.CLASS = 201 OR B.CLASS = 202) AND
		B.ACTIVE					= TRUE AND
        A.DELETED					= FALSE AND
		IF (IN_STATE_CATEGORY_CODE = 4, A.BIDDING_RANK <= 2, A.BIDDING_RANK >= 0 OR A.BIDDING_RANK IS NULL);	
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_collector_state`(
	IN IN_ORDER_ID				BIGINT,
    IN IN_COLLECTOR_SITE_ID		BIGINT,
    OUT OUT_STATE				VARCHAR(20),
    OUT OUT_STATE_CODE			INT,
    OUT OUT_STATE_CATEGORY_ID	INT,
    OUT OUT_STATE_CATEGORY		VARCHAR(20)
)
BEGIN
	SELECT
		STATE,
		STATE_CODE,
		STATE_CATEGORY_ID,
		STATE_CATEGORY
	INTO 
		OUT_STATE,
		OUT_STATE_CODE,
		OUT_STATE_CATEGORY_ID,
		OUT_STATE_CATEGORY
	FROM V_BIDDING_STATE_NAME
	WHERE 
		DISPOER_ORDER_ID = IN_ORDER_ID AND
		COLLECTOR_ID = IN_COLLECTOR_SITE_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_collector_wste_lists`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,
	IN IN_TRANSACTION_ID				BIGINT,
    OUT OUT_WSTE_LIST					JSON
)
BEGIN	

/*
Procedure Name 	: sp_get_collector_wste_lists
Input param 	: 2개
Job 			: 폐기물 수집업자가 실제로 수거한 폐기물 리스트를 반환한다. 폐기물 수집업자가 투찰(견적)할 때의 폐기물 리스트는 BIDDING_DETAILS로 관리된다.
Update 			: 2022.04.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
				
*/

	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'WSTE_CODE'			, A.WSTE_CODE, 
			'WSTE_NM'			, B.NAME, 
			'WSTE_APPEARANCE'	, C.KOREAN, 
			'QUANTITY'			, A.WSTE_QUANTITY, 
			'UNIT'				, A.WSTE_UNIT,
			'UPDATED_AT'		, A.CREATED_AT,
            'COLLECT_END_AT'	, A.COLLECT_END_AT
		)
	) 
	INTO OUT_WSTE_LIST 
	FROM WSTE_CLCT_TRMT_TRANSACTION A 
    LEFT JOIN WSTE_CODE B ON A.WSTE_CODE = B.CODE
    LEFT JOIN WSTE_APPEARANCE C ON A.WSTE_APPEARANCE = C.ID
	WHERE 
		A.DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND
        A.ID = IN_TRANSACTION_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_company`(
	IN IN_COMP_ID				BIGINT
)
BEGIN

/*
Procedure Name 	: sp_get_company
Input param 	: 1개
Job 			: 사업자 정보를 반환한다.
Update 			: 2022.01.10
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;	
	DECLARE VAR_COMPANY_COUNT					INT		 		DEFAULT 0;
	DECLARE VAR_CHILD_COMPANY_COUNT				INT		 		DEFAULT 0;
	DECLARE JSON_CHILD_COMPANY_INFO				JSON 			DEFAULT NULL;	
	DECLARE VAR_SITE_COUNT						INT		 		DEFAULT 0;
	DECLARE JSON_SITE_INFO						JSON 			DEFAULT NULL;	
	DECLARE JSON_PARENT_COMPANY_INFO			JSON 			DEFAULT NULL;	
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		/*ROLLBACK;*/
        COMMIT;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	SELECT COUNT(ID) INTO VAR_COMPANY_COUNT
    FROM COMPANY
    WHERE ID = IN_COMP_ID;
    
    IF VAR_COMPANY_COUNT > 0 THEN
    
		CREATE TEMPORARY TABLE IF NOT EXISTS COMPANY_INFO_TEMP (
			ID								BIGINT,
			COMP_NAME						VARCHAR(100),
			REP_NAME						VARCHAR(50),
			KIKCD_B_CODE					VARCHAR(10),
			ADDR							VARCHAR(255),
			CONTACT							VARCHAR(100),
			TRMT_BIZ_CODE					VARCHAR(4),
			BIZ_REG_CODE					VARCHAR(12),
			PERMIT_REG_CODE					VARCHAR(100),
			BIZ_REG_IMG_PATH				VARCHAR(200),
			PERMIT_REG_IMG_PATH				VARCHAR(200),
			ACTIVE							TINYINT,
            PARENT_COMPANY_INFO				JSON,
            CHILD_COMPANY_INFO				JSON,
            SITE_INFO						JSON
		); 		
    
		INSERT INTO COMPANY_INFO_TEMP (
			ID,
			COMP_NAME,
			REP_NAME,
			KIKCD_B_CODE,
			ADDR,
			CONTACT,
			TRMT_BIZ_CODE,
			BIZ_REG_CODE,
			PERMIT_REG_CODE,
			BIZ_REG_IMG_PATH,
			PERMIT_REG_IMG_PATH,
			ACTIVE,
            PARENT_COMPANY_ID
        ) SELECT 
			ID,
			COMP_NAME,
			REP_NAME,
			KIKCD_B_CODE,
			ADDR,
			CONTACT,
			TRMT_BIZ_CODE,
			BIZ_REG_CODE,
			PERMIT_REG_CODE,
			BIZ_REG_IMG_PATH,
			PERMIT_REG_IMG_PATH,
			ACTIVE,
            P_COMP_ID
		FROM COMPANY 
        WHERE ID = IN_COMP_ID;  
        
        SELECT COUNT(ID) INTO VAR_CHILD_COMPANY_COUNT
        FROM COMPANY
        WHERE P_COMP_ID = IN_COMP_ID;
        IF VAR_CHILD_COMPANY_COUNT > 0 THEN
			SELECT JSON_ARRAYAGG(JSON_OBJECT(
				'ID'						, ID, 
				'COMP_NAME'					, COMP_NAME, 
				'REP_NAME'					, REP_NAME, 
				'KIKCD_B_CODE'				, KIKCD_B_CODE, 
				'ADDR'						, ADDR, 
				'CONTACT'					, CONTACT, 
				'TRMT_BIZ_CODE'				, TRMT_BIZ_CODE, 
				'BIZ_REG_CODE'				, BIZ_REG_CODE, 
				'PERMIT_REG_CODE'			, PERMIT_REG_CODE, 
				'BIZ_REG_IMG_PATH'			, BIZ_REG_IMG_PATH, 
				'PERMIT_REG_IMG_PATH'		, PERMIT_REG_IMG_PATH, 
				'ACTIVE'					, ACTIVE, 
				'PARENT_COMPANY_ID'			, P_COMP_ID
			)) 
			INTO JSON_CHILD_COMPANY_INFO 
			FROM COMPANY
			WHERE P_COMP_ID = IN_COMP_ID;
        ELSE
			SET JSON_CHILD_COMPANY_INFO = NULL;
        END IF;
    
		SELECT COUNT(ID) INTO VAR_SITE_COUNT
        FROM COMP_SITE
        WHERE COMP_ID = IN_COMP_ID;
        
        IF VAR_SITE_COUNT > 0 THEN
			SELECT JSON_ARRAYAGG(JSON_OBJECT(
				'ID'						, ID, 
				'COMP_ID'					, COMP_ID, 
				'KIKCD_B_CODE'				, KIKCD_B_CODE, 
				'ADDR'						, ADDR, 
				'CONTACT'					, CONTACT, 
				'LAT'						, LAT, 
				'LNG'						, LNG, 
				'SITE_NAME'					, SITE_NAME, 
				'ACTIVE'					, ACTIVE, 
				'TRMT_BIZ_CODE'				, TRMT_BIZ_CODE, 
				'CREATOR_ID'				, CREATOR_ID, 
				'HEAD_OFFICE'				, HEAD_OFFICE, 
				'PERMIT_REG_CODE'			, PERMIT_REG_CODE, 
				'PERMIT_REG_IMG_PATH'		, PERMIT_REG_IMG_PATH, 
				'CS_MANAGER_ID'				, CS_MANAGER_ID, 
				'CONFIRMED'					, CONFIRMED, 
				'CONFIRMED_AT'				, CONFIRMED_AT, 
				'CREATED_AT'				, CREATED_AT, 
				'UPDATED_AT'				, UPDATED_AT, 
				'RECOVERY_TAG'				, RECOVERY_TAG, 
				'NOTICE_ENABLED'			, NOTICE_ENABLED, 
				'LICENSE_CONFIRMED'			, LICENSE_CONFIRMED, 
				'LICENSE_CONFIRMED_AT'		, LICENSE_CONFIRMED_AT
			)) 
			INTO JSON_SITE_INFO 
			FROM COMP_SITE 
			WHERE COMP_ID = IN_COMP_ID; 
        ELSE
			SET JSON_SITE_INFO = NULL;
        END IF;
        
        UPDATE COMPANY_INFO_TEMP
        SET 
            PARENT_COMPANY_INFO 		= JSON_PARENT_COMPANY_INFO,
            CHILD_COMPANY_INFO 			= JSON_CHILD_COMPANY_INFO,
            SITE_INFO 					= JSON_SITE_INFO
		WHERE ID = IN_COMP_ID;
        
        IF ROW_COUNT() = 1 THEN
			SELECT JSON_ARRAYAGG(JSON_OBJECT(
				'ID'						, ID, 
				'COMP_NAME'					, COMP_NAME, 
				'REP_NAME'					, REP_NAME, 
				'KIKCD_B_CODE'				, KIKCD_B_CODE, 
				'ADDR'						, ADDR, 
				'CONTACT'					, CONTACT, 
				'TRMT_BIZ_CODE'				, TRMT_BIZ_CODE, 
				'BIZ_REG_CODE'				, BIZ_REG_CODE, 
				'PERMIT_REG_CODE'			, PERMIT_REG_CODE, 
				'BIZ_REG_IMG_PATH'			, BIZ_REG_IMG_PATH, 
				'PERMIT_REG_IMG_PATH'		, PERMIT_REG_IMG_PATH, 
				'ACTIVE'					, ACTIVE, 
				'PARENT_COMPANY_ID'			, PARENT_COMPANY_ID,
				'CHILD_COMPANY_INFO'		, CHILD_COMPANY_INFO,
				'SITE_INFO'					, SITE_INFO
			)) 
			INTO json_data 
			FROM COMPANY_INFO_TEMP; 
            
			SET rtn_val = 0;
			SET msg_txt = 'Success';
        ELSE
			SET rtn_val = 35402;
			SET msg_txt = 'company info temporary data update error';
        END IF;
        
    ELSE
		SET rtn_val = 35401;
		SET msg_txt = 'company does not exist';
    END IF;
	DROP TABLE IF EXISTS COMPANY_INFO_TEMP;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_company_info`(
	IN IN_COMP_ID			BIGINT,
    OUT OUT_COMP_INFO		JSON
)
BEGIN
	DECLARE VAR_KIKCD_B_CODE					VARCHAR(200) 	DEFAULT NULL;
	DECLARE VAR_P_COMP_ID						BIGINT		 	DEFAULT NULL;
	DECLARE JSON_ADDRESS_INFO					JSON 			DEFAULT NULL;	
	DECLARE JSON_PARENT_COMP_INFO				JSON 			DEFAULT NULL;	
	
	CREATE TEMPORARY TABLE IF NOT EXISTS COMP_INFO_TEMP (
		ID						BIGINT,
		COMP_NAME				VARCHAR(100),
		REP_NAME				VARCHAR(50),
        KIKCD_B_CODE			VARCHAR(10),
        ADDR					VARCHAR(255),
        CONTACT					VARCHAR(100),
        TRMT_BIZ_CODE			VARCHAR(4),
		LAT						DECIMAL(12,9),
        LNG						DECIMAL(12,9),
        BIZ_REG_CODE			VARCHAR(12),
        PERMIT_REG_CODE			VARCHAR(100),
        P_COMP_ID				BIGINT,
        BIZ_REG_IMG_PATH		VARCHAR(255),
        PERMIT_REG_IMG_PATH		VARCHAR(255),
        CS_MANAGER_ID			BIGINT,
        CONFIRMED				TINYINT,
        CONFIRMED_AT			DATETIME,
        CREATED_AT				DATETIME,
        UPDATED_AT				DATETIME,
        ACTIVE					TINYINT,
        ADDRESS_INFO			JSON,
        PARENT_COMP_INFO		JSON
	);     
    
    INSERT INTO COMP_INFO_TEMP (
		ID,
		COMP_NAME,
		REP_NAME,
        KIKCD_B_CODE,
        ADDR,
        CONTACT,
        TRMT_BIZ_CODE,
		LAT,
        LNG,
        BIZ_REG_CODE,
        PERMIT_REG_CODE,
        P_COMP_ID,
        BIZ_REG_IMG_PATH,
        PERMIT_REG_IMG_PATH,
        CS_MANAGER_ID,
        CONFIRMED,
        CONFIRMED_AT,
        CREATED_AT,
        UPDATED_AT,
        ACTIVE
	)
	SELECT 
		ID,
		COMP_NAME,
		REP_NAME,
        KIKCD_B_CODE,
        ADDR,
        CONTACT,
        TRMT_BIZ_CODE,
		LAT,
        LNG,
        BIZ_REG_CODE,
        PERMIT_REG_CODE,
        P_COMP_ID,
        BIZ_REG_IMG_PATH,
        PERMIT_REG_IMG_PATH,
        CS_MANAGER_ID,
        CONFIRMED,
        CONFIRMED_AT,
        CREATED_AT,
        UPDATED_AT,
        ACTIVE
	FROM COMPANY 
	WHERE ID = IN_COMP_ID;	
    
    SELECT KIKCD_B_CODE, P_COMP_ID INTO VAR_KIKCD_B_CODE, VAR_P_COMP_ID
    FROM COMPANY 
	WHERE ID = IN_COMP_ID;	
    
    CALL sp_get_address_with_bcode(
		VAR_KIKCD_B_CODE,
        JSON_ADDRESS_INFO
    );
    
    IF VAR_P_COMP_ID > 0 THEN
		CALL sp_get_parent_company_info(
			VAR_P_COMP_ID,
			JSON_PARENT_COMP_INFO
		);
    ELSE
		SET JSON_PARENT_COMP_INFO = NULL;
    END IF;
    
    UPDATE COMP_INFO_TEMP
    SET 
		ADDRESS_INFO 		= JSON_ADDRESS_INFO,
		PARENT_COMP_INFO 	= JSON_PARENT_COMP_INFO
    WHERE ID = IN_COMP_ID;	
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'						, ID, 
			'COMP_NAME'					, COMP_NAME, 
			'REP_NAME'					, REP_NAME, 
			'KIKCD_B_CODE'				, KIKCD_B_CODE,
			'ADDR'						, ADDR,
			'CONTACT'					, CONTACT,
            'TRMT_BIZ_CODE'				, TRMT_BIZ_CODE,
            'LAT'						, LAT,
			'LNG'						, LNG, 
            'BIZ_REG_CODE'				, BIZ_REG_CODE,
            'PERMIT_REG_CODE'			, PERMIT_REG_CODE,
            'P_COMP_ID'					, P_COMP_ID,
            'BIZ_REG_IMG_PATH'			, BIZ_REG_IMG_PATH,
            'PERMIT_REG_IMG_PATH'		, PERMIT_REG_IMG_PATH,
            'CS_MANAGER_ID'				, CS_MANAGER_ID,
            'CONFIRMED'					, CONFIRMED,
            'CONFIRMED_AT'				, CONFIRMED_AT,
            'CREATED_AT'				, CREATED_AT,
            'UPDATED_AT'				, UPDATED_AT,
            'ACTIVE'					, ACTIVE,
            'ADDRESS_INFO'				, ADDRESS_INFO,
            'PARENT_COMP_INFO'			, PARENT_COMP_INFO
		)
	) 
	INTO OUT_COMP_INFO 
	FROM COMP_INFO_TEMP;	
	DROP TABLE IF EXISTS COMP_INFO_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_count_waiting_answers`(
	IN IN_ADMIN_MAIN_DURATION					BIGINT,
    OUT OUT_COUNT								INT
)
BEGIN

/*
Procedure Name 	: sp_get_count_waiting_answers
Input param 	: 1개
Job 			: 문의사항에 답변을 하지 않은 개수
Update 			: 2022.04.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_POST_ID							BIGINT; 
	DECLARE VAR_COUNT_UNANSWER					INT 			DEFAULT 0;
	DECLARE VAR_TEMP_COUNT						INT 			DEFAULT 0;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		ID
    FROM POSTS
    WHERE 
		CATEGORY = 3 AND
        DELETED = FALSE AND
        NOW() <= DATE_ADD(CREATED_AT, INTERVAL CAST(IN_ADMIN_MAIN_DURATION AS UNSIGNED) DAY);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	SET VAR_COUNT_UNANSWER = 0;
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		SET VAR_TEMP_COUNT = 0;
		FETCH TEMP_CURSOR 
		INTO CUR_POST_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
        SELECT COUNT(ID) INTO VAR_TEMP_COUNT
        FROM POSTS 
        WHERE PID = CUR_POST_ID;
        
        IF VAR_TEMP_COUNT = 0 THEN
			SET VAR_COUNT_UNANSWER = VAR_COUNT_UNANSWER + 1;
        END IF;
	END LOOP;  
        
    SET OUT_COUNT = VAR_COUNT_UNANSWER;
	CLOSE TEMP_CURSOR;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_disposal_img_lists`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    IN IN_CLASS						ENUM('입찰', '처리'),
    OUT OUT_IMG_LIST				JSON
)
BEGIN
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'				, ID, 
			'FILE_NAME'			, FILE_NAME, 
			'IMG_PATH'			, IMG_PATH, 
			'FILE_SIZE'			, FILE_SIZE
		)
	) 
	INTO OUT_IMG_LIST 
	FROM WSTE_REGISTRATION_PHOTO  
	WHERE 
		DISPOSAL_ORDER_ID 		= IN_DISPOSER_ORDER_ID AND
        CLASS_CODE				= IN_CLASS AND
        ACTIVE					= TRUE;	
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_disposal_img_lists_2`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    IN IN_CLASS						ENUM('입찰', '처리'),
    OUT OUT_IMG_LIST				JSON
)
BEGIN
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'				, ID, 
			'PATH'				, IMG_PATH
		)
	) 
	INTO OUT_IMG_LIST 
	FROM WSTE_REGISTRATION_PHOTO 
	WHERE 
		DISPOSAL_ORDER_ID 		= IN_DISPOSER_ORDER_ID AND 
		CLASS_CODE 				= IN_CLASS AND
        ACTIVE					= TRUE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_disposal_order_info`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    OUT OUT_DISPOSAL_ORDER_INFO		JSON
)
BEGIN
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'					, A.ID, 
			'ORDER_CODE'			, A.ORDER_CODE, 
			'SITE_ID'				, A.SITE_ID, 
			'SITE_NAME'				, IF(A.SITE_ID = 0, E.USER_NAME, B.SITE_NAME), 
			'B_CODE'				, A.KIKCD_B_CODE, 
			'SI_DO'					, C.SI_DO,
			'SI_GUN_GU'				, C.SI_GUN_GU,
			'EUP_MYEON_DONG'		, C.EUP_MYEON_DONG,
			'DONG_RI'				, C.DONG_RI,
			'ADDR'					, A.ADDR,
			'ASK_END_AT'			, D.COLLECT_ASK_END_AT,
			'NOTE'					, A.NOTE,
			'VISIT_START_AT'		, A.VISIT_START_AT,
			'VISIT_END_AT'			, A.VISIT_END_AT,
			'BIDDING_END_AT'		, A.BIDDING_END_AT,
			'DISPOSER_ID'			, A.DISPOSER_ID,
			'AVATAR_PATH'			, E.AVATAR_PATH,
			'PHONE'					, E.PHONE,
			'PROSPECTIVE_BIDDERS'	, A.PROSPECTIVE_BIDDERS,
			'BIDDERS'				, A.BIDDERS,
			'PROSPECTIVE_VISITORS'	, A.PROSPECTIVE_VISITORS
		)
	) 
	INTO OUT_DISPOSAL_ORDER_INFO 
	FROM SITE_WSTE_DISPOSAL_ORDER A 
    LEFT JOIN COMP_SITE B ON A.SITE_ID = B.ID
    LEFT JOIN KIKCD_B C ON A.KIKCD_B_CODE = C.B_CODE
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION D ON A.ID = D.DISPOSAL_ORDER_ID
    LEFT JOIN USERS E ON IF(A.SITE_ID = 0, A.DISPOSER_ID = E.ID, A.SITE_ID = E.AFFILIATED_SITE)
	WHERE 
		A.ID = IN_DISPOSER_ORDER_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_disposal_wste_lists`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,
    OUT OUT_DISPOSER_WSTE_LIST			JSON
)
BEGIN			
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'WSTE_REG_ID'			, WSTE_REG_ID, 
			'DISPOSAL_ORDER_ID'		, DISPOSAL_ORDER_ID, 
			'WSTE_CLASS'			, WSTE_CLASS, 
			'WSTE_CLASS_NM'			, WSTE_CLASS_NM, 
			'WSTE_APPEARANCE_NM'	, WSTE_APPEARANCE_NM, 
			'WSTE_QUANTITY'			, WSTE_QUANTITY, 
			'WSTE_UNIT'				, WSTE_UNIT
		)
	) 
	INTO OUT_DISPOSER_WSTE_LIST
	FROM V_WSTE_DISCHARGED_FROM_SITE
	WHERE DISPOSAL_ORDER_ID 		= IN_DISPOSER_ORDER_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_disposal_wste_lists_2`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,
    OUT OUT_DISPOSER_WSTE_LIST			JSON
)
BEGIN	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'				, WSTE_REG_ID, 
			'WSTE_NM'			, WSTE_CLASS_NM, 
			'APR'				, WSTE_APPEARANCE_NM, 
			'QTY'				, WSTE_QUANTITY, 
			'UNIT'				, WSTE_UNIT,
			'UPDATED_AT'		, WSTE_DISCHARGED_UPDATED_AT
		)
	) 
	INTO OUT_DISPOSER_WSTE_LIST 
	FROM V_WSTE_DISCHARGED_FROM_SITE 
	WHERE DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_disposal_wste_lists_3`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,
    OUT OUT_DISPOSER_WSTE_LIST			JSON
)
BEGIN	
        
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'WSTE_CLASS'	, WSTE_CLASS, 
		'WSTE_NM'		, WSTE_CLASS_NM, 
		'APR'			, WSTE_APPEARANCE_NM, 
		'QTY'			, WSTE_QUANTITY, 
		'UNIT'			, WSTE_UNIT, 
		'CREATED_AT'	, WSTE_DISCHARGED_CREATED_AT
	)) 
	INTO OUT_DISPOSER_WSTE_LIST 
	FROM V_WSTE_DISCHARGED_FROM_SITE 
	WHERE DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_disposer_list_for_push`(
	IN IN_ORDER_ID					BIGINT,
	IN IN_TITLE						VARCHAR(255),
	IN IN_BODY						VARCHAR(255),
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_get_disposer_list_for_push
Input param 	: 1개
Output param 	: 1개
Job 			: 푸시를 보내기 위한 수거자 정보를 반환한다.
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT							DATETIME	 	DEFAULT NULL;
	DECLARE VAR_DISPOSER_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_SITE_ID							BIGINT		 	DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)	 	DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_REPORT_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON		 	DEFAULT NULL;
	
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT DISPOSER_ID, SITE_ID, ORDER_CODE INTO VAR_DISPOSER_ID, VAR_SITE_ID, VAR_ORDER_CODE
	FROM SITE_WSTE_DISPOSAL_ORDER
	WHERE ID = IN_ORDER_ID;
	
	SELECT ID INTO VAR_TRANSACTION_ID
	FROM WSTE_CLCT_TRMT_TRANSACTION
	WHERE DISPOSAL_ORDER_ID = IN_ORDER_ID;
	
	SELECT ID INTO VAR_REPORT_ID
	FROM TRANSACTION_REPORT
	WHERE DISPOSER_ORDER_ID = IN_ORDER_ID;
	
	CALL sp_req_current_time(VAR_REG_DT);
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'USER_ID'				, B.ID,
			'USER_NAME'				, B.USER_NAME,
			'FCM'					, B.FCM,
			'AVATAR_PATH'			, B.AVATAR_PATH,
			'PHONE'					, B.PHONE,
			'TITLE'					, IN_TITLE,
			'BODY'					, IN_BODY,
			'ORDER_ID'				, IN_ORDER_ID,
			'BIDDING_ID'			, NULL,
			'TRANSACTION_ID'		, VAR_TRANSACTION_ID,
			'REPORT_ID'				, VAR_REPORT_ID,
			'CATEGORY_ID'			, IN_CATEGORY_ID,
			'CREATED_AT'			, VAR_REG_DT
		)
	) 
	INTO VAR_PUSH_INFO
	FROM SITE_WSTE_DISPOSAL_ORDER A 
	LEFT JOIN USERS B ON IF(VAR_SITE_ID = 0, A.DISPOSER_ID = B.ID, A.SITE_ID = B.AFFILIATED_SITE)
	WHERE 
		B.ACTIVE = TRUE AND 
		B.PUSH_ENABLED = TRUE AND
		A.ACTIVE = TRUE AND
		A.IS_DELETED = FALSE AND
		A.ID = IN_ORDER_ID AND
		IF(VAR_SITE_ID = 0, 
			A.DISPOSER_ID = VAR_DISPOSER_ID,
			A.SITE_ID = VAR_SITE_ID
		);
	
	CALL sp_insert_push(
		0,
		VAR_PUSH_INFO,
		rtn_val,
		msg_txt
	);
		
	SET OUT_TARGET_LIST = VAR_PUSH_INFO;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_disposer_name_from_report`(
	IN IN_REPORT_ID				BIGINT,
    OUT rtn_val					INT,
    OUT msg_txt					VARCHAR(200),
    OUT OUT_SITE_NAME_INFO		JSON
)
BEGIN
    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_SITE_NAME						VARCHAR(255); 
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		IF(B.SITE_ID = 0, D.USER_NAME, C.SITE_NAME)
	FROM TRANSACTION_REPORT A 
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSER_ORDER_ID = B.ID
    LEFT JOIN COMP_SITE C ON B.SITE_ID = C.ID
    LEFT JOIN USERS D ON B.DISPOSER_ID = D.ID
	WHERE 
		A.ID = IN_REPORT_ID;    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;	      
        
	CREATE TEMPORARY TABLE IF NOT EXISTS GET_DISPOSER_NAME_TEMP (
		SITE_NAME				VARCHAR(255)
	);      
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_SITE_NAME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO GET_DISPOSER_NAME_TEMP (
			SITE_NAME
		)
		VALUES(
			CUR_SITE_NAME
		);
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'SITE_NAME'					, SITE_NAME
		)
	) INTO OUT_SITE_NAME_INFO FROM GET_DISPOSER_NAME_TEMP;
    
	SET rtn_val = 0;
	SET msg_txt = 'Success';
	DROP TABLE IF EXISTS GET_DISPOSER_NAME_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_disposer_order_list`(
	IN IN_SITE_ID						BIGINT,
	IN IN_DISPOSER_ID					BIGINT,
    OUT OUT_ORDER_LIST					JSON
)
BEGIN

    DECLARE vRowCount 								INT DEFAULT 0;
    DECLARE endOfRow 								TINYINT DEFAULT FALSE;   
	DECLARE CUR_ORDER_ID							BIGINT;
	DECLARE CUR_DISPOSER_ID							BIGINT;
	DECLARE CUR_COLLECTOR_ID						BIGINT;
	DECLARE CUR_DISPOSER_TYPE						VARCHAR(255);
	DECLARE CUR_SITE_ID								BIGINT;
	DECLARE CUR_ACTIVE								TINYINT;
	DECLARE CUR_ORDER_CODE							VARCHAR(10);
	DECLARE CUR_MANAGER_ID							BIGINT;
	DECLARE CUR_SUCCESS_BIDDER						BIGINT;
	DECLARE CUR_FIRST_PLACE							BIGINT;
	DECLARE CUR_SECOND_PLACE						BIGINT;
    DECLARE CUR_PROSPECTIVE_VISITORS				INT;
    DECLARE CUR_BIDDERS								INT;
    DECLARE CUR_PROSPECTIVE_BIDDERS					INT;
    DECLARE CUR_CREATED_AT							DATETIME;
    DECLARE CUR_UPDATED_AT							DATETIME;
    DECLARE CUR_VISIT_START_AT						DATETIME;
    DECLARE CUR_VISIT_END_AT						DATETIME;
    DECLARE CUR_BIDDING_END_AT						DATETIME;
    DECLARE CUR_OPEN_AT								DATETIME;
    DECLARE CUR_CLOSE_AT							DATETIME;
    DECLARE CUR_KIKCD_B_CODE						VARCHAR(10);
	DECLARE CUR_ADDR								VARCHAR(255);
	DECLARE CUR_NOTE								VARCHAR(255);
	DECLARE CUR_LAT									DECIMAL(12,9);
	DECLARE CUR_LNG									DECIMAL(12,9);
	DECLARE CUR_VISIT_EARLY_CLOSING					TINYINT;
	DECLARE CUR_BIDDING_EARLY_CLOSING				TINYINT;
	DECLARE CUR_IS_DELETED							TINYINT;
	DECLARE CUR_SELECTED							BIGINT;
	DECLARE CUR_SELECTED_AT							DATETIME;
	DECLARE CUR_COLLECTOR_SELECTION_CONFIRMED		TINYINT;
	DECLARE CUR_COLLECTOR_SELECTION_CONFIRMED_AT	DATETIME;
	DECLARE CUR_VISIT_EARLY_CLOSED_AT				DATETIME;
	DECLARE CUR_BIDDING_EARLY_CLOSED_AT				DATETIME;
	DECLARE CUR_DELETED_AT							DATETIME;
	DECLARE CUR_MAX_SELECT_AT						DATETIME;
	DECLARE CUR_SELECTED2							TINYINT;
	DECLARE CUR_SELECTED2_AT						DATETIME;
	DECLARE CUR_COLLECTOR_SELECTION_CONFIRMED2		TINYINT;
	DECLARE CUR_COLLECTOR_SELECTION_CONFIRMED2_AT	DATETIME;
	DECLARE CUR_MAX_SELECT2_AT						DATETIME;
	DECLARE CUR_COLLECTOR_BIDDING_ID				BIGINT;
	DECLARE CUR_COLLECTOR_MAX_DECISION_AT			DATETIME;
	DECLARE CUR_COLLECTOR_MAX_DECISION2_AT			DATETIME;
	DECLARE CUR_MAX_DECISION_AT						DATETIME;
	DECLARE CUR_MAX_DECISION2_AT					DATETIME;
	DECLARE CUR_TRANSACTION_ID						BIGINT;
	DECLARE CUR_CHECK_STATE							TINYINT;
	DECLARE VAR_SITE_NAME							VARCHAR(255);
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
	SELECT 
		ID,
		DISPOSER_ID,
		COLLECTOR_ID,
		DISPOSER_TYPE,
		SITE_ID,
		ACTIVE,
		ORDER_CODE,
		MANAGER_ID,
		SUCCESS_BIDDER,
		FIRST_PLACE,
		SECOND_PLACE,
		PROSPECTIVE_VISITORS,
		BIDDERS,
		PROSPECTIVE_BIDDERS,
		CREATED_AT,
		UPDATED_AT,
		VISIT_START_AT,
		VISIT_END_AT,
		BIDDING_END_AT,
		OPEN_AT,
		CLOSE_AT,
		KIKCD_B_CODE,
		ADDR,
		NOTE,
		LAT,
		LNG,
		VISIT_EARLY_CLOSING,
		BIDDING_EARLY_CLOSING,
		IS_DELETED,
		SELECTED,
		SELECTED_AT,
		COLLECTOR_SELECTION_CONFIRMED,
		COLLECTOR_SELECTION_CONFIRMED_AT,
		VISIT_EARLY_CLOSED_AT,
		BIDDING_EARLY_CLOSED_AT,
		DELETED_AT,
		MAX_SELECT_AT,
		SELECTED2,
		SELECTED2_AT,
		COLLECTOR_SELECTION_CONFIRMED2,
		COLLECTOR_SELECTION_CONFIRMED2_AT,
		MAX_SELECT2_AT,
		COLLECTOR_BIDDING_ID,
		COLLECTOR_MAX_DECISION_AT,
		COLLECTOR_MAX_DECISION2_AT,
		MAX_DECISION_AT,
		MAX_DECISION2_AT,
		TRANSACTION_ID,
		CHECK_STATE
	FROM SITE_WSTE_DISPOSAL_ORDER A
    WHERE IF(IN_SITE_ID = 0, DISPOSER_ID = IN_DISPOSER_ID, SITE_ID = IN_SITE_ID)
    ORDER BY ID DESC; 
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    SET OUT_ORDER_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS GET_DISPOSER_ORDER_LIST_TEMP (
		ORDER_ID							BIGINT,
		DISPOSER_ID							BIGINT,
		COLLECTOR_ID						BIGINT,
		DISPOSER_TYPE						VARCHAR(255),
		SITE_ID								BIGINT,
		ACTIVE								TINYINT,
		ORDER_CODE							VARCHAR(10),
		MANAGER_ID							BIGINT,
		SUCCESS_BIDDER						BIGINT,
		FIRST_PLACE							BIGINT,
		SECOND_PLACE						BIGINT,
        PROSPECTIVE_VISITORS				INT,
		BIDDERS								INT,
		PROSPECTIVE_BIDDERS					INT,
        CREATED_AT							DATETIME,
        UPDATED_AT							DATETIME,
        VISIT_START_AT						DATETIME,
        VISIT_END_AT						DATETIME,
        BIDDING_END_AT						DATETIME,
        OPEN_AT								DATETIME,
        CLOSE_AT							DATETIME,
        KIKCD_B_CODE						VARCHAR(10),
		ADDR								VARCHAR(255),
		NOTE								VARCHAR(255),
		LAT									DECIMAL(12,9),
		LNG									DECIMAL(12,9),
		VISIT_EARLY_CLOSING					TINYINT,
		BIDDING_EARLY_CLOSING				TINYINT,
		IS_DELETED							TINYINT,
		SELECTED							BIGINT,
		SELECTED_AT							DATETIME,
		COLLECTOR_SELECTION_CONFIRMED		TINYINT,
		COLLECTOR_SELECTION_CONFIRMED_AT	DATETIME,
		VISIT_EARLY_CLOSED_AT				DATETIME,
		BIDDING_EARLY_CLOSED_AT				DATETIME,
		DELETED_AT							DATETIME,
		MAX_SELECT_AT						DATETIME,
		SELECTED2							TINYINT,
		SELECTED2_AT						DATETIME,
		COLLECTOR_SELECTION_CONFIRMED2		TINYINT,
		COLLECTOR_SELECTION_CONFIRMED2_AT	DATETIME,
		MAX_SELECT2_AT						DATETIME,
		COLLECTOR_BIDDING_ID				BIGINT,
		COLLECTOR_MAX_DECISION_AT			DATETIME,
		COLLECTOR_MAX_DECISION2_AT			DATETIME,
		MAX_DECISION_AT						DATETIME,
		MAX_DECISION2_AT					DATETIME,
		TRANSACTION_ID						BIGINT,
		CHECK_STATE							TINYINT,
        SITE_NAME							VARCHAR(255)
	);  
    
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_ORDER_ID,
			CUR_DISPOSER_ID,
			CUR_COLLECTOR_ID,
			CUR_DISPOSER_TYPE,
			CUR_SITE_ID,
			CUR_ACTIVE,
			CUR_ORDER_CODE,
			CUR_MANAGER_ID,
			CUR_SUCCESS_BIDDER,
			CUR_FIRST_PLACE,
			CUR_SECOND_PLACE,
			CUR_PROSPECTIVE_VISITORS,
			CUR_BIDDERS,
			CUR_PROSPECTIVE_BIDDERS,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_VISIT_START_AT,
			CUR_VISIT_END_AT,
			CUR_BIDDING_END_AT,
			CUR_OPEN_AT,
			CUR_CLOSE_AT,
			CUR_KIKCD_B_CODE,
			CUR_ADDR,
			CUR_NOTE,
			CUR_LAT,
			CUR_LNG,
			CUR_VISIT_EARLY_CLOSING,
			CUR_BIDDING_EARLY_CLOSING,
			CUR_IS_DELETED,
			CUR_SELECTED,
			CUR_SELECTED_AT,
			CUR_COLLECTOR_SELECTION_CONFIRMED,
			CUR_COLLECTOR_SELECTION_CONFIRMED_AT,
			CUR_VISIT_EARLY_CLOSED_AT,
			CUR_BIDDING_EARLY_CLOSED_AT,
			CUR_DELETED_AT,
			CUR_MAX_SELECT_AT,
			CUR_SELECTED2,
			CUR_SELECTED2_AT,
			CUR_COLLECTOR_SELECTION_CONFIRMED2,
			CUR_COLLECTOR_SELECTION_CONFIRMED2_AT,
			CUR_MAX_SELECT2_AT,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_COLLECTOR_MAX_DECISION_AT,
			CUR_COLLECTOR_MAX_DECISION2_AT,
			CUR_MAX_DECISION_AT,
			CUR_MAX_DECISION2_AT,
			CUR_TRANSACTION_ID,
			CUR_CHECK_STATE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		GET_DISPOSER_ORDER_LIST_TEMP(
			ORDER_ID,
			DISPOSER_ID,
			COLLECTOR_ID,
			DISPOSER_TYPE,
			SITE_ID,
			ACTIVE,
			ORDER_CODE,
			MANAGER_ID,
			SUCCESS_BIDDER,
			FIRST_PLACE,
			SECOND_PLACE,
			PROSPECTIVE_VISITORS,
			BIDDERS,
			PROSPECTIVE_BIDDERS,
			CREATED_AT,
			UPDATED_AT,
			VISIT_START_AT,
			VISIT_END_AT,
			BIDDING_END_AT,
			OPEN_AT,
			CLOSE_AT,
			KIKCD_B_CODE,
			ADDR,
			NOTE,
			LAT,
			LNG,
			VISIT_EARLY_CLOSING,
			BIDDING_EARLY_CLOSING,
			IS_DELETED,
			SELECTED,
			SELECTED_AT,
			COLLECTOR_SELECTION_CONFIRMED,
			COLLECTOR_SELECTION_CONFIRMED_AT,
			VISIT_EARLY_CLOSED_AT,
			BIDDING_EARLY_CLOSED_AT,
			DELETED_AT,
			MAX_SELECT_AT,
			SELECTED2,
			SELECTED2_AT,
			COLLECTOR_SELECTION_CONFIRMED2,
			COLLECTOR_SELECTION_CONFIRMED2_AT,
			MAX_SELECT2_AT,
			COLLECTOR_BIDDING_ID,
			COLLECTOR_MAX_DECISION_AT,
			COLLECTOR_MAX_DECISION2_AT,
			MAX_DECISION_AT,
			MAX_DECISION2_AT,
			TRANSACTION_ID,
			CHECK_STATE
		)
		VALUES(
			CUR_ORDER_ID,
			CUR_DISPOSER_ID,
			CUR_COLLECTOR_ID,
			CUR_DISPOSER_TYPE,
			CUR_SITE_ID,
			CUR_ACTIVE,
			CUR_ORDER_CODE,
			CUR_MANAGER_ID,
			CUR_SUCCESS_BIDDER,
			CUR_FIRST_PLACE,
			CUR_SECOND_PLACE,
			CUR_PROSPECTIVE_VISITORS,
			CUR_BIDDERS,
			CUR_PROSPECTIVE_BIDDERS,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_VISIT_START_AT,
			CUR_VISIT_END_AT,
			CUR_BIDDING_END_AT,
			CUR_OPEN_AT,
			CUR_CLOSE_AT,
			CUR_KIKCD_B_CODE,
			CUR_ADDR,
			CUR_NOTE,
			CUR_LAT,
			CUR_LNG,
			CUR_VISIT_EARLY_CLOSING,
			CUR_BIDDING_EARLY_CLOSING,
			CUR_IS_DELETED,
			CUR_SELECTED,
			CUR_SELECTED_AT,
			CUR_COLLECTOR_SELECTION_CONFIRMED,
			CUR_COLLECTOR_SELECTION_CONFIRMED_AT,
			CUR_VISIT_EARLY_CLOSED_AT,
			CUR_BIDDING_EARLY_CLOSED_AT,
			CUR_DELETED_AT,
			CUR_MAX_SELECT_AT,
			CUR_SELECTED2,
			CUR_SELECTED2_AT,
			CUR_COLLECTOR_SELECTION_CONFIRMED2,
			CUR_COLLECTOR_SELECTION_CONFIRMED2_AT,
			CUR_MAX_SELECT2_AT,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_COLLECTOR_MAX_DECISION_AT,
			CUR_COLLECTOR_MAX_DECISION2_AT,
			CUR_MAX_DECISION_AT,
			CUR_MAX_DECISION2_AT,
			CUR_TRANSACTION_ID,
			CUR_CHECK_STATE
		);
        
        IF IN_SITE_ID = 0 THEN
			SELECT USER_NAME INTO VAR_SITE_NAME
            FROM USERS
            WHERE ID = IN_DISPOSER_ID;
        ELSE
			SELECT SITE_NAME INTO VAR_SITE_NAME
            FROM COMP_SITE
            WHERE ID = IN_SITE_ID;
        END IF;
        
        UPDATE GET_DISPOSER_ORDER_LIST_TEMP
        SET SITE_NAME = VAR_SITE_NAME
        WHERE ORDER_ID = CUR_ORDER_ID;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'								, ORDER_ID,
		'DISPOSER_ID'							, DISPOSER_ID,
		'COLLECTOR_ID'							, COLLECTOR_ID,
		'DISPOSER_TYPE'							, DISPOSER_TYPE,
		'SITE_ID'								, SITE_ID,
		'ACTIVE'								, ACTIVE,
		'ORDER_CODE'							, ORDER_CODE,
		'MANAGER_ID'							, MANAGER_ID,
		'SUCCESS_BIDDER'						, SUCCESS_BIDDER,
		'FIRST_PLACE'							, FIRST_PLACE,
		'SECOND_PLACE'							, SECOND_PLACE,
		'PROSPECTIVE_VISITORS'					, PROSPECTIVE_VISITORS,
		'BIDDERS'								, BIDDERS,
		'PROSPECTIVE_BIDDERS'					, PROSPECTIVE_BIDDERS,
		'CREATED_AT'							, CREATED_AT,
		'UPDATED_AT'							, UPDATED_AT,
		'VISIT_START_AT'						, VISIT_START_AT,
		'VISIT_END_AT'							, VISIT_END_AT,
		'BIDDING_END_AT'						, BIDDING_END_AT,
		'OPEN_AT'								, OPEN_AT,
		'CLOSE_AT'								, CLOSE_AT,
		'KIKCD_B_CODE'							, KIKCD_B_CODE,
		'ADDR'									, ADDR,
		'NOTE'									, NOTE,
		'LAT'									, LAT,
		'LNG'									, LNG,
		'VISIT_EARLY_CLOSING'					, VISIT_EARLY_CLOSING,
		'BIDDING_EARLY_CLOSING'					, BIDDING_EARLY_CLOSING,
		'IS_DELETED'							, IS_DELETED,
		'SELECTED'								, SELECTED,
		'SELECTED_AT'							, SELECTED_AT,
		'COLLECTOR_SELECTION_CONFIRMED'			, COLLECTOR_SELECTION_CONFIRMED,
		'COLLECTOR_SELECTION_CONFIRMED_AT'		, COLLECTOR_SELECTION_CONFIRMED_AT,
		'VISIT_EARLY_CLOSED_AT'					, VISIT_EARLY_CLOSED_AT,
		'BIDDING_EARLY_CLOSED_AT'				, BIDDING_EARLY_CLOSED_AT,
		'DELETED_AT'							, DELETED_AT,
		'MAX_SELECT_AT'							, MAX_SELECT_AT,
		'SELECTED2'								, SELECTED2,
		'SELECTED2_AT'							, SELECTED2_AT,
		'COLLECTOR_SELECTION_CONFIRMED2'		, COLLECTOR_SELECTION_CONFIRMED2,
		'COLLECTOR_SELECTION_CONFIRMED2_AT'		, COLLECTOR_SELECTION_CONFIRMED2_AT,
		'MAX_SELECT2_AT'						, MAX_SELECT2_AT,
		'COLLECTOR_BIDDING_ID'					, COLLECTOR_BIDDING_ID,
		'COLLECTOR_MAX_DECISION_AT'				, COLLECTOR_MAX_DECISION_AT,
		'COLLECTOR_MAX_DECISION2_AT'			, COLLECTOR_MAX_DECISION2_AT,
		'MAX_DECISION_AT'						, MAX_DECISION_AT,
		'MAX_DECISION2_AT'						, MAX_DECISION2_AT,
		'TRANSACTION_ID'						, TRANSACTION_ID,
		'CHECK_STATE'							, CHECK_STATE,
		'SITE_NAME'								, SITE_NAME
	)) 
    INTO OUT_ORDER_LIST FROM GET_DISPOSER_ORDER_LIST_TEMP;
    
	DROP TABLE IF EXISTS GET_DISPOSER_ORDER_LIST_TEMP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_disposer_wste_geo_info`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    OUT OUT_GEO_INFO				JSON
)
BEGIN		
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'			, ID, 
		'LAT'			, LAT, 
		'LNG'			, LNG
	)) 
	INTO OUT_GEO_INFO
	FROM SITE_WSTE_DISPOSAL_ORDER 
	WHERE ID = IN_DISPOSER_ORDER_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_duty_to_apply_for_visit`(
	IN IN_DISPOSER_ORDER_ID					BIGINT,
    OUT rtn_val 							INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 							VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_get_duty_to_apply_for_visit
Input param 	: 1개
Output param 	: 2개
Job 			: 폐기물배출신청건에 대한 방문의무가 있는지 검사하여 방문의무가 있으면 0, 그렇지 않으면 예외처리코드를 반환함
Update 			: 2022.01.29
Version			: 0.0.3
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.3)
*/

	SELECT VISIT_END_AT
    INTO @OUT_DUTY_TO_APPLY_FOR_VISIT
    FROM SITE_WSTE_DISPOSAL_ORDER 
    WHERE 
		ID = IN_DISPOSER_ORDER_ID AND 
        ACTIVE = TRUE;
        
	IF @OUT_DUTY_TO_APPLY_FOR_VISIT IS NOT NULL THEN
		SET rtn_val = 0;
		SET msg_txt = 'Success';
	ELSE
		SET rtn_val = 26501;
		SET msg_txt = 'Dischargers who do not have an obligation to visit';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_interested_site_lists`(
	IN IN_USER_ID						BIGINT,
	IN IN_SITE_ID						BIGINT,
    IN IN_USER_TYPE						INT,		/*0:개인배출자, 1:사업자배출자*/
    OUT OUT_SITE_LIST					JSON
)
BEGIN	
	DECLARE VAR_ID_COUNT						INT		 		DEFAULT 0;
    
    SET OUT_SITE_LIST = NULL;
	SELECT COUNT(A.ID) INTO VAR_ID_COUNT
	FROM REGISTERED_SITE A 
	LEFT JOIN COMP_SITE B ON A.TARGET_ID = B.ID
	WHERE 
		A.ACTIVE = TRUE AND
		A.DELETED_AT IS NULL AND
		A.DELETED2_AT IS NULL AND
        A.REGISTER_TYPE = 1 AND
        /*A.CONFIRMED = TRUE AND*/
		IF(IN_USER_TYPE = 0,
			A.USER_ID = IN_USER_ID AND
            A.SITE_ID = 0,
            A.SITE_ID = IN_SITE_ID
        );
        
	IF VAR_ID_COUNT > 0 THEN
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'ID'							, A.ID, 
				'COLLECTOR_SITE_ID'				, A.USER_ID, 
				'COLLECTOR_SITE_NM'				, A.SITE_ID, 
				'TARGET_ID'						, A.TARGET_ID, 
				'CREATED_AT'					, A.CREATED_AT, 
				'UPDATED_AT'					, A.UPDATED_AT, 
				'DELETED_AT'					, A.DELETED_AT, 
				'ACTIVE'						, A.ACTIVE, 
				'CONFIRMED'						, A.CONFIRMED, 
				'CONFIRMED_AT'					, A.CONFIRMED_AT, 
				'DELETED2_AT'					, A.DELETED2_AT, 
				'REGISTER_TYPE'					, A.REGISTER_TYPE, 
				'TARGET_NAME'					, B.SITE_NAME
			)
		) INTO OUT_SITE_LIST
		FROM REGISTERED_SITE A 
		LEFT JOIN COMP_SITE B ON A.TARGET_ID = B.ID
		WHERE 
			A.ACTIVE = TRUE AND
			A.DELETED_AT IS NULL AND
			A.DELETED2_AT IS NULL AND
			A.REGISTER_TYPE = 1 AND
			/*A.CONFIRMED = TRUE AND*/
			IF(IN_USER_TYPE = 0,
				A.USER_ID = IN_USER_ID AND
				A.SITE_ID = 0,
				A.SITE_ID = IN_SITE_ID
			)
		ORDER BY A.ID DESC;
		/*수거자정보를 JSON형태로 변환한다.*/
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_last_report_confirmed_at`(
	IN IN_USER_ID					BIGINT,
	IN IN_COLLECTOR_SITE_ID			BIGINT,
    OUT OUT_LAST_CONFIRMED_AT		DATETIME
)
BEGIN
	DECLARE VAR_CONFIRMED_AT				DATETIME	 	DEFAULT NULL;
    
	SELECT A.CONFIRMED_AT INTO VAR_CONFIRMED_AT
    FROM TRANSACTION_REPORT A 
    LEFT JOIN USERS B ON A.DISPOSER_SITE_ID = B.AFFILIATED_SITE
    WHERE B.ID = IN_USER_ID AND COLLECTOR_SITE_ID = IN_COLLECTOR_SITE_ID
    ORDER BY A.CONFIRMED_AT DESC
    LIMIT 1;
    SET OUT_LAST_CONFIRMED_AT = VAR_CONFIRMED_AT;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_manager_info`(
	IN IN_USER_ID					BIGINT,
    OUT OUT_MANAGER_INFO			JSON
)
BEGIN
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'					, ID, 
			'NAME'					, NAME, 
			'PHONE'					, PHONE
		)
	) 
	INTO OUT_MANAGER_INFO 
	FROM CHIUM_MEMBERS  
	WHERE ID = IN_USER_ID;	
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_manager_list`(
	IN IN_SITE_ID					BIGINT,
    OUT OUT_MANAGER_LIST			JSON
)
BEGIN
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'					, ID, 
			'USER_ID'				, USER_ID, 
			'USER_NAME'				, USER_NAME, 
			'PHONE'					, PHONE, 
			'BELONG_TO'				, BELONG_TO, 
			'AFFILIATED_SITE'		, AFFILIATED_SITE, 
			'ACTIVE'				, ACTIVE, 
			'CLASS'					, CLASS, 
			'CS_MANAGER_ID'			, CS_MANAGER_ID, 
			'CONFIRMED'				, CONFIRMED, 
			'CONFIRMED_AT'			, CONFIRMED_AT, 
			'CREATED_AT'			, CREATED_AT, 
			'UPDATED_AT'			, UPDATED_AT, 
			'AGREEMENT_TERMS'		, AGREEMENT_TERMS, 
			'USER_CURRENT_TYPE'		, USER_CURRENT_TYPE, 
			'AVATAR_PATH'			, AVATAR_PATH, 
			'PUSH_ENABLED'			, PUSH_ENABLED, 
			'NOTICE_ENABLED'		, NOTICE_ENABLED
		)
	) 
	INTO OUT_MANAGER_LIST 
	FROM USERS  
	WHERE 
		AFFILIATED_SITE 		= IN_SITE_ID AND
        ACTIVE					= TRUE;	
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_member_list_for_push`(
	IN IN_ORDER_ID					BIGINT,
	IN IN_TITLE						VARCHAR(255),
	IN IN_BODY						VARCHAR(255),
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT OUT_rtn_val						INT,
    OUT OUT_msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_get_member_list_for_push
Input param 	: 1개
Output param 	: 1개
Job 			: 푸시를 보내기 위한 수거자 정보를 반환한다.
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	
    CALL sp_req_current_time(@REG_DT);
	SELECT COUNT(ID) 
    INTO @ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID 				= IN_ORDER_ID AND
        IS_DELETED 		= FALSE AND
        ACTIVE		 	= TRUE;
    
	SET OUT_rtn_val = NULL;
	SET OUT_msg_txt = NULL;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS GET_DISPOSER_LIST_FOR_PUSH_TEMP (
		USER_ID					BIGINT,
		USER_NAME				VARCHAR(255),
		FCM						VARCHAR(255),
		AVATAR_PATH				VARCHAR(255),
		PHONE					VARCHAR(255),
		TITLE					VARCHAR(255),
		BODY					VARCHAR(255),
		ORDER_ID				BIGINT,
		BIDDING_ID				BIGINT,
		TRANSACTION_ID			BIGINT,
		REPORT_ID				BIGINT,
		CATEGORY_ID				INT,
		CREATED_AT				DATETIME
	);        
    
    IF @ORDER_EXISTS = 1 THEN
		SELECT DISPOSER_ID, SITE_ID, ORDER_CODE INTO @DISPOSER_ID, @SITE_ID, @ORDER_CODE
        FROM SITE_WSTE_DISPOSAL_ORDER
        WHERE ID = IN_ORDER_ID;
        
		SELECT ID INTO @TRANSACTION_ID
        FROM WSTE_CLCT_TRMT_TRANSACTION
        WHERE DISPOSAL_ORDER_ID = IN_ORDER_ID;
        
        SELECT ID INTO @REPORT_ID
        FROM TRANSACTION_REPORT
        WHERE DISPOSER_ORDER_ID = IN_ORDER_ID;
        
		CALL sp_req_current_time(@REG_DT);
        INSERT INTO GET_DISPOSER_LIST_FOR_PUSH_TEMP (
			USER_ID,
			USER_NAME,
			FCM,
			AVATAR_PATH,
            PHONE,
			TITLE,
			BODY,
			ORDER_ID,
			BIDDING_ID,
			TRANSACTION_ID,
			REPORT_ID,
			CATEGORY_ID,
			CREATED_AT
        )
		SELECT 
			B.ID,
            B.USER_NAME,
            B.FCM,
            B.AVATAR_PATH,
            B.PHONE
            IN_TITLE,
            IN_BODY,
            IN_ORDER_ID,
            NULL,
            @TRANSACTION_ID,
            @REPORT_ID,
            IN_CATEGORY_ID,
            @REG_DT
		FROM SITE_WSTE_DISPOSAL_ORDER A 
		LEFT JOIN USERS B ON IF(@SITE_ID = 0, A.DISPOSER_ID = B.ID, A.SITE_ID = B.AFFILIATED_SITE)
		WHERE 
			B.ACTIVE = TRUE AND 
			B.PUSH_ENABLED = TRUE AND
			A.ACTIVE = TRUE AND
			A.IS_DELETED = FALSE AND
			A.ID = IN_ORDER_ID AND
			IF(@SITE_ID = 0, 
				A.DISPOSER_ID = @DISPOSER_ID,
				A.SITE_ID = @SITE_ID
			);
        
        IF @COLLECTOR_ID IS NULL THEN
			INSERT INTO GET_DISPOSER_LIST_FOR_PUSH_TEMP (
				USER_ID,
				USER_NAME,
				FCM,
				AVATAR_PATH,
                PHONE,
				TITLE,
				BODY,
				ORDER_ID,
				BIDDING_ID,
				TRANSACTION_ID,
				REPORT_ID,
				CATEGORY_ID,
				CREATED_AT
			)
			SELECT 
				B.ID,
				B.USER_NAME,
				B.FCM,
				B.AVATAR_PATH,
                B.PHONE,
				IN_TITLE,
				IN_BODY,
				IN_ORDER_ID,
				NULL,
				@TRANSACTION_ID,
				@REPORT_ID,
				IN_CATEGORY_ID,
				@REG_DT
			FROM COLLECTOR_BIDDING A 
			LEFT JOIN USERS B ON A.COLLECTOR_ID = B.AFFILIATED_SITE
			WHERE 
				B.ACTIVE 				= TRUE AND 
				B.PUSH_ENABLED 			= TRUE AND
				A.ACTIVE 				= TRUE AND
				A.DELETED 				= FALSE AND
				A.RESPONSE_VISIT 		= TRUE AND
                A.CANCEL_VISIT 			= FALSE AND
                A.REJECT_BIDDING_APPLY 	= FALSE AND
                A.GIVEUP_BIDDING 		= FALSE AND
                A.CANCEL_BIDDING 		= FALSE AND
                A.REJECT_BIDDING 		= FALSE AND
                A.BIDDING_VISIBLE 		= TRUE AND
                A.ORDER_VISIBLE 		= TRUE AND
				A.DISPOSAL_ORDER_ID 	= IN_ORDER_ID;
        ELSE
			INSERT INTO GET_DISPOSER_LIST_FOR_PUSH_TEMP (
				USER_ID,
				USER_NAME,
				FCM,
				AVATAR_PATH,
                PHONE,
				TITLE,
				BODY,
				ORDER_ID,
				BIDDING_ID,
				TRANSACTION_ID,
				REPORT_ID,
				CATEGORY_ID,
				CREATED_AT
			)
			SELECT 
				B.ID,
				B.USER_NAME,
				B.FCM,
				B.AVATAR_PATH,
                B.PHONE,
				IN_TITLE,
				IN_BODY,
				IN_ORDER_ID,
				NULL,
				@TRANSACTION_ID,
				@REPORT_ID,
				IN_CATEGORY_ID,
				@REG_DT
			FROM WSTE_CLCT_TRMT_TRANSACTION A 
			LEFT JOIN USERS B ON A.COLLECTOR_SITE_ID = B.AFFILIATED_SITE
			WHERE 
				B.ACTIVE = TRUE AND 
				B.PUSH_ENABLED = TRUE AND
				A.IN_PROGRESS = TRUE AND
				A.ACCEPT_ASK_END = TRUE AND
				A.DISPOSAL_ORDER_ID = IN_ORDER_ID;
        END IF;  
        
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'				, USER_ID,
				'USER_NAME'				, USER_NAME,
				'FCM'					, FCM,
				'AVATAR_PATH'			, AVATAR_PATH,
				'PHONE'					, B.PHONE,
				'TITLE'					, TITLE,
				'BODY'					, BODY,
				'ORDER_ID'				, ORDER_ID,
				'BIDDING_ID'			, BIDDING_ID,
				'TRANSACTION_ID'		, TRANSACTION_ID,
				'REPORT_ID'				, REPORT_ID,
				'CATEGORY_ID'			, CATEGORY_ID,
				'CREATED_AT'			, CREATED_AT
			)
		) 
		INTO @PUSH_INFO
		FROM GET_DISPOSER_LIST_FOR_PUSH_TEMP;
        
        CALL sp_insert_push(
			0,
			@PUSH_INFO,
			OUT_rtn_val,
			OUT_msg_txt
        );
		SET OUT_TARGET_LIST = @PUSH_INFO;
    ELSE
		SET OUT_rtn_val = 38601;
        SET OUT_msg_txt = 'order does not exist';
		SET OUT_TARGET_LIST = NULL;
    END IF;
	DROP TABLE IF EXISTS GET_DISPOSER_LIST_FOR_PUSH_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_member_list_for_push_2`(
	IN IN_ORDER_ID					BIGINT,
	IN IN_TITLE						VARCHAR(255),
	IN IN_BODY						VARCHAR(255),
	IN IN_TITLE_2					VARCHAR(255),
	IN IN_BODY_2					VARCHAR(255),
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT OUT_rtn_val					INT,
    OUT OUT_msg_txt					VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_get_member_list_for_push
Input param 	: 1개
Output param 	: 1개
Job 			: 푸시를 보내기 위한 수거자 정보를 반환한다.
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME		DEFAULT NOW();
	DECLARE VAR_ORDER_EXISTS					INT				DEFAULT NOW();
	DECLARE VAR_DISPOSER_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_SITE_ID							BIGINT		 	DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)	 	DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT		 	DEFAULT NULL;
	DECLARE VAR_REPORT_ID						BIGINT		 	DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON		 	DEFAULT NULL;
	
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) 
    INTO VAR_ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID 				= IN_ORDER_ID AND
        IS_DELETED 		= FALSE AND
        ACTIVE		 	= TRUE;
    
	SET OUT_rtn_val = NULL;
	SET OUT_msg_txt = NULL;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS GET_MEMBER_LIST_FOR_PUSH_2_TEMP (
		USER_ID					BIGINT,
		USER_NAME				VARCHAR(255),
		FCM						VARCHAR(255),
		AVATAR_PATH				VARCHAR(255),
		TITLE					VARCHAR(255),
		BODY					VARCHAR(255),
		ORDER_ID				BIGINT,
		BIDDING_ID				BIGINT,
		TRANSACTION_ID			BIGINT,
		REPORT_ID				BIGINT,
		CATEGORY_ID				INT,
		CREATED_AT				DATETIME
	);        
    
    IF VAR_ORDER_EXISTS = 1 THEN
		SELECT DISPOSER_ID, SITE_ID, ORDER_CODE INTO VAR_DISPOSER_ID, VAR_SITE_ID, VAR_ORDER_CODE
        FROM SITE_WSTE_DISPOSAL_ORDER
        WHERE ID = IN_ORDER_ID;
        
		SELECT ID INTO VAR_TRANSACTION_ID
        FROM WSTE_CLCT_TRMT_TRANSACTION
        WHERE DISPOSAL_ORDER_ID = IN_ORDER_ID;
        
        SELECT ID INTO VAR_REPORT_ID
        FROM TRANSACTION_REPORT
        WHERE DISPOSER_ORDER_ID = IN_ORDER_ID;
        
		CALL sp_req_current_time(VAR_REG_DT);
        INSERT INTO GET_MEMBER_LIST_FOR_PUSH_2_TEMP (
			USER_ID,
			USER_NAME,
			FCM,
			AVATAR_PATH,
			TITLE,
			BODY,
			ORDER_ID,
			BIDDING_ID,
			TRANSACTION_ID,
			REPORT_ID,
			CATEGORY_ID,
			CREATED_AT
        )
		SELECT 
			B.ID,
            B.USER_NAME,
            B.FCM,
            B.AVATAR_PATH,
            IN_TITLE,
            IN_BODY,
            IN_ORDER_ID,
            NULL,
            VAR_TRANSACTION_ID,
            VAR_REPORT_ID,
            IN_CATEGORY_ID,
            VAR_REG_DT
		FROM SITE_WSTE_DISPOSAL_ORDER A 
		LEFT JOIN USERS B ON IF(VAR_SITE_ID = 0, A.DISPOSER_ID = B.ID, A.SITE_ID = B.AFFILIATED_SITE)
		WHERE 
			B.ACTIVE = TRUE AND 
			B.PUSH_ENABLED = TRUE AND
			A.ACTIVE = TRUE AND
			A.IS_DELETED = FALSE AND
			A.ID = IN_ORDER_ID AND
			IF(VAR_SITE_ID = 0, 
				A.DISPOSER_ID = VAR_DISPOSER_ID,
				A.SITE_ID = VAR_SITE_ID
			);
        
		INSERT INTO GET_MEMBER_LIST_FOR_PUSH_2_TEMP (
			USER_ID,
			USER_NAME,
			FCM,
			AVATAR_PATH,
			TITLE,
			BODY,
			ORDER_ID,
			BIDDING_ID,
			TRANSACTION_ID,
			REPORT_ID,
			CATEGORY_ID,
			CREATED_AT
		)
		SELECT 
			B.ID,
			B.USER_NAME,
			B.FCM,
			B.AVATAR_PATH,
			IN_TITLE_2,
			IN_BODY_2,
			IN_ORDER_ID,
			NULL,
			VAR_TRANSACTION_ID,
			VAR_REPORT_ID,
			IN_CATEGORY_ID,
			VAR_REG_DT
		FROM COLLECTOR_BIDDING A 
		LEFT JOIN USERS B ON A.COLLECTOR_ID = B.AFFILIATED_SITE
		WHERE 
			B.ACTIVE 				= TRUE AND 
			B.PUSH_ENABLED 			= TRUE AND
			A.ACTIVE 				= TRUE AND
			A.DELETED 				= FALSE AND
			A.RESPONSE_VISIT 		= TRUE AND
			A.CANCEL_VISIT 			= FALSE AND
			A.REJECT_BIDDING_APPLY 	= FALSE AND
			A.GIVEUP_BIDDING 		= FALSE AND
			A.CANCEL_BIDDING 		= FALSE AND
			A.REJECT_BIDDING 		= FALSE AND
			A.BIDDING_VISIBLE 		= TRUE AND
			A.ORDER_VISIBLE 		= TRUE AND
			A.DISPOSAL_ORDER_ID 	= IN_ORDER_ID;
        
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'				, USER_ID,
				'USER_NAME'				, USER_NAME,
				'FCM'					, FCM,
				'AVATAR_PATH'			, AVATAR_PATH,
				'TITLE'					, TITLE,
				'BODY'					, BODY,
				'ORDER_ID'				, ORDER_ID,
				'BIDDING_ID'			, BIDDING_ID,
				'TRANSACTION_ID'		, TRANSACTION_ID,
				'REPORT_ID'				, REPORT_ID,
				'CATEGORY_ID'			, CATEGORY_ID,
				'CREATED_AT'			, CREATED_AT
			)
		) 
		INTO @PUSH_INFO
		FROM GET_MEMBER_LIST_FOR_PUSH_2_TEMP;
        
        CALL sp_insert_push(
			0,
			@PUSH_INFO,
			OUT_rtn_val,
			OUT_msg_txt
        );
		SET OUT_TARGET_LIST = @PUSH_INFO;
    ELSE
		SET OUT_rtn_val = 38601;
        SET OUT_msg_txt = 'order does not exist';
		SET OUT_TARGET_LIST = NULL;
    END IF;
	DROP TABLE IF EXISTS GET_MEMBER_LIST_FOR_PUSH_2_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_no_confirm_license_counts_daily`(
	IN IN_TARGET_DATE				DATE,
	IN IN_MENU_ID					INT,
    OUT OUT_COUNT					INT
)
BEGIN
    IF IN_MENU_ID IS NOT NULL THEN
		SELECT COUNT(DATE(A.CREATED_AT)) INTO OUT_COUNT
		FROM COMP_SITE A
		LEFT JOIN COMPANY B ON A.COMP_ID = B.ID
		WHERE 
			DATE(A.CREATED_AT) = IN_TARGET_DATE AND
			B.ACTIVE = TRUE AND
			A.ACTIVE = TRUE AND
            IF(IN_MENU_ID = 0,
				IF(IN_TARGET_DATE IS NOT NULL, 
					B.CONFIRMED = FALSE AND DATE(A.CREATED_AT) = IN_TARGET_DATE, 
					B.CONFIRMED = FALSE
				),
				IF(IN_MENU_ID = 1,
					IF(IN_TARGET_DATE IS NOT NULL, 
						(
							B.CONFIRMED = FALSE OR
                            A.CONFIRMED = FALSE
                        ) AND 
                        B.TRMT_BIZ_CODE = '1' AND
                        DATE(A.CREATED_AT) = IN_TARGET_DATE, 
						(
							B.CONFIRMED = FALSE OR
							A.CONFIRMED = FALSE
                        ) AND 
                        B.TRMT_BIZ_CODE = '1'
					),
					IF(IN_TARGET_DATE IS NOT NULL, 
						(
							B.CONFIRMED = FALSE OR
                            A.CONFIRMED = FALSE
                        ) AND 
                        B.TRMT_BIZ_CODE IN (
							SELECT CODE FROM WSTE_TRMT_BIZ WHERE CAST(CODE AS UNSIGNED) > 1 AND CAST(CODE AS UNSIGNED) < 9
						) AND
                        DATE(A.CREATED_AT) = IN_TARGET_DATE, 
						(
							B.CONFIRMED = FALSE OR
							A.CONFIRMED = FALSE
                        ) AND 
                        B.TRMT_BIZ_CODE IN (
							SELECT CODE FROM WSTE_TRMT_BIZ WHERE CAST(CODE AS UNSIGNED) > 1 AND CAST(CODE AS UNSIGNED) < 9
						)
					)
				)
            );
    ELSE
		SET OUT_COUNT = 0;
    END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_no_confirm_license_counts_monthly`(
	IN IN_TARGET_DATE				DATE,
	IN IN_MENU_ID					INT,
    OUT OUT_LIST					JSON
)
BEGIN
	DECLARE VAR_TARGET_YEAR						INT	 		DEFAULT NULL;
	DECLARE VAR_TARGET_MONTH					INT		 	DEFAULT NULL;
    
    IF IN_MENU_ID IS NOT NULL THEN
		SET VAR_TARGET_YEAR = YEAR(IN_TARGET_DATE);
		SET VAR_TARGET_MONTH = MONTH(IN_TARGET_DATE);
		
		CREATE TEMPORARY TABLE IF NOT EXISTS NO_CONFIRM_LICENSE_LIST_MONTHLY (
			TARGET_DATE								DATE,
			NO_CONFIRM_COUNT						INT
		);        
		
		INSERT INTO NO_CONFIRM_LICENSE_LIST_MONTHLY(
			TARGET_DATE,
			NO_CONFIRM_COUNT
		)
		SELECT DATE(A.CREATED_AT), COUNT(DATE(A.CREATED_AT))
		FROM COMP_SITE A
		LEFT JOIN COMPANY B ON A.COMP_ID = B.ID
		WHERE 
			B.ACTIVE = TRUE AND
			A.ACTIVE = TRUE AND
            IF(IN_MENU_ID = 0,
				IF(IN_TARGET_DATE IS NOT NULL, 
					B.CONFIRMED = FALSE AND YEAR(A.CREATED_AT) = VAR_TARGET_YEAR AND MONTH(A.CREATED_AT) = VAR_TARGET_MONTH, 
					B.CONFIRMED = FALSE
				),
				IF(IN_MENU_ID = 1,
					IF(IN_TARGET_DATE IS NOT NULL, 
						(
							B.CONFIRMED = FALSE OR
                            A.CONFIRMED = FALSE
                        ) AND 
                        B.TRMT_BIZ_CODE = '1' AND
                        YEAR(A.CREATED_AT) = VAR_TARGET_YEAR AND MONTH(A.CREATED_AT) = VAR_TARGET_MONTH, 
						(
							B.CONFIRMED = FALSE OR
							A.CONFIRMED = FALSE
                        ) AND 
                        B.TRMT_BIZ_CODE = '1'
					),
					IF(IN_TARGET_DATE IS NOT NULL, 
						(
							B.CONFIRMED = FALSE OR
                            A.CONFIRMED = FALSE
                        ) AND 
                        B.TRMT_BIZ_CODE IN (
							SELECT CODE FROM WSTE_TRMT_BIZ WHERE CAST(CODE AS UNSIGNED) > 1 AND CAST(CODE AS UNSIGNED) < 9
						) AND
                        YEAR(A.CREATED_AT) = VAR_TARGET_YEAR AND MONTH(A.CREATED_AT) = VAR_TARGET_MONTH, 
						(
							B.CONFIRMED = FALSE OR
							A.CONFIRMED = FALSE
                        ) AND 
                        B.TRMT_BIZ_CODE IN (
							SELECT CODE FROM WSTE_TRMT_BIZ WHERE CAST(CODE AS UNSIGNED) > 1 AND CAST(CODE AS UNSIGNED) < 9
						)
					)
				)
            )
		GROUP BY DATE(A.CREATED_AT);      
		
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'TARGET_DATE'		, TARGET_DATE, 
				'NO_CONFIRM_COUNT'	, NO_CONFIRM_COUNT
			)
		) 
		INTO OUT_LIST 
		FROM NO_CONFIRM_LICENSE_LIST_MONTHLY;
		DROP TABLE IF EXISTS NO_CONFIRM_LICENSE_LIST_MONTHLY;
    ELSE
		SET OUT_LIST = NULL;
    END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_no_confirm_license_list_monthly`(
	IN IN_TARGET_DATE				DATE,
    OUT OUT_LIST					JSON
)
BEGIN
	DECLARE VAR_TARGET_YEAR						INT	 		DEFAULT NULL;
	DECLARE VAR_TARGET_MONTH					INT		 	DEFAULT NULL;
    
    SET VAR_TARGET_YEAR = YEAR(IN_TARGET_DATE);
    SET VAR_TARGET_MONTH = MONTH(IN_TARGET_DATE);
    
	CREATE TEMPORARY TABLE IF NOT EXISTS NO_CONFIRM_LICENSE_LIST_MONTHLY (
		TARGET_DATE								DATE,
		NO_CONFIRM_COUNT						INT
	);        
	
    INSERT INTO NO_CONFIRM_LICENSE_LIST_MONTHLY(
		TARGET_DATE,
        NO_CONFIRM_COUNT
    )
	SELECT DATE(A.CREATED_AT), COUNT(DATE(A.CREATED_AT))
	FROM COMP_SITE A
    LEFT JOIN COMPANY B ON A.COMP_ID = B.ID
	WHERE 
        B.ACTIVE = TRUE AND
        A.ACTIVE = TRUE AND
        IF(IN_TARGET_DATE IS NOT NULL, 
			B.CONFIRMED = FALSE AND YEAR(A.CREATED_AT) = VAR_TARGET_YEAR AND MONTH(A.CREATED_AT) = VAR_TARGET_YEAR, 
            B.CONFIRMED = FALSE
        )
    GROUP BY DATE(A.CREATED_AT);      
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'TARGET_DATE'		, TARGET_DATE, 
			'NO_CONFIRM_COUNT'	, NO_CONFIRM_COUNT
		)
	) 
	INTO OUT_LIST 
	FROM NO_CONFIRM_LICENSE_LIST_MONTHLY;
	DROP TABLE IF EXISTS NO_CONFIRM_LICENSE_LIST_MONTHLY;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_order_bell_state`(
	IN IN_ORDER_ID					BIGINT,
    OUT OUT_STATE					TINYINT
)
BEGIN
	DECLARE VAR_RECORD_COUNT					INT	 		DEFAULT 0;
    
	SELECT COUNT(ID) INTO VAR_RECORD_COUNT
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID = IN_ORDER_ID AND
        CHECK_STATE = TRUE;
        
	IF VAR_RECORD_COUNT > 0 THEN
		SET OUT_STATE = TRUE;
    ELSE
		SET OUT_STATE = FALSE;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_parent_company_info`(
	IN IN_COMP_ID			BIGINT,
    OUT OUT_COMP_INFO		JSON
)
BEGIN
	DECLARE VAR_KIKCD_B_CODE					VARCHAR(10)		DEFAULT NULL;
	DECLARE VAR_ADDRESS_INFO					JSON			DEFAULT NULL;
	
	CREATE TEMPORARY TABLE IF NOT EXISTS PARENT_COMP_INFO_TEMP (
		ID						BIGINT,
		COMP_NAME				VARCHAR(100),
		REP_NAME				VARCHAR(50),
        KIKCD_B_CODE			VARCHAR(10),
        ADDR					VARCHAR(255),
        CONTACT					VARCHAR(100),
        TRMT_BIZ_CODE			VARCHAR(4),
		LAT						DECIMAL(12,9),
        LNG						DECIMAL(12,9),
        BIZ_REG_CODE			VARCHAR(12),
        PERMIT_REG_CODE			VARCHAR(100),
        P_COMP_ID				BIGINT,
        BIZ_REG_IMG_PATH		VARCHAR(255),
        PERMIT_REG_IMG_PATH		VARCHAR(255),
        CS_MANAGER_ID			BIGINT,
        CONFIRMED				TINYINT,
        CONFIRMED_AT			DATETIME,
        CREATED_AT				DATETIME,
        UPDATED_AT				DATETIME,
        ACTIVE					TINYINT,
        ADDRESS_INFO			JSON
	);     
    
    INSERT INTO PARENT_COMP_INFO_TEMP (
		ID,
		COMP_NAME,
		REP_NAME,
        KIKCD_B_CODE,
        ADDR,
        CONTACT,
        TRMT_BIZ_CODE,
		LAT,
        LNG,
        BIZ_REG_CODE,
        PERMIT_REG_CODE,
        P_COMP_ID,
        BIZ_REG_IMG_PATH,
        PERMIT_REG_IMG_PATH,
        CS_MANAGER_ID,
        CONFIRMED,
        CONFIRMED_AT,
        CREATED_AT,
        UPDATED_AT,
        ACTIVE
	)
	SELECT 
		ID,
		COMP_NAME,
		REP_NAME,
        KIKCD_B_CODE,
        ADDR,
        CONTACT,
        TRMT_BIZ_CODE,
		LAT,
        LNG,
        BIZ_REG_CODE,
        PERMIT_REG_CODE,
        P_COMP_ID,
        BIZ_REG_IMG_PATH,
        PERMIT_REG_IMG_PATH,
        CS_MANAGER_ID,
        CONFIRMED,
        CONFIRMED_AT,
        CREATED_AT,
        UPDATED_AT,
        ACTIVE
	FROM COMPANY 
	WHERE ID = IN_COMP_ID;	
    
    SELECT KIKCD_B_CODE INTO VAR_KIKCD_B_CODE
    FROM COMPANY 
	WHERE ID = IN_COMP_ID;	
    
    CALL sp_get_address_with_bcode(
		VAR_KIKCD_B_CODE,
        VAR_ADDRESS_INFO
    );
    
    UPDATE PARENT_COMP_INFO_TEMP
    SET 
		ADDRESS_INFO 		= VAR_ADDRESS_INFO
    WHERE ID = IN_COMP_ID;	
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'						, ID, 
			'COMP_NAME'					, COMP_NAME, 
			'REP_NAME'					, REP_NAME, 
			'KIKCD_B_CODE'				, KIKCD_B_CODE,
			'ADDR'						, ADDR,
			'CONTACT'					, CONTACT,
            'TRMT_BIZ_CODE'				, TRMT_BIZ_CODE,
            'LAT'						, LAT,
			'LNG'						, LNG, 
            'BIZ_REG_CODE'				, BIZ_REG_CODE,
            'PERMIT_REG_CODE'			, PERMIT_REG_CODE,
            'P_COMP_ID'					, P_COMP_ID,
            'BIZ_REG_IMG_PATH'			, BIZ_REG_IMG_PATH,
            'PERMIT_REG_IMG_PATH'		, PERMIT_REG_IMG_PATH,
            'CS_MANAGER_ID'				, CS_MANAGER_ID,
            'CONFIRMED'					, CONFIRMED,
            'CONFIRMED_AT'				, CONFIRMED_AT,
            'CREATED_AT'				, CREATED_AT,
            'UPDATED_AT'				, UPDATED_AT,
            'ACTIVE'					, ACTIVE,
            'ADDRESS_INFO'				, ADDRESS_INFO
		)
	) 
	INTO OUT_COMP_INFO 
	FROM PARENT_COMP_INFO_TEMP;	
	DROP TABLE IF EXISTS PARENT_COMP_INFO_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_prospective_site_list_inside_range`(
    IN IN_PARAMS					JSON
)
BEGIN 
    DECLARE VAR_USER_ID 					BIGINT;
    DECLARE VAR_BCODE 						VARCHAR(10);
    DECLARE VAR_TARGET_USER_TYPE 			INT;
    DECLARE VAR_DISTANCE 					INT DEFAULT 5;
    DECLARE VAR_LAT 						DECIMAL(12,9);
    DECLARE VAR_LNG 						DECIMAL(12,9);
    DECLARE VAR_IS_TRANSIT					TINYINT;
    DECLARE rtn_val							INT DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) DEFAULT 'success';
    DECLARE json_data						JSON DEFAULT NULL;
    
	SELECT 
		USER_ID, 
		BCODE, 
        TARGET_USER_TYPE, 
        DISTANCE, 
        LAT, 
        LNG, 
        IS_TRANSIT
    INTO 
		VAR_USER_ID, 
		VAR_BCODE, 
        VAR_TARGET_USER_TYPE, 
        VAR_DISTANCE, 
        VAR_LAT, 
        VAR_LNG, 
        VAR_IS_TRANSIT
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		BCODE	 				VARCHAR(10)			PATH "$.BCODE",
		TARGET_USER_TYPE	 	INT					PATH "$.TARGET_USER_TYPE",
		DISTANCE				INT					PATH "$.DISTANCE",
        LAT						DECIMAL(12,9)		PATH "$.LAT",
        LNG						DECIMAL(12,9)		PATH "$.LNG",
        IS_TRANSIT				TINYINT				PATH "$.IS_TRANSIT"
	)) AS PARAMS;   
    
    CALL sp_get_prospective_site_list_inside_range_without_handler(
        VAR_BCODE,
        VAR_TARGET_USER_TYPE,
        VAR_DISTANCE,
        VAR_LAT,
        VAR_LNG,
        VAR_IS_TRANSIT,
        rtn_val,
        msg_txt,
        json_data
    );
    
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_prospective_site_list_inside_range_without_handler`(
	IN IN_BCODE				VARCHAR(10),
	IN IN_USER_TYPE			INT,
	IN IN_RANGE				INT,
	IN IN_LAT				DECIMAL(12,9),
	IN IN_LNG				DECIMAL(12,9),
	IN IN_IS_TRANSIT		TINYINT,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200),
    OUT SITE_LIST			JSON
)
BEGIN

    DECLARE vRowCount 							INT 			DEFAULT 0;
    DECLARE endOfRow 							TINYINT 		DEFAULT FALSE;    
    DECLARE CUR_SITE_ID 						BIGINT;
    DECLARE CUR_LAT					 			DECIMAL(12,9);
    DECLARE CUR_LNG								DECIMAL(12,9);	
    DECLARE CUR_SITE_NAME						VARCHAR(255);	
    DECLARE CUR_DIST							FLOAT;	
    DECLARE CUR_PHONE							VARCHAR(20);
    DECLARE CUR_IS_TRANSIT						TINYINT;	
    DECLARE VAR_EARTH_RADIUS					FLOAT 			DEFAULT 6378.137;
    DECLARE VAR_180_DEGREE						INT 			DEFAULT 180;
    DECLARE SITE_LIST_CURSOR 					CURSOR FOR 
	SELECT 
		A.ID, 
        A.LAT, 
        A.LNG,
        A.COMP_NAME,
        VAR_EARTH_RADIUS * ACOS(COS(IN_LAT * PI() / VAR_180_DEGREE) * COS(A.LAT * PI() / VAR_180_DEGREE) * COS((A.LNG * PI() / VAR_180_DEGREE) - (IN_LNG * PI() / VAR_180_DEGREE)) + SIN(IN_LAT * PI() / VAR_180_DEGREE) * SIN(A.LAT * PI() / VAR_180_DEGREE)),
        A.CONTACT,
        A.IS_TRANSIT
    FROM PROSPECTIVE_MEMBERS A
    LEFT JOIN WSTE_TRMT_BIZ B ON A.BIZ_CODE = B.CODE
    WHERE 
		A.CLOSED = FALSE AND
        A.IS_TRANSIT = TRUE AND
		VAR_EARTH_RADIUS * ACOS(COS(IN_LAT * PI() / VAR_180_DEGREE) * COS(A.LAT * PI() / VAR_180_DEGREE) * COS((A.LNG * PI() / VAR_180_DEGREE) - (IN_LNG * PI() / VAR_180_DEGREE)) + SIN(IN_LAT * PI() / VAR_180_DEGREE) * SIN(A.LAT * PI() / VAR_180_DEGREE)) < IN_RANGE AND
        IF (IN_BCODE IS NULL, 
			B.USER_TYPE = IN_USER_TYPE,
			B.USER_TYPE = IN_USER_TYPE AND
            LEFT(A.BCODE,5) = LEFT(IN_BCODE,5)
		) AND
        IF (IN_IS_TRANSIT IS NOT NULL,
			A.IS_TRANSIT = IN_IS_TRANSIT,
            A.ID > 0
		)
    ORDER BY VAR_EARTH_RADIUS * ACOS(COS(IN_LAT * PI() / VAR_180_DEGREE) * COS(A.LAT * PI() / VAR_180_DEGREE) * COS((A.LNG * PI() / VAR_180_DEGREE) - (IN_LNG * PI() / VAR_180_DEGREE)) + SIN(IN_LAT * PI() / VAR_180_DEGREE) * SIN(A.LAT * PI() / VAR_180_DEGREE)) ASC;
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
        
	CREATE TEMPORARY TABLE IF NOT EXISTS SITE_PROSPECTIVE_LIST_INSIDE_RANGE_TEMP (
		ID							BIGINT,
		LAT							DECIMAL(12,9),
        LNG							DECIMAL(12,9),
        SITE_NAME					VARCHAR(255),
        DIST						FLOAT,
        PHONE						VARCHAR(20),
        IS_TRANSIT					TINYINT
	);
    
	OPEN SITE_LIST_CURSOR;	
	cloop: LOOP
		FETCH SITE_LIST_CURSOR 
        INTO  
			CUR_SITE_ID,
			CUR_LAT,
			CUR_LNG,
			CUR_SITE_NAME,
			CUR_DIST,
			CUR_PHONE,
			CUR_IS_TRANSIT;
        
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
        SITE_PROSPECTIVE_LIST_INSIDE_RANGE_TEMP(
			ID, 
            LAT, 
            LNG, 
            SITE_NAME, 
            DIST, 
            PHONE, 
            IS_TRANSIT
		)
        VALUES( 
			CUR_SITE_ID,
			CUR_LAT,
			CUR_LNG,
			CUR_SITE_NAME,
			CUR_DIST,
			CUR_PHONE,
			CUR_IS_TRANSIT
		);
	END LOOP;   
	CLOSE SITE_LIST_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'			, ID, 
            'LAT'			, LAT, 
            'LNG'			, LNG, 
            'SITE_NAME'		, SITE_NAME, 
            'DIST'			, DIST, 
            'PHONE'			, PHONE, 
            'IS_TRANSIT'	, IS_TRANSIT
		)
	) 
    INTO SITE_LIST 
    FROM SITE_PROSPECTIVE_LIST_INSIDE_RANGE_TEMP;
    
	SET rtn_val = 0;
	SET msg_txt = 'Success11';
    DROP TABLE IF EXISTS SITE_PROSPECTIVE_LIST_INSIDE_RANGE_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_refresh_token`(
	IN IN_USER_ID						BIGINT
)
BEGIN	
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET @json_data 		= NULL;
		CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        @rtn_val,
        @msg_txt
    );
    IF @rtn_val = 0 THEN
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'ID'				, ID, 
				'REFRESH_TOKEN'		, JWT
			)
		) 
		INTO @json_data 
		FROM USERS
		WHERE ID = IN_USER_ID;
		SET @rtn_val = 0;
        SET @msg_txt = 'success';
	ELSE
		SET @json_data = NULL;
		SET @rtn_val = 37101;
        SET @msg_txt = 'refresh token does not exist';
    END IF;
    COMMIT;
	CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_reply`(
	IN IN_PID						BIGINT,
    OUT OUT_REPLY_LIST				JSON
)
BEGIN

	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'					, POST_ID, 
			'SITE_ID'				, POST_SITE_ID, 
			'SITE_NAME'				, POST_SITE_NAME, 
			'CREATOR_ID'			, POST_CREATOR_ID, 
			'CREATOR_NAME'			, POST_CREATOR_NAME, 
			'SUBJECTS'				, POST_SUBJECTS, 
			'CONTENTS'				, POST_CONTENTS, 
			'CATEGORY_ID'			, POST_CATEGORY_ID, 
			'CATEGORY_NAME'			, POST_CATEGORY_NAME, 
			'SUB_CATEGORY_ID'		, POST_SUB_CATEGORY_ID, 
			'SUB_CATEGORY_NAME'		, POST_SUB_CATEGORY_NAME, 
			'VISITORS'				, POST_VISITORS, 
			'CREATED_AT'			, POST_CREATED_AT, 
			'UPDATED_AT'			, POST_UPDATED_AT, 
			'RATING'				, POST_RATING
		)
	) 
	INTO OUT_REPLY_LIST
	FROM V_POSTS 
	WHERE POST_PID = IN_PID AND
		POST_ACTIVE = TRUE;   
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_report_wste_lists`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,
	IN IN_TRANSACTION_ID				BIGINT,
    OUT OUT_WSTE_LIST					JSON
)
BEGIN	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'WSTE_CODE'			, A.WSTE_CODE, 
			'WSTE_NM'			, B.NAME, 
			'WSTE_APPEARANCE'	, C.KOREAN, 
			'QUANTITY'			, A.QUANTITY, 
			'TRMT_METHOD'		, D.NAME, 
			'UNIT'				, A.UNIT,
			'PRICE'				, A.PRICE,
			'UPDATED_AT'		, A.CREATED_AT,
            'COLLECT_END_AT'	, E.COLLECT_END_AT
		)
	) 
	INTO OUT_WSTE_LIST 
	FROM TRANSACTION_REPORT A 
    LEFT JOIN WSTE_CODE B ON A.WSTE_CODE = B.CODE
    LEFT JOIN WSTE_APPEARANCE C ON A.WSTE_APPEARANCE = C.ID
    LEFT JOIN WSTE_TRMT_METHOD D ON A.TRMT_METHOD = D.CODE
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION E ON A.TRANSACTION_ID = E.ID
	WHERE 
		A.DISPOSER_ORDER_ID = IN_DISPOSER_ORDER_ID AND
        E.ID = IN_TRANSACTION_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_report_wste_lists_2`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,
    OUT OUT_WSTE_LIST					JSON
)
BEGIN	

    DECLARE vRowCount 								INT 				DEFAULT 0;
    DECLARE endOfRow 								TINYINT 			DEFAULT FALSE;   
    DECLARE CUR_WSTE_CODE							VARCHAR(8);
    DECLARE CUR_WSTE_NAME							VARCHAR(255);
    DECLARE CUR_WSTE_APPEARANCE						VARCHAR(20);
    DECLARE CUR_QUANTITY							FLOAT;
    DECLARE CUR_TRMT_METHOD							VARCHAR(30);
    DECLARE CUR_UNIT								VARCHAR(20);
    DECLARE CUR_PRICE								INT;
    DECLARE CUR_UPDATED_AT							DATETIME;
    DECLARE CUR_CONFIRMED							TINYINT;
    DECLARE CUR_CONFIRMED_AT						DATETIME;
    DECLARE CUR_COLLECT_END_AT						DATETIME;
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
    SELECT 
			A.WSTE_CODE, 
			B.NAME, 
			C.KOREAN, 
			A.QUANTITY, 
			D.NAME, 
			A.UNIT,
			A.PRICE,
			A.CREATED_AT,
            A.CONFIRMED,
            A.CONFIRMED_AT,
            E.COLLECT_END_AT
	FROM TRANSACTION_REPORT A 
    LEFT JOIN WSTE_CODE B ON A.WSTE_CODE = B.CODE
    LEFT JOIN WSTE_APPEARANCE C ON A.WSTE_APPEARANCE = C.ID
    LEFT JOIN WSTE_TRMT_METHOD D ON A.TRMT_METHOD = D.CODE
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION E ON A.TRANSACTION_ID = E.ID
	WHERE 
		A.DISPOSER_ORDER_ID = IN_DISPOSER_ORDER_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS REPORT_WSTE_LIST_TEMP (
		WSTE_CODE				VARCHAR(8),
        WSTE_NAME				VARCHAR(255),
        WSTE_APPEARANCE			VARCHAR(20),
        QUANTITY				FLOAT,
        TRMT_METHOD				VARCHAR(30),
        UNIT					VARCHAR(20),
        PRICE					INT,
        UPDATED_AT				DATETIME,
        CONFIRMED				TINYINT,
        CONFIRMED_AT			DATETIME,
        COLLECT_END_AT			DATETIME
    );      
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_WSTE_CODE,
			CUR_WSTE_NAME,
			CUR_WSTE_APPEARANCE,
			CUR_QUANTITY,
			CUR_TRMT_METHOD,
			CUR_UNIT,
			CUR_PRICE,
			CUR_UPDATED_AT,
			CUR_CONFIRMED,
			CUR_CONFIRMED_AT,
			CUR_COLLECT_END_AT;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		REPORT_WSTE_LIST_TEMP(
			WSTE_CODE,
			WSTE_NAME,
			WSTE_APPEARANCE,
			QUANTITY,
			TRMT_METHOD,
			UNIT,
			PRICE,
			UPDATED_AT,
			CONFIRMED,
			CONFIRMED_AT,
			COLLECT_END_AT
		)
		VALUES(
			CUR_WSTE_CODE,
			CUR_WSTE_NAME,
			CUR_WSTE_APPEARANCE,
			CUR_QUANTITY,
			CUR_TRMT_METHOD,
			CUR_UNIT,
			CUR_PRICE,
			CUR_UPDATED_AT,
			CUR_CONFIRMED,
			CUR_CONFIRMED_AT,
			CUR_COLLECT_END_AT
		);
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'WSTE_CODE'						, WSTE_CODE, 
			'WSTE_NAME'						, WSTE_NAME, 				
			'WSTE_APPEARANCE'				, WSTE_APPEARANCE, 
			'QUANTITY'						, QUANTITY, 
			'TRMT_METHOD'					, TRMT_METHOD, 				
			'UNIT'							, UNIT, 
			'PRICE'							, PRICE, 
			'UPDATED_AT'					, UPDATED_AT, 
			'CONFIRMED'						, CONFIRMED, 
			'CONFIRMED_AT'					, CONFIRMED_AT, 
			'COLLECT_END_AT'				, COLLECT_END_AT
		)
	) 
	INTO OUT_WSTE_LIST 
	FROM REPORT_WSTE_LIST_TEMP;	
    DROP TABLE IF EXISTS REPORT_WSTE_LIST_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_site`(
	IN IN_SITE_ID				BIGINT,
    OUT OUT_COMP_NAME			VARCHAR(100),
    OUT OUT_SITE_NAME			VARCHAR(100),
    OUT OUT_REP_NAME			VARCHAR(50),
    OUT OUT_KIKCD_B_CODE		VARCHAR(10),
    OUT OUT_ADDR				VARCHAR(300),
    OUT OUT_CONTACT				VARCHAR(100),
    OUT OUT_TRMT_BIZ_CODE		VARCHAR(4),
    OUT OUT_BIZ_REG_CODE		VARCHAR(12),
    OUT OUT_PERMIT_REG_CODE		VARCHAR(100),
    OUT OUT_BIZ_REG_IMG_PATH	VARCHAR(200),
    OUT OUT_PERMIT_REG_IMG_PATH	VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_get_company
Input param 	: 1개
Output param 	: 10개
Job 			: 사이트 정보를 반환한다.
Update 			: 2022.01.15
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT 
		COMP_NAME, 
		SITE_NAME, 
        REP_NAME, 
        KIKCD_B_CODE, 
        ADDR, 
        CONTACT, 
        TRMT_BIZ_CODE, 
        BIZ_REG_CODE, 
        PERMIT_REG_CODE, 
        BIZ_REG_IMG_PATH, 
        PERMIT_REG_IMG_PATH
	INTO 
		OUT_COMP_NAME, 
		OUT_SITE_NAME, 
        OUT_REP_NAME, 
        OUT_KIKCD_B_CODE, 
        OUT_ADDR, 
        OUT_CONTACT, 
        OUT_TRMT_BIZ_CODE, 
        OUT_BIZ_REG_CODE, 
        OUT_PERMIT_REG_CODE, 
        OUT_BIZ_REG_IMG_PATH, 
        OUT_PERMIT_REG_IMG_PATH
	FROM V_SITE 
    WHERE SITE_ID = IN_SITE_ID; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_site_info`(
	IN IN_SITE_ID			BIGINT,
    OUT OUT_SITE_INFO		JSON
)
BEGIN
	DECLARE VAR_BUSINESS_TARGET					JSON			DEFAULT NULL;
	DECLARE VAR_COMP_ID							BIGINT			DEFAULT NULL;
	DECLARE VAR_KIKCD_B_CODE					VARCHAR(10)		DEFAULT NULL;
	DECLARE VAR_ADDRESS_INFO					JSON			DEFAULT NULL;
	DECLARE VAR_COMPANY_INFO					JSON			DEFAULT NULL;
	
	CREATE TEMPORARY TABLE IF NOT EXISTS SITE_INFO_TEMP (
		ID						BIGINT,
		COMP_ID					BIGINT,
		KIKCD_B_CODE			VARCHAR(10),
        ADDR					VARCHAR(255),
        CONTACT					VARCHAR(100),
        LAT						DECIMAL(12,9),
        LNG						DECIMAL(12,9),
		SITE_NAME				VARCHAR(255),
        TRMT_BIZ_CODE			VARCHAR(4),
        CREATOR_ID				BIGINT,
        HEAD_OFFICE				TINYINT,
        PERMIT_REG_CODE			VARCHAR(255),
        PERMIT_REG_IMG_PATH		VARCHAR(255),
        CS_MANAGER_ID			BIGINT,
        CONFIRMED				TINYINT,
        CONFIRMED_AT			DATETIME,
        CREATED_AT				DATETIME,
        UPDATED_AT				DATETIME,
        PUSH_ENABLED			TINYINT,
        NOTICE_ENABLED			TINYINT,
        TRMT_BIZ_NM				VARCHAR(50),
		SI_DO					VARCHAR(20),
		SI_GUN_GU				VARCHAR(20),
		EUP_MYEON_DONG			VARCHAR(20),
        DONG_RI					VARCHAR(20),
        AVATAR_PATH				VARCHAR(255),
        PHONE					VARCHAR(20),
        ACTIVE					TINYINT,
        BUSINESS_TARGET			JSON,
        ADDRESS_INFO			JSON,
        COMPANY_INFO			JSON
	);     
    
    INSERT INTO SITE_INFO_TEMP (
		ID,
        COMP_ID,
		KIKCD_B_CODE,
        ADDR,
        CONTACT,
        LAT,
        LNG,
		SITE_NAME,
        TRMT_BIZ_CODE,
        CREATOR_ID,
        HEAD_OFFICE,
        PERMIT_REG_CODE,
        PERMIT_REG_IMG_PATH,
        CS_MANAGER_ID,
        CONFIRMED,
        CONFIRMED_AT,
        CREATED_AT,
        UPDATED_AT,
        PUSH_ENABLED,
        NOTICE_ENABLED,
        TRMT_BIZ_NM,
		SI_DO,
		SI_GUN_GU,
		EUP_MYEON_DONG,
        DONG_RI,
        AVATAR_PATH,
        PHONE,
        ACTIVE
	)
	SELECT 
		A.ID, 
        A.COMP_ID,
		A.KIKCD_B_CODE, 
		A.ADDR,
		A.CONTACT,
        A.LAT,
        A.LNG,
		A.SITE_NAME, 
        A.TRMT_BIZ_CODE,
        A.CREATOR_ID,
        A.HEAD_OFFICE,
        A.PERMIT_REG_CODE,
        A.PERMIT_REG_IMG_PATH,
        A.CS_MANAGER_ID,
        A.CONFIRMED,
        A.CONFIRMED_AT,
        A.CREATED_AT,
        A.UPDATED_AT,
        A.PUSH_ENABLED,
        A.NOTICE_ENABLED,
        D.NAME,
		B.SI_DO,
		B.SI_GUN_GU,
		B.EUP_MYEON_DONG,
		B.DONG_RI,
		C.AVATAR_PATH,
		C.PHONE,
		A.ACTIVE
	FROM COMP_SITE A         
    LEFT JOIN KIKCD_B B ON A.KIKCD_B_CODE = B.B_CODE
    LEFT JOIN USERS C ON A.ID = C.AFFILIATED_SITE
    LEFT JOIN WSTE_TRMT_BIZ D ON A.TRMT_BIZ_CODE = D.CODE
	WHERE 
		A.ID = IN_SITE_ID AND
        C.CLASS = 201 AND
        C.ACTIVE = TRUE;	
    
	CALL sp_get_wste_lists_registerd_by_site(
		IN_SITE_ID,
		VAR_BUSINESS_TARGET
	);
	
    SELECT COMP_ID, KIKCD_B_CODE INTO VAR_COMP_ID, VAR_KIKCD_B_CODE
    FROM COMP_SITE
    WHERE ID = IN_SITE_ID;
    
	CALL sp_get_address_with_bcode(
		VAR_KIKCD_B_CODE,
		VAR_ADDRESS_INFO
	);
    
	CALL sp_get_company_info(
		VAR_COMP_ID,
		VAR_COMPANY_INFO
	);
    
	UPDATE SITE_INFO_TEMP
    SET 
		BUSINESS_TARGET	 = VAR_BUSINESS_TARGET,
		ADDRESS_INFO	 = VAR_ADDRESS_INFO,
		COMPANY_INFO	 = VAR_COMPANY_INFO
    WHERE ID = IN_SITE_ID;
    
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'						, ID, 
			'COMP_ID'					, COMP_ID, 
			'KIKCD_B_CODE'				, KIKCD_B_CODE, 
			'ADDR'						, ADDR,
			'CONTACT'					, CONTACT,
            'LAT'						, LAT,
            'LNG'						, LNG,
			'SITE_NAME'					, SITE_NAME, 
            'TRMT_BIZ_CODE'				, TRMT_BIZ_CODE,
            'CREATOR_ID'				, CREATOR_ID,
            'HEAD_OFFICE'				, HEAD_OFFICE,
            'PERMIT_REG_CODE'			, PERMIT_REG_CODE,
            'PERMIT_REG_IMG_PATH'		, PERMIT_REG_IMG_PATH,
            'CS_MANAGER_ID'				, CS_MANAGER_ID,
            'CONFIRMED'					, CONFIRMED,
            'CONFIRMED_AT'				, CONFIRMED_AT,
            'CREATED_AT'				, CREATED_AT,
            'UPDATED_AT'				, UPDATED_AT,
            'PUSH_ENABLED'				, PUSH_ENABLED,
            'NOTICE_ENABLED'			, NOTICE_ENABLED,
            'TRMT_BIZ_NM'				, TRMT_BIZ_NM,
			'SI_DO'						, SI_DO,
			'SI_GUN_GU'					, SI_GUN_GU,
			'EUP_MYEON_DONG'			, EUP_MYEON_DONG,
			'DONG_RI'					, DONG_RI,
			'AVATAR_PATH'				, AVATAR_PATH,
			'PHONE'						, PHONE,
			'ACTIVE'					, ACTIVE,
            'BUSINESS_TARGET'			, BUSINESS_TARGET,
            'ADDRESS_INFO'				, ADDRESS_INFO,
            'COMPANY_INFO'				, COMPANY_INFO
		)
	) 
	INTO OUT_SITE_INFO 
	FROM SITE_INFO_TEMP;	
	DROP TABLE IF EXISTS SITE_INFO_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_site_info_simple`(
	IN IN_SITE_ID			BIGINT,
    OUT OUT_SITE_INFO		JSON
)
BEGIN
	
	CREATE TEMPORARY TABLE IF NOT EXISTS SITE_INFO_TEMP (
		ID						BIGINT,
		COMP_ID					BIGINT,
		KIKCD_B_CODE			VARCHAR(10),
        ADDR					VARCHAR(255),
        CONTACT					VARCHAR(100),
        LAT						DECIMAL(12,9),
        LNG						DECIMAL(12,9),
		SITE_NAME				VARCHAR(255),
        TRMT_BIZ_CODE			VARCHAR(4),
        CREATOR_ID				BIGINT,
        HEAD_OFFICE				TINYINT,
        PERMIT_REG_CODE			VARCHAR(255),
        PERMIT_REG_IMG_PATH		VARCHAR(255),
        CS_MANAGER_ID			BIGINT,
        CONFIRMED				TINYINT,
        CONFIRMED_AT			DATETIME,
        CREATED_AT				DATETIME,
        UPDATED_AT				DATETIME,
        PUSH_ENABLED			TINYINT,
        NOTICE_ENABLED			TINYINT,
        TRMT_BIZ_NM				VARCHAR(50),
		SI_DO					VARCHAR(20),
		SI_GUN_GU				VARCHAR(20),
		EUP_MYEON_DONG			VARCHAR(20),
        DONG_RI					VARCHAR(20),
        AVATAR_PATH				VARCHAR(255),
        PHONE					VARCHAR(20),
        ACTIVE					TINYINT,
        BUSINESS_TARGET			JSON,
        ADDRESS_INFO			JSON,
        COMPANY_INFO			JSON
	);     
    
    INSERT INTO SITE_INFO_TEMP (
		ID,
        COMP_ID,
		KIKCD_B_CODE,
        ADDR,
        CONTACT,
        LAT,
        LNG,
		SITE_NAME,
        TRMT_BIZ_CODE,
        CREATOR_ID,
        HEAD_OFFICE,
        PERMIT_REG_CODE,
        PERMIT_REG_IMG_PATH,
        CS_MANAGER_ID,
        CONFIRMED,
        CONFIRMED_AT,
        CREATED_AT,
        UPDATED_AT,
        PUSH_ENABLED,
        NOTICE_ENABLED,
        TRMT_BIZ_NM,
		SI_DO,
		SI_GUN_GU,
		EUP_MYEON_DONG,
        DONG_RI,
        AVATAR_PATH,
        PHONE,
        ACTIVE
	)
	SELECT 
		A.ID, 
        A.COMP_ID,
		A.KIKCD_B_CODE, 
		A.ADDR,
		A.CONTACT,
        A.LAT,
        A.LNG,
		A.SITE_NAME, 
        A.TRMT_BIZ_CODE,
        A.CREATOR_ID,
        A.HEAD_OFFICE,
        A.PERMIT_REG_CODE,
        A.PERMIT_REG_IMG_PATH,
        A.CS_MANAGER_ID,
        A.CONFIRMED,
        A.CONFIRMED_AT,
        A.CREATED_AT,
        A.UPDATED_AT,
        A.PUSH_ENABLED,
        A.NOTICE_ENABLED,
        D.NAME,
		B.SI_DO,
		B.SI_GUN_GU,
		B.EUP_MYEON_DONG,
		B.DONG_RI,
		C.AVATAR_PATH,
		C.PHONE,
        A.ACTIVE
	FROM COMP_SITE A         
    LEFT JOIN KIKCD_B B ON A.KIKCD_B_CODE = B.B_CODE
    LEFT JOIN USERS C ON A.ID = C.AFFILIATED_SITE
    LEFT JOIN WSTE_TRMT_BIZ D ON A.TRMT_BIZ_CODE = D.CODE
	WHERE 
		A.ID = IN_SITE_ID AND
        C.CLASS = 201;	    
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'						, ID, 
			'COMP_ID'					, COMP_ID, 
			'KIKCD_B_CODE'				, KIKCD_B_CODE, 
			'ADDR'						, ADDR,
			'CONTACT'					, CONTACT,
            'LAT'						, LAT,
            'LNG'						, LNG,
			'SITE_NAME'					, SITE_NAME, 
            'TRMT_BIZ_CODE'				, TRMT_BIZ_CODE,
            'CREATOR_ID'				, CREATOR_ID,
            'HEAD_OFFICE'				, HEAD_OFFICE,
            'PERMIT_REG_CODE'			, PERMIT_REG_CODE,
            'PERMIT_REG_IMG_PATH'		, PERMIT_REG_IMG_PATH,
            'CS_MANAGER_ID'				, CS_MANAGER_ID,
            'CONFIRMED'					, CONFIRMED,
            'CONFIRMED_AT'				, CONFIRMED_AT,
            'CREATED_AT'				, CREATED_AT,
            'UPDATED_AT'				, UPDATED_AT,
            'PUSH_ENABLED'				, PUSH_ENABLED,
            'NOTICE_ENABLED'			, NOTICE_ENABLED,
            'TRMT_BIZ_NM'				, TRMT_BIZ_NM,
			'SI_DO'						, SI_DO,
			'SI_GUN_GU'					, SI_GUN_GU,
			'EUP_MYEON_DONG'			, EUP_MYEON_DONG,
			'DONG_RI'					, DONG_RI,
			'AVATAR_PATH'				, AVATAR_PATH,
			'PHONE'						, PHONE,
			'ACTIVE'					, ACTIVE
		)
	) 
	INTO OUT_SITE_INFO 
	FROM SITE_INFO_TEMP;	
	DROP TABLE IF EXISTS SITE_INFO_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_site_list_inside_range`(
    IN IN_PARAMS					JSON
)
BEGIN 
    DECLARE VAR_USER_ID 					BIGINT;
    DECLARE VAR_TARGET_USER_TYPE 			INT;
    DECLARE VAR_DISTANCE 					INT;
    DECLARE VAR_LAT 						DECIMAL(12,9);
    DECLARE VAR_LNG 						DECIMAL(12,9);
    DECLARE rtn_val							INT DEFAULT 0;
    DECLARE msg_txt							VARCHAR(200) DEFAULT 'success';
    DECLARE json_data						JSON DEFAULT NULL;
    
	SELECT 
		USER_ID, 
        TARGET_USER_TYPE, 
        DISTANCE, 
        LAT, 
        LNG
    INTO 
		VAR_USER_ID, 
        VAR_TARGET_USER_TYPE, 
        VAR_DISTANCE, 
        VAR_LAT, 
        VAR_LNG
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		TARGET_USER_TYPE	 	INT					PATH "$.TARGET_USER_TYPE",
		DISTANCE				INT					PATH "$.DISTANCE",
        LAT						DECIMAL(12,9)		PATH "$.LAT",
        LNG						DECIMAL(12,9)		PATH "$.LNG"
	)) AS PARAMS;   
    
    CALL sp_get_site_list_inside_range_without_handler(
        VAR_TARGET_USER_TYPE,
        VAR_DISTANCE,
        VAR_LAT,
        VAR_LNG,
        rtn_val,
        msg_txt,
        json_data
    );
    
	CALL sp_return_results(json_data, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_site_list_inside_range_without_handler`(
	IN IN_USER_TYPE			INT,
	IN IN_RANGE				INT,
	IN IN_LAT				DECIMAL(12,9),
	IN IN_LNG				DECIMAL(12,9),
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200),
    OUT SITE_LIST			JSON
)
BEGIN

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_SITE_ID 						BIGINT;
    DECLARE CUR_LAT					 			DECIMAL(12,9);
    DECLARE CUR_LNG								DECIMAL(12,9);	
    DECLARE CUR_SITE_NAME						VARCHAR(255);	
    DECLARE CUR_DIST							FLOAT;	
    DECLARE CUR_PHONE							VARCHAR(20);	
    DECLARE SITE_LIST_CURSOR 					CURSOR FOR 
	SELECT 
		A.ID, 
        A.LAT, 
        A.LNG,
        A.SITE_NAME,
        6378.137 * ACOS(COS(IN_LAT * PI() / 180)*COS(A.LAT * PI() / 180)*COS((A.LNG * PI() / 180) - (IN_LNG * PI() / 180)) + SIN(IN_LAT * PI() / 180) * SIN(A.LAT * PI() / 180)),
        C.PHONE
    FROM COMP_SITE A
    LEFT JOIN WSTE_TRMT_BIZ B ON A.TRMT_BIZ_CODE = B.CODE
    LEFT JOIN USERS C ON A.ID = C.AFFILIATED_SITE
    WHERE 
		A.TEST = FALSE AND
        C.TEST = FALSE AND
		6378.137 * ACOS(COS(IN_LAT * PI() / 180)*COS(A.LAT * PI() / 180)*COS((A.LNG * PI() / 180) - (IN_LNG * PI() / 180)) + SIN(IN_LAT * PI() / 180) * SIN(A.LAT * PI() / 180)) < IN_RANGE AND
        B.USER_TYPE = IN_USER_TYPE AND
        C.CLASS = 201
    ORDER BY 6378.137 * ACOS(COS(IN_LAT * PI() / 180)*COS(A.LAT * PI() / 180)*COS((A.LNG * PI() / 180) - (IN_LNG * PI() / 180)) + SIN(IN_LAT * PI() / 180) * SIN(A.LAT * PI() / 180)) ASC;
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
        
	CREATE TEMPORARY TABLE IF NOT EXISTS SITE_LIST_INSIDE_RANGE_TEMP (
		ID							BIGINT,
		LAT							DECIMAL(12,9),
        LNG							DECIMAL(12,9),
        SITE_NAME					VARCHAR(255),
        DIST						FLOAT,
        PHONE						VARCHAR(20)
	);
    
	OPEN SITE_LIST_CURSOR;	
	cloop: LOOP
		FETCH SITE_LIST_CURSOR 
        INTO  
			CUR_SITE_ID,
			CUR_LAT,
			CUR_LNG,
			CUR_SITE_NAME,
			CUR_DIST,
			CUR_PHONE;
        
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
        SITE_LIST_INSIDE_RANGE_TEMP(
			ID, 
            LAT, 
            LNG, 
            SITE_NAME, 
            DIST, 
            PHONE
		)
        VALUES( 
			CUR_SITE_ID,
			CUR_LAT,
			CUR_LNG,
			CUR_SITE_NAME,
			CUR_DIST,
			CUR_PHONE
		);
	END LOOP;   
	CLOSE SITE_LIST_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'			, ID, 
            'LAT'			, LAT, 
            'LNG'			, LNG, 
            'SITE_NAME'		, SITE_NAME, 
            'DIST'			, DIST, 
            'PHONE'			, PHONE
		)
	) 
    INTO SITE_LIST 
    FROM SITE_LIST_INSIDE_RANGE_TEMP;
    
	SET rtn_val = 0;
	SET msg_txt = 'Success11';
    DROP TABLE IF EXISTS SITE_LIST_INSIDE_RANGE_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_site_list_whose_biz_areas_of_interest`(
    IN IN_PARAMS					JSON
)
BEGIN
	DECLARE VAR_SITE_LIST			JSON			DEFAULT NULL;
	DECLARE VAR_USER_ID				BIGINT			DEFAULT NULL;
	DECLARE VAR_BCODE				VARCHAR(10)		DEFAULT NULL;
	DECLARE json_data				JSON			DEFAULT NULL;
    DECLARE rtn_val					INT				DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200)	DEFAULT 'success';
    
	SELECT 
		USER_ID, 
        B_CODE
    INTO 
		VAR_USER_ID, 
        VAR_BCODE
    FROM JSON_TABLE(IN_PARAMS, "$[*]" COLUMNS(
		USER_ID 				BIGINT 				PATH "$.USER_ID",
		B_CODE	 				VARCHAR(10)			PATH "$.B_CODE"
	)) AS PARAMS;
    
    CALL sp_get_site_list_whose_biz_areas_of_interest_without_handler(
		VAR_USER_ID,
        VAR_BCODE,
        json_data
    );
    
	CALL sp_return_results(json_data, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_site_list_whose_biz_areas_of_interest_without_handler`(
    IN IN_USER_ID						BIGINT,
    IN IN_B_CODE						VARCHAR(10),
    OUT OUT_LIST						JSON
)
BEGIN
	DECLARE VAR_SITE_LIST			JSON			DEFAULT NULL;
	DECLARE VAR_USER_ID				BIGINT			DEFAULT NULL;
	DECLARE VAR_BCODE				VARCHAR(10)		DEFAULT NULL;
	DECLARE json_data				JSON			DEFAULT NULL;
    DECLARE rtn_val					INT				DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200)	DEFAULT 'success';
    
    SET VAR_USER_ID = IN_USER_ID;
    SET VAR_BCODE = IN_B_CODE;
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'					, A.ID,
			'COMP_ID'				, A.COMP_ID,
			'KIKCD_B_CODE'			, A.KIKCD_B_CODE,
			'ADDR'					, A.ADDR,
			'CONTACT'				, A.CONTACT,
			'LAT'					, A.LAT,
			'LNG'					, A.LNG,
			'SITE_NAME'				, A.SITE_NAME ,
			'TRMT_BIZ_CODE'			, A.TRMT_BIZ_CODE,
			'CREATOR_ID'			, A.CREATOR_ID,
			'HEAD_OFFICE'			, A.HEAD_OFFICE,
			'PERMIT_REG_CODE'		, PERMIT_REG_CODE,
			'PERMIT_REG_IMG_PATH'	, PERMIT_REG_IMG_PATH,
			'CS_MANAGER_ID'			, A.CS_MANAGER_ID,
			'CONFIRMED'				, A.CONFIRMED,
			'CONFIRMED_AT'			, A.CONFIRMED_AT,
			'CREATED_AT'			, A.CREATED_AT,
			'UPDATED_AT'			, A.UPDATED_AT,
			'PUSH_ENABLED'			, A.PUSH_ENABLED,
			'NOTICE_ENABLED'		, A.NOTICE_ENABLED, 
			'TRMT_BIZ_NM'			, D.NAME,
			'SI_DO'					, B.SI_DO,
			'SI_GUN_GU'				, B.SI_GUN_GU,
			'EUP_MYEON_DONG'		, B.EUP_MYEON_DONG,
			'DONG_RI'				, B.DONG_RI,
			'AVATAR_PATH'			, C.AVATAR_PATH,
			'PHONE'					, C.PHONE,
			'ACTIVE'				, A.ACTIVE,
            'COLLECTOR_PHONE'		, E.PHONE
        )
    ) INTO VAR_SITE_LIST
	FROM COMP_SITE A         
    LEFT JOIN KIKCD_B B ON A.KIKCD_B_CODE = B.B_CODE
    LEFT JOIN USERS C ON A.ID = C.AFFILIATED_SITE
    LEFT JOIN WSTE_TRMT_BIZ D ON A.TRMT_BIZ_CODE = D.CODE
    LEFT JOIN USERS E ON A.ID = E.AFFILIATED_SITE
	WHERE 
		A.TEST = FALSE AND
        C.TEST = FALSE AND
		A.ID IN (SELECT SITE_ID FROM BUSINESS_AREA WHERE LEFT(KIKCD_B_CODE, 5) = LEFT(VAR_BCODE, 5) AND ACTIVE = TRUE) AND
        A.TRMT_BIZ_CODE < 9 AND
        E.CLASS = 201;
	
	SELECT JSON_OBJECT(
		'SITES'						, VAR_SITE_LIST,
		'SITE_COUNT'				, JSON_LENGTH(VAR_SITE_LIST),
        'INPUT_PARAMS'				, JSON_OBJECT(
			'USER_ID'				, IN_USER_ID,
            'B_CODE'				, IN_B_CODE
        )
	) INTO OUT_LIST;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_site_lists_registered`(
	IN IN_TARGET_DATE				DATETIME,
	IN IN_MENU_ID					INT,
    OUT OUT_LIST					JSON
)
BEGIN
	
    IF IN_MENU_ID IS NOT NULL THEN
		CREATE TEMPORARY TABLE IF NOT EXISTS SITE_LISTS_REGISTERED_TEMP (
			ID							BIGINT,
			SITE_NAME					VARCHAR(255),
			BIZ_REG_CODE				VARCHAR(12),
			PERMIT_REG_CODE				VARCHAR(100),
			CREATED_AT					DATE,
			BIZ_REG_CODE_REGISTERED		TINYINT,
			PERMIT_REG_CODE_REGISTERED	TINYINT
		);     
		
		INSERT INTO SITE_LISTS_REGISTERED_TEMP (
			ID,
			SITE_NAME,
			BIZ_REG_CODE,
			PERMIT_REG_CODE,
			CREATED_AT,
			BIZ_REG_CODE_REGISTERED,
			PERMIT_REG_CODE_REGISTERED
		)
		SELECT 
			A.ID, 
			IF(A.AFFILIATED_SITE = 0, A.USER_NAME, B.SITE_NAME),
			IF(A.AFFILIATED_SITE = 0, NULL, C.BIZ_REG_CODE),
            B.PERMIT_REG_CODE,
			DATE(A.CREATED_AT),
			IF(A.AFFILIATED_SITE = 0, NULL, C.CONFIRMED),
			IF(A.AFFILIATED_SITE = 0, NULL, C.CONFIRMED)
		FROM USERS A         
		LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID
		LEFT JOIN COMPANY C ON B.COMP_ID = C.ID
		LEFT JOIN KIKCD_B D ON B.KIKCD_B_CODE = D.B_CODE
		WHERE 
			DATE(A.CREATED_AT) = IN_TARGET_DATE AND
			(
				IF(IN_MENU_ID = 0,
					A.AFFILIATED_SITE = 0 OR 	
					B.TRMT_BIZ_CODE IN (
						SELECT CODE FROM WSTE_TRMT_BIZ WHERE USER_TYPE = 3
					),	
                    IF(IN_MENU_ID = 1,
						B.TRMT_BIZ_CODE = '1',
						B.TRMT_BIZ_CODE IN (
							SELECT CODE FROM WSTE_TRMT_BIZ WHERE CAST(CODE AS UNSIGNED) > 1 AND CAST(CODE AS UNSIGNED) < 9
						)
                    )			
                )
			);
		
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'ID'							, ID, 
				'SITE_NAME'						, SITE_NAME, 
				'BIZ_REG_CODE'					, BIZ_REG_CODE,
				'PERMIT_REG_CODE'				, PERMIT_REG_CODE,
				'CREATED_AT'					, CREATED_AT,
				'BIZ_REG_CODE_REGISTERED'		, BIZ_REG_CODE_REGISTERED,
				'PERMIT_REG_CODE_REGISTERED'	, PERMIT_REG_CODE_REGISTERED
			)
		) 
		INTO OUT_LIST 
		FROM SITE_LISTS_REGISTERED_TEMP;	
		DROP TABLE IF EXISTS SITE_LISTS_REGISTERED_TEMP;
    ELSE
		SET OUT_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_site_wste_class_info`(
	IN IN_SITE_ID						BIGINT,
    OUT OUT_SITE_WSTE_LIST				JSON
)
BEGIN

/*
Procedure Name 	: sp_get_site_wste_class_info
Input param 	: 1개
Job 			: 수거자 사이트의 영업대상 폐기물의 리스트(WSTE_CLS_CODE)를 반환한다.
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'SITE_ID'					, A.SITE_ID,
		'WSTE_CLASS_CODE'			, A.WSTE_CLASS_CODE,
		'WSTE_CLASS_NAME'			, B.NAME,
		'CREATED_AT'				, A.CREATED_AT,
		'UPDATED_AT'				, A.UPDATED_AT
	)) 
	INTO OUT_SITE_WSTE_LIST
	FROM WSTE_CLASS_SITE_MATCH A
    LEFT JOIN WSTE_CLS_CODE B ON A.WSTE_CLASS_CODE = B.CODE
    WHERE 
		A.SITE_ID = IN_SITE_ID AND
        A.ACTIVE = TRUE; 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_site_wste_info`(
	IN IN_SITE_ID						BIGINT,
    OUT OUT_SITE_WSTE_LIST				JSON
)
BEGIN

/*
Procedure Name 	: sp_get_site_wste_info
Input param 	: 1개
Job 			: 수거자 사이트의 영업대상 폐기물의 리스트(WSTE_CODE)를 반환한다.
Update 			: 2022.05.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'SITE_ID'					, A.SITE_ID,
		'WSTE_CODE'					, A.WSTE_CODE,
		'WSTE_NM'					, B.NAME,
		'APPR_CODE'					, A.WSTE_APPEARANCE,
		'APPR_NM'					, C.KOREAN,
		'CREATED_AT'				, A.CREATED_AT,
		'UPDATED_AT'				, A.UPDATED_AT
	)) 
	INTO OUT_SITE_WSTE_LIST
	FROM WSTE_SITE_MATCH A
    LEFT JOIN WSTE_CODE B ON A.WSTE_CODE = B.CODE
    LEFT JOIN WSTE_APPEARANCE C ON A.WSTE_APPEARANCE = C.ID
    WHERE 
		A.SITE_ID = IN_SITE_ID AND
        A.ACTIVE = TRUE; 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_transaction_info`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,
    OUT OUT_TRANSACTION_INFO			JSON
)
BEGIN   
	DECLARE VAR_STATE_INFO						JSON			DEFAULT NULL;
	DECLARE VAR_WSTE_INFO						JSON			DEFAULT NULL;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS TRANSACTION_INFO_TEMP (
		TRANSACTION_ID					BIGINT,
		DISPOSAL_ORDER_ID				BIGINT,
		COLLECT_ASK_END_AT				DATETIME,
		COLLECTING_TRUCK_ID				BIGINT,
		TRUCK_DRIVER_ID					BIGINT,
		TRUCK_START_AT					DATETIME,
		COLLECT_END_AT					DATETIME,
		QCC_IMG_PATH					VARCHAR(255),
        CONTRACT_ID						BIGINT,
        DATE_OF_VISIT					DATETIME,
        VISIT_START_AT					DATETIME,
        VISIT_END_AT					DATETIME,
        COLLECTOR_REPORTED				TINYINT,
        COLLECTOR_REPORTED_AT			DATETIME,
        CONFIRMED						TINYINT,
        CONFIRMED_AT					DATETIME,
        IN_PROGRESS						TINYINT,
        ACCEPT_ASK_END					TINYINT,
        ACCEPT_ASK_END_AT				DATETIME,
        TRANSACTION_TYPE				VARCHAR(20),
        REJECT_REASON					VARCHAR(255),
        STATE_INFO						JSON,
        WSTE_INFO						JSON,
        IMG_INFO						JSON
	);     
    
    
	INSERT INTO 
	TRANSACTION_INFO_TEMP(
		TRANSACTION_ID,
		DISPOSAL_ORDER_ID,
		COLLECT_ASK_END_AT,
		COLLECTING_TRUCK_ID,
		TRUCK_DRIVER_ID,
		TRUCK_START_AT,
		COLLECT_END_AT,
		QCC_IMG_PATH,
		CONTRACT_ID,
		DATE_OF_VISIT,
		VISIT_START_AT,
		VISIT_END_AT,
        COLLECTOR_REPORTED,
        COLLECTOR_REPORTED_AT,
        CONFIRMED,
        CONFIRMED_AT,
        IN_PROGRESS,
        ACCEPT_ASK_END,
        ACCEPT_ASK_END_AT,
        TRANSACTION_TYPE,
        REJECT_REASON
	)
	SELECT 
		ID,
		DISPOSAL_ORDER_ID,
		COLLECT_ASK_END_AT,
		COLLECTING_TRUCK_ID,
		TRUCK_DRIVER_ID,
		TRUCK_START_AT,
		COLLECT_END_AT,
		QCC_IMG_PATH,
		CONTRACT_ID,
		DATE_OF_VISIT,
		VISIT_START_AT,
		VISIT_END_AT,
		COLLECTOR_REPORTED,
		COLLECTOR_REPORTED_AT,
		CONFIRMED,
		CONFIRMED_AT,
        IN_PROGRESS,
        ACCEPT_ASK_END,
        ACCEPT_ASK_END_AT,
        IF(COLLECTOR_SITE_ID IS NULL, '입찰거래', '기존거래'),
        REJECT_REASON
	FROM WSTE_CLCT_TRMT_TRANSACTION
    WHERE 
		DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID; 
        
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'STATE'						, STATE, 
		'STATE_CODE'				, STATE_CODE, 
		'STATE_CATEGORY'			, STATE_CATEGORY, 
		'STATE_CATEGORY_ID'			, STATE_CATEGORY_ID
	)) 
	INTO VAR_STATE_INFO
	FROM V_TRANSACTION_STATE_NAME
    WHERE  
		DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID; 
        
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'WSTE_CODE'					, A.WSTE_CODE,
		'WSTE_NM'					, B.NAME,
		'WSTE_QUANTITY'				, A.WSTE_QUANTITY,
		'WSTE_UNIT'					, A.WSTE_UNIT,
		'TRMT_METHOD_CODE'			, A.TRMT_METHOD_CODE,
		'TRMT_METHOD_NM'			, C.NAME
	)) 
	INTO VAR_WSTE_INFO
	FROM WSTE_CLCT_TRMT_TRANSACTION A
    LEFT JOIN WSTE_CODE B ON A.WSTE_CODE = B.CODE
    LEFT JOIN WSTE_TRMT_METHOD C ON A.TRMT_METHOD_CODE = C.CODE
    WHERE A.DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID; 
    
    UPDATE TRANSACTION_INFO_TEMP
    SET 
		STATE_INFO 	= VAR_STATE_INFO,
		WSTE_INFO 	= VAR_WSTE_INFO
    WHERE DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'TRANSACTION_ID'			, TRANSACTION_ID, 
		'DISPOSAL_ORDER_ID'			, DISPOSAL_ORDER_ID, 
		'COLLECT_ASK_END_AT'		, COLLECT_ASK_END_AT, 
		'COLLECTING_TRUCK_ID'		, COLLECTING_TRUCK_ID, 
		'TRUCK_DRIVER_ID'			, TRUCK_DRIVER_ID, 
		'TRUCK_START_AT'			, TRUCK_START_AT, 
		'COLLECT_END_AT'			, COLLECT_END_AT, 
		'QCC_IMG_PATH'				, QCC_IMG_PATH, 
		'CONTRACT_ID'				, CONTRACT_ID, 
		'DATE_OF_VISIT'				, DATE_OF_VISIT, 
		'VISIT_START_AT'			, VISIT_START_AT, 
		'VISIT_END_AT'				, VISIT_END_AT, 
		'COLLECTOR_REPORTED'		, COLLECTOR_REPORTED, 
		'COLLECTOR_REPORTED_AT'		, COLLECTOR_REPORTED_AT, 
		'CONFIRMED'					, CONFIRMED, 
		'CONFIRMED_AT'				, CONFIRMED_AT, 
		'IN_PROGRESS'				, IN_PROGRESS, 
        'ACCEPT_ASK_END'			, ACCEPT_ASK_END,
        'ACCEPT_ASK_END_AT'			, ACCEPT_ASK_END_AT,
		'TRANSACTION_TYPE'			, TRANSACTION_TYPE, 
		'REJECT_REASON'				, REJECT_REASON, 
		'STATE_INFO'				, STATE_INFO, 
		'WSTE_INFO'					, WSTE_INFO, 
		'IMG_INFO'					, IMG_INFO
	)) 
	INTO OUT_TRANSACTION_INFO
	FROM TRANSACTION_INFO_TEMP
	WHERE DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID;
	DROP TABLE IF EXISTS TRANSACTION_INFO_TEMP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_transaction_info_2`(
	IN IN_TRANSACTION_ID				BIGINT,
    OUT OUT_TRANSACTION_INFO			JSON
)
BEGIN   
	DECLARE VAR_TRANSACTION_STATE_INFO			JSON			DEFAULT NULL;
	DECLARE VAR_TRANSACTION_WSTE_INFO			JSON			DEFAULT NULL;
	DECLARE VAR_TRANSACTION_IMG_INFO			JSON			DEFAULT NULL;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS TRANSACTION_INFO_TEMP (
		TRANSACTION_ID					BIGINT,
		DISPOSAL_ORDER_ID				BIGINT,
		COLLECT_ASK_END_AT				DATETIME,
		COLLECTING_TRUCK_ID				BIGINT,
		TRUCK_DRIVER_ID					BIGINT,
		TRUCK_START_AT					DATETIME,
		COLLECT_END_AT					DATETIME,
		QCC_IMG_PATH					VARCHAR(255),
        CONTRACT_ID						BIGINT,
        DATE_OF_VISIT					DATETIME,
        VISIT_START_AT					DATETIME,
        VISIT_END_AT					DATETIME,
        COLLECTOR_REPORTED				TINYINT,
        COLLECTOR_REPORTED_AT			DATETIME,
        CONFIRMED						TINYINT,
        CONFIRMED_AT					DATETIME,
        IN_PROGRESS						TINYINT,
        ACCEPT_ASK_END					TINYINT,
        ACCEPT_ASK_END_AT				DATETIME,
        TRANSACTION_TYPE				VARCHAR(20),
        REJECT_REASON					VARCHAR(255),
        TRANSACTION_STATE_INFO			JSON,
        TRANSACTION_WSTE_INFO			JSON,
        TRANSACTION_IMG_INFO			JSON
	);     
    
    
	INSERT INTO 
	TRANSACTION_INFO_TEMP(
		TRANSACTION_ID,
		DISPOSAL_ORDER_ID,
		COLLECT_ASK_END_AT,
		COLLECTING_TRUCK_ID,
		TRUCK_DRIVER_ID,
		TRUCK_START_AT,
		COLLECT_END_AT,
		QCC_IMG_PATH,
		CONTRACT_ID,
		DATE_OF_VISIT,
		VISIT_START_AT,
		VISIT_END_AT,
        COLLECTOR_REPORTED,
        COLLECTOR_REPORTED_AT,
        CONFIRMED,
        CONFIRMED_AT,
        IN_PROGRESS,
        ACCEPT_ASK_END,
        ACCEPT_ASK_END_AT,
        TRANSACTION_TYPE,
        REJECT_REASON
	)
	SELECT 
		ID,
		DISPOSAL_ORDER_ID,
		COLLECT_ASK_END_AT,
		COLLECTING_TRUCK_ID,
		TRUCK_DRIVER_ID,
		TRUCK_START_AT,
		COLLECT_END_AT,
		QCC_IMG_PATH,
		CONTRACT_ID,
		DATE_OF_VISIT,
		VISIT_START_AT,
		VISIT_END_AT,
		COLLECTOR_REPORTED,
		COLLECTOR_REPORTED_AT,
		CONFIRMED,
		CONFIRMED_AT,
        IN_PROGRESS,
        ACCEPT_ASK_END,
        ACCEPT_ASK_END_AT,
        IF(COLLECTOR_SITE_ID IS NULL, '입찰거래', '기존거래'),
        REJECT_REASON
	FROM WSTE_CLCT_TRMT_TRANSACTION
    WHERE ID = IN_TRANSACTION_ID;
	
    CALL sp_get_transaction_state_info(
		IN_TRANSACTION_ID,
        VAR_TRANSACTION_STATE_INFO
    );
    
    CALL sp_get_transaction_wste_lists(
		IN_TRANSACTION_ID,
        VAR_TRANSACTION_WSTE_INFO
    );
    
    CALL sp_get_collector_img_lists(
		IN_TRANSACTION_ID,
        VAR_TRANSACTION_IMG_INFO
    );
    
    UPDATE TRANSACTION_INFO_TEMP
    SET 
		TRANSACTION_STATE_INFO 	= VAR_TRANSACTION_STATE_INFO,
		TRANSACTION_WSTE_INFO 	= VAR_TRANSACTION_WSTE_INFO,
		TRANSACTION_IMG_INFO 	= VAR_TRANSACTION_IMG_INFO
    WHERE TRANSACTION_ID = IN_TRANSACTION_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'TRANSACTION_ID'			, TRANSACTION_ID, 
		'DISPOSAL_ORDER_ID'			, DISPOSAL_ORDER_ID, 
		'COLLECT_ASK_END_AT'		, COLLECT_ASK_END_AT, 
		'COLLECTING_TRUCK_ID'		, COLLECTING_TRUCK_ID, 
		'TRUCK_DRIVER_ID'			, TRUCK_DRIVER_ID, 
		'TRUCK_START_AT'			, TRUCK_START_AT, 
		'COLLECT_END_AT'			, COLLECT_END_AT, 
		'QCC_IMG_PATH'				, QCC_IMG_PATH, 
		'CONTRACT_ID'				, CONTRACT_ID, 
		'DATE_OF_VISIT'				, DATE_OF_VISIT, 
		'VISIT_START_AT'			, VISIT_START_AT, 
		'VISIT_END_AT'				, VISIT_END_AT, 
		'COLLECTOR_REPORTED'		, COLLECTOR_REPORTED, 
		'COLLECTOR_REPORTED_AT'		, COLLECTOR_REPORTED_AT, 
		'CONFIRMED'					, CONFIRMED, 
		'CONFIRMED_AT'				, CONFIRMED_AT, 
		'IN_PROGRESS'				, IN_PROGRESS, 
        'ACCEPT_ASK_END'			, ACCEPT_ASK_END,
        'ACCEPT_ASK_END_AT'			, ACCEPT_ASK_END_AT,
		'TRANSACTION_TYPE'			, TRANSACTION_TYPE, 
		'REJECT_REASON'				, REJECT_REASON, 
		'TRANSACTION_STATE_INFO'	, TRANSACTION_STATE_INFO, 
		'TRANSACTION_WSTE_INFO'		, TRANSACTION_WSTE_INFO, 
		'TRANSACTION_IMG_INFO'		, TRANSACTION_IMG_INFO
	)) 
	INTO OUT_TRANSACTION_INFO
	FROM TRANSACTION_INFO_TEMP
    WHERE TRANSACTION_ID = IN_TRANSACTION_ID;
	DROP TABLE IF EXISTS TRANSACTION_INFO_TEMP;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_transaction_info_3`(
	IN IN_ORDER_ID						BIGINT,
	IN IN_TRANSACTION_ID				BIGINT,
    OUT OUT_TRANSACTION_INFO			JSON
)
BEGIN

/*
Procedure Name 	: sp_get_transaction_info_3
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.04.28
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_DISPOSER_NAME					VARCHAR(255)		DEFAULT NULL;
	DECLARE VAR_DISPOSER_TYPE					VARCHAR(20)			DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)			DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT				DEFAULT NULL;
	DECLARE VAR_DISPOSER_ID						BIGINT				DEFAULT NULL;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS TRANSACTION_INFO_3_TEMP (
		ID								BIGINT,
		COLLECT_ASK_END_AT				DATETIME,
		DISPOSAL_ORDER_ID				BIGINT,
		COLLECTOR_SITE_ID				BIGINT,
		DISPOSER_SITE_ID				BIGINT,
		CHECK_STATE						TINYINT,
        DISPOSER_TYPE					VARCHAR(20),
        DISPOSER_NAME					VARCHAR(255),
        ORDER_CODE						VARCHAR(10),
        COLLECTOR_NAME					VARCHAR(255),
        TRANSACTION_TYPE				VARCHAR(20)
	);         
    
	INSERT INTO 
	TRANSACTION_INFO_3_TEMP(
		ID,
		COLLECT_ASK_END_AT,
		DISPOSAL_ORDER_ID,
		COLLECTOR_SITE_ID,
		CHECK_STATE,
		COLLECTOR_NAME,
		TRANSACTION_TYPE
	)
	SELECT 
		A.ID,
		A.COLLECT_ASK_END_AT,
		A.DISPOSAL_ORDER_ID,
		A.COLLECTOR_SITE_ID,
		A.CHECK_STATE,
        C.SITE_NAME,
        IF(A.COLLECTOR_SITE_ID IS NOT NULL, '기존거래', '입찰거래')
    FROM WSTE_CLCT_TRMT_TRANSACTION A
	LEFT JOIN COMP_SITE C ON A.COLLECTOR_SITE_ID = C.ID
    LEFT JOIN KIKCD_B B ON C.KIKCD_B_CODE = B.B_CODE
    WHERE A.ID = IN_TRANSACTION_ID;
        
	SELECT 
		SITE_ID, 
        DISPOSER_ID, 
        ORDER_CODE 
	INTO 
		VAR_DISPOSER_SITE_ID, 
        VAR_DISPOSER_ID, 
        VAR_ORDER_CODE
	FROM SITE_WSTE_DISPOSAL_ORDER
	WHERE ID = IN_ORDER_ID;
	
	IF VAR_DISPOSER_SITE_ID = 0 THEN
		SET VAR_DISPOSER_TYPE = "개";
		SELECT USER_NAME INTO VAR_DISPOSER_NAME
		FROM USERS
		WHERE ID = VAR_DISPOSER_ID;
	ELSE
		SET VAR_DISPOSER_TYPE = "사";
		SELECT SITE_NAME INTO VAR_DISPOSER_NAME
		FROM COMP_SITE
		WHERE ID = VAR_DISPOSER_SITE_ID;
	END IF;
	
	UPDATE TRANSACTION_INFO_3_TEMP
	SET
		DISPOSER_NAME = VAR_DISPOSER_NAME,
		DISPOSER_TYPE = VAR_DISPOSER_TYPE,
		DISPOSER_SITE_ID = VAR_DISPOSER_SITE_ID,
		ORDER_CODE = VAR_ORDER_CODE
	WHERE ID = IN_TRANSACTION_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'							, ID, 
        'COLLECT_ASK_END_AT'			, COLLECT_ASK_END_AT, 
        'DISPOSAL_ORDER_ID'				, DISPOSAL_ORDER_ID, 
        'COLLECTOR_SITE_ID'				, COLLECTOR_SITE_ID, 
        'DISPOSER_SITE_ID'				, DISPOSER_SITE_ID, 
        'CHECK_STATE'					, CHECK_STATE, 
        'DISPOSER_TYPE'					, DISPOSER_TYPE, 
        'DISPOSER_NAME'					, DISPOSER_NAME, 
        'ORDER_CODE'					, ORDER_CODE, 
        'COLLECTOR_NAME'				, COLLECTOR_NAME, 
        'TRANSACTION_TYPE'				, TRANSACTION_TYPE
	)) 
	INTO OUT_TRANSACTION_INFO
	FROM TRANSACTION_INFO_3_TEMP;
	DROP TABLE IF EXISTS TRANSACTION_INFO_3_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_transaction_report`(
	IN IN_REPORT_ID						BIGINT,
    OUT OUT_TRANSACTION_REPORT			JSON
)
BEGIN	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'							, A.ID, 
			'WSTE_CODE'						, A.WSTE_CODE, 
			'WSTE_NM'						, B.NAME, 
			'WSTE_APPEARANCE'				, C.KOREAN, 
			'QUANTITY'						, A.QUANTITY, 
			'TRMT_METHOD'					, D.NAME, 
			'UNIT'							, A.UNIT,
			'PRICE'							, A.PRICE,
			'COMPLETED_AT'					, A.TRANSACTION_COMPLETED_AT,
            'SITE_NAME'						, F.SITE_NAME
		)
	) 
	INTO OUT_TRANSACTION_REPORT 
	FROM TRANSACTION_REPORT A 
    LEFT JOIN WSTE_CODE B ON A.WSTE_CODE = B.CODE
    LEFT JOIN WSTE_APPEARANCE C ON A.WSTE_APPEARANCE = C.ID
    LEFT JOIN WSTE_TRMT_METHOD D ON A.TRMT_METHOD = D.CODE
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION E ON A.TRANSACTION_ID = E.ID
    LEFT JOIN COMP_SITE F ON A.COLLECTOR_SITE_ID = F.ID
	WHERE 
		A.ID = IN_REPORT_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_transaction_state`(
	IN IN_ORDER_ID					BIGINT,
    OUT OUT_STATE					TINYINT
)
BEGIN
	DECLARE VAR_RECORD_COUNT					INT				DEFAULT 0;
    
	SELECT COUNT(ID) INTO VAR_RECORD_COUNT
    FROM WSTE_CLCT_TRMT_TRANSACTION
    WHERE 
		DISPOSAL_ORDER_ID = IN_ORDER_ID AND
        CHECK_STATE = FALSE;
        
	IF VAR_RECORD_COUNT > 0 THEN
		SET OUT_STATE = TRUE;
    ELSE
		SET OUT_STATE = FALSE;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_transaction_state_info`(
	IN IN_TRANSACTION_ID			BIGINT,
    OUT OUT_TRANSACTION_STATE_INFO	JSON
)
BEGIN
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'STATE'						, STATE, 
		'STATE_CODE'				, STATE_CODE, 
		'STATE_CATEGORY'			, STATE_CATEGORY, 
		'STATE_CATEGORY_ID'			, STATE_CATEGORY_ID
	)) 
	INTO OUT_TRANSACTION_STATE_INFO
	FROM V_TRANSACTION_STATE_NAME
    WHERE TRANSACTION_ID = IN_TRANSACTION_ID; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_transaction_wste_lists`(
	IN IN_TRANSACTION_ID				BIGINT,
    OUT OUT_TRANSACTION_WSTE_LIST			JSON
)
BEGIN
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'WSTE_CODE'					, A.WSTE_CODE,
		'WSTE_NM'					, B.NAME,
		'WSTE_QUANTITY'				, A.WSTE_QUANTITY,
		'WSTE_UNIT'					, A.WSTE_UNIT,
		'TRMT_METHOD_CODE'			, A.TRMT_METHOD_CODE,
		'TRMT_METHOD_NM'			, C.NAME
	)) 
	INTO OUT_TRANSACTION_WSTE_LIST
	FROM WSTE_CLCT_TRMT_TRANSACTION A
    LEFT JOIN WSTE_CODE B ON A.WSTE_CODE = B.CODE
    LEFT JOIN WSTE_TRMT_METHOD C ON A.TRMT_METHOD_CODE = C.CODE
    WHERE A.ID = IN_TRANSACTION_ID; 

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_user`(
	IN IN_USER_REG_ID		VARCHAR(50),		/*입력값 : 사용자 아이디*/
    OUT OUT_REG_ID			BIGINT,				/*출력값 : 사용자 고유번호*/
    OUT OUT_PWD				VARCHAR(100),		/*출력값 : 사용자 암호*/
    OUT OUT_USER_NAME		VARCHAR(20),		/*출력값 : 사용자 이름*/
    OUT OUT_PHONE			VARCHAR(20),		/*출력값 : 사용자 등록 전화번호*/
    OUT OUT_BELONG_TO		BIGINT,				/*출력값 : 사용자 소속 사업자로서 어떤 사업자에도 소속되어 있지 않은 개인인 경우에는 0이며 특정 사업자에게 소속된 관리자인 사용자의 경우에는 소속 사업자의 고유번호(COMPANY.ID)가 등록됨*/
    OUT OUT_ACTIVE			TINYINT,			/*출력값 : 사용자의 계정 활성화 상태로서 TRUE인 경우에는 계정이 활성화 된 것이며 FALSE인 경우에는 비활성화인 상태로서 계정활성화 이후 트랜잭션이 가능함*/
    OUT OUT_JWT				VARCHAR(100),		/*출력값 : JWT 스티링*/
    OUT OUT_FCM				VARCHAR(100),		/*출력값 : FCM 스티링*/
    OUT OUT_CLASS			INT,				/*출력값 : 사용자의 클래스로서 입력값은 USERS_CLASS의 ID값이다. 사용자 클래스는 USERS_CLASS에서 정의하고 있다.*/
    OUT OUT_CLASS_NM		VARCHAR(20)			/*출력값 : 사용자의 클래스로서 일반 회원인 경우에는 member.***이고, 시스템 관리자인 경우에는 sys.***이다.*/
)
BEGIN

/*
Procedure Name 	: sp_get_user
Input param 	: 1개
Output param 	: 10개
Job 			: 사용자등록 아이디(USER_ID)를 사용하는 사용자에 대한 정보를 반환한다.
Update 			: 2022.01.04
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT 
		ID, PWD, USER_NAME, PHONE, BELONG_TO, ACTIVE, JWT, FCM, CLASS, CLASS_NM 
	INTO 
		OUT_REG_ID, OUT_PWD, OUT_USER_NAME, OUT_PHONE, OUT_BELONG_TO, OUT_ACTIVE, OUT_JWT, OUT_FCM, OUT_CLASS, OUT_CLASS_NM
	FROM V_USERS 
    WHERE USER_ID = IN_USER_REG_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_user_by_user_id`(
	IN IN_USER_ID			BIGINT,				/*입력값 : 사용자 아이디*/
    OUT OUT_REG_ID			BIGINT,				/*출력값 : 사용자 고유번호*/
    OUT OUT_PWD				VARCHAR(100),		/*출력값 : 사용자 암호*/
    OUT OUT_USER_NAME		VARCHAR(20),		/*출력값 : 사용자 이름*/
    OUT OUT_PHONE			VARCHAR(20),		/*출력값 : 사용자 등록 전화번호*/
    OUT OUT_BELONG_TO		BIGINT,				/*출력값 : 사용자 소속 사업자로서 어떤 사업자에도 소속되어 있지 않은 개인인 경우에는 0이며 특정 사업자에게 소속된 관리자인 사용자의 경우에는 소속 사업자의 고유번호(COMPANY.ID)가 등록됨*/
    OUT OUT_ACTIVE			TINYINT,			/*출력값 : 사용자의 계정 활성화 상태로서 TRUE인 경우에는 계정이 활성화 된 것이며 FALSE인 경우에는 비활성화인 상태로서 계정활성화 이후 트랜잭션이 가능함*/
    OUT OUT_JWT				VARCHAR(100),		/*출력값 : JWT 스티링*/
    OUT OUT_FCM				VARCHAR(100),		/*출력값 : FCM 스티링*/
    OUT OUT_CLASS			INT,				/*출력값 : 사용자의 클래스로서 입력값은 USERS_CLASS의 ID값이다. 사용자 클래스는 USERS_CLASS에서 정의하고 있다.*/
    OUT OUT_CLASS_NM		VARCHAR(20)			/*출력값 : 사용자의 클래스로서 일반 회원인 경우에는 member.***이고, 시스템 관리자인 경우에는 sys.***이다.*/
)
BEGIN

/*
Procedure Name 	: sp_get_user_by_user_id
Input param 	: 1개
Output param 	: 10개
Job 			: 사용자등록 아이디(USER_ID)를 사용하는 사용자에 대한 정보를 반환한다.
Update 			: 2022.01.17
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT 
		ID, 
        PWD, 
        USER_NAME, 
        PHONE, 
        BELONG_TO, 
        ACTIVE, 
        JWT, 
        FCM, 
        CLASS, 
        CLASS_NM 
	INTO 
		OUT_REG_ID, 
        OUT_PWD, 
        OUT_USER_NAME, 
        OUT_PHONE, 
        OUT_BELONG_TO, 
        OUT_ACTIVE, 
        OUT_JWT, 
        OUT_FCM, 
        OUT_CLASS, 
        OUT_CLASS_NM
	FROM V_USERS 
    WHERE ID = IN_USER_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_user_info`(
	IN IN_USER_ID			BIGINT,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200),
    OUT OUT_USER_INFO		JSON
)
BEGIN
    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_ID								BIGINT; 
    DECLARE CUR_USER_NAME						VARCHAR(20);
    DECLARE CUR_PHONE							VARCHAR(20);
    DECLARE CUR_BELONG_TO						BIGINT;
    DECLARE CUR_AFFILIATED_SITE					BIGINT;
    DECLARE CUR_ACTIVE							TINYINT;
    DECLARE CUR_CLASS							INT;
    DECLARE CUR_CS_MANAGER_ID					BIGINT;
    DECLARE CUR_CONFIRMED						TINYINT;
    DECLARE CUR_CONFIRMED_AT					DATETIME;
    DECLARE CUR_CREATED_AT						DATETIME;
    DECLARE CUR_UPDATED_AT						DATETIME;
    DECLARE CUR_AGREEMENT_TERMS					TINYINT;
    DECLARE CUR_USER_CURRENT_TYPE				INT;
    DECLARE CUR_AVATAR_PATH						VARCHAR(255);
    DECLARE CUR_PUSH_ENABLED					TINYINT;
    DECLARE CUR_NOTICE_ENABLED					TINYINT;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		ID, 
        USER_NAME,
		PHONE, 
		BELONG_TO,
		AFFILIATED_SITE,
        ACTIVE,
        CLASS,
		CS_MANAGER_ID, 
		CONFIRMED, 
        CONFIRMED_AT,
        CREATED_AT,
        UPDATED_AT,
        AGREEMENT_TERMS,
        USER_CURRENT_TYPE,
        AVATAR_PATH,
        PUSH_ENABLED,
        NOTICE_ENABLED
	FROM USERS
	WHERE 
		ID = IN_USER_ID;    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;	       
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID,
			CUR_USER_NAME,
			CUR_PHONE,
			CUR_BELONG_TO,
			CUR_AFFILIATED_SITE,
			CUR_ACTIVE,
			CUR_CLASS,
			CUR_CS_MANAGER_ID,
			CUR_CONFIRMED,
			CUR_CONFIRMED_AT,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_AGREEMENT_TERMS,
			CUR_USER_CURRENT_TYPE,
			CUR_AVATAR_PATH,
			CUR_PUSH_ENABLED,
			CUR_NOTICE_ENABLED;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		CREATE TEMPORARY TABLE IF NOT EXISTS USER_INFO_TEMP (
			ID						BIGINT,
			USER_NAME				VARCHAR(20),
			PHONE					VARCHAR(20),
			BELONG_TO				BIGINT,
			AFFILIATED_SITE			BIGINT,
			ACTIVE					TINYINT,
			CLASS					INT,
			CS_MANAGER_ID			BIGINT,
			CONFIRMED				TINYINT,
			CONFIRMED_AT			DATETIME,
			CREATED_AT				DATETIME,
			UPDATED_AT				DATETIME,
			AGREEMENT_TERMS			TINYINT,
			USER_CURRENT_TYPE		INT,
			AVATAR_PATH				VARCHAR(255),
			PUSH_ENABLED			TINYINT,
			NOTICE_ENABLED			TINYINT,
			SITE_INFO				JSON,
			COMPANY_INFO			JSON
		);     
		
		INSERT INTO USER_INFO_TEMP (
			ID,
			USER_NAME,
			PHONE,
			BELONG_TO,
			AFFILIATED_SITE,
			ACTIVE,
			CLASS,
			CS_MANAGER_ID,
			CONFIRMED,
			CONFIRMED_AT,
			CREATED_AT,
			UPDATED_AT,
			AGREEMENT_TERMS,
			USER_CURRENT_TYPE,
			AVATAR_PATH,
			PUSH_ENABLED,
			NOTICE_ENABLED
		)
		VALUES(
			CUR_ID,
			CUR_USER_NAME,
			CUR_PHONE,
			CUR_BELONG_TO,
			CUR_AFFILIATED_SITE,
			CUR_ACTIVE,
			CUR_CLASS,
			CUR_CS_MANAGER_ID,
			CUR_CONFIRMED,
			CUR_CONFIRMED_AT,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_AGREEMENT_TERMS,
			CUR_USER_CURRENT_TYPE,
			CUR_AVATAR_PATH,
			CUR_PUSH_ENABLED,
			CUR_NOTICE_ENABLED
		);
		
		CALL sp_get_company_info(
			CUR_BELONG_TO,
            @COMPANY_INFO
		);
		
		CALL sp_get_site_info_simple(
			CUR_AFFILIATED_SITE,
            @SITE_INFO
		);
        UPDATE USER_INFO_TEMP
        SET 
			COMPANY_INFO = @COMPANY_INFO,
			SITE_INFO = @SITE_INFO
        WHERE ID = CUR_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'						, ID, 
			'USER_NAME'					, USER_NAME, 
			'PHONE'						, PHONE, 
			'BELONG_TO'					, BELONG_TO,
			'AFFILIATED_SITE'			, AFFILIATED_SITE,
			'ACTIVE'					, ACTIVE,
			'CLASS'						, CLASS,
			'CS_MANAGER_ID'				, CS_MANAGER_ID, 
			'CONFIRMED'					, CONFIRMED,
			'CONFIRMED_AT'				, CONFIRMED_AT,
			'CREATED_AT'				, CREATED_AT,
			'UPDATED_AT'				, UPDATED_AT,
			'AGREEMENT_TERMS'			, AGREEMENT_TERMS,
			'USER_CURRENT_TYPE'			, USER_CURRENT_TYPE,
			'AVATAR_PATH'				, AVATAR_PATH,
			'PUSH_ENABLED'				, PUSH_ENABLED,
			'NOTICE_ENABLED'			, NOTICE_ENABLED,
			'COMPANY_INFO'				, COMPANY_INFO,
			'SITE_INFO'					, SITE_INFO
		)
	) INTO OUT_USER_INFO FROM USER_INFO_TEMP;
    
	SET rtn_val = 0;
	SET msg_txt = 'Success';
	DROP TABLE IF EXISTS USER_INFO_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_get_wste_lists_registerd_by_site`(
	IN IN_SITE_ID							BIGINT,
    OUT OUT_WSTE_LIST						JSON
)
BEGIN

/*
Procedure Name 	: sp_get_wste_lists_registerd_by_site
Input param 	: 1개
Job 			: 수거업체가 관리할 수 있는 폐기물 리스트를 반환한다.
Update 			: 2022.04.05
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 								INT 				DEFAULT 0;
    DECLARE endOfRow 								TINYINT 			DEFAULT FALSE;   
    DECLARE CUR_LIST_ID								BIGINT;   			/*SITE_WSTE_CLS_MATCH.ID*/
    DECLARE CUR_SITE_ID								BIGINT;   			/*사이트 아이디*/
    DECLARE CUR_WSTE_CODE							VARCHAR(8);			/*폐기물 코드*/
    DECLARE CUR_WSTE_NAME							VARCHAR(255);		/*폐기물 이름*/
    DECLARE CUR_CREATED_AT							DATETIME;   		/*레코드 최초생성일자*/
    DECLARE CUR_UPDATED_AT							DATETIME;			/*레코드 최종수정일자*/
    DECLARE CUR_WSTE_APPEARANCE						VARCHAR(10);		/*폐기물 성상*/
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
	SELECT 
		A.ID, 
		A.SITE_ID, 
		A.WSTE_CLS_CODE, 
        B.NAME,
        C.KOREAN, 
        A.CREATED_AT,
        A.UPDATED_AT
    FROM SITE_WSTE_CLS_MATCH A 
    LEFT JOIN WSTE_CODE B ON A.WSTE_CLS_CODE = B.CODE
    LEFT JOIN WSTE_APPEARANCE C ON A.WSTE_APPEARANCE = C.ID
    WHERE A.SITE_ID = IN_SITE_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;        
    
	CREATE TEMPORARY TABLE IF NOT EXISTS WSTE_LIST_REGISTERED_TEMP (
		LIST_ID								BIGINT, 
		SITE_ID								BIGINT,
		WSTE_CODE							VARCHAR(8),
		WSTE_NAME							VARCHAR(255),
		CREATED_AT							DATETIME,
		UPDATED_AT							DATETIME,
        WSTE_APPEARANCE						VARCHAR(10)
	);         
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO  
			CUR_LIST_ID,
			CUR_SITE_ID,
			CUR_WSTE_CODE,
			CUR_WSTE_NAME,
			CUR_WSTE_APPEARANCE,
			CUR_CREATED_AT,
			CUR_UPDATED_AT;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		WSTE_LIST_REGISTERED_TEMP(
			LIST_ID,
			SITE_ID,
			WSTE_CODE,
			WSTE_NAME,
			WSTE_APPEARANCE,
			CREATED_AT,
			UPDATED_AT
		)
		VALUES(
			CUR_LIST_ID,
			CUR_SITE_ID,
			CUR_WSTE_CODE,
			CUR_WSTE_NAME,
			CUR_WSTE_APPEARANCE,
			CUR_CREATED_AT,
			CUR_UPDATED_AT
		);
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'LIST_ID'						, LIST_ID, 
			'SITE_ID'						, SITE_ID, 
			'WSTE_CODE'						, WSTE_CODE, 	
			'WSTE_NAME'						, WSTE_NAME, 				
			'WSTE_APPEARANCE'				, WSTE_APPEARANCE, 
			'CREATED_AT'					, CREATED_AT, 
			'UPDATED_AT'					, UPDATED_AT
		)
	) 
	INTO OUT_WSTE_LIST 
	FROM WSTE_LIST_REGISTERED_TEMP;
	DROP TABLE IF EXISTS WSTE_LIST_REGISTERED_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_bidding_information`(
	IN IN_SITE_ID					BIGINT,				/*입력값 : 폐기물 수거자등의 폐기물 처리업체의 사시트 고유등록번호(COMP_SITE.ID)*/
	IN IN_DISPOSER_ORDER_ID			BIGINT,				/*입력값 : 배출자가 입력한 폐기물 배출정보(SITE_WSTE_DISPOSAL_ORDER.ID)*/
    IN IN_BIDDING_DETAILS			JSON,				/*입력값 : 폐기물 수집운반 및 처리에 대한 입찰내역서*/
    OUT rtn_val						INT,				/*출력값 : 처리결과 반환값*/   
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/ 
)
BEGIN

/*
Procedure Name 	: sp_insert_bidding_information
Input param 	: 1개
Output param 	: 2개
Job 			: 수집업자 등의 입찰정보를 등록한다.
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.21
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: STATUS_HISTORY에 입력하는 기능 추가(0.0.2)
*/

    CALL sp_req_current_time(@REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_bidding_end_date_expired(
	/*입찰마감일이 종료되었는지 검사한다. 종료되었으면 TRUE, 그렇지 않으면 FALSE반환*/
		IN_DISPOSER_ORDER_ID,
		@IS_BIDDING_END_DATE_EXPIRED
	);
	IF @IS_BIDDING_END_DATE_EXPIRED = FALSE THEN
	/*입찰마감일이 종료되지 않은 경우*/
		CALL sp_req_collect_bidding_max_id(
			@COLLECTOR_BIDDING_ID
        );
        
        SELECT COUNT(ID) 
        INTO @CHK_COUNT 
        FROM COLLECTOR_BIDDING 
        WHERE 
			COLLECTOR_ID = @COLLECTOR_BIDDING_ID AND
            DISPOSAL_ORDER_ID = IN_SITE_ID AND
            ACTIVE = TRUE;
		/*PK 검사 실행*/
		IF @CHK_COUNT = 0 THEN
        /*PK 위반하지 않은 경우*/
			INSERT INTO COLLECTOR_BIDDING (
				ID,
				COLLECTOR_ID,
				DISPOSAL_ORDER_ID,
				ACTIVE,
				CREATED_AT,
				UPDATED_AT
			) VALUES (
				@COLLECTOR_BIDDING_ID,
				IN_SITE_ID,
				IN_DISPOSER_ORDER_ID,
				TRUE,
				@REG_DT,
				@REG_DT
			);
			
			IF ROW_COUNT() = 1 THEN
			/*데이타베이스에 레코드가 성공적으로 입력된 경우*/
				INSERT INTO FINAL_BIDDER_MANAGEMENT (
					DISPOSER_ORDER_ID,
					COLLECTOR_BIDDING_ID
				) VALUES (
					@COLLECTOR_BIDDING_ID, 
					IN_DISPOSER_ORDER_ID
				);
				IF ROW_COUNT() = 1 THEN
					CALL sp_insert_collector_wste_lists(
					/*수거자 등이 입력한 입찰정보를 데이타베이스에 저장한다.*/
						@COLLECTOR_BIDDING_ID,
						IN_DISPOSER_ORDER_ID,
						@REG_DT,
						IN_BIDDING_DETAILS,
						@rtn_val,
						@msg_txt
					);
					IF @rtn_val = 0 THEN
					/*데이타베이스 입력에 성공한 경우*/
						INSERT INTO STATUS_HISTORY (
							DISPOSAL_ORDER_ID, 
							COLLECTOR_ID, 
							STATUS_CODE, 
							CREATED_AT, 
							UPDATED_AT
						) 
						VALUES (
							IN_DISPOSER_ORDER_ID, 
							IN_SITE_ID, 
							2, 
							@REG_DT, 
							@REG_DT
						);
						IF ROW_COUNT() = 1 THEN
						/*데이타 입력에 성공하였다면*/
							SET rtn_val = 0;
							SET msg_txt = 'The waste bidding process has been completed';
						ELSE
						/*데이타 입력에 실패하였다면 예외처리한다.*/
							SET rtn_val = 23501;
							SET msg_txt = 'Failed to write history';
						END IF;
					ELSE
					/*데이타베이스 입력에 실패한 경우*/
						SET rtn_val = @rtn_val;
						SET msg_txt = @msg_txt;
					END IF;
				ELSE
					SET rtn_val = 23505;
					SET msg_txt = 'Failed to create final bidder management rocord';
				END IF;
			ELSE
			/*데이타베이스에 레코드 입력이 실패한 경우*/
				SET rtn_val = 23502;
				SET msg_txt = 'Failed to create database record';
			END IF;
        ELSE
        /*PK 위반인 경우에는 예외처리한다.*/
			SET rtn_val = 23503;
			SET msg_txt = 'violation of PK rules';
        END IF;
	ELSE
	/*입찰마감일이 종료된 경우 예외처리한다.*/
		SET rtn_val = 23504;
		SET msg_txt = 'Bidding deadline has ended';
	END IF;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_clct_trmt_transaction`(
    IN IN_USER_ID					BIGINT,					/*입력값 : 배출요청을 한 배출업체의 관리자 고유등록번호(USERS.ID)*/
	IN IN_DISPOSER_ORDER_ID			BIGINT,					/*입력값 : SITE_WSTE_DISPOSAL_ORDER.ID*/
	IN IN_COLLECTOR_SITE_ID			BIGINT,					/*입력값 : 기존거래로 들어오는 경우에는 값이 있으며 일반 입찰거래인 경우에는 NULL*/
	IN IN_VISIT_START_AT			DATETIME,				/*입력값 : 배출자가 요청하는 방문요청일*/
	IN IN_VISIT_END_AT				DATETIME,				/*입력값 : 배출자가 요청하는 방문요청일*/
    IN IN_COLLECT_ASK_END_AT		DATETIME,				/*입력값 : 배출자가 요청하는 수거마감일*/
    OUT rtn_val						INT,					/*출력값 : 처리결과 반환값*/   
    OUT msg_txt 					VARCHAR(200)			/*출력값 : 처리결과 문자열*/ 
)
BEGIN

/*
Procedure Name 	: sp_insert_clct_trmt_transaction
Input param 	: 6개
Output param 	: 2개
Job 			: 폐기물처리작업을 생성한다.
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.02.17
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: VISIT_START_AT 칼럼 추가(0.0.2)
*/
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE MAX_SELECTION_DURATION				VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_MAX_DECISION_AT		DATETIME				DEFAULT NULL;

    CALL sp_req_current_time(VAR_REG_DT);
    
	INSERT INTO WSTE_CLCT_TRMT_TRANSACTION (
		DISPOSAL_ORDER_ID,
        ASKER_ID,
        COLLECTOR_SITE_ID,
        COLLECT_ASK_END_AT,
        VISIT_START_AT,
        VISIT_END_AT,
        CREATED_AT,
        UPDATED_AT
	) VALUES (
		IN_DISPOSER_ORDER_ID,
        IN_USER_ID,
        IN_COLLECTOR_SITE_ID,
        IN_COLLECT_ASK_END_AT,
        IN_VISIT_START_AT,
        IN_VISIT_END_AT,
        VAR_REG_DT,
        VAR_REG_DT
    );
    
    IF ROW_COUNT() = 1 THEN
    /*레코드 생성에 성공한 경우*/
        SELECT LAST_INSERT_ID() INTO VAR_TRANSACTION_ID;
        IF IN_COLLECTOR_SITE_ID IS NOT NULL THEN
			CALL sp_req_policy_direction(
			/*수거자가 배출자의 최종입찰선정에 응답을 할 수 있는 최대의 시간으로서 배출자의 최종낙찰자선정일로부터의 기간을 반환받는다(단위:시간)*/
				'max_selection_duration',
				MAX_SELECTION_DURATION
			);
			SET VAR_COLLECTOR_MAX_DECISION_AT = ADDTIME(
												VAR_REG_DT, 
												CONCAT(
													CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
													':00:00'
												)
											);
        END IF;
        
		UPDATE SITE_WSTE_DISPOSAL_ORDER
        SET 
			TRANSACTION_ID 				= VAR_TRANSACTION_ID,
            UPDATED_AT 					= VAR_REG_DT,
            COLLECTOR_MAX_DECISION_AT 	= IF(IN_COLLECTOR_SITE_ID IS NOT NULL, VAR_COLLECTOR_MAX_DECISION_AT, COLLECTOR_MAX_DECISION_AT)
            /*기존 거래인 경우에는 위에서 계산한 VAR_COLLECTOR_MAX_DECISION_AT으로 SITE_WSTE_DISPOSAL_ORDER의 COLLECTOR_MAX_DECISION_AT을 변경해준다.*/
        WHERE ID 			= IN_DISPOSER_ORDER_ID;
        IF ROW_COUNT() = 1 THEN
			IF IN_COLLECTOR_SITE_ID IS NOT NULL THEN
            /*기존거래인 경우*/
				UPDATE WSTE_CLCT_TRMT_TRANSACTION
				SET MAX_DECISION_AT = VAR_COLLECTOR_MAX_DECISION_AT
				WHERE ID = VAR_TRANSACTION_ID;
				IF ROW_COUNT() = 1 THEN
					SET rtn_val = 0;
					SET msg_txt = 'success';
				ELSE
					SET rtn_val = 25303;
					SET msg_txt = 'faild to update transaction max decision at';
				END IF;
			ELSE
            /*입찰거래인 경우*/
				SET rtn_val = 0;
				SET msg_txt = 'success';
			END IF;
        ELSE
			SET rtn_val = 25302;
			SET msg_txt = 'faild to update transaction id';
        END IF;
    ELSE
    /*레코드 생성에 실패한 경우 예외처리한다.*/
		SET rtn_val = 25301;
		SET msg_txt = 'User not found or is invalid';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_collector_wste_lists`(
	IN IN_USER_ID						BIGINT,						
	IN IN_COLLECTOR_BIDDING_ID			BIGINT,						/*입력값 : 수거자등의 업체가 입찰 신청을 할 때 생성되는 고유등록번호(COLLECTOR_BIDDING.ID)*/
	IN IN_DISPOSER_ORDER_ID				BIGINT,						/*입력값 : 폐기물 배출 고유등록번호(SITE_WSTE_DISPOSAL_ORDER.ID)*/
	IN IN_REG_DT						DATETIME,					/*입력값 : 입력날짜*/
	IN IN_JSON_DATA						JSON,						/*입력값 : 입력 폐기물 리스트*/
	OUT rtn_val							INT,						/*출력값 : 처리결과 반환값*/
	OUT msg_txt 						VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_insert_collector_wste_lists
Input param 	: 3개
Output param 	: 2개
Job 			: 수거자 등이 입력한 입찰정보를 데이타베이스에 저장한다.
Update 			: 2022.01.20
Version			: 0.0.1
AUTHOR 			: Leo Nam
IN_JSON_DATA	: JSON 데이타에서 사용하는 KEY와 VALUE 타입
*/
    
    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;
    
    DECLARE CUR_WSTE_CODE 						VARCHAR(8);
    DECLARE CUR_UNIT	 						VARCHAR(20);
    DECLARE CUR_UNIT_PRICE 						INT;
    DECLARE CUR_VOLUME	 						FLOAT;
    DECLARE CUR_TRMT_CODE 						VARCHAR(4);	
	DECLARE VAR_WSTE_CODE_VALID					TINYINT					DEFAULT NULL;
	DECLARE VAR_BID_AMOUNT						FLOAT					DEFAULT NULL;
    
    DECLARE WSTE_CURSOR CURSOR FOR 
	SELECT WSTE_CODE, UNIT, UNIT_PRICE, VOLUME, TRMT_CODE
    FROM JSON_TABLE(IN_JSON_DATA, "$[*]" COLUMNS(
    /*JSON 데이타에서 사용하는 KEY와 VALUE 타입*/
		WSTE_CODE 				VARCHAR(8) 			PATH "$.WSTE_CODE",
		UNIT 					VARCHAR(20)			PATH "$.UNIT",
		UNIT_PRICE				INT					PATH "$.UNIT_PRICE",
		VOLUME					FLOAT				PATH "$.VOLUME",
		TRMT_CODE				VARCHAR(4)			PATH "$.TRMT_CODE"
	)) AS WSTE_LIST;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
        
	OPEN WSTE_CURSOR;	
	cloop: LOOP
		FETCH WSTE_CURSOR 
        INTO 
			CUR_WSTE_CODE,
			CUR_UNIT,
			CUR_UNIT_PRICE,
			CUR_VOLUME,
			CUR_TRMT_CODE;   
        
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			SET rtn_val = 0;
			SET msg_txt = 'Success5';
			LEAVE cloop;
		END IF;
        
        CALL sp_check_if_wste_code_valid(
			CUR_WSTE_CODE,
            VAR_WSTE_CODE_VALID
        );
        
        IF VAR_WSTE_CODE_VALID = 1 THEN
			INSERT INTO 
			BIDDING_DETAILS(
				COLLECTOR_BIDDING_ID, 
				WSTE_CODE, 
				UNIT, 
				UNIT_PRICE, 
				VOLUME,
				TRMT_CODE,
				CREATED_AT,
				UPDATED_AT,
				UPDATER_ID,
				UPDATER_CATEGORY
			)
			VALUES(
				IN_COLLECTOR_BIDDING_ID, 
				CUR_WSTE_CODE, 
				IF(CUR_UNIT='', '전체견적가', CUR_UNIT), 
				CUR_UNIT_PRICE, 
				IF(CUR_VOLUME = 0, 1, CUR_VOLUME), 
				CUR_TRMT_CODE, 
				IN_REG_DT, 
				IN_REG_DT,
                IN_USER_ID,
                'member'
			);	
			
			IF ROW_COUNT() = 0 THEN
				SET rtn_val = 23601;
				SET msg_txt = 'Failed to save waste bidding information1';
				LEAVE cloop;
			ELSE
				SET rtn_val = 0;
				SET msg_txt = 'Success4';
			END IF;
        ELSE
			SET rtn_val = 236032;
			SET msg_txt = 'waste code is not valid';
			LEAVE cloop;
        END IF;
	END LOOP;   
	CLOSE WSTE_CURSOR;
    
    IF rtn_val = 0 THEN
		SELECT SUM(UNIT_PRICE * VOLUME) INTO VAR_BID_AMOUNT 
        FROM BIDDING_DETAILS 
        WHERE COLLECTOR_BIDDING_ID = IN_COLLECTOR_BIDDING_ID;
        
		UPDATE COLLECTOR_BIDDING 
        SET 
			BID_AMOUNT 	= VAR_BID_AMOUNT, 
            UPDATED_AT 	= IN_REG_DT 
        WHERE ID = IN_COLLECTOR_BIDDING_ID;
		
		IF ROW_COUNT() = 0 THEN
			SET rtn_val = 23602;
			SET msg_txt = 'Failed to calculate the total estimate';
		ELSE
/*
			SELECT ID INTO @WINNER_ID 
			FROM COLLECTOR_BIDDING 
			WHERE 
				BID_AMOUNT IS NOT NULL AND 
				DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID  AND
				BID_AMOUNT 
				IN (
					SELECT MIN(BID_AMOUNT) 
					FROM COLLECTOR_BIDDING 
					WHERE 
						DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND 
						ACTIVE = TRUE AND 
						BID_AMOUNT IS NOT NULL
				);
			SELECT ID INTO @WINNER_ID FROM COLLECTOR_BIDDING WHERE DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID;
			
			UPDATE COLLECTOR_BIDDING SET WINNER = NULL, UPDATED_AT = IN_REG_DT WHERE DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND ACTIVE = TRUE;
			UPDATE COLLECTOR_BIDDING SET WINNER = TRUE, UPDATED_AT = IN_REG_DT WHERE ID = @WINNER_ID;
			IF ROW_COUNT() > 0 THEN
*/            
			/*새로운 최저입찰가를 신청한 아이디(COLLECTOR_BIDDING.ID)의 WINNER값을 TRUE로 성공적으로 변경한 경우*/
				SET rtn_val = 0;
				SET msg_txt = 'Success3';
/*                
			ELSE
*/            
			/*새로운 최저입찰가를 신청한 아이디(COLLECTOR_BIDDING.ID)의 WINNER값을 TRUE로 변경하는데 실패한 경우*/
/*            
				SET rtn_val = 23603;
				SET msg_txt = 'Failure to correct information about the new lowest bidder';
			END IF;
*/                
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_company`(
	IN IN_COMP_ID			BIGINT,
    IN IN_COMP_NAME			VARCHAR(100),
    IN IN_REP_NAME			VARCHAR(50),
    IN IN_KIKCD_B_CODE		VARCHAR(10),
    IN IN_ADDR				VARCHAR(300),
    IN IN_LNG		 		DECIMAL(12,9),		/*입력값 : 사업자 소재지의 경도값*/
    IN IN_LAT		 		DECIMAL(12,9),		/*입력값 : 사업자 소재지의 위도값*/
    IN IN_CONTACT			VARCHAR(100),
    IN IN_TRMT_BIZ_CODE		VARCHAR(4),
    IN IN_BIZ_REG_CODE		VARCHAR(12),
    IN IN_BIZ_REG_IMG_PATH	VARCHAR(255),
    IN IN_P_COMP_ID			BIGINT,
    IN IN_CREATED_AT		DATETIME,
    IN IN_UPDATED_AT		DATETIME,
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_insert_company
Input param 	: 11개
Output param 	: 2개
Job 			: 사업자 레코드를 생성한다. 성공하면 0, 실패하면 예외처리코드를 반환한다.
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/

	INSERT INTO COMPANY
		(ID, COMP_NAME, REP_NAME, KIKCD_B_CODE, ADDR, LNG, LAT, CONTACT, TRMT_BIZ_CODE, BIZ_REG_CODE, BIZ_REG_IMG_PATH, P_COMP_ID, CREATED_AT, UPDATED_AT) 
	VALUES
		(IN_COMP_ID, IN_COMP_NAME, IN_REP_NAME, IN_KIKCD_B_CODE, IN_ADDR, IN_LNG, IN_LAT, IN_CONTACT, IN_TRMT_BIZ_CODE, IN_BIZ_REG_CODE, IN_BIZ_REG_IMG_PATH, IN_P_COMP_ID, IN_CREATED_AT, IN_UPDATED_AT);
		
	IF ROW_COUNT() = 1 THEN
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
		SET rtn_val = 27301;
		SET msg_txt = 'An error occurred in the process of entering business information into the DB';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_log`(
	IN IN_USER_CLASS		VARCHAR(10),
    IN IN_PERFORMER			BIGINT,
    IN IN_DIVISION			VARCHAR(10),
    IN IN_JOB				VARCHAR(100),
    IN IN_REG_DT			DATETIME,
    OUT OUT_PARAM			TINYINT
)
BEGIN	

/*
Procedure Name 	: sp_insert_log
Input param 	: 5개
Output param 	: 1개
Job 			: sys_log에 로그 레코드를 생성한후 성공적으로 생성된 경우에는 1, 그렇지 않은 경우에는 0을 반환한다.
Update 			: 2022.01.17
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: 로깅 정책에 대한 검사를 이 프로시저 안에서 처리한다(0.0.2)
*/

	DECLARE CHK_COUNT INT;
    
	call sp_req_policy_direction(
		'transaction_log', 
		@log_policy
	);
	/*정책상 모든 트랜잭션에 대한 로그가 필요하다고 결정된 경우(sys_policy)에는 sys_log에 트랜잭션에 대한 내용을 로깅한다. - 시작*/ 
	/*db관리정책에 대한 결정은 sys_policy에서 변경할수 있다.*/
	IF @log_policy = '1' THEN
		INSERT INTO sys_log
			(user_class, performer, division, job, occurred_at)
		VALUES
			(IN_USER_CLASS, IN_PERFORMER, IN_DIVISION, IN_JOB, IN_REG_DT);
			
		SELECT COUNT(ID) INTO CHK_COUNT FROM sys_log
		WHERE
			user_class 	= IN_USER_CLASS AND
			performer 	= IN_PERFORMER AND
			division 	= IN_DIVISION AND
			job 		= IN_JOB AND
			occurred_at	= IN_REG_DT;
		IF CHK_COUNT > 0 THEN
			SET OUT_PARAM = 1;
		ELSE
			SET OUT_PARAM = 0;
		END IF;
    ELSE
		SET OUT_PARAM = 0;
    END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_member_contact_path`(
	IN IN_USER_ID				BIGINT,
    IN IN_SITE_ID				BIGINT,
    IN IN_CONTACT_PATH			INT,
    OUT rtn_val					INT,
    OUT msg_txt					VARCHAR(200)
)
BEGIN
	DECLARE VAR_REG_DT			DATETIME		DEFAULT NULL;
    
    SET rtn_val = 0;
    SET msg_txt = 'success';
    
	CALL sp_req_current_time(VAR_REG_DT);
	INSERT MEMBER_CONTACT_PATH (
		USER_ID, 
        SITE_ID, 
        CONTACT_PATH, 
        CREATED_AT
	) VALUES (
		IN_USER_ID, 
        IN_SITE_ID, 
        IN_CONTACT_PATH, 
        VAR_REG_DT
	);
    IF ROW_COUNT() = 0 THEN
		SET rtn_val 		= 40701;
		SET msg_txt 		= 'failed to insert contact path';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_post`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 작성자의 고유등록번호 (USERS.ID)*/
	IN IN_SUBJECT				VARCHAR(255),		/*입력값 : 제목*/
	IN IN_CONTENTS				TEXT,				/*입력값 : 내용*/
	IN IN_SITE_ID				BIGINT,				/*입력값 : 게시판 소유자(COMP_SITE.ID)*/
	IN IN_CATEGORY				INT,				/*입력값 : 게시판 종류(1: 공지사항, 2: 업무게시판)*/
	IN IN_SUB_CATEGORY			INT,				/*입력값 : 서브카테고리가 있는 경우 사용(현재는 문의사항에만 존재)*/    
	IN IN_PID					BIGINT,				/*입력값 : 댓글의 경우 원글의 등록번호, 원글인 경우에는 0*/
    IN IN_RATING				FLOAT,				/*입력값 : 리뷰작성시 입력되는 평점*/   
	IN IN_DISPOSER_ORDER_ID		BIGINT,				/*입력값 : 리뷰를 작성할 입찰등록번호*/     
	IN IN_PHONE					VARCHAR(20),		/*입력값 : 전화번호*/
	IN IN_EMAIL					VARCHAR(50),		/*입력값 : 이메일*/ 
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(100),		/*출력값 : 처리결과 문자열*/
    OUT VAR_LAST_INSERT_ID			VARCHAR(100)		/*출력값 : 최종 입력 등록번호*/
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;
	DECLARE VAR_LAST_INSERT_ID					INT						DEFAULT NULL;
    
    CALL sp_req_current_time(VAR_REG_DT);
    
	INSERT INTO POSTS(
		SITE_ID,
		CREATOR_ID,
		SUBJECTS,
		CONTENTS,
		CATEGORY,
		SUB_CATEGORY,
		PID,
		RATING,
		DISPOSER_ORDER_ID,
		PHONE,
		EMAIL,
		CREATED_AT,
		UPDATED_AT
	) VALUES (
		IN_SITE_ID,
		IN_USER_ID,
		IN_SUBJECT,
		IN_CONTENTS,
		IN_CATEGORY,
		IN_SUB_CATEGORY,
		IN_PID,
		IN_RATING,
		IN_DISPOSER_ORDER_ID,
		IN_PHONE,
		IN_EMAIL,
		VAR_REG_DT,
		VAR_REG_DT
	);
	IF ROW_COUNT() = 1 THEN
	/*글작성이 정상적으로 종료된 경우 정상처리한다.*/
		IF IN_USER_ID IS NOT NULL THEN
			CALL sp_req_user_class_by_user_reg_id(
				IN_USER_ID,
				VAR_USER_CLASS
			);
			
			IF IN_CATEGORY = 3 AND VAR_USER_CLASS < 200 AND IN_PID > 0 THEN
				UPDATE POSTS 
                SET 
					STATUS 		= TRUE,
                    UPDATED_AT 	= VAR_REG_DT
                WHERE ID 		= IN_PID;
                
				IF ROW_COUNT() = 1 THEN
					SET rtn_val = 0;
					SET msg_txt = 'Success';
					SET VAR_LAST_INSERT_ID = LAST_INSERT_ID();
				ELSE
					SET rtn_val = 30402;
					SET msg_txt = 'Failed to complete answer';
					SET VAR_LAST_INSERT_ID = NULL;
				END IF;
			ELSE
				SET rtn_val = 0;
				SET msg_txt = 'Success5678';
				SET VAR_LAST_INSERT_ID = LAST_INSERT_ID();
			END IF;
		ELSE
			IF IN_PID > 0 THEN
				SET rtn_val = 30403;
				SET msg_txt = 'Comment writing is a member-only service';
            ELSE
				SET rtn_val = 0;
				SET msg_txt = 'Success1234';
				SET VAR_LAST_INSERT_ID = LAST_INSERT_ID();
            END IF;
        END IF;
	ELSE
	/*글작성이 정상적으로 종료되지 않은 경우 예외처리한다.*/
		SET rtn_val = 30401;
		SET msg_txt = 'Failed to write post';
        SET VAR_LAST_INSERT_ID = NULL;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_push`(
    IN IN_SENDER_ID				BIGINT,				/*입력값 : 발송자 아이디*/
	IN IN_JSON_DATA				JSON,				/*입력값 : 입력 폐기물 리스트*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_insert_push
Input param 	: 8개
Output param 	: 2개
Job 			: 시스템 또는 관리자에 의하여 사용자에게 발송된 푸시를 저장한다.
Update 			: 2022.04.14
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    
    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_USER_ID 						BIGINT;
    DECLARE CUR_USER_NAME	 					VARCHAR(255);
    DECLARE CUR_FCM			 					VARCHAR(255);
    DECLARE CUR_AVATAR_PATH	 					VARCHAR(255);
    DECLARE CUR_PHONE		 					VARCHAR(255);
    DECLARE CUR_TITLE		 					VARCHAR(255);
    DECLARE CUR_BODY 							VARCHAR(255);
    DECLARE CUR_ORDER_ID	 					BIGINT;
    DECLARE CUR_BIDDING_ID 						BIGINT;	
    DECLARE CUR_TRANSACTION_ID 					BIGINT;	
    DECLARE CUR_REPORT_ID 						BIGINT;	
    DECLARE CUR_CATEGORY_ID 					INT;	
    DECLARE CUR_CREATED_AT	 					DATETIME;	
	DECLARE VAR_RECORD_COUNT					TINYINT					DEFAULT NULL;    
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();    
    DECLARE PUSH_CURSOR CURSOR FOR 
	SELECT USER_ID, USER_NAME, FCM, AVATAR_PATH, PHONE, TITLE, BODY, ORDER_ID, BIDDING_ID, TRANSACTION_ID, REPORT_ID, CATEGORY_ID, CREATED_AT
    FROM JSON_TABLE(IN_JSON_DATA, "$[*]" COLUMNS(
    /*JSON 데이타에서 사용하는 KEY와 VALUE 타입*/
		USER_ID 				BIGINT 			PATH "$.USER_ID",
		USER_NAME 				VARCHAR(255) 	PATH "$.USER_NAME",
		FCM 					VARCHAR(255) 	PATH "$.FCM",
		AVATAR_PATH				VARCHAR(255)	PATH "$.AVATAR_PATH",
		PHONE					VARCHAR(255)	PATH "$.PHONE",
		TITLE 					VARCHAR(255)	PATH "$.TITLE",
		BODY					VARCHAR(255)	PATH "$.BODY",
		ORDER_ID				BIGINT			PATH "$.ORDER_ID",
		BIDDING_ID				BIGINT			PATH "$.BIDDING_ID",
		TRANSACTION_ID			BIGINT			PATH "$.TRANSACTION_ID",
		REPORT_ID				BIGINT			PATH "$.REPORT_ID",
		CATEGORY_ID				INT				PATH "$.CATEGORY_ID",
		CREATED_AT				DATETIME		PATH "$.CREATED_AT"
	)) AS PUSH_INFO;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;        

	SET rtn_val = NULL;
    SET msg_txt = NULL;
    SELECT COUNT(USER_ID) INTO VAR_RECORD_COUNT
    FROM JSON_TABLE(IN_JSON_DATA, "$[*]" COLUMNS(
    /*JSON 데이타에서 사용하는 KEY와 VALUE 타입*/
		USER_ID 				BIGINT 			PATH "$.USER_ID"
	)) AS PUSH_INFO_2;
    
    IF VAR_RECORD_COUNT > 0 THEN
		CALL sp_req_current_time(VAR_REG_DT);
		OPEN PUSH_CURSOR;	
		cloop: LOOP
			FETCH PUSH_CURSOR 
			INTO 
				CUR_USER_ID,
				CUR_USER_NAME,
				CUR_FCM,
				CUR_AVATAR_PATH,
				CUR_PHONE,
				CUR_TITLE,
				CUR_BODY,
				CUR_ORDER_ID,
				CUR_BIDDING_ID,
				CUR_TRANSACTION_ID,
				CUR_REPORT_ID,
				CUR_CATEGORY_ID,
				CUR_CREATED_AT;   
			
			SET vRowCount = vRowCount + 1;
			IF endOfRow THEN
				SET rtn_val = 0;
				SET msg_txt = CONCAT('success-sp_insert_push-1:', vRowCount);
				LEAVE cloop;
			END IF;
                
			IF 
				CUR_USER_ID IS NOT NULL AND
				CUR_TITLE IS NOT NULL AND
				CUR_CREATED_AT IS NOT NULL AND
                IF(IN_SENDER_ID = 0,
					IN_SENDER_ID IS NOT NULL,
					IN_SENDER_ID IS NOT NULL AND
					CUR_ORDER_ID IS NOT NULL AND
					CUR_TRANSACTION_ID IS NOT NULL AND
					CUR_CATEGORY_ID IS NOT NULL
                )
            THEN
				INSERT INTO PUSH_HISTORY(
					USER_ID,
					TITLE,
					BODY,
					CREATED_AT,
					SENDER_ID,
					ORDER_ID,
					BIDDING_ID,
					TRANSACTION_ID,
					REPORT_ID,
					CATEGORY_ID,
                    PHONE
				) VALUES (
					CUR_USER_ID,
					CUR_TITLE,
					CUR_BODY,
					CUR_CREATED_AT,
					IN_SENDER_ID,
					CUR_ORDER_ID,
					CUR_BIDDING_ID,
					CUR_TRANSACTION_ID,
					CUR_REPORT_ID,
					CUR_CATEGORY_ID,
                    CUR_PHONE
				);
				
				IF ROW_COUNT() = 0 THEN
					SET rtn_val = 37701;
					SET msg_txt = 'Failed to insert push lists';
					LEAVE cloop;
				ELSE
					SET rtn_val = 0;
					SET msg_txt = 'Success-sp_insert_push-2';
				END IF;
            END IF;
		END LOOP;   
		CLOSE PUSH_CURSOR;
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Success-sp_insert_push-3';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_sigungu`(
	IN IN_SITE_ID		INT,
	IN IN_SIGUNGU_CODE	VARCHAR(10),
	IN IN_DEFAULT		TINYINT,
	IN IN_REG_DT		DATETIME,
    OUT rtn_val			INT
)
BEGIN
	DECLARE VAR_BCODE_COUNT						INT						DEFAULT 0;  
	DECLARE VAR_SIGUNGU_COUNT					INT						DEFAULT 0;  
    
	SELECT COUNT(B_CODE) INTO VAR_BCODE_COUNT
    FROM KIKCD_B
    WHERE 
        B_CODE = IN_SIGUNGU_CODE AND
        CANCELED_DATE IS NULL;
	IF VAR_BCODE_COUNT = 1 THEN
		SELECT COUNT(ID) INTO VAR_SIGUNGU_COUNT
		FROM BUSINESS_AREA
		WHERE 
			SITE_ID = IN_SITE_ID AND
			KIKCD_B_CODE = IN_SIGUNGU_CODE AND
            ACTIVE = TRUE;
			
		IF VAR_SIGUNGU_COUNT = 0 THEN
			INSERT INTO BUSINESS_AREA(
				SITE_ID,
				KIKCD_B_CODE,
				IS_DEFAULT,
				CREATED_AT
			) VALUES (
				IN_SITE_ID,
				IN_SIGUNGU_CODE,
				IN_DEFAULT,
				IN_REG_DT
			);
			SET rtn_val = ROW_COUNT();
		ELSE
			SET rtn_val = 0;
		END IF;
    ELSE
		SET rtn_val = 0;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_site_wste_discharge_order_to_db`(
	IN IN_REF_DATE					DATETIME,			/*입력값 : 입찰 스케줄을 계산할 기준날짜*/
	IN IN_BIDDING_END_AT			DATETIME,			/*입력값 : 입찰종료일자*/
	IN IN_MAX_BIDDING_DURATION		INT,				/*입력값 : 입찰최대기간*/
	IN IN_CLOSE_AT					DATETIME,			/*입력값 : 배출종료일자*/
    OUT OUT_CLOSE_AT				DATETIME,			/*출력값 : 변경배출종료일*/
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_insert_site_wste_discharge_order_to_db
Input param 	: 4개
Output param 	: 3개
Job 			: 폐기물 배출 작업 ORDER를 작성(SITE_WSTE_DISPOSAL_ORDER)한다.
Update 			: 2022.02.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
     
	IF IN_BIDDING_END_AT <= DATE_ADD(IN_REF_DATE, INTERVAL IN_MAX_BIDDING_DURATION DAY) THEN
	/*입찰종료일이 정책적으로 결정된 기간 이내인 경우에는 정상처리한다.*/
		CALL sp_req_policy_direction(
			'min_disposal_duration',
			@min_disposal_duration
		);
		IF IN_CLOSE_AT IS NOT NULL THEN
		/*배출종료일이 결정된 경우*/
			IF IN_CLOSE_AT >= DATE_ADD(IN_BIDDING_END_AT, INTERVAL @min_disposal_duration DAY) THEN
			/*배출종료일이 정책적으로 결정된 기간 이후인 경우 정상처리한다.*/
			/*데이타베이스 입력처리를 시작한다.*/
				SET OUT_CLOSE_AT = IN_CLOSE_AT;
				SET rtn_val = 0;
				SET msg_txt = 'Success';
			ELSE
			/*배출종료일이 정책적으로 결정된 기간 이내인 경우에는 예외처리한다.*/
				SET rtn_val = 30801;
				SET msg_txt = CONCAT('The discharge end date must be ', @min_disposal_duration, ' days after the bidding deadline');
			END IF;
		ELSE
		/*배출종료일이 결정되지 않은 경우*/
			SET OUT_CLOSE_AT = DATE_ADD(IN_BIDDING_END_AT, INTERVAL @min_disposal_duration DAY);
			/*데이타베이스 입력처리를 시작한다.*/    
			SET rtn_val = 0;
			SET msg_txt = 'Success';                                    
		END IF;
	ELSE
	/*입찰종료일이 정책적으로 결정된 기간 이후인 경우에는 예외처리한다.*/
		SET rtn_val = 30802;
		SET msg_txt = CONCAT('The bidding end date must be within ', IN_MAX_BIDDING_DURATION, ' days from the bidding start date');
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_site_wste_discharge_order_to_table`(
	IN IN_USER_ID					BIGINT,						/*입력값 : 폐기물 배출 주체의 고유등록번호1(USERS.ID)*/
	IN IN_COLLECTOR_SITE_ID			BIGINT,						/*입력값 : 폐기물 수거자의 고유등록번호(COMP_SITE.ID)*/
	IN IN_DISPOSER_SITE_ID			BIGINT,						/*입력값 : 폐기물 배출 사이트의 고유등록번호(COMP_SITE.ID)*/
	IN IN_DISPOSER_TYPE				ENUM('person','company'),	/*입력값 : 폐기물 배출 주체의 종류*/
	IN IN_KIKCD_B_CODE				VARCHAR(10),				/*입력값 : 폐기물 배출지가 소재하는 소재지의 시군구코드(KIKCD_B.B_CODE)*/
	IN IN_ADDR						VARCHAR(200),				/*입력값 : 폐기물 배출지가 소재하는 소재지의 시군구 이하 상세주소*/
	IN IN_VISIT_START_AT			DATETIME,					/*입렦값 : 폐기물 배출지에서 요구하는 방문시작일로서 NULL인 경우에는 방문 불필요*/
	IN IN_VISIT_END_AT				DATETIME,					/*입력값 : 폐기물 배출지에서 요구하는 방문종료일로서 NULL인 경우에는 방문 불필요*/
	IN IN_BIDDING_END_AT			DATETIME,					/*입력값 : 폐기물 처리 용역 입찰 종료일*/
	IN IN_OPEN_AT					DATETIME,					/*입력값 : 폐기물 배출 시작일*/
	IN IN_CLOSE_AT					DATETIME,					/*입력값 : 폐기물 배출 종료일*/
	IN IN_WSTE_CLASS				JSON,						/*입력값 : 폐기물 배출지에서 배출되는 폐기물의 종류 리스트*/
	IN IN_PHOTO_LIST				JSON,						/*입력값 : 폐기물 배출지에서 배출되는 폐기물의 사진 리스트*/
	IN IN_NOTE						VARCHAR(255),				/*입력값 : 폐기물 배출시 요청사항*/
	IN IN_LAT						DECIMAL(12,9),				/*입렦값 : 폐기물 발생지 위도값*/
	IN IN_LNG						DECIMAL(12,9),				/*입렦값 : 폐기물 발생지 경도값*/
	IN IN_REG_DT					DATETIME,					/*입력값 : 등록일자*/
	OUT OUT_PUSH_INFO				JSON,						/*출력값 : 푸시정보*/
    OUT rtn_val						INT,						/*출력값 : 처리결과 반환값*/
    OUT msg_txt						VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE MAX_SELECTION_DURATION				VARCHAR(20)				DEFAULT NULL;
	DECLARE MAX_DISPOSAL_DURATION				VARCHAR(20)				DEFAULT NULL;
	DECLARE MIN_DISPOSAL_DURATION				VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_MAX_SELECT_AT					DATETIME				DEFAULT NULL;
	DECLARE VAR_MAX_SELECT2_AT					DATETIME				DEFAULT NULL;
	DECLARE VAR_COLLECTOR_MAX_DECISION_AT		DATETIME				DEFAULT NULL;
	DECLARE VAR_COLLECTOR_MAX_DECISION2_AT		DATETIME				DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_CLOSE_AT						DATETIME				DEFAULT NULL;
	DECLARE VAR_BCODE_EXISTS					TINYINT					DEFAULT NULL;
	DECLARE VAR_SERVICE_INSTRUCTION_ID			BIGINT					DEFAULT NULL;
	DECLARE VAR_DISPOSER_ORDER_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_ASK_DISPOSAL_END_AT				DATETIME				DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;

	CALL sp_req_policy_direction(
		'max_selection_duration',
		MAX_SELECTION_DURATION
	);
     
    SET VAR_MAX_SELECT_AT = ADDTIME(
							IN_BIDDING_END_AT, 
                            CONCAT(
								CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
                                ':00:00'
							)
						);
                        
    SET VAR_MAX_SELECT2_AT = ADDTIME(
							IN_BIDDING_END_AT, 
                            CONCAT(
								CAST(MAX_SELECTION_DURATION AS UNSIGNED)*2, 
                                ':00:00'
							)
						);
                        
	SET VAR_COLLECTOR_MAX_DECISION_AT = ADDTIME(
										VAR_MAX_SELECT_AT, 
                                        CONCAT(
											CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
                                            ':00:00'
                                        )
									);
                                    
	SET VAR_COLLECTOR_MAX_DECISION2_AT = ADDTIME(
										VAR_MAX_SELECT2_AT, 
                                        CONCAT(
											CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
                                            ':00:00'
                                        )
									);
/*
    SET VAR_MAX_SELECT_AT = IN_BIDDING_END_AT;
    SET VAR_MAX_SELECT2_AT = IN_BIDDING_END_AT;
	SET VAR_COLLECTOR_MAX_DECISION_AT = ADDTIME(VAR_MAX_SELECT_AT, CONCAT(CAST(MAX_SELECTION_DURATION AS UNSIGNED), ':00:00'));
	SET VAR_COLLECTOR_MAX_DECISION2_AT = ADDTIME(VAR_MAX_SELECT2_AT, CONCAT(CAST(MAX_SELECTION_DURATION AS UNSIGNED)*2, ':00:00'));
*/
    
    IF IN_COLLECTOR_SITE_ID = 0 THEN
		SET IN_COLLECTOR_SITE_ID = NULL;
    END IF;
    
    CALL sp_create_order_code(
		IN_REG_DT,
        VAR_ORDER_CODE
    );
    
	CALL sp_req_policy_direction(
		'max_disposal_duration',
		MAX_DISPOSAL_DURATION
	);
	IF IN_COLLECTOR_SITE_ID IS NULL THEN
		SET VAR_CLOSE_AT = DATE_ADD(IN_OPEN_AT, INTERVAL MAX_DISPOSAL_DURATION DAY);
	ELSE
		SET VAR_CLOSE_AT = IN_CLOSE_AT;
    END IF;
	/*기존거래인 경우에는 OPEN_AT(폐기물수거요청일)로부터 MAX_DISPOSAL_DURATION을 
    합산한 날짜를 계약종료일로 정하고 입찰거래인 경우에는 CLOSE_AT을 그대로 사용한다.*/
    
       
	CALL sp_check_if_bcode_valid(
		IN_KIKCD_B_CODE,
		VAR_BCODE_EXISTS
	);
	IF VAR_BCODE_EXISTS = 1 THEN
		INSERT INTO SITE_WSTE_DISPOSAL_ORDER(
			DISPOSER_ID,
			COLLECTOR_ID,
			SITE_ID,
			DISPOSER_TYPE,
			ACTIVE,
			VISIT_START_AT,
			VISIT_END_AT,
			BIDDING_END_AT,
			OPEN_AT,
			CLOSE_AT,
			SERVICE_INSTRUCTION_ID,
			ORDER_CODE,
			NOTE,
			CREATED_AT,
			UPDATED_AT,
			KIKCD_B_CODE,
			MAX_SELECT_AT,
			MAX_SELECT2_AT,
			LAT,
			LNG,
			ADDR,
			COLLECTOR_MAX_DECISION_AT,
			COLLECTOR_MAX_DECISION2_AT,
			CS_CONFIRMED
		) VALUES(
			IN_USER_ID,
			IN_COLLECTOR_SITE_ID,
			IN_DISPOSER_SITE_ID,
			IN_DISPOSER_TYPE,
			TRUE,
			IN_VISIT_START_AT,
			IN_VISIT_END_AT,
			IN_BIDDING_END_AT,
			IN_OPEN_AT,
			VAR_CLOSE_AT, 
			VAR_SERVICE_INSTRUCTION_ID,
			VAR_ORDER_CODE,
			IN_NOTE,
			IN_REG_DT,
			IN_REG_DT,
			IN_KIKCD_B_CODE,
			VAR_MAX_SELECT_AT,
			VAR_MAX_SELECT2_AT,
			IN_LAT,
			IN_LNG,
			IN_ADDR,
			VAR_COLLECTOR_MAX_DECISION_AT,
			VAR_COLLECTOR_MAX_DECISION2_AT,
            IF(IN_DISPOSER_SITE_ID = 0, TRUE, TRUE) /*<= 프론트에서 화면 완성되면 아래의 줄을 주석처리하고 해당 줄을 사용해야 함 2022.06.26*/
		);
		
		SELECT LAST_INSERT_ID() INTO VAR_DISPOSER_ORDER_ID;
		/*직전 INSERT 작업에서 AUTO INCREMENT로 생성된 최종 ID를 반환한다.*/
		
		IF ROW_COUNT() = 1 THEN
		/*자료 등록작업에 성공한 경우에는 후속작업을 정상진행한다.*/
			CALL sp_req_policy_direction(
				'min_disposal_duration',
				MIN_DISPOSAL_DURATION
			);
			/*SET VAR_ASK_DISPOSAL_END_AT = DATE_ADD(IN_OPEN_AT, INTERVAL MIN_DISPOSAL_DURATION DAY);*/
			IF IN_COLLECTOR_SITE_ID IS NULL THEN
			/*일반 입찰거래인 경우*/
				SET VAR_ASK_DISPOSAL_END_AT = NULL;		/*폐기물배출등록을 하는 경우에는 수거요청일을 결정하지 않기로 함 2022-03-25*/
			ELSE
			/*기존거래인 경우*/
				SET VAR_ASK_DISPOSAL_END_AT = IN_OPEN_AT;
			END IF;
            
			CALL sp_insert_clct_trmt_transaction(
				IN_USER_ID,
				VAR_DISPOSER_ORDER_ID,
				IN_COLLECTOR_SITE_ID,
				IN_VISIT_START_AT,
				IN_VISIT_END_AT,
				VAR_ASK_DISPOSAL_END_AT,
				rtn_val,
				msg_txt
			);
			IF rtn_val = 0 THEN
			/*폐기물배출작업 생성에 성공한 경우*/	
				SET rtn_val = NULL;	
				SET msg_txt = NULL;
				CALL sp_create_site_wste_discharged(
					VAR_DISPOSER_ORDER_ID,
					IN_REG_DT,
					IN_WSTE_CLASS,
					rtn_val,
					msg_txt
				);
				IF rtn_val = 0 THEN
				/*폐기물 종류 목록 등록에 성공한 경우*/
					SET rtn_val = NULL;	
					SET msg_txt = NULL;
					CALL sp_create_site_wste_photo_information(
					/*폐기물 사진을 등록한다.*/
						VAR_DISPOSER_ORDER_ID,
						NULL,
						IN_REG_DT,
						'입찰',
						IN_PHOTO_LIST,
						rtn_val,
						msg_txt
					);
					IF rtn_val = 0 THEN
					/*폐기물 사진 등록에 성공한 경우*/
						SET rtn_val = NULL;	
						SET msg_txt = NULL;
						IF IN_COLLECTOR_SITE_ID IS NULL THEN
						/*일반 입찰거래인 경우*/
							SET VAR_ASK_DISPOSAL_END_AT = NULL;		/*폐기물배출등록을 하는 경우에는 수거요청일을 결정하지 않기로 함 2022-03-25*/
							CALL sp_push_collector_list_share_business_areas(
								IN_USER_ID,
								VAR_DISPOSER_ORDER_ID,
								IN_KIKCD_B_CODE,
								1,
								VAR_PUSH_INFO,
								rtn_val,
								msg_txt
							);
						ELSE
						/*기존거래인 경우*/
							SET VAR_ASK_DISPOSAL_END_AT = IN_OPEN_AT;
							CALL sp_push_collector_dispose_new_wste_sub(
								IN_USER_ID,
								VAR_DISPOSER_ORDER_ID,
								IN_COLLECTOR_SITE_ID,
								28,
								VAR_PUSH_INFO,
								rtn_val,
								msg_txt
							);
						END IF;
						SET OUT_PUSH_INFO = VAR_PUSH_INFO;
					END IF;
				END IF;
			END IF;
		ELSE
		/*자료 등록작업에 실패한 경우에는 예외처리한다.*/
			SET rtn_val = 30901;
			SET msg_txt = 'Failed to enter waste discharge data';
		END IF;
	ELSE
		SET rtn_val = 30902;
		SET msg_txt = 'b_code not valid';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_site_wste_discharge_order_to_table_TEST`(
	IN IN_USER_ID					BIGINT,						/*입력값 : 폐기물 배출 주체의 고유등록번호1(USERS.ID)*/
	IN IN_COLLECTOR_SITE_ID			BIGINT,						/*입력값 : 폐기물 수거자의 고유등록번호(COMP_SITE.ID)*/
	IN IN_DISPOSER_SITE_ID			BIGINT,						/*입력값 : 폐기물 배출 사이트의 고유등록번호(COMP_SITE.ID)*/
	IN IN_DISPOSER_TYPE				ENUM('person','company'),	/*입력값 : 폐기물 배출 주체의 종류*/
	IN IN_KIKCD_B_CODE				VARCHAR(10),				/*입력값 : 폐기물 배출지가 소재하는 소재지의 시군구코드(KIKCD_B.B_CODE)*/
	IN IN_ADDR						VARCHAR(200),				/*입력값 : 폐기물 배출지가 소재하는 소재지의 시군구 이하 상세주소*/
	IN IN_VISIT_START_AT			DATETIME,					/*입렦값 : 폐기물 배출지에서 요구하는 방문시작일로서 NULL인 경우에는 방문 불필요*/
	IN IN_VISIT_END_AT				DATETIME,					/*입력값 : 폐기물 배출지에서 요구하는 방문종료일로서 NULL인 경우에는 방문 불필요*/
	IN IN_BIDDING_END_AT			DATETIME,					/*입력값 : 폐기물 처리 용역 입찰 종료일*/
	IN IN_OPEN_AT					DATETIME,					/*입력값 : 폐기물 배출 시작일*/
	IN IN_CLOSE_AT					DATETIME,					/*입력값 : 폐기물 배출 종료일*/
	IN IN_WSTE_CLASS				JSON,						/*입력값 : 폐기물 배출지에서 배출되는 폐기물의 종류 리스트*/
	IN IN_PHOTO_LIST				JSON,						/*입력값 : 폐기물 배출지에서 배출되는 폐기물의 사진 리스트*/
	IN IN_NOTE						VARCHAR(255),				/*입력값 : 폐기물 배출시 요청사항*/
	IN IN_LAT						DECIMAL(12,9),				/*입렦값 : 폐기물 발생지 위도값*/
	IN IN_LNG						DECIMAL(12,9),				/*입렦값 : 폐기물 발생지 경도값*/
	IN IN_REG_DT					DATETIME,					/*입력값 : 등록일자*/
	OUT OUT_PUSH_INFO				JSON,						/*출력값 : 푸시정보*/
    OUT rtn_val 					INT,						/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN

	CALL sp_req_policy_direction(
		'max_selection_duration',
		@max_selection_duration
	);
     
    SET @MAX_SELECT_AT = ADDTIME(
							IN_BIDDING_END_AT, 
                            CONCAT(
								CAST(@max_selection_duration AS UNSIGNED), 
                                ':00:00'
							)
						);
                        
    SET @MAX_SELECT2_AT = ADDTIME(
							IN_BIDDING_END_AT, 
                            CONCAT(
								CAST(@max_selection_duration AS UNSIGNED)*2, 
                                ':00:00'
							)
						);
                        
	SET @COLLECTOR_MAX_DECISION_AT = ADDTIME(
										@MAX_SELECT_AT, 
                                        CONCAT(
											CAST(@max_selection_duration AS UNSIGNED), 
                                            ':00:00'
                                        )
									);
                                    
	SET @COLLECTOR_MAX_DECISION2_AT = ADDTIME(
										@MAX_SELECT2_AT, 
                                        CONCAT(
											CAST(@max_selection_duration AS UNSIGNED), 
                                            ':00:00'
                                        )
									);
/*
    SET @MAX_SELECT_AT = IN_BIDDING_END_AT;
    SET @MAX_SELECT2_AT = IN_BIDDING_END_AT;
	SET @COLLECTOR_MAX_DECISION_AT = ADDTIME(@MAX_SELECT_AT, CONCAT(CAST(@max_selection_duration AS UNSIGNED), ':00:00'));
	SET @COLLECTOR_MAX_DECISION2_AT = ADDTIME(@MAX_SELECT2_AT, CONCAT(CAST(@max_selection_duration AS UNSIGNED)*2, ':00:00'));
*/
    
    CALL sp_create_order_code(
		IN_REG_DT,
        @ORDER_CODE
    );
    
	CALL sp_req_policy_direction(
		'max_disposal_duration',
		@max_disposal_duration
	);
	IF IN_COLLECTOR_SITE_ID IS NULL THEN
		SET @CLOSE_AT = DATE_ADD(IN_OPEN_AT, INTERVAL @max_disposal_duration DAY);
	ELSE
		SET @CLOSE_AT = IN_CLOSE_AT;
    END IF;
	/*기존거래인 경우에는 OPEN_AT(폐기물수거요청일)로부터 @max_disposal_duration을 
    합산한 날짜를 계약종료일로 정하고 입찰거래인 경우에는 CLOSE_AT을 그대로 사용한다.*/
    
    IF IN_COLLECTOR_SITE_ID = 0 THEN
		SET IN_COLLECTOR_SITE_ID = NULL;
    END IF;
    
       
	CALL sp_check_if_bcode_valid(
		IN_KIKCD_B_CODE,
		@BCODE_EXISTS
	);
	IF @BCODE_EXISTS = 1 THEN
		INSERT INTO SITE_WSTE_DISPOSAL_ORDER(
			DISPOSER_ID,
			COLLECTOR_ID,
			SITE_ID,
			DISPOSER_TYPE,
			ACTIVE,
			VISIT_START_AT,
			VISIT_END_AT,
			BIDDING_END_AT,
			OPEN_AT,
			CLOSE_AT,
			SERVICE_INSTRUCTION_ID,
			ORDER_CODE,
			NOTE,
			CREATED_AT,
			UPDATED_AT,
			KIKCD_B_CODE,
			MAX_SELECT_AT,
			MAX_SELECT2_AT,
			LAT,
			LNG,
			ADDR,
			COLLECTOR_MAX_DECISION_AT,
			COLLECTOR_MAX_DECISION2_AT
		) VALUES(
			IN_USER_ID,
			IN_COLLECTOR_SITE_ID,
			IN_DISPOSER_SITE_ID,
			IN_DISPOSER_TYPE,
			TRUE,
			IN_VISIT_START_AT,
			IN_VISIT_END_AT,
			IN_BIDDING_END_AT,
			IN_OPEN_AT,
			@CLOSE_AT, 
			@SERVICE_INSTRUCTION_ID,
			@ORDER_CODE,
			IN_NOTE,
			IN_REG_DT,
			IN_REG_DT,
			IN_KIKCD_B_CODE,
			@MAX_SELECT_AT,
			@MAX_SELECT2_AT,
			IN_LAT,
			IN_LNG,
			IN_ADDR,
			@COLLECTOR_MAX_DECISION_AT,
			@COLLECTOR_MAX_DECISION2_AT
		);
		
		SELECT LAST_INSERT_ID() INTO @WSTE_DISPOSAL_ORDER_ID;
		/*직전 INSERT 작업에서 AUTO INCREMENT로 생성된 최종 ID를 반환한다.*/
		
		IF ROW_COUNT() = 1 THEN
		/*자료 등록작업에 성공한 경우에는 후속작업을 정상진행한다.*/
			CALL sp_req_policy_direction(
				'min_disposal_duration',
				@min_disposal_duration
			);
			/*SET @ASK_DISPOSAL_END_AT = DATE_ADD(IN_OPEN_AT, INTERVAL @min_disposal_duration DAY);*/
			IF IN_COLLECTOR_SITE_ID IS NULL THEN
			/*일반 입찰거래인 경우*/
				SET @ASK_DISPOSAL_END_AT = NULL;		/*폐기물배출등록을 하는 경우에는 수거요청일을 결정하지 않기로 함 2022-03-25*/
			ELSE
			/*기존거래인 경우*/
				SET @ASK_DISPOSAL_END_AT = IN_OPEN_AT;
			END IF;
			SET OUT_PUSH_INFO = @PUSH_INFO;
			CALL sp_insert_clct_trmt_transaction(
				IN_USER_ID,
				@WSTE_DISPOSAL_ORDER_ID,
				IN_COLLECTOR_SITE_ID,
				IN_VISIT_START_AT,
				IN_VISIT_END_AT,
				@ASK_DISPOSAL_END_AT,
				@rtn_val,
				@msg_txt
			);
			IF @rtn_val = 0 THEN
			/*폐기물배출작업 생성에 성공한 경우*/			
				CALL sp_create_site_wste_discharged(
					@WSTE_DISPOSAL_ORDER_ID,
					IN_REG_DT,
					IN_WSTE_CLASS,
					@rtn_val,
					@msg_txt
				);
				IF @rtn_val = 0 THEN
				/*폐기물 종류 목록 등록에 성공한 경우*/
					CALL sp_create_site_wste_photo_information(
					/*폐기물 사진을 등록한다.*/
						@WSTE_DISPOSAL_ORDER_ID,
						NULL,
						IN_REG_DT,
						'입찰',
						IN_PHOTO_LIST,
						@rtn_val,
						@msg_txt
					);
					IF @rtn_val = 0 THEN
					/*폐기물 사진 등록에 성공한 경우*/
						IF IN_COLLECTOR_SITE_ID IS NULL THEN
						/*일반 입찰거래인 경우*/
							SET @ASK_DISPOSAL_END_AT = NULL;		/*폐기물배출등록을 하는 경우에는 수거요청일을 결정하지 않기로 함 2022-03-25*/
							CALL sp_push_collector_list_share_business_areas(
								IN_USER_ID,
								@WSTE_DISPOSAL_ORDER_ID,
								IN_KIKCD_B_CODE,
								1,
								@PUSH_INFO,
								@rtn_val,
								@msg_txt
							);                 
						ELSE
						/*기존거래인 경우*/
							SET @ASK_DISPOSAL_END_AT = IN_OPEN_AT;
							CALL sp_push_collector_dispose_new_wste(
								IN_USER_ID,
								@WSTE_DISPOSAL_ORDER_ID,
								IN_COLLECTOR_SITE_ID,
								28,
								@PUSH_INFO,
								@rtn_val,
								@msg_txt
							);
						END IF;
						SET OUT_PUSH_INFO = @PUSH_INFO;
						SET rtn_val = @rtn_val;
						SET msg_txt = @msg_txt;
					ELSE
					/*폐기물 사진 등록에 실패한 경우 예외처리한다.*/
						SET rtn_val = @rtn_val;
						SET msg_txt = @msg_txt;
					END IF;
				ELSE
				/*폐기물 종류 목록 등록에 실패한 경우 예외처리한다.*/
					SET rtn_val = @rtn_val;
					SET msg_txt = @msg_txt;
				END IF;
			ELSE
			/*폐기물배출작업 생성에 실패한 경우 예외처리한다.*/
				SET rtn_val = @rtn_val;
				SET msg_txt = @msg_txt;
			END IF;
		ELSE
		/*자료 등록작업에 실패한 경우에는 예외처리한다.*/
			SET rtn_val = 30901;
			SET msg_txt = 'Failed to enter waste discharge data';
		END IF;
	ELSE
		SET rtn_val = 30902;
		SET msg_txt = 'b_code not valid';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_site_wste_discharge_order_without_handler`(
	IN IN_USER_ID					BIGINT,						/*입력값 : 폐기물 배출 주체의 고유등록번호(USERS.ID)*/
	IN IN_COLLECTOR_SITE_ID			BIGINT,						/*입력값 : 폐기물 수거자의 고유등록번호(COMP_SITE.ID)*/
	IN IN_DISPOSER_SITE_ID			BIGINT,						/*입력값 : 폐기물 배출 사이트의 고유등록번호(COMP_SITE.ID)*/
	IN IN_DISPOSER_TYPE				ENUM('person','company'),	/*입력값 : 폐기물 배출 주체의 종류*/
	IN IN_KIKCD_B_CODE				VARCHAR(10),				/*입력값 : 폐기물 배출지가 소재하는 소재지의 시군구코드(KIKCD_B.B_CODE)*/
	IN IN_ADDR						VARCHAR(200),				/*입력값 : 폐기물 배출지가 소재하는 소재지의 시군구 이하 상세주소*/
	IN IN_VISIT_START_AT			DATETIME,					/*입렦값 : 폐기물 배출지에서 요구하는 방문시작일로서 NULL인 경우에는 방문 불필요*/
	IN IN_VISIT_END_AT				DATETIME,					/*입력값 : 폐기물 배출지에서 요구하는 방문종료일로서 NULL인 경우에는 방문 불필요*/
	IN IN_BIDDING_END_AT			DATETIME,					/*입력값 : 폐기물 처리 용역 입찰 종료일*/
	IN IN_OPEN_AT					DATETIME,					/*입력값 : 폐기물 배출 시작일*/
	IN IN_CLOSE_AT					DATETIME,					/*입력값 : 폐기물 배출 종료일*/
	IN IN_WSTE_CLASS				JSON,						/*입력값 : 폐기물 배출지에서 배출되는 폐기물의 종류 리스트*/
	IN IN_PHOTO_LIST				JSON,						/*입력값 : 폐기물 배출지에서 배출되는 폐기물의 사진 리스트*/
	IN IN_NOTE						VARCHAR(255),				/*입력값 : 폐기물 배출시 요청사항*/
	IN IN_LAT						DECIMAL(12,9),				/*입렦값 : 폐기물 발생지 위도값*/
	IN IN_LNG						DECIMAL(12,9),				/*입렦값 : 폐기물 발생지 경도값*/
	IN IN_REG_DT					DATETIME,					/*입력값 : 등록일자*/
	OUT OUT_PUSH_INFO				JSON,						/*출력값 : 푸시정보*/
    OUT rtn_val 					INT,						/*출력값 : 처리결과 반환값*/
    OUT msg_txt						VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_insert_site_wste_discharge_order_without_handler
Input param 	: 14개
Output param 	: 2개
Job 			: 폐기물 배출 작업 ORDER를 작성(SITE_WSTE_DISPOSAL_ORDER)한다.
Update 			: 2022.02.18
Version			: 0.0.7
AUTHOR 			: Leo Nam
Change			: 폐기물 배출 사이트의 고유등록번호도 저장하게 됨으로써 입력값으로 IN_DISPOSER_SITE_ID 받아서 테이블에 입력한다.
				: 폐기물 배출작업 생성 기능 추가(0.0.4)
				: sp_create_site_wste_photo_information에 IN_CLASS_CODE입력 추가(0.0.5)
				: VISIT_START_AT 칼럼 추가(0.0.6)
				: 입찰스케줄에 대한 로직 추가(0.0.7)
*/
	DECLARE VAR_SITE_ID							BIGINT					DEFAULT NULL;
	DECLARE VAR_SERVICE_INSTRUCTION_ID			BIGINT					DEFAULT NULL;
	DECLARE MAX_VISIT_START						VARCHAR(20)				DEFAULT NULL;
	DECLARE MAX_VISIT_DURATION					VARCHAR(20)				DEFAULT NULL;
	DECLARE MAX_BIDDING_DURATION				VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_CLOSE_AT						DATETIME				DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
	DECLARE VAR_REF_DATE						DATETIME				DEFAULT NULL;
	DECLARE VAR_VISIT_END_AT					DATETIME				DEFAULT NULL;
     
	IF IN_DISPOSER_TYPE = 'company' THEN
	/*배출자가 사업자인 경우에는 사업자가 사용하는 작업지시서를 가져온다. 작업지시서가 없으면 NULL값을 반환한다.*/
		CALL sp_req_service_instruction_id_of_site(
			VAR_SITE_ID,
			VAR_SERVICE_INSTRUCTION_ID
		);
	END IF;
        
    IF IN_VISIT_START_AT IS NOT NULL THEN
    /*방문 시작일이 결정된 경우*/
		IF IN_VISIT_START_AT = DATE(IN_REG_DT) THEN
        /*방문시작일이 시간이 지정되지 않은 신청당일인 경우에는 신청일시를 방문시작일시로 정한다.*/
			SET IN_VISIT_START_AT = IN_REG_DT;
        END IF;
		IF IN_VISIT_START_AT >= IN_REG_DT THEN
        /*방문시작일이 입찰등록일 이후인 경우에는 정상처리한다.*/
			CALL sp_req_policy_direction(
				'max_visit_start',
                MAX_VISIT_START
            );
            /*IF IN_VISIT_START_AT <= ADDTIME(IN_REG_DT, CONCAT(CAST(MAX_VISIT_START AS UNSIGNED)*24, ':00:00')) THEN*/
            IF IN_VISIT_START_AT <= DATE_ADD(IN_REG_DT, INTERVAL CAST(MAX_VISIT_START AS UNSIGNED) DAY) THEN
            /*방문시작일이 정책적으로 결정된 기간 이내인 경우에는 정상처리한다.*/
				IF IN_VISIT_END_AT IS NOT NULL THEN
                /*방문종료일이 결정된 경우*/
					IF IN_VISIT_END_AT >= IN_VISIT_START_AT THEN
					/*방문종료일이 방문시작일 이후인 경우에는 정상처리한다.*/
						CALL sp_req_policy_direction(
							'max_visit_duration',
							MAX_VISIT_DURATION
						);
						/*IF IN_VISIT_END_AT <= ADDTIME(IN_VISIT_START_AT, CONCAT(CAST(MAX_VISIT_DURATION AS UNSIGNED)*24, ':00:00')) THEN*/
						IF IN_VISIT_END_AT <= DATE_ADD(IN_VISIT_START_AT, INTERVAL CAST(MAX_VISIT_DURATION AS UNSIGNED) DAY) THEN
						/*방문종료일이 정책적으로 결정된 기간 이내인 경우에는 정상처리한다.*/
							IF IN_OPEN_AT IS NULL THEN
								SET IN_OPEN_AT = IN_REG_DT;
							END IF;
							IF IN_BIDDING_END_AT IS NOT NULL THEN
                            /*입찰종료일을 입력한 경우에는 정상처리한다.*/
								CALL sp_req_policy_direction(
									'max_bidding_duration',
									MAX_BIDDING_DURATION
								);     
								CALL sp_set_bidding_schedule(
									IN_VISIT_END_AT,
									IN_BIDDING_END_AT,
									CAST(MAX_BIDDING_DURATION AS UNSIGNED),
									IN_OPEN_AT,
									IN_CLOSE_AT,
									IN_OPEN_AT,
									VAR_CLOSE_AT,
									rtn_val,
									msg_txt
								);
                                IF rtn_val = 0 THEN
									SET rtn_val = NULL;
									SET msg_txt = NULL;
                                /*프로시저 처리가 성공한 경우*/
									CALL sp_insert_site_wste_discharge_order_to_table(
										IN_USER_ID,
										IN_COLLECTOR_SITE_ID,
										IN_DISPOSER_SITE_ID,
										IN_DISPOSER_TYPE,
										IN_KIKCD_B_CODE,
										IN_ADDR,
										IN_VISIT_START_AT,
										IN_VISIT_END_AT,
										IN_BIDDING_END_AT,
										IN_OPEN_AT,
										VAR_CLOSE_AT,
										IN_WSTE_CLASS,
										IN_PHOTO_LIST,
										IN_NOTE,
										IN_LAT,
										IN_LNG,
										IN_REG_DT,
										VAR_PUSH_INFO,
										rtn_val,
										msg_txt
                                    );
                                    IF rtn_val = 0 THEN
                                    /*데이타 입력작업에 성공한 경우*/
										SET rtn_val = rtn_val;
										SET msg_txt = msg_txt;
										SET OUT_PUSH_INFO = VAR_PUSH_INFO;
                                    END IF;
                                END IF;
                            ELSE
                            /*입찰종료일을 입력하지 않은 경우에는 예외처리한다.*/
								SET rtn_val = 23007;
								SET msg_txt = CONCAT('No bid end date entered');
                            END IF;
						ELSE
						/*방문종료일이 정책적으로 결정된 기간 이후인 경우에는 예외처리한다.*/
							SET rtn_val = 23006;
							SET msg_txt = CONCAT('The end date of the visit must be within ', MAX_VISIT_DURATION, ' days from the date of the start of the visit');
						END IF;
					ELSE
					/*방문종료일이 방문시작일 이전인 경우에는 예외처리한다.*/
						SET rtn_val = 23005;
						SET msg_txt = CONCAT('The end date of the visit must be after the start date of the visit, ', IN_VISIT_END_AT, ', ', IN_VISIT_START_AT, ', ', IF(IN_VISIT_END_AT >= IN_VISIT_START_AT, 1, 0));
					END IF;
                ELSE
                /*방문종료일이 결정되지 않은 경우*/
					SET rtn_val = 23004;
					SET msg_txt = 'Visit end date not entered';
                END IF;   
            ELSE
            /*방문시작일이 정책적으로 결정된 기간 이후인 경우에는 예외처리한다.*/
				SET rtn_val = 23003;
				SET msg_txt = CONCAT('The start date of the visit must be within ', MAX_VISIT_START, ' days from the date of registration of the bid');
            END IF;
        ELSE
        /*방문시작일이 현재 시점보다 과거인 경우에는 예외처리한다.*/
			SET rtn_val = 23002;
			SET msg_txt = 'The start date of the visit must be after the bid registration date';
        END IF;
    ELSE
    /*방문 시작일이 지정되지 않은 경우*/
		IF IN_VISIT_END_AT IS NOT NULL THEN
		/*방문종료일이 결정된 경우*/
			SET VAR_REF_DATE = IN_VISIT_END_AT;
            SET VAR_VISIT_END_AT = IN_VISIT_END_AT;
		ELSE
		/*방문종료일이 결정되지 않은 경우*/
			SET VAR_REF_DATE = IN_REG_DT;
            SET VAR_VISIT_END_AT = NULL;
		END IF;    
        
		IF IN_BIDDING_END_AT IS NOT NULL THEN
		/*입찰종료일을 입력한 경우에는 정상처리한다.*/
			CALL sp_req_policy_direction(
				'max_bidding_duration',
				MAX_BIDDING_DURATION
			);            
            CALL sp_set_bidding_schedule(
				VAR_REF_DATE,
				IN_BIDDING_END_AT,
				CAST(MAX_BIDDING_DURATION AS UNSIGNED),
				IN_OPEN_AT,
				IN_CLOSE_AT,
				IN_OPEN_AT,
				VAR_CLOSE_AT,
				rtn_val,
				msg_txt
            );
			IF rtn_val = 0 THEN
			/*프로시저 처리가 성공한 경우*/
				SET rtn_val = NULL;
				SET msg_txt = NULL;
				CALL sp_insert_site_wste_discharge_order_to_table(
					IN_USER_ID,
					IN_COLLECTOR_SITE_ID,
					IN_DISPOSER_SITE_ID,
					IN_DISPOSER_TYPE,
					IN_KIKCD_B_CODE,
					IN_ADDR,
					IN_VISIT_START_AT,
					VAR_VISIT_END_AT,
					IN_BIDDING_END_AT,
					IN_OPEN_AT,
					VAR_CLOSE_AT,
					IN_WSTE_CLASS,
					IN_PHOTO_LIST,
					IN_NOTE,
					IN_LAT,
					IN_LNG,
					IN_REG_DT,
					VAR_PUSH_INFO,
					rtn_val,
					msg_txt
				);
				IF rtn_val = 0 THEN
				/*데이타 입력작업에 성공한 경우*/
					SET OUT_PUSH_INFO = VAR_PUSH_INFO;
				END IF;
			END IF;
		ELSE
		/*입찰종료일을 입력하지 않은 경우에는 예외처리한다.*/
			SET rtn_val = 23001;
			SET msg_txt = CONCAT('No bid end date entered');
		END IF;
	END IF;   
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_site_wste_discharge_order_without_handler_TEST`(
	IN IN_USER_ID					BIGINT,						/*입력값 : 폐기물 배출 주체의 고유등록번호(USERS.ID)*/
	IN IN_COLLECTOR_SITE_ID			BIGINT,						/*입력값 : 폐기물 수거자의 고유등록번호(COMP_SITE.ID)*/
	IN IN_DISPOSER_SITE_ID			BIGINT,						/*입력값 : 폐기물 배출 사이트의 고유등록번호(COMP_SITE.ID)*/
	IN IN_DISPOSER_TYPE				ENUM('person','company'),	/*입력값 : 폐기물 배출 주체의 종류*/
	IN IN_KIKCD_B_CODE				VARCHAR(10),				/*입력값 : 폐기물 배출지가 소재하는 소재지의 시군구코드(KIKCD_B.B_CODE)*/
	IN IN_ADDR						VARCHAR(200),				/*입력값 : 폐기물 배출지가 소재하는 소재지의 시군구 이하 상세주소*/
	IN IN_VISIT_START_AT			DATETIME,					/*입렦값 : 폐기물 배출지에서 요구하는 방문시작일로서 NULL인 경우에는 방문 불필요*/
	IN IN_VISIT_END_AT				DATETIME,					/*입력값 : 폐기물 배출지에서 요구하는 방문종료일로서 NULL인 경우에는 방문 불필요*/
	IN IN_BIDDING_END_AT			DATETIME,					/*입력값 : 폐기물 처리 용역 입찰 종료일*/
	IN IN_OPEN_AT					DATETIME,					/*입력값 : 폐기물 배출 시작일*/
	IN IN_CLOSE_AT					DATETIME,					/*입력값 : 폐기물 배출 종료일*/
	IN IN_WSTE_CLASS				JSON,						/*입력값 : 폐기물 배출지에서 배출되는 폐기물의 종류 리스트*/
	IN IN_PHOTO_LIST				JSON,						/*입력값 : 폐기물 배출지에서 배출되는 폐기물의 사진 리스트*/
	IN IN_NOTE						VARCHAR(255),				/*입력값 : 폐기물 배출시 요청사항*/
	IN IN_LAT						DECIMAL(12,9),				/*입렦값 : 폐기물 발생지 위도값*/
	IN IN_LNG						DECIMAL(12,9),				/*입렦값 : 폐기물 발생지 경도값*/
	IN IN_REG_DT					DATETIME,					/*입력값 : 등록일자*/
	OUT OUT_PUSH_INFO				JSON,						/*출력값 : 푸시정보*/
    OUT rtn_val 					INT,						/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_insert_site_wste_discharge_order_without_handler
Input param 	: 14개
Output param 	: 2개
Job 			: 폐기물 배출 작업 ORDER를 작성(SITE_WSTE_DISPOSAL_ORDER)한다.
Update 			: 2022.02.18
Version			: 0.0.7
AUTHOR 			: Leo Nam
Change			: 폐기물 배출 사이트의 고유등록번호도 저장하게 됨으로써 입력값으로 IN_DISPOSER_SITE_ID 받아서 테이블에 입력한다.
				: 폐기물 배출작업 생성 기능 추가(0.0.4)
				: sp_create_site_wste_photo_information에 IN_CLASS_CODE입력 추가(0.0.5)
				: VISIT_START_AT 칼럼 추가(0.0.6)
				: 입찰스케줄에 대한 로직 추가(0.0.7)
*/
     
	IF IN_DISPOSER_TYPE = 'company' THEN
	/*배출자가 사업자인 경우에는 사업자가 사용하는 작업지시서를 가져온다. 작업지시서가 없으면 NULL값을 반환한다.*/
		CALL sp_req_service_instruction_id_of_site(
			@SITE_ID,
			@SERVICE_INSTRUCTION_ID
		);
	END IF;
        
    IF IN_VISIT_START_AT IS NOT NULL THEN
    /*방문 시작일이 결정된 경우*/
		IF IN_VISIT_START_AT = DATE(IN_REG_DT) THEN
        /*방문시작일이 시간이 지정되지 않은 신청당일인 경우에는 신청일시를 방문시작일시로 정한다.*/
			SET IN_VISIT_START_AT = IN_REG_DT;
        END IF;
		IF IN_VISIT_START_AT >= IN_REG_DT THEN
        /*방문시작일이 입찰등록일 이후인 경우에는 정상처리한다.*/
			CALL sp_req_policy_direction(
				'max_visit_start',
                @max_visit_start
            );
            /*IF IN_VISIT_START_AT <= ADDTIME(IN_REG_DT, CONCAT(CAST(@max_visit_start AS UNSIGNED)*24, ':00:00')) THEN*/
            IF IN_VISIT_START_AT <= DATE_ADD(IN_REG_DT, INTERVAL @max_visit_start DAY) THEN
            /*방문시작일이 정책적으로 결정된 기간 이내인 경우에는 정상처리한다.*/
				IF IN_VISIT_END_AT IS NOT NULL THEN
                /*방문종료일이 결정된 경우*/
					IF IN_VISIT_END_AT >= IN_VISIT_START_AT THEN
					/*방문종료일이 방문시작일 이후인 경우에는 정상처리한다.*/
						CALL sp_req_policy_direction(
							'max_visit_duration',
							@max_visit_duration
						);
						/*IF IN_VISIT_END_AT <= ADDTIME(IN_VISIT_START_AT, CONCAT(CAST(@max_visit_duration AS UNSIGNED)*24, ':00:00')) THEN*/
						IF IN_VISIT_END_AT <= DATE_ADD(IN_VISIT_START_AT, INTERVAL @max_visit_duration DAY) THEN
						/*방문종료일이 정책적으로 결정된 기간 이내인 경우에는 정상처리한다.*/
							IF IN_OPEN_AT IS NULL THEN
								SET IN_OPEN_AT = IN_REG_DT;
							END IF;
							IF IN_BIDDING_END_AT IS NOT NULL THEN
                            /*입찰종료일을 입력한 경우에는 정상처리한다.*/
								CALL sp_req_policy_direction(
									'max_bidding_duration',
									@max_bidding_duration
								);     
								CALL sp_set_bidding_schedule(
									IN_VISIT_END_AT,
									IN_BIDDING_END_AT,
									CAST(@max_bidding_duration AS UNSIGNED),
									IN_OPEN_AT,
									IN_CLOSE_AT,
									IN_OPEN_AT,
									@CLOSE_AT,
									@rtn_val,
									@msg_txt
								);
                                IF @rtn_val = 0 THEN
                                /*프로시저 처리가 성공한 경우*/
									CALL sp_insert_site_wste_discharge_order_to_table_TEST(
										IN_USER_ID,
										IN_COLLECTOR_SITE_ID,
										IN_DISPOSER_SITE_ID,
										IN_DISPOSER_TYPE,
										IN_KIKCD_B_CODE,
										IN_ADDR,
										IN_VISIT_START_AT,
										IN_VISIT_END_AT,
										IN_BIDDING_END_AT,
										IN_OPEN_AT,
										@CLOSE_AT,
										IN_WSTE_CLASS,
										IN_PHOTO_LIST,
										IN_NOTE,
										IN_LAT,
										IN_LNG,
										IN_REG_DT,
										@PUSH_INFO,
										@rtn_val,
										@msg_txt
                                    );
                                    IF @rtn_val = 0 THEN
                                    /*데이타 입력작업에 성공한 경우*/
										SET OUT_PUSH_INFO = @PUSH_INFO;
										SET rtn_val = 0;
										SET msg_txt = 'Success';
                                    ELSE
                                    /*데이타 입력작업에 실패한 경우*/
										SET rtn_val = @rtn_val;
										SET msg_txt = @msg_txt;
                                    END IF;
                                ELSE
                                /*프로시저 처리가 실패한 경우 예외처리한다.*/
									SET rtn_val = @rtn_val;
									SET msg_txt = @msg_txt;
                                END IF;
                            ELSE
                            /*입찰종료일을 입력하지 않은 경우에는 예외처리한다.*/
								SET rtn_val = 23007;
								SET msg_txt = CONCAT('No bid end date entered');
                            END IF;
						ELSE
						/*방문종료일이 정책적으로 결정된 기간 이후인 경우에는 예외처리한다.*/
							SET rtn_val = 23006;
							SET msg_txt = CONCAT('The end date of the visit must be within ', @max_visit_duration, ' days from the date of the start of the visit');
						END IF;
					ELSE
					/*방문종료일이 방문시작일 이전인 경우에는 예외처리한다.*/
						SET rtn_val = 23005;
						SET msg_txt = CONCAT('The end date of the visit must be after the start date of the visit, ', IN_VISIT_END_AT, ', ', IN_VISIT_START_AT, ', ', IF(IN_VISIT_END_AT >= IN_VISIT_START_AT, 1, 0));
					END IF;
                ELSE
                /*방문종료일이 결정되지 않은 경우*/
					SET rtn_val = 23004;
					SET msg_txt = 'Visit end date not entered';
                END IF;   
            ELSE
            /*방문시작일이 정책적으로 결정된 기간 이후인 경우에는 예외처리한다.*/
				SET rtn_val = 23003;
				SET msg_txt = CONCAT('The start date of the visit must be within ', @max_visit_start, ' days from the date of registration of the bid');
            END IF;
        ELSE
        /*방문시작일이 현재 시점보다 과거인 경우에는 예외처리한다.*/
			SET rtn_val = 23002;
			SET msg_txt = 'The start date of the visit must be after the bid registration date';
        END IF;
    ELSE
    /*방문 시작일이 지정되지 않은 경우*/
		IF IN_VISIT_END_AT IS NOT NULL THEN
		/*방문종료일이 결정된 경우*/
			SET @REF_DATE = IN_VISIT_END_AT;
            SET @VISIT_END_AT = IN_VISIT_END_AT;
		ELSE
		/*방문종료일이 결정되지 않은 경우*/
			SET @REF_DATE = IN_REG_DT;
            SET @VISIT_END_AT = NULL;
		END IF;    
        
		IF IN_BIDDING_END_AT IS NOT NULL THEN
		/*입찰종료일을 입력한 경우에는 정상처리한다.*/
			CALL sp_req_policy_direction(
				'max_bidding_duration',
				@max_bidding_duration
			);            
            CALL sp_set_bidding_schedule(
				@REF_DATE,
				IN_BIDDING_END_AT,
				CAST(@max_bidding_duration AS UNSIGNED),
				IN_OPEN_AT,
				IN_CLOSE_AT,
				IN_OPEN_AT,
				@CLOSE_AT,
				@rtn_val,
				@msg_txt
            );
			IF @rtn_val = 0 THEN
			/*프로시저 처리가 성공한 경우*/
				CALL sp_insert_site_wste_discharge_order_to_table_TEST(
					IN_USER_ID,
					IN_COLLECTOR_SITE_ID,
					IN_DISPOSER_SITE_ID,
					IN_DISPOSER_TYPE,
					IN_KIKCD_B_CODE,
					IN_ADDR,
					IN_VISIT_START_AT,
					@VISIT_END_AT,
					IN_BIDDING_END_AT,
					IN_OPEN_AT,
					@CLOSE_AT,
					IN_WSTE_CLASS,
					IN_PHOTO_LIST,
					IN_NOTE,
					IN_LAT,
					IN_LNG,
					IN_REG_DT,
					@PUSH_INFO,
					@rtn_val,
					@msg_txt
				);
				IF @rtn_val = 0 THEN
				/*데이타 입력작업에 성공한 경우*/
					SET OUT_PUSH_INFO = @PUSH_INFO;
					SET rtn_val = 0;
					SET msg_txt = 'Success';
				ELSE
				/*데이타 입력작업에 실패한 경우*/
					SET rtn_val = @rtn_val;
					SET msg_txt = @msg_txt;
				END IF;
			ELSE
			/*프로시저 처리가 실패한 경우 예외처리한다.*/
				SET rtn_val = @rtn_val;
				SET msg_txt = @msg_txt;
			END IF;
		ELSE
		/*입찰종료일을 입력하지 않은 경우에는 예외처리한다.*/
			SET rtn_val = 23001;
			SET msg_txt = CONCAT('No bid end date entered');
		END IF;
	END IF;   
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_user`(
	IN IN_USER_ID				BIGINT,
    IN IN_USER_REG_ID			VARCHAR(50),
    IN IN_PWD					VARCHAR(100),
    IN IN_USER_NAME				VARCHAR(20),
    IN IN_PHONE					VARCHAR(20),
    IN IN_BELONG_TO				BIGINT,
    IN IN_AFFILIATED_SITE		BIGINT,
    IN IN_CLASS					INT,
    IN IN_DEPARTMENT			VARCHAR(20),
    IN IN_SOCIAL_NO				VARCHAR(20),
    IN IN_AGREE_TERMS			TINYINT,
    IN IN_CREATED_AT			DATETIME,
    IN IN_UPDATED_AT			DATETIME,
    IN IN_USER_CURRENT_TYPE		INT,
    IN IN_CONTACT_PATH			INT,
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_insert_user
Input param 	: 11개
Output param 	: 2개
Job 			: 사용자 레코드를 생성한다.
Update 			: 2022.01.27
Version			: 0.0.4
AUTHOR 			: Leo Nam
Changes			: FCM, JWT 입력부분 삭제(0.0.4)
*/

	INSERT INTO USERS(
		ID, 
        USER_ID, 
        PWD, 
        USER_NAME, 
        PHONE, 
        BELONG_TO, 
        AFFILIATED_SITE, 
        CLASS, 
        DEPARTMENT, 
        SOCIAL_NO, 
        AGREEMENT_TERMS, 
        USER_CURRENT_TYPE, 
        CREATED_AT, 
        UPDATED_AT
    ) 
	VALUES(
		IN_USER_ID, 
        IN_USER_REG_ID, 
        IN_PWD, 
        IN_USER_NAME, 
        IN_PHONE, 
        IN_BELONG_TO, 
        IN_AFFILIATED_SITE, 
        IN_CLASS, 
        IN_DEPARTMENT, 
        IN_SOCIAL_NO, 
        IN_AGREE_TERMS, 
        IN_USER_CURRENT_TYPE, 
        IN_CREATED_AT, 
        IN_UPDATED_AT
    );
	
    IF ROW_COUNT() = 1 THEN
    /*사용자 레코드가 정상적으로 생성된 경우*/
		CALL sp_insert_member_contact_path(
			IN_USER_ID,
            IN_BELONG_TO,
            IN_CONTACT_PATH,
            rtn_val,
            msg_txt
        );
    ELSE
    /*사용자 레코드 생성에 실패한 경우*/
		SET rtn_val = 26001;
        SET msg_txt = 'Failed to create user';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_insert_wste_trmt_fctl_processing`(
	IN IN_REPORT_ID						BIGINT,
	IN IN_CATEGORY_ID					INT,
	IN IN_SUB_CATEGORY_INFO				JSON,	
	OUT rtn_val							INT,
    OUT msg_txt							VARCHAR(200)
)
BEGIN
	/*
    이 프로시저를 호출하기 위해서는 JSON_LENGTH(IN_SUB_CATEGORY_INFO) > 0인 조건이어야 함
    이 프로시저를 호출하는 부모 프로시저에서 위의 판단을 하도록 해야 함.
    */
    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;   
    DECLARE CUR_CAT_ID							INT;
    DECLARE CUR_CAT_VAL							INT;
    DECLARE VAR_REG_DT							DATETIME;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
    
	SELECT 
		CAT_ID, 
        CAT_VAL
    FROM JSON_TABLE(IN_SUB_CATEGORY_INFO, "$[*]" COLUMNS(
		CAT_ID 		BIGINT 		PATH "$.CAT_ID",
		CAT_VAL		BIGINT		PATH "$.CAT_VAL"
	)) AS PARAMS;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	SET rtn_val = 0;
	SET msg_txt = 'success';
    CALL sp_req_current_time(VAR_REG_DT);
    
    UPDATE TRANSACTION_REPORT
    SET 
		WSTE_FCTL_ID = IN_CATEGORY_ID,
        UPDATED_AT = VAR_REG_DT
    WHERE ID = IN_REPORT_ID;
    
    IF ROW_COUNT() = 1 THEN
		INSERT INTO WSTE_TRMT_FCTL_PROCESSING_DETAILS (
			REPORT_ID,
			CATEGORY_ID,
			CATEGORY_VALUE,
			P_CATEGORY_ID,
			DEPTH,
			CREATED_AT,
			UPDATED_AT
		) VALUES (
			IN_REPORT_ID,
			IN_CATEGORY_ID,
			NULL,
			NULL,
			1,
			VAR_REG_DT,
			VAR_REG_DT
		);
		
		IF ROW_COUNT() = 1 THEN
			OPEN TEMP_CURSOR;	
			cloop: LOOP
				
				FETCH TEMP_CURSOR 
				INTO  
					CUR_CAT_ID,
					CUR_CAT_VAL;
				
				SET vRowCount = vRowCount + 1;
				IF endOfRow THEN
					LEAVE cloop;
				END IF;
				
				INSERT INTO WSTE_TRMT_FCTL_PROCESSING_DETAILS (
					REPORT_ID,
					CATEGORY_ID,
					CATEGORY_VALUE,
					P_CATEGORY_ID,
					DEPTH,
					CREATED_AT,
					UPDATED_AT
				) VALUES (
					IN_REPORT_ID,
					CUR_CAT_ID,
					CUR_CAT_VAL,
					IN_CATEGORY_ID,
					2,
					VAR_REG_DT,
					VAR_REG_DT
				);
				
				IF ROW_COUNT() = 0 THEN
					SET rtn_val = 40503;
					SET msg_txt = 'failed to insert waste treatment processing information';
					LEAVE cloop;
				END IF;
				
			END LOOP;   
			CLOSE TEMP_CURSOR;
		ELSE
			SET rtn_val = 40502;
			SET msg_txt = 'failed to insert waste treatment processing information';
		END IF;
    ELSE
		SET rtn_val = 40501;
		SET msg_txt = 'failed to update WSTE_FCTL_ID';
    END IF;
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_member_admin_account_exists`(
	IN IN_USER_REG_ID		VARCHAR(50),			/*입력값: 사업자의 admin인지 체크할 계정 아이디*/
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_member_admin_account_exists
Input param 	: 1개
Output param 	: 2개
Job 			: 사용자가 관리자인지 체크한 후 관리자이면 0, 그렇지 않으면 예외처리코드를 반환한다.
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/

	SELECT COUNT(ID) 
    INTO @CHK_COUNT 
    FROM V_USERS 
    WHERE 
		USER_ID = IN_USER_REG_ID AND 
        CLASS = 201 AND 
        AFFILIATED_SITE IS NOT NULL;
    
    IF @CHK_COUNT = 1 THEN
		SET rtn_val = 0;
		SET msg_txt = 'success';
    ELSE
		SET rtn_val = 27401;
		SET msg_txt = 'User does not have business administrator(201) privileges';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_member_admin_account_exists_by_id`(
	IN IN_USER_ID		BIGINT,					/*입력값: 사업자의 admin인지 체크할 계정 아이디로서 USERS.ID임*/
    OUT OUT_SITE_ID		BIGINT					/*출력값: 체크한 계정이 사이트의 관리자(admin)계정인 경우 소속한 사업자의 고유등록번호(COMPANY.ID), 만일 IN_USER_ID가 어떠한 사업자의 관리자가 아닌경우에는 O 반환*/
												/*sys.admin은 종속사업자를 생성할 수 없음*/
)
BEGIN

/*
Procedure Name 	: sp_member_admin_account_exists_by_id
Input param 	: 1개
Output param 	: 1개
Job 			: 사용자가 201권한을 가진 관리자의 권한이 있다면 어느 사이트의 관리자인지 반환함. 201권한 관리자가 아니면 0을 반환함
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.17
Version			: 0.0.2
AUTHOR 			: Leo Nam
Changes			: 기존 소속사업자의 고유등록번호를 반환하는 방법에서 소속사이트의 고유등록번호를 반환하는 방식으로 변경(0.0.2)
*/

	SELECT IF(COUNT(ID) = 0, 0, AFFILIATED_SITE) 
    INTO OUT_SITE_ID 
    FROM V_USERS 
    WHERE (ID = IN_USER_ID AND CLASS = 201) ;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_parse_and_insert_sigungu_list`(
	IN IN_SITE_ID		INT,
	IN IN_LIST			VARCHAR(255),
	IN IN_DEFAULT		TINYINT,
    OUT OUT_COUNT		INT
)
BEGIN

/*
Procedure Name 	: sp_count_items_in_list
Input param 	: 1개
Output param 	: 1개
Job 			: 파라미터로 받은 리스트 안에 있는 아이템의 갯수를 반환한다.
Update 			: 2022.01.10
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_IN_ARRAY						VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_ITEM							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_SEPERATOR						VARCHAR(10)				DEFAULT ',' COLLATE utf8mb4_unicode_ci;
	DECLARE VAR_INVALID_COUNT					INT						DEFAULT 0;
	DECLARE VAR_COUNT_OF_LIST_ADDED				INT						DEFAULT 0;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_LIST_COUNT						INT						DEFAULT 0;
	DECLARE VAR_SIGUNGU_CODE					VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BCODE_EXISTS					TINYINT					DEFAULT NULL;
	DECLARE rtn_val								INT						DEFAULT 0;
    
	SET VAR_IN_ARRAY = IN_LIST;
    CALL sp_req_current_time(VAR_REG_DT);
    
    IF VAR_IN_ARRAY IS NULL OR VAR_IN_ARRAY = '' THEN
		SET VAR_LIST_COUNT = 0;
    ELSE
		SET VAR_LIST_COUNT = 1;
		WHILE (LOCATE(VAR_SEPERATOR, VAR_IN_ARRAY) > 0) DO
			SET VAR_ITEM = SUBSTRING(VAR_IN_ARRAY, 1, LOCATE(VAR_SEPERATOR, VAR_IN_ARRAY) - 1);
			SET VAR_IN_ARRAY = SUBSTRING(VAR_IN_ARRAY, LOCATE(VAR_SEPERATOR, VAR_IN_ARRAY) + 1);  
			SET VAR_SIGUNGU_CODE = VAR_ITEM;
            
			CALL sp_check_if_bcode_valid(
				VAR_SIGUNGU_CODE,
                VAR_BCODE_EXISTS
            );
			IF VAR_BCODE_EXISTS = 1 THEN
				CALL sp_insert_sigungu(
					IN_SITE_ID,
					VAR_SIGUNGU_CODE,
					IN_DEFAULT,
					VAR_REG_DT,
					rtn_val
				);
				SET VAR_COUNT_OF_LIST_ADDED = VAR_COUNT_OF_LIST_ADDED + rtn_val;
				SET VAR_LIST_COUNT = VAR_LIST_COUNT + 1;
            ELSE
				SET VAR_INVALID_COUNT = VAR_INVALID_COUNT + 1;
            END IF;
		END WHILE;
		CALL sp_check_if_bcode_valid(
			VAR_IN_ARRAY,
			VAR_BCODE_EXISTS
		);
		IF VAR_BCODE_EXISTS = 1 THEN
			CALL sp_insert_sigungu(
				IN_SITE_ID,
				VAR_IN_ARRAY,
				IN_DEFAULT,
				VAR_REG_DT,
				rtn_val
			);
			SET VAR_COUNT_OF_LIST_ADDED = VAR_COUNT_OF_LIST_ADDED + rtn_val;
        ELSE
			SET VAR_INVALID_COUNT = VAR_INVALID_COUNT + 1;
        END IF;
    END IF;
    
    SET OUT_COUNT = VAR_COUNT_OF_LIST_ADDED;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_bidding_end_1`(
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_push_bidding_end_1
Input param 	: 1개
Output param 	: 1개
Job 			: 입찰마감 후 선정단계 진입시 푸시 반환함
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT;    
    DECLARE CUR_ORDER_CODE						VARCHAR(10);  
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_DISPOSER_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID,
        A.ORDER_CODE
    FROM SITE_WSTE_DISPOSAL_ORDER A 
	LEFT JOIN V_ORDER_STATE B ON A.ID = B.DISPOSER_ORDER_ID
	WHERE 
		B.STATE_CODE 	= 110 AND
		A.ID			NOT IN (SELECT ORDER_ID FROM PUSH_HISTORY WHERE CATEGORY_ID = IN_CATEGORY_ID);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_SCHEDULE_VISIT_END_TEMP (
		ORDER_ID						BIGINT,
		DISPOSER_INFO					JSON,
		COLLECTOR_INFO					JSON
        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		SET VAR_DISPOSER_INFO = NULL;
		SET VAR_COLLECTOR_INFO = NULL; 
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PUSH_SCHEDULE_VISIT_END_TEMP(
			ORDER_ID
		)
		VALUES(
			CUR_ORDER_ID
		);
		
		SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']입찰마감');
		SET VAR_BODY = '낙찰자를 확인해 주세요';
        CALL sp_get_disposer_list_for_push(
			CUR_ORDER_ID,
			VAR_TITLE,
			VAR_BODY,
			IN_CATEGORY_ID,
            VAR_DISPOSER_INFO,
            rtn_val,
            msg_txt
        );
        IF rtn_val = 0 THEN
			SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']입찰마감');
			SET VAR_BODY = '선정대기 해주세요';
			CALL sp_get_collector_list_for_push(
				CUR_ORDER_ID,
				VAR_TITLE,
				VAR_BODY,
				IN_CATEGORY_ID,
				VAR_COLLECTOR_INFO,
				rtn_val,
				msg_txt
			);
			IF rtn_val = 0 THEN
				UPDATE PUSH_SCHEDULE_VISIT_END_TEMP 
				SET 
					DISPOSER_INFO 			= VAR_DISPOSER_INFO,
					COLLECTOR_INFO 			= VAR_COLLECTOR_INFO
				WHERE ORDER_ID 				= CUR_ORDER_ID;
            ELSE
				LEAVE cloop;
            END IF;
        ELSE
			LEAVE cloop;
        END IF;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
		'DISPOSER_INFO'				, DISPOSER_INFO, 
		'COLLECTOR_INFO'			, COLLECTOR_INFO
	)) 
	INTO OUT_TARGET_LIST FROM PUSH_SCHEDULE_VISIT_END_TEMP;
	
	SET rtn_val = 0;
	SET msg_txt = 'Success';
	DROP TABLE IF EXISTS PUSH_SCHEDULE_VISIT_END_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_cancel_visit`(
	IN IN_USER_ID					BIGINT,
	IN IN_COLLECTOR_BIDDING_ID		BIGINT,
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_push_cancel_visit
Input param 	: 1개
Output param 	: 1개
Job 			: 수거자가 배출자가 올린 폐기물에 방문 신청을 한 후 취소 했을 경우 배출자에게 푸쉬를 발송한다1
Update 			: 2022.04.14
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_BIDDING_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_ORDER_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_NAME				VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;
    
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) 
    INTO VAR_BIDDING_EXISTS
    FROM COLLECTOR_BIDDING
    WHERE 
		ID = IN_COLLECTOR_BIDDING_ID AND
        DELETED = FALSE AND
        ACTIVE = TRUE;
        
    IF VAR_BIDDING_EXISTS = 1 THEN
		SELECT B.ID, B.ORDER_CODE, C.SITE_NAME
        INTO VAR_ORDER_ID, VAR_ORDER_CODE, VAR_COLLECTOR_SITE_NAME
        FROM COLLECTOR_BIDDING A
        LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
        LEFT JOIN COMP_SITE C ON A.COLLECTOR_ID = C.ID
        WHERE
			A.ID = IN_COLLECTOR_BIDDING_ID;    
    
		SELECT ID INTO VAR_TRANSACTION_ID
		FROM WSTE_CLCT_TRMT_TRANSACTION
		WHERE 
			DISPOSAL_ORDER_ID = VAR_ORDER_ID AND
			IN_PROGRESS = TRUE;  
            
		SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']방문취소');
		SET VAR_BODY = CONCAT('신청하신 [', VAR_ORDER_CODE, ']에 ',  VAR_COLLECTOR_SITE_NAME,'님이 방문을 취소하셨습니다.');
        IF VAR_DISPOSER_SITE_ID = 0 THEN
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, C.ID, 
					'USER_NAME'				, C.USER_NAME, 
					'FCM'					, C.FCM, 
					'AVATAR_PATH'			, C.AVATAR_PATH,
					'PHONE'					, C.PHONE,
					'TITLE'					, VAR_TITLE,
					'VAR_BODY'				, VAR_BODY,
					'ORDER_ID'				, VAR_ORDER_ID, 
					'BIDDING_ID'			, IN_COLLECTOR_BIDDING_ID, 
					'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
					'REPORT_ID'				, NULL, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM COLLECTOR_BIDDING A 
            LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
            LEFT JOIN USERS C ON B.DISPOSER_ID = C.ID
			WHERE 
				C.ACTIVE 					= TRUE AND
				C.PUSH_ENABLED				= TRUE AND
                A.ID						= IN_COLLECTOR_BIDDING_ID;
        ELSE
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, C.ID, 
					'USER_NAME'				, C.USER_NAME, 
					'FCM'					, C.FCM, 
					'AVATAR_PATH'			, C.AVATAR_PATH,
					'PHONE'					, C.PHONE,
					'TITLE'					, VAR_TITLE,
					'VAR_BODY'				, VAR_BODY,
					'ORDER_ID'				, VAR_ORDER_ID, 
					'BIDDING_ID'			, IN_COLLECTOR_BIDDING_ID, 
					'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
					'REPORT_ID'				, NULL, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM COLLECTOR_BIDDING A 
            LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
            LEFT JOIN USERS C ON B.SITE_ID = C.AFFILIATED_SITE
			WHERE 
				C.ACTIVE 					= TRUE AND
				C.PUSH_ENABLED				= TRUE AND
                A.ID						= IN_COLLECTOR_BIDDING_ID;
        END IF;
        
        CALL sp_insert_push(
			IN_USER_ID,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
        );
    
		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
			PUSH_INFO						JSON
		);     
		INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PUSH_INFO'			, PUSH_INFO
		)) 
		INTO OUT_TARGET_LIST
		FROM PUSH_INFO_TEMP;  
		DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
		SET rtn_val = 0;
        SET msg_txt = 'success1';
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success222';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_collector_accept_ask_end`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_BIDDING_ID				BIGINT,
	IN IN_TRANSACTION_ID			BIGINT,
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
    DECLARE VAR_TRANSACTION_EXISTS				INT 					DEFAULT 0;
	DECLARE VAR_ORDER_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_DISPOSER_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_NAME				VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_WHAT							VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
	
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) 
    INTO VAR_TRANSACTION_EXISTS
    FROM WSTE_CLCT_TRMT_TRANSACTION
    WHERE 
		ID = IN_TRANSACTION_ID;
        
    IF VAR_TRANSACTION_EXISTS = 1 THEN
		SELECT B.ORDER_CODE, B.SITE_ID, B.DISPOSER_ID, C.SITE_NAME
        INTO VAR_ORDER_CODE, VAR_DISPOSER_SITE_ID, VAR_DISPOSER_ID, VAR_COLLECTOR_SITE_NAME
        FROM WSTE_CLCT_TRMT_TRANSACTION A
        LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
        LEFT JOIN COMP_SITE C ON A.COLLECTOR_SITE_ID = C.ID
        WHERE
			A.ID = IN_TRANSACTION_ID;
		IF IN_CATEGORY_ID = 29 THEN
			SET VAR_WHAT = '수락';
        ELSE
			SET VAR_WHAT = '거절';
        END IF;
		SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']처리신청', VAR_WHAT);
		SET VAR_BODY = CONCAT('신청하신 [', VAR_ORDER_CODE, ']의 요청을 ', VAR_COLLECTOR_SITE_NAME, '님이 ', VAR_WHAT,'하셨습니다.');
        IF VAR_DISPOSER_SITE_ID = 0 THEN
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, ID, 
					'USER_NAME'				, USER_NAME, 
					'FCM'					, FCM, 
					'AVATAR_PATH'			, AVATAR_PATH,
					'PHONE'					, PHONE,
					'TITLE'					, VAR_TITLE,
					'BODY'					, VAR_BODY,
					'ORDER_ID'				, IN_ORDER_ID, 
					'BIDDING_ID'			, IN_BIDDING_ID, 
					'TRANSACTION_ID'		, IN_TRANSACTION_ID, 
					'REPORT_ID'				, NULL, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM USERS 
			WHERE 
				ACTIVE 					= TRUE AND
				PUSH_ENABLED			= TRUE AND
                ID						= VAR_DISPOSER_ID;
        ELSE
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, ID, 
					'USER_NAME'				, USER_NAME, 
					'FCM'					, FCM, 
					'AVATAR_PATH'			, AVATAR_PATH,
					'PHONE'					, PHONE,
					'TITLE'					, VAR_TITLE,
					'BODY'					, VAR_BODY,
					'ORDER_ID'				, IN_ORDER_ID, 
					'BIDDING_ID'			, IN_BIDDING_ID, 
					'TRANSACTION_ID'		, IN_TRANSACTION_ID, 
					'REPORT_ID'				, NULL, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM USERS
			WHERE 
				ACTIVE 					= TRUE AND
				PUSH_ENABLED			= TRUE AND
                AFFILIATED_SITE			= VAR_DISPOSER_SITE_ID;
        END IF;
        
		CALL sp_insert_push(
			IN_USER_ID,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
		);

		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
			PUSH_INFO						JSON
		);     
		INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PUSH_INFO'			, PUSH_INFO
		)) 
		INTO OUT_TARGET_LIST
		FROM PUSH_INFO_TEMP;  
		DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
		SET rtn_val = 0;
		SET msg_txt = 'success1';
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'success1';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_collector_apply_bidding`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_BIDDING_ID				BIGINT,
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_ORDER_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_DISPOSER_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
	
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) 
    INTO VAR_ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID = IN_ORDER_ID AND
        ACTIVE = TRUE;
        
    IF VAR_ORDER_EXISTS = 1 THEN
		SELECT ORDER_CODE, DISPOSER_ID, SITE_ID
        INTO VAR_ORDER_CODE, VAR_DISPOSER_ID, VAR_DISPOSER_SITE_ID
        FROM SITE_WSTE_DISPOSAL_ORDER
        WHERE
			ID = IN_ORDER_ID AND
			ACTIVE = TRUE;
    
		SELECT ID INTO VAR_TRANSACTION_ID
		FROM WSTE_CLCT_TRMT_TRANSACTION
		WHERE 
			DISPOSAL_ORDER_ID = IN_ORDER_ID AND
			IN_PROGRESS = TRUE;  
            
		SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']입찰등록');
		SET VAR_BODY = CONCAT('신청하신 [', VAR_ORDER_CODE, ']에 대하여 입찰이 등록되었습니다.');
        IF VAR_DISPOSER_SITE_ID = 0 THEN
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, ID, 
					'USER_NAME'				, USER_NAME, 
					'FCM'					, FCM, 
					'AVATAR_PATH'			, AVATAR_PATH,
					'PHONE'					, PHONE,
					'TITLE'					, VAR_TITLE,
					'BODY'					, VAR_BODY,
					'ORDER_ID'				, IN_ORDER_ID, 
					'BIDDING_ID'			, IN_BIDDING_ID, 
					'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
					'REPORT_ID'				, NULL, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM USERS 
			WHERE 
				ACTIVE 					= TRUE AND
				PUSH_ENABLED			= TRUE AND
                ID						= VAR_DISPOSER_ID;
        ELSE
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, A.ID, 
					'USER_NAME'				, A.USER_NAME, 
					'FCM'					, A.FCM, 
					'AVATAR_PATH'			, A.AVATAR_PATH,
					'PHONE'					, PHONE,
					'TITLE'					, VAR_TITLE,
					'BODY'					, VAR_BODY,
					'ORDER_ID'				, IN_ORDER_ID, 
					'BIDDING_ID'			, IN_BIDDING_ID, 
					'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
					'REPORT_ID'				, NULL, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM USERS A 
			LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID
			WHERE 
				A.ACTIVE 					= TRUE AND
				A.PUSH_ENABLED				= TRUE AND
				B.ACTIVE 					= TRUE AND
				B.ID 						= VAR_DISPOSER_SITE_ID;
        END IF;
        
        CALL sp_insert_push(
			IN_USER_ID,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
        );
    
		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
			PUSH_INFO						JSON
		);     
		INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PUSH_INFO'			, PUSH_INFO
		)) 
		INTO OUT_TARGET_LIST
		FROM PUSH_INFO_TEMP;  
		DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success[order does not exist]';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_collector_ask_transaction_completed`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_BIDDING_ID				BIGINT,
	IN IN_TRANSACTION_ID			BIGINT,
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_TRANSACTION_EXISTS				INT						DEFAULT 0;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_DISPOSER_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_NAME				VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_REPORT_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
	
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) 
    INTO VAR_TRANSACTION_EXISTS
    FROM WSTE_CLCT_TRMT_TRANSACTION
    WHERE 
		ID = IN_TRANSACTION_ID;
        
    IF VAR_TRANSACTION_EXISTS = 1 THEN
		SELECT B.ORDER_CODE, B.SITE_ID, B.DISPOSER_ID, IF(A.COLLECTOR_SITE_ID IS NULL, E.SITE_NAME, C.SITE_NAME)
        INTO VAR_ORDER_CODE, VAR_DISPOSER_SITE_ID, VAR_DISPOSER_ID, VAR_COLLECTOR_SITE_NAME
        FROM WSTE_CLCT_TRMT_TRANSACTION A
        LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
        LEFT JOIN COMP_SITE C ON A.COLLECTOR_SITE_ID = C.ID
        LEFT JOIN COLLECTOR_BIDDING D ON A.COLLECTOR_BIDDING_ID = D.ID
        LEFT JOIN COMP_SITE E ON D.COLLECTOR_ID = E.ID
        WHERE
			A.ID = IN_TRANSACTION_ID;
    
		SELECT A.ID INTO VAR_REPORT_ID
		FROM TRANSACTION_REPORT A 
        LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSER_ORDER_ID = B.ID
		WHERE 
			A.DISPOSER_ORDER_ID = IN_ORDER_ID;  
            
		SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']폐기물처리완료');
		SET VAR_BODY = CONCAT('신청하신 [', VAR_ORDER_CODE, ']로 요청하신 폐기물을 ',  VAR_COLLECTOR_SITE_NAME,'님이 처리완료하였습니다. 보고서를 확인해주세요.');
        IF VAR_DISPOSER_SITE_ID = 0 THEN
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, ID, 
					'USER_NAME'				, USER_NAME, 
					'FCM'					, FCM, 
					'AVATAR_PATH'			, AVATAR_PATH,
					'PHONE'					, PHONE,
					'TITLE'					, VAR_TITLE,
					'BODY'					, VAR_BODY,
					'ORDER_ID'				, IN_ORDER_ID, 
					'BIDDING_ID'			, NULL, 
					'TRANSACTION_ID'		, IN_TRANSACTION_ID, 
					'REPORT_ID'				, VAR_REPORT_ID, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM USERS 
			WHERE 
				ACTIVE 					= TRUE AND
				PUSH_ENABLED			= TRUE AND
                ID						= VAR_DISPOSER_ID;
        ELSE
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, ID, 
					'USER_NAME'				, USER_NAME, 
					'FCM'					, FCM, 
					'AVATAR_PATH'			, AVATAR_PATH,
					'PHONE'					, PHONE,
					'TITLE'					, VAR_TITLE,
					'BODY'					, VAR_BODY,
					'ORDER_ID'				, IN_ORDER_ID, 
					'BIDDING_ID'			, NULL, 
					'TRANSACTION_ID'		, IN_TRANSACTION_ID, 
					'REPORT_ID'				, VAR_REPORT_ID, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM USERS
			WHERE 
				ACTIVE 					= TRUE AND
				PUSH_ENABLED			= TRUE AND
                AFFILIATED_SITE			= VAR_DISPOSER_SITE_ID;
        END IF;
        
        CALL sp_insert_push(
			IN_USER_ID,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
        );
    
		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
			PUSH_INFO						JSON
		);     
		INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PUSH_INFO'			, PUSH_INFO
		)) 
		INTO OUT_TARGET_LIST
		FROM PUSH_INFO_TEMP;  
		DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
		SET rtn_val = 0;
        SET msg_txt = 'success1';
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success222';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_collector_cancel_or_giveup_bidding`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_BIDDING_ID				BIGINT,
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_BIDDING_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_WHAT							VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_DISPOSER_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_NAME				VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
	
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) 
    INTO VAR_BIDDING_EXISTS
    FROM COLLECTOR_BIDDING
    WHERE 
		ID = IN_BIDDING_ID AND
        DELETED = FALSE AND
        CANCEL_VISIT = FALSE AND
        ACTIVE = TRUE;
        
    IF VAR_BIDDING_EXISTS = 1 THEN
		IF IN_CATEGORY_ID = 13 THEN
			SET VAR_WHAT = '포기';
        ELSE
			SET VAR_WHAT = '취소';
        END IF;
		SELECT B.ORDER_CODE, B.SITE_ID, B.DISPOSER_ID, C.SITE_NAME
        INTO VAR_ORDER_CODE, VAR_DISPOSER_SITE_ID, VAR_DISPOSER_ID, VAR_COLLECTOR_SITE_NAME
        FROM COLLECTOR_BIDDING A
        LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
        LEFT JOIN COMP_SITE C ON A.COLLECTOR_ID = C.ID
        WHERE
			A.ID = IN_BIDDING_ID;
    
		SELECT ID INTO VAR_TRANSACTION_ID
		FROM WSTE_CLCT_TRMT_TRANSACTION
		WHERE 
			DISPOSAL_ORDER_ID = IN_ORDER_ID AND
			IN_PROGRESS = TRUE;  
            
		SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']입찰', VAR_WHAT);
		SET VAR_BODY = CONCAT('신청하신 [', VAR_ORDER_CODE, ']에 ',  VAR_COLLECTOR_SITE_NAME,'님이 입찰을 ',  VAR_WHAT,'하셨습니다.');
        IF VAR_DISPOSER_SITE_ID = 0 THEN
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, ID, 
					'USER_NAME'				, USER_NAME, 
					'FCM'					, FCM, 
					'AVATAR_PATH'			, AVATAR_PATH,
					'PHONE'					, PHONE,
					'TITLE'					, VAR_TITLE,
					'BODY'					, VAR_BODY,
					'ORDER_ID'				, IN_ORDER_ID, 
					'BIDDING_ID'			, IN_BIDDING_ID, 
					'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
					'REPORT_ID'				, NULL, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM USERS 
			WHERE 
				ACTIVE 					= TRUE AND
				PUSH_ENABLED			= TRUE AND
                ID						= VAR_DISPOSER_ID;
        ELSE
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, ID, 
					'USER_NAME'				, USER_NAME, 
					'FCM'					, FCM, 
					'AVATAR_PATH'			, AVATAR_PATH,
					'PHONE'					, PHONE,
					'TITLE'					, VAR_TITLE,
					'BODY'					, VAR_BODY,
					'ORDER_ID'				, IN_ORDER_ID, 
					'BIDDING_ID'			, IN_BIDDING_ID, 
					'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
					'REPORT_ID'				, NULL, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM USERS
			WHERE 
				ACTIVE 					= TRUE AND
				PUSH_ENABLED			= TRUE AND
                AFFILIATED_SITE			= VAR_DISPOSER_SITE_ID;
        END IF;
        
        CALL sp_insert_push(
			IN_USER_ID,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
        );
    
		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
			PUSH_INFO						JSON
		);     
		INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PUSH_INFO'			, PUSH_INFO
		)) 
		INTO OUT_TARGET_LIST
		FROM PUSH_INFO_TEMP;  
		DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success2';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_collector_dispose_new_wste`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_COLLECTOR_SITE_ID			BIGINT
)
BEGIN

	DECLARE json_data				JSON			DEFAULT NULL;
	DECLARE rtn_val					INT				DEFAULT NULL;
	DECLARE msg_txt					VARCHAR(200)	DEFAULT NULL;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  
    
	CALL sp_push_collector_dispose_new_wste_sub(
		IN_USER_ID,
        IN_ORDER_ID,
        IN_COLLECTOR_SITE_ID,
        28,
        json_data,
        rtn_val,
        msg_txt
    );
    IF rtn_val > 0 THEN
		SET json_data 		= NULL;
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;      
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_collector_dispose_new_wste_sub`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_COLLECTOR_SITE_ID			BIGINT,
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_DISPOSER_NAME					VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_ORDER_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_AVATAR_PATH						VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_USER_NAME						VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
    
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT IF(A.AFFILIATED_SITE = 0, A.USER_NAME, B.SITE_NAME)
    INTO VAR_DISPOSER_NAME
	FROM USERS A
    LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID
	WHERE A.ID = IN_USER_ID;		
    
	SET VAR_ORDER_ID = IN_ORDER_ID;
    
	SELECT ORDER_CODE, TRANSACTION_ID 
    INTO VAR_ORDER_CODE, VAR_TRANSACTION_ID
	FROM SITE_WSTE_DISPOSAL_ORDER
	WHERE ID = VAR_ORDER_ID;
    
	SELECT A.AVATAR_PATH, IF(A.AFFILIATED_SITE = 0, A.USER_NAME, B.SITE_NAME) 
	INTO VAR_AVATAR_PATH, VAR_USER_NAME
	FROM USERS A
	LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID
	WHERE A.ID = IN_USER_ID;
    
	SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']신규 폐기물 등록');
	SET VAR_BODY = CONCAT('[', VAR_DISPOSER_NAME, ']님이 신규 폐기물 처리를 요청하셨습니다 .');
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'USER_ID'				, ID, 
			'USER_NAME'				, VAR_USER_NAME, 
			'FCM'					, FCM, 
			'AVATAR_PATH'			, VAR_AVATAR_PATH,
			'PHONE'					, PHONE,
			'TITLE'					, VAR_TITLE,
			'BODY'					, VAR_BODY,
			'ORDER_ID'				, VAR_ORDER_ID, 
			'BIDDING_ID'			, NULL, 
			'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
			'REPORT_ID'				, NULL, 
			'CATEGORY_ID'			, IN_CATEGORY_ID,
            'CREATED_AT'			, VAR_REG_DT
		)
	) 
	INTO VAR_PUSH_INFO
	FROM USERS
	WHERE 
		ACTIVE 					= TRUE AND
		PUSH_ENABLED			= TRUE AND
		AFFILIATED_SITE			= IN_COLLECTOR_SITE_ID;
        
	CALL sp_insert_push(
		IN_USER_ID,
		VAR_PUSH_INFO,
		rtn_val,
		msg_txt
	);
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
		PUSH_INFO						JSON
	);     
	INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'PUSH_INFO'			, PUSH_INFO
	)) 
	INTO OUT_TARGET_LIST
	FROM PUSH_INFO_TEMP;  
	DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
	SET rtn_val = 0;
	SET msg_txt = 'success';
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_collector_list_share_business_areas`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_B_CODE					VARCHAR(10),
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST_7289		JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt						VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_SI_DO							VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_SI_GUN_GU						VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_SITE_ID							BIGINT					DEFAULT NULL;
	DECLARE VAR_ORDER_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_INCLUDE_WSTE_CONDITION			VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
    
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT SI_DO, SI_GUN_GU
	INTO VAR_SI_DO, VAR_SI_GUN_GU
	FROM KIKCD_B
	WHERE
		B_CODE = IN_B_CODE AND
		CANCELED_DATE IS NULL;
		
	SELECT ORDER_CODE, SITE_ID
	INTO VAR_ORDER_CODE, VAR_SITE_ID
	FROM SITE_WSTE_DISPOSAL_ORDER
	WHERE ID = IN_ORDER_ID;
	SET VAR_ORDER_ID = IN_ORDER_ID;  

	SELECT ID INTO VAR_TRANSACTION_ID
	FROM WSTE_CLCT_TRMT_TRANSACTION
	WHERE 
		DISPOSAL_ORDER_ID = IN_ORDER_ID AND
		IN_PROGRESS = TRUE;  
	
	CALL sp_req_policy_direction(
		'include_wste_condition',
		VAR_INCLUDE_WSTE_CONDITION
	);     

	SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']신규 폐기물 등록');
	SET VAR_BODY = CONCAT(VAR_SI_DO, ' ', VAR_SI_GUN_GU, '에 신규 폐기물이 등록되었습니다.');
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'USER_ID'				, C.ID, 
			'USER_NAME'				, C.USER_NAME, 
			'FCM'					, C.FCM, 
			'AVATAR_PATH'			, C.AVATAR_PATH,
			'PHONE'					, C.PHONE,
			'TITLE'					, VAR_TITLE,
			'BODY'					, VAR_BODY,
			'ORDER_ID'				, VAR_ORDER_ID, 
			'BIDDING_ID'			, NULL, 
			'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
			'REPORT_ID'				, NULL, 
			'CATEGORY_ID'			, IN_CATEGORY_ID,
			'CREATED_AT'			, VAR_REG_DT
		)
	) 
	INTO VAR_PUSH_INFO
	FROM BUSINESS_AREA A 
	LEFT JOIN COMP_SITE B ON A.SITE_ID = B.ID
	LEFT JOIN USERS C ON B.ID = C.AFFILIATED_SITE
	WHERE 
		A.ACTIVE 					= TRUE AND
		B.ACTIVE 					= TRUE AND
		C.ACTIVE	 				= TRUE AND
		C.PUSH_ENABLED				= TRUE AND
		LEFT(A.KIKCD_B_CODE, 5) 	= LEFT(IN_B_CODE, 5) AND
        B.ID						NOT IN (SELECT AFFILIATED_SITE FROM USERS WHERE ID = IN_USER_ID);
        
	
	CALL sp_insert_push(
		IN_USER_ID,
		VAR_PUSH_INFO,
		rtn_val,
		msg_txt
	);

	
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
		PUSH_INFO						JSON
	);     
	INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'PUSH_INFO'			, PUSH_INFO
	)) 
	INTO OUT_TARGET_LIST_7289
	FROM PUSH_INFO_TEMP;  
	DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
	SET rtn_val = 0;
	SET msg_txt = 'success1';
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_collector_list_share_business_areas_new`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_B_CODE					VARCHAR(10),
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST_7289		JSON,
    OUT rtn_val_7289 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt_7289				VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
    CALL sp_req_current_time(@REG_DT);
	SELECT SI_DO, SI_GUN_GU
	INTO @SI_DO, @SI_GUN_GU
	FROM KIKCD_B
	WHERE
		B_CODE = IN_B_CODE AND
		CANCELED_DATE IS NULL;
		
	SELECT ORDER_CODE, SITE_ID
	INTO @ORDER_CODE, @SITE_ID
	FROM SITE_WSTE_DISPOSAL_ORDER
	WHERE ID = IN_ORDER_ID;
	SET @ORDER_ID = IN_ORDER_ID;  

	SELECT ID INTO @TRANSACTION_ID
	FROM WSTE_CLCT_TRMT_TRANSACTION
	WHERE 
		DISPOSAL_ORDER_ID = IN_ORDER_ID AND
		IN_PROGRESS = TRUE;  
	
	CALL sp_req_policy_direction(
		'include_wste_condition',
		@include_wste_condition
	);     

	SET @TITLE = CONCAT('[', @ORDER_CODE, ']신규 폐기물 등록');
	SET @BODY = CONCAT(@SI_DO, ' ', @SI_GUN_GU, '에 신규 폐기물이 등록되었습니다.');
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'USER_ID'				, C.ID, 
			'USER_NAME'				, C.USER_NAME, 
			'FCM'					, C.FCM, 
			'AVATAR_PATH'			, C.AVATAR_PATH,
			'PHONE'					, C.PHONE,
			'TITLE'					, @TITLE,
			'BODY'					, @BODY,
			'ORDER_ID'				, @ORDER_ID, 
			'BIDDING_ID'			, NULL, 
			'TRANSACTION_ID'		, @TRANSACTION_ID, 
			'REPORT_ID'				, NULL, 
			'CATEGORY_ID'			, IN_CATEGORY_ID,
			'CREATED_AT'			, @REG_DT
		)
	) 
	INTO @PUSH_INFO_7289
	FROM BUSINESS_AREA A 
	LEFT JOIN COMP_SITE B ON A.SITE_ID = B.ID
	LEFT JOIN USERS C ON B.ID = C.AFFILIATED_SITE
	WHERE 
		C.PUSH_ENABLED				= TRUE AND			
		IF(@SITE_ID > 0, 
			LEFT(A.KIKCD_B_CODE, 5) = LEFT(@B_CODE, 5) AND B.ID NOT IN (@SITE_ID), 
			LEFT(A.KIKCD_B_CODE, 5) = LEFT(@B_CODE, 5)
		) AND
		IF(@include_wste_condition = '1',
			B.ID IN (
				SELECT A1.SITE_ID
				FROM WSTE_SITE_MATCH A1
				LEFT JOIN WSTE_CODE B1 ON A1.WSTE_CODE = B1.CODE
				WHERE 
					B1.DISPLAY = TRUE AND
					B1.NEURU_CLASS IN (
						SELECT WSTE_CLASS
						FROM WSTE_DISCHARGED_FROM_SITE
						WHERE DISPOSAL_ORDER_ID = @ORDER_ID
					)
				GROUP BY 
					A1.SITE_ID,
					B1.DISPLAY,
					B1.NEURU_CLASS
			) AND
			A.ACTIVE 					= TRUE AND
			B.ACTIVE 					= TRUE AND
			C.ACTIVE	 				= TRUE,
			A.ACTIVE 					= TRUE AND
			B.ACTIVE 					= TRUE AND
			C.ACTIVE	 				= TRUE
		);  
        
	/*
	CALL sp_insert_push(
		IN_USER_ID,
		@PUSH_INFO_7289,
		rtn_val_7289,
		msg_txt_7289
	);
*/
	
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
		PUSH_INFO						JSON
	);     
	INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(@PUSH_INFO_7289);
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'PUSH_INFO'			, PUSH_INFO
	)) 
	INTO OUT_TARGET_LIST_7289
	FROM PUSH_INFO_TEMP;  
	DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
	SET rtn_val_7289 = 0;
	SET msg_txt_7289 = 'success1';
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_collector_make_final_decision`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_BIDDING_ID				BIGINT,
	IN IN_TRANSACTION_ID			BIGINT,
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_BIDDING_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_DISPOSER_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_NAME				VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_WHAT							VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) 
    INTO VAR_BIDDING_EXISTS
    FROM COLLECTOR_BIDDING
    WHERE 
		ID = IN_BIDDING_ID AND
        DELETED = FALSE AND
        CANCEL_VISIT = FALSE AND
        ACTIVE = TRUE;
        
    IF VAR_BIDDING_EXISTS = 1 THEN
		SELECT B.ORDER_CODE, B.SITE_ID, B.DISPOSER_ID, C.SITE_NAME
        INTO VAR_ORDER_CODE, VAR_DISPOSER_SITE_ID, VAR_DISPOSER_ID, VAR_COLLECTOR_SITE_NAME
        FROM COLLECTOR_BIDDING A
        LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
        LEFT JOIN COMP_SITE C ON A.COLLECTOR_ID = C.ID
        WHERE
			A.ID = IN_BIDDING_ID;
		
        IF IN_CATEGORY_ID = 23 THEN
			SET VAR_WHAT = '승인';
        ELSE
			SET VAR_WHAT = '거절';
        END IF;
    
		SELECT ID INTO VAR_TRANSACTION_ID
		FROM WSTE_CLCT_TRMT_TRANSACTION
		WHERE 
			DISPOSAL_ORDER_ID = IN_ORDER_ID AND
			IN_PROGRESS = TRUE;  
            
		SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']낙찰자선정', VAR_WHAT);
		SET VAR_BODY = CONCAT('신청하신 [', VAR_ORDER_CODE, ']의 입찰에 낙찰된 ',  VAR_COLLECTOR_SITE_NAME,'님이 거래를 ',  VAR_WHAT, '하였습니다. 확인해주세요.');
        IF VAR_DISPOSER_SITE_ID = 0 THEN
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, ID, 
					'USER_NAME'				, USER_NAME, 
					'FCM'					, FCM, 
					'AVATAR_PATH'			, AVATAR_PATH,
					'PHONE'					, PHONE,
					'TITLE'					, VAR_TITLE,
					'BODY'					, VAR_BODY,
					'ORDER_ID'				, IN_ORDER_ID, 
					'BIDDING_ID'			, IN_BIDDING_ID, 
					'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
					'REPORT_ID'				, NULL, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM USERS 
			WHERE 
				ACTIVE 					= TRUE AND
				PUSH_ENABLED			= TRUE AND
                ID						= VAR_DISPOSER_ID;
        ELSE
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, ID, 
					'USER_NAME'				, USER_NAME, 
					'FCM'					, FCM, 
					'AVATAR_PATH'			, AVATAR_PATH,
					'PHONE'					, PHONE,
					'TITLE'					, VAR_TITLE,
					'BODY'					, VAR_BODY,
					'ORDER_ID'				, IN_ORDER_ID, 
					'BIDDING_ID'			, IN_BIDDING_ID, 
					'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
					'REPORT_ID'				, NULL, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM USERS
			WHERE 
				ACTIVE 					= TRUE AND
				PUSH_ENABLED			= TRUE AND
                AFFILIATED_SITE			= VAR_DISPOSER_SITE_ID;
        END IF;
        
        CALL sp_insert_push(
			IN_USER_ID,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
        );
    
		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
			PUSH_INFO						JSON
		);     
		INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PUSH_INFO'			, PUSH_INFO
		)) 
		INTO OUT_TARGET_LIST
		FROM PUSH_INFO_TEMP;  
		DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
		SET rtn_val = 0;
        SET msg_txt = 'success1';
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success222';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_disposer_close_bidding_early`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_ORDER_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE MAX_SELECTION_DURATION				VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
    
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) 
    INTO VAR_ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID = IN_ORDER_ID AND
        ACTIVE = TRUE;
        
    IF VAR_ORDER_EXISTS = 1 THEN
		SELECT ORDER_CODE
        INTO VAR_ORDER_CODE
        FROM SITE_WSTE_DISPOSAL_ORDER
        WHERE ID = IN_ORDER_ID;
        
		CALL sp_req_policy_direction(
			'max_selection_duration',
			MAX_SELECTION_DURATION
		);
    
		SELECT ID INTO VAR_TRANSACTION_ID
		FROM WSTE_CLCT_TRMT_TRANSACTION
		WHERE 
			DISPOSAL_ORDER_ID = IN_ORDER_ID AND
			IN_PROGRESS = TRUE;  
		
		SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']입찰조기마감');
		SET VAR_BODY = CONCAT('신청하신 [', VAR_ORDER_CODE, ']의 입찰이 조기마감되어 입찰자 선정이 시작되었습니다. 선정은 ', CAST(MAX_SELECTION_DURATION AS UNSIGNED)*2, '시간 이내에 완료됩니다.');
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'				, A.ID, 
				'USER_NAME'				, A.USER_NAME, 
				'FCM'					, A.FCM, 
				'AVATAR_PATH'			, A.AVATAR_PATH,
				'PHONE'					, PHONE,
				'TITLE'					, VAR_TITLE,
				'BODY'					, VAR_BODY,
				'ORDER_ID'				, IN_ORDER_ID, 
				'BIDDING_ID'			, B.ID, 
				'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
				'REPORT_ID'				, NULL, 
				'CATEGORY_ID'			, IN_CATEGORY_ID,
				'CREATED_AT'			, VAR_REG_DT
			)
		) 
		INTO VAR_PUSH_INFO
		FROM USERS A
        LEFT JOIN COLLECTOR_BIDDING B ON A.AFFILIATED_SITE = B.COLLECTOR_ID
        LEFT JOIN SITE_WSTE_DISPOSAL_ORDER C ON B.DISPOSAL_ORDER_ID = C.ID
		WHERE 
			A.ACTIVE 				= TRUE AND
			A.PUSH_ENABLED			= TRUE AND
			C.ID					= IN_ORDER_ID AND
            B.ACTIVE				= TRUE AND
            B.DELETED				= FALSE AND
            B.RESPONSE_VISIT		= TRUE AND
            B.CANCEL_VISIT			= FALSE AND
            B.REJECT_BIDDING_APPLY	= FALSE AND
            B.GIVEUP_BIDDING		= FALSE AND
            B.CANCEL_BIDDING		= FALSE AND
            B.REJECT_BIDDING		= FALSE;
        
        CALL sp_insert_push(
			IN_USER_ID,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
        );
    
		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
			PUSH_INFO						JSON
		);     
		INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PUSH_INFO'			, PUSH_INFO
		)) 
		INTO OUT_TARGET_LIST
		FROM PUSH_INFO_TEMP;  
		DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
		SET rtn_val = 0;
        SET msg_txt = 'success1';
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success2';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_disposer_close_visit_early`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_ORDER_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
    
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) 
    INTO VAR_ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID = IN_ORDER_ID AND
        ACTIVE = TRUE;
        
    IF VAR_ORDER_EXISTS = 1 THEN
		SELECT ORDER_CODE
        INTO VAR_ORDER_CODE
        FROM SITE_WSTE_DISPOSAL_ORDER
        WHERE ID = IN_ORDER_ID; 
    
		SELECT ID INTO VAR_TRANSACTION_ID
		FROM WSTE_CLCT_TRMT_TRANSACTION
		WHERE 
			DISPOSAL_ORDER_ID = IN_ORDER_ID AND
			IN_PROGRESS = TRUE;  
        
		SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']방문조기마감');
		SET VAR_BODY = CONCAT('신청하신 [', VAR_ORDER_CODE, ']이 조기마감되어서 입찰이 시작되었습니다.');
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'				, A.ID, 
				'USER_NAME'				, A.USER_NAME, 
				'FCM'					, A.FCM, 
				'AVATAR_PATH'			, A.AVATAR_PATH,
				'PHONE'					, A.PHONE,
				'TITLE'					, VAR_TITLE,
				'BODY'					, VAR_BODY,
				'ORDER_ID'				, IN_ORDER_ID, 
				'BIDDING_ID'			, B.ID, 
				'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
				'REPORT_ID'				, NULL, 
				'CATEGORY_ID'			, IN_CATEGORY_ID,
				'CREATED_AT'			, VAR_REG_DT
			)
		) 
		INTO VAR_PUSH_INFO
		FROM USERS A
        LEFT JOIN COLLECTOR_BIDDING B ON A.AFFILIATED_SITE = B.COLLECTOR_ID
        LEFT JOIN SITE_WSTE_DISPOSAL_ORDER C ON B.DISPOSAL_ORDER_ID = C.ID
		WHERE 
			A.ACTIVE 				= TRUE AND
			A.PUSH_ENABLED			= TRUE AND
			C.ID					= IN_ORDER_ID AND
            B.ACTIVE				= TRUE AND
            B.DELETED				= FALSE AND
            B.RESPONSE_VISIT		= TRUE AND
            B.CANCEL_VISIT			= FALSE AND
            B.REJECT_BIDDING_APPLY	= FALSE;
        
        CALL sp_insert_push(
			IN_USER_ID,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
        );
    
		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
			PUSH_INFO						JSON
		);     
		INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PUSH_INFO'			, PUSH_INFO
		)) 
		INTO OUT_TARGET_LIST
		FROM PUSH_INFO_TEMP;  
		DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success2';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_disposer_reject_bidding_apply`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
	IN IN_COLLECTOR_BIDDING_ID		BIGINT,
    OUT OUT_TARGET_LIST				JSON
)
BEGIN
	DECLARE VAR_ORDER_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_BIDDING_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	
	SELECT COUNT(ID) 
    INTO VAR_ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID = IN_DISPOSER_ORDER_ID AND
        ACTIVE = TRUE;
        
    IF VAR_ORDER_EXISTS = 1 THEN		
		SELECT COUNT(ID) 
		INTO VAR_BIDDING_EXISTS
		FROM COLLECTOR_BIDDING
		WHERE 
			ID = IN_COLLECTOR_BIDDING_ID AND
			ACTIVE = TRUE AND
            REJECT_BIDDING_APPLY = FALSE;
		IF VAR_BIDDING_EXISTS = 1 THEN
			SELECT ORDER_CODE
			INTO VAR_ORDER_CODE
			FROM SITE_WSTE_DISPOSAL_ORDER
			WHERE ID = IN_DISPOSER_ORDER_ID;
			
			SET @MSG = CONCAT('신청하신 [', VAR_ORDER_CODE, ']의 입찰참여가 거절되었습니다.');
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'	, A.ID, 
					'FCM'		, A.FCM,
					'MSG'		, @MSG
				)
			) 
			INTO OUT_TARGET_LIST
			FROM USERS A
			LEFT JOIN COLLECTOR_BIDDING B ON A.AFFILIATED_SITE = B.COLLECTOR_ID
			WHERE 
				A.ACTIVE 				= TRUE AND
				A.PUSH_ENABLED			= TRUE AND
				B.ID					= IN_COLLECTOR_BIDDING_ID AND
				B.ACTIVE				= TRUE AND
				B.DELETED				= FALSE AND
				B.RESPONSE_VISIT		= TRUE AND
				B.CANCEL_VISIT			= FALSE AND
				B.REJECT_BIDDING_APPLY	= FALSE;
        ELSE
			SET OUT_TARGET_LIST = NULL;
        END IF;
    ELSE
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_disposer_response_visit_1`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_BIDDING_ID				BIGINT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_BIDDING_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_RESPONSE_VISIT					TINYINT					DEFAULT NULL;
	DECLARE VAR_STR_RESPONSE					VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_CATEGORY_ID						INT						DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
	
	SELECT COUNT(ID) 
    INTO VAR_BIDDING_EXISTS
    FROM COLLECTOR_BIDDING
    WHERE 
		ID = IN_BIDDING_ID AND
        DELETED = FALSE AND
        CANCEL_VISIT = FALSE AND
        ACTIVE = TRUE;
        
    IF VAR_BIDDING_EXISTS = 1 THEN
		SELECT B.ORDER_CODE, A.COLLECTOR_ID, A.RESPONSE_VISIT
        INTO VAR_ORDER_CODE, VAR_COLLECTOR_SITE_ID, VAR_RESPONSE_VISIT
        FROM COLLECTOR_BIDDING A
        LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
        WHERE
			A.ID = IN_BIDDING_ID;
		IF VAR_RESPONSE_VISIT = TRUE THEN
			SET VAR_STR_RESPONSE = '수락';
            SET VAR_CATEGORY_ID = 2;
        ELSE
			SET VAR_STR_RESPONSE = '거절';
            SET VAR_CATEGORY_ID = 5;
        END IF;
    
		SELECT ID INTO VAR_TRANSACTION_ID
		FROM WSTE_CLCT_TRMT_TRANSACTION
		WHERE 
			DISPOSAL_ORDER_ID = IN_ORDER_ID AND
			IN_PROGRESS = TRUE;  
            
		SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']방문신청', VAR_STR_RESPONSE);
		SET VAR_BODY = CONCAT('신청하신 [', VAR_ORDER_CODE, ']에 대한 방문신청이 ', VAR_STR_RESPONSE, '되었습니다.');
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'				, ID, 
				'USER_NAME'				, USER_NAME, 
				'FCM'					, FCM, 
				'AVATAR_PATH'			, AVATAR_PATH,
				'PHONE'					, PHONE,
				'TITLE'					, VAR_TITLE,
				'BODY'					, VAR_BODY,
				'ORDER_ID'				, IN_ORDER_ID, 
				'BIDDING_ID'			, IN_BIDDING_ID, 
				'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
				'REPORT_ID'				, NULL, 
				'CATEGORY_ID'			, VAR_CATEGORY_ID,
				'CREATED_AT'			, @REG_DT
			)
		) 
		INTO VAR_PUSH_INFO
		FROM USERS
		WHERE 
			ACTIVE 					= TRUE AND
			PUSH_ENABLED			= TRUE AND
			AFFILIATED_SITE			= VAR_COLLECTOR_SITE_ID;
        
        CALL sp_insert_push(
			IN_USER_ID,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
        );
    
		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
			PUSH_INFO						JSON
		);     
		INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PUSH_INFO'			, PUSH_INFO
		)) 
		INTO OUT_TARGET_LIST
		FROM PUSH_INFO_TEMP;  
		DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
		SET rtn_val = 0;
        SET msg_txt = 'success1';
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success222';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_disposer_select_collector`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_BIDDING_ID				BIGINT
)
BEGIN
	DECLARE rtn_val					INT				DEFAULT NULL;
    DECLARE msg_txt					VARCHAR(200)	DEFAULT NULL;
    DECLARE json_data				JSON			DEFAULT NULL;
    DECLARE VAR_PUSH_CATEGORY_ID	INT;
    
    SET VAR_PUSH_CATEGORY_ID = 21;
	CALL sp_push_disposer_select_collector_without_handler(
		IN_USER_ID,
		IN_ORDER_ID,
		IN_BIDDING_ID,
		VAR_PUSH_CATEGORY_ID,
		json_data,
		rtn_val,
		msg_txt
	);
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_disposer_select_collector_without_handler`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_BIDDING_ID				BIGINT,
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_BIDDING_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
	
	SET rtn_val = NULL;
    SET msg_txt = NULL;
	SELECT COUNT(ID) 
    INTO VAR_BIDDING_EXISTS
    FROM COLLECTOR_BIDDING
    WHERE 
		ID = IN_BIDDING_ID AND
        DELETED = FALSE AND
        ACTIVE = TRUE;
        
    IF VAR_BIDDING_EXISTS = 1 THEN
		SELECT B.ORDER_CODE, A.COLLECTOR_ID
        INTO VAR_ORDER_CODE, VAR_COLLECTOR_SITE_ID
        FROM COLLECTOR_BIDDING A
        LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
        WHERE
			A.ID = IN_BIDDING_ID;
    
		SELECT ID INTO VAR_TRANSACTION_ID
		FROM WSTE_CLCT_TRMT_TRANSACTION
		WHERE 
			DISPOSAL_ORDER_ID = IN_ORDER_ID AND
			IN_PROGRESS = TRUE;  
            
		SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']낙찰자선정');
		SET VAR_BODY = CONCAT('신청하신 [', VAR_ORDER_CODE, ']의 입찰에 낙찰되셨습니다. 상세 내용을 확인해주세요.');
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'				, ID, 
				'USER_NAME'				, USER_NAME, 
				'FCM'					, FCM, 
				'AVATAR_PATH'			, AVATAR_PATH,
				'PHONE'					, PHONE,
				'TITLE'					, VAR_TITLE,
				'BODY'					, VAR_BODY,
				'ORDER_ID'				, IN_ORDER_ID, 
				'BIDDING_ID'			, IN_BIDDING_ID, 
				'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
				'REPORT_ID'				, NULL, 
				'CATEGORY_ID'			, IN_CATEGORY_ID,
				'CREATED_AT'			, @REG_DT
			)
		) 
		INTO VAR_PUSH_INFO
		FROM USERS
		WHERE 
			ACTIVE 					= TRUE AND
			PUSH_ENABLED			= TRUE AND
			AFFILIATED_SITE			= VAR_COLLECTOR_SITE_ID;
        
        CALL sp_insert_push(
			IN_USER_ID,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
        );
		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
			PUSH_INFO						JSON
		);     
		INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PUSH_INFO'			, PUSH_INFO
		)) 
		INTO OUT_TARGET_LIST
		FROM PUSH_INFO_TEMP;  
		DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success-sp_push_disposer_select_collector';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_disposer_write_review`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_SITE_ID					BIGINT,
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_DISPOSER_NAME					VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
	
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT IF(A.SITE_ID = 0, C.USER_NAME, B.SITE_NAME), A.ORDER_CODE
    INTO VAR_DISPOSER_NAME, VAR_ORDER_CODE
	FROM SITE_WSTE_DISPOSAL_ORDER A 
    LEFT JOIN COMP_SITE B ON A.SITE_ID = B.ID
    LEFT JOIN USERS C ON A.DISPOSER_ID = C.ID
	WHERE A.ID = IN_ORDER_ID;
    
	SELECT ID INTO VAR_TRANSACTION_ID
	FROM WSTE_CLCT_TRMT_TRANSACTION
	WHERE 
		DISPOSAL_ORDER_ID = IN_ORDER_ID AND
		IN_PROGRESS = TRUE;  
		
	SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']리뷰등록');
	SET VAR_BODY = CONCAT('[', VAR_DISPOSER_NAME, ']님이 리뷰를 등록했습니다.');
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'USER_ID'				, ID, 
			'USER_NAME'				, USER_NAME, 
			'FCM'					, FCM, 
			'AVATAR_PATH'			, AVATAR_PATH,
			'PHONE'					, PHONE,
			'TITLE'					, VAR_TITLE,
			'BODY'					, VAR_BODY,
			'ORDER_ID'				, IN_ORDER_ID, 
			'BIDDING_ID'			, NULL, 
			'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
			'REPORT_ID'				, NULL, 
			'CATEGORY_ID'			, IN_CATEGORY_ID,
			'CREATED_AT'			, VAR_REG_DT
		)
	) 
	INTO VAR_PUSH_INFO
	FROM USERS
	WHERE 
		ACTIVE 					= TRUE AND
		PUSH_ENABLED			= TRUE AND
		AFFILIATED_SITE			= IN_SITE_ID;
        
	CALL sp_insert_push(
		IN_USER_ID,
		VAR_PUSH_INFO,
		rtn_val,
		msg_txt
	);

	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
		PUSH_INFO						JSON
	);     
	INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'PUSH_INFO'			, PUSH_INFO
	)) 
	INTO OUT_TARGET_LIST
	FROM PUSH_INFO_TEMP;  
	DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
	SET rtn_val = 0;
	SET msg_txt = 'success1';
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_new_visitor_come`(
	IN IN_USER_ID					BIGINT,
	IN IN_ORDER_ID					BIGINT,
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_ORDER_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_ORDER_CODE						VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_DISPOSER_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
    
    CALL sp_req_current_time(VAR_REG_DT);
	SELECT COUNT(ID) 
    INTO VAR_ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID = IN_ORDER_ID AND
        ACTIVE = TRUE;
    
	SELECT ID INTO VAR_TRANSACTION_ID
	FROM WSTE_CLCT_TRMT_TRANSACTION
	WHERE 
		DISPOSAL_ORDER_ID = IN_ORDER_ID AND
		IN_PROGRESS = TRUE;  
        
    IF VAR_ORDER_EXISTS = 1 THEN
		SELECT ORDER_CODE, DISPOSER_ID, SITE_ID
        INTO VAR_ORDER_CODE, VAR_DISPOSER_ID, VAR_DISPOSER_SITE_ID
        FROM SITE_WSTE_DISPOSAL_ORDER
        WHERE
			ID = IN_ORDER_ID AND
			ACTIVE = TRUE;
		SET VAR_TITLE = CONCAT('[', VAR_ORDER_CODE, ']방문신청');
		SET VAR_BODY = CONCAT('신청하신 [', VAR_ORDER_CODE, ']에 대하여 방문신청건이 있습니다.');
        IF VAR_DISPOSER_SITE_ID = 0 THEN
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, ID, 
					'USER_NAME'				, USER_NAME, 
					'FCM'					, FCM, 
					'AVATAR_PATH'			, AVATAR_PATH,
					'PHONE'					, PHONE,
					'TITLE'					, VAR_TITLE,
					'BODY'					, VAR_BODY,
					'ORDER_ID'				, IN_ORDER_ID, 
					'BIDDING_ID'			, NULL, 
					'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
					'REPORT_ID'				, NULL, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM USERS 
			WHERE 
				ACTIVE 					= TRUE AND
				PUSH_ENABLED			= TRUE AND
                ID						= VAR_DISPOSER_ID;
        ELSE
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_ID'				, A.ID, 
					'USER_NAME'				, A.USER_NAME, 
					'FCM'					, A.FCM, 
					'AVATAR_PATH'			, AVATAR_PATH,
					'PHONE'					, PHONE,
					'TITLE'					, VAR_TITLE,
					'BODY'					, VAR_BODY,
					'ORDER_ID'				, IN_ORDER_ID, 
					'BIDDING_ID'			, NULL, 
					'TRANSACTION_ID'		, VAR_TRANSACTION_ID, 
					'REPORT_ID'				, NULL, 
					'CATEGORY_ID'			, IN_CATEGORY_ID,
					'CREATED_AT'			, VAR_REG_DT
				)
			) 
			INTO VAR_PUSH_INFO
			FROM USERS A 
			LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID
			WHERE 
				A.ACTIVE 					= TRUE AND
				A.PUSH_ENABLED				= TRUE AND
				B.ACTIVE 					= TRUE AND
				A.AFFILIATED_SITE			= VAR_DISPOSER_SITE_ID;
        END IF;
        
        CALL sp_insert_push(
			IN_USER_ID,
			VAR_PUSH_INFO,
			rtn_val,
			msg_txt
        );
    
		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
			PUSH_INFO						JSON
		);     
		INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PUSH_INFO'			, PUSH_INFO
		)) 
		INTO OUT_TARGET_LIST
		FROM PUSH_INFO_TEMP;  
		DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success2';
		SET OUT_TARGET_LIST = NULL;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_schedule_ask_review`(
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_push_schedule_visit_end
Input param 	: 1개
Output param 	: 1개
Job 			: 푸시를 보낼 배출 물건은 푸시가 발송되지 않은 상태에서 해당 물건이 입찰중인 입찰건을 반환한다.
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT;    
    DECLARE CUR_ORDER_CODE						VARCHAR(10);  
    DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;    
	DECLARE VAR_DISPOSER_INFO					JSON					DEFAULT NULL; 
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_NAME					VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.DISPOSER_ORDER_ID,
        C.ORDER_CODE,
        A.COLLECTOR_SITE_ID
    FROM TRANSACTION_REPORT A 
    LEFT JOIN COMP_SITE B ON A.DISPOSER_SITE_ID = B.ID
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER C ON A.DISPOSER_ORDER_ID = C.ID
	WHERE 
        B.ACTIVE 									= TRUE AND
        A.CONFIRMED									= TRUE AND
        DATE_ADD(A.CONFIRMED_AT, INTERVAL 1 DAY) 	>= NOW() AND
		C.ID										NOT IN (SELECT ORDER_ID FROM PUSH_HISTORY WHERE CATEGORY_ID = IN_CATEGORY_ID);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_SCHEDULE_ASK_REVIEW_TEMP (
		ORDER_ID						BIGINT,
		PUSH_INFO						JSON
	);        
	
	SET rtn_val = NULL;
	SET msg_txt = NULL;
	SET OUT_TARGET_LIST = NULL;
	OPEN TEMP_CURSOR;	
	cloop: LOOP		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_COLLECTOR_SITE_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PUSH_SCHEDULE_ASK_REVIEW_TEMP(
			ORDER_ID
		)
		VALUES(
			CUR_ORDER_ID
		);
		
        SELECT SITE_NAME INTO VAR_COLLECTOR_NAME
        FROM COMP_SITE
        WHERE ID = CUR_COLLECTOR_SITE_ID;
        
		SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']리뷰등록요청');
		SET VAR_BODY = CONCAT('처리는 만족스러우셨나요? [', VAR_COLLECTOR_NAME, ']에 대한 리뷰를 등록해 주세요.');
        CALL sp_get_disposer_list_for_push(
			CUR_ORDER_ID,
			VAR_TITLE,
			VAR_BODY,
			IN_CATEGORY_ID,
            OUT_TARGET_LIST,
            rtn_val,
            msg_txt
        );
        /*
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'DISPOSER_INFO'				, VAR_DISPOSER_INFO, 
			'COLLECTOR_INFO'			, NULL
		)) 
		INTO @PUSH_INFO;
		UPDATE PUSH_SCHEDULE_ASK_REVIEW_TEMP SET PUSH_INFO = @PUSH_INFO WHERE ORDER_ID = CUR_ORDER_ID;
		*/
	END LOOP;   
	CLOSE TEMP_CURSOR;
	/*
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
		'PUSH_INFO'					, PUSH_INFO
	)) 
	INTO OUT_TARGET_LIST FROM PUSH_SCHEDULE_ASK_REVIEW_TEMP;
	*/
	SET rtn_val = 0;
	SET msg_txt = 'Success-26';
	DROP TABLE IF EXISTS PUSH_SCHEDULE_ASK_REVIEW_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_schedule_bidding_end_1`(
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_push_schedule_bidding_end_1
Input param 	: 1개
Output param 	: 1개
Job 			: 입찰마감 후 선정단계 진입시 푸시 반환함
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT;    
    DECLARE CUR_ORDER_CODE						VARCHAR(10);   
	DECLARE VAR_DISPOSER_INFO					JSON					DEFAULT NULL; 
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TITLE_2							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY_2							VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID,
        A.ORDER_CODE
    FROM SITE_WSTE_DISPOSAL_ORDER A 
	LEFT JOIN V_ORDER_STATE B ON A.ID = B.DISPOSER_ORDER_ID
    LEFT JOIN COMP_SITE C ON A.SITE_ID = C.ID
	WHERE 
		IF(B.STATE_CODE = 110,
			IF(A.SITE_ID = 0,
				A.DISPOSER_ID IN (SELECT ID FROM USERS WHERE ACTIVE = TRUE AND PUSH_ENABLED = TRUE AND AFFILIATED_SITE = A.SITE_ID),
                C.ACTIVE = TRUE
			) AND
            A.ACTIVE = TRUE,
			A.ID = 0
		) AND
		A.ID						NOT IN (SELECT ORDER_ID FROM PUSH_HISTORY WHERE CATEGORY_ID = IN_CATEGORY_ID);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_SCHEDULE_BIDDING_END_1_TEMP (
		ORDER_ID						BIGINT,
		PUSH_INFO						JSON
        
	);        
	   
	SET OUT_TARGET_LIST = NULL;
	SET rtn_val = NULL;
	SET msg_txt = NULL;
	OPEN TEMP_CURSOR;	
	cloop: LOOP		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PUSH_SCHEDULE_BIDDING_END_1_TEMP(
			ORDER_ID
		)
		VALUES(
			CUR_ORDER_ID
		);
		
		SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']입찰마감');
		SET VAR_BODY = '낙찰자를 확인해 주세요';
		SET VAR_TITLE_2 = CONCAT('[', CUR_ORDER_CODE,']입찰마감');
		SET VAR_BODY_2 = '선정대기 해주세요';
        CALL sp_get_member_list_for_push_2(
			CUR_ORDER_ID,
			VAR_TITLE,
			VAR_BODY,
			VAR_TITLE_2,
			VAR_BODY_2,
			IN_CATEGORY_ID,
            OUT_TARGET_LIST,
            rtn_val,
            msg_txt
        );
	END LOOP;   
	CLOSE TEMP_CURSOR;
	SET rtn_val = 0;
	SET msg_txt = 'Success-19';
	DROP TABLE IF EXISTS PUSH_SCHEDULE_BIDDING_END_1_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_schedule_bidding_end_2`(
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val					INT,
    OUT msg_txt					VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_push_schedule_bidding_end_2
Input param 	: 1개
Output param 	: 1개
Job 			: 입찰마감 1시간 전 푸시알림
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT;    
    DECLARE CUR_ORDER_CODE						VARCHAR(10);  
	DECLARE VAR_DISPOSER_INFO					JSON					DEFAULT NULL; 
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID,
        A.ORDER_CODE
    FROM SITE_WSTE_DISPOSAL_ORDER A 
	LEFT JOIN V_ORDER_STATE B ON A.ID = B.DISPOSER_ORDER_ID
    LEFT JOIN COMP_SITE C ON A.SITE_ID = C.ID
	WHERE 
		IF(B.STATE_CODE = 103,
			A.BIDDING_END_AT <= ADDTIME(NOW(), '1:00:00') AND
			IF(A.SITE_ID = 0,
				A.DISPOSER_ID IN (SELECT ID FROM USERS WHERE ACTIVE = TRUE AND PUSH_ENABLED = TRUE AND AFFILIATED_SITE = A.SITE_ID),
                C.ACTIVE = TRUE
			) AND
            A.ACTIVE = TRUE,
			A.ID = 0
		) AND
		A.ID						NOT IN (SELECT ORDER_ID FROM PUSH_HISTORY WHERE CATEGORY_ID = IN_CATEGORY_ID);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_SCHEDULE_BIDDING_END_2_TEMP (
		ORDER_ID						BIGINT,
		PUSH_INFO						JSON
        
	);        
	SET OUT_TARGET_LIST = NULL;
	SET rtn_val = NULL;
	SET msg_txt = NULL;
	OPEN TEMP_CURSOR;	
	cloop: LOOP		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PUSH_SCHEDULE_BIDDING_END_2_TEMP(
			ORDER_ID
		)
		VALUES(
			CUR_ORDER_ID
		);
		
		SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']입찰마감 1시간전');
		SET VAR_BODY = '입찰마감시간 1시간 남았습니다.';
        CALL sp_get_collector_list_for_push(
			CUR_ORDER_ID,
			VAR_TITLE,
			VAR_BODY,
			IN_CATEGORY_ID,
            OUT_TARGET_LIST,
            rtn_val,
            msg_txt
        );
        /*
		SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']입찰마감 1시간전');
		SET VAR_BODY = '입찰마감시간 1시간 남았습니다.';
		CALL sp_get_collector_list_for_push(
			CUR_ORDER_ID,
			VAR_TITLE,
			VAR_BODY,
			IN_CATEGORY_ID,
			VAR_COLLECTOR_INFO,
			rtn_val,
			msg_txt
		);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'DISPOSER_INFO'				, VAR_DISPOSER_INFO, 
			'COLLECTOR_INFO'			, VAR_COLLECTOR_INFO
		)) 
		INTO @PUSH_INFO;
		UPDATE PUSH_SCHEDULE_BIDDING_END_2_TEMP SET PUSH_INFO = @PUSH_INFO WHERE ORDER_ID = CUR_ORDER_ID;
        */
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	/*
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
		'PUSH_INFO'					, PUSH_INFO
	)) 
	INTO OUT_TARGET_LIST FROM PUSH_SCHEDULE_BIDDING_END_2_TEMP;
	*/
    /*
	SET rtn_val = 0;
	SET msg_txt = 'Success-17';
    */
	DROP TABLE IF EXISTS PUSH_SCHEDULE_BIDDING_END_2_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_schedule_bidding_end_3`(
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_push_schedule_bidding_end_3
Input param 	: 1개
Output param 	: 1개
Job 			: 입찰 종료 후 배출자가 낙찰자를 선정하지 않고 자동 종료되는 경우 푸시 반환
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT;    
    DECLARE CUR_ORDER_CODE						VARCHAR(10);  
	DECLARE VAR_DISPOSER_INFO					JSON					DEFAULT NULL; 
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID,
        A.ORDER_CODE
    FROM SITE_WSTE_DISPOSAL_ORDER A 
	LEFT JOIN V_ORDER_STATE B ON A.ID = B.DISPOSER_ORDER_ID
	LEFT JOIN V_TRANSACTION_STATE C ON A.TRANSACTION_ID = C.TRANSACTION_ID
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION D ON A.TRANSACTION_ID = D.ID
    LEFT JOIN COMP_SITE E ON A.SITE_ID = E.ID
	WHERE 
		IF(B.STATE_CODE = 115,
			IF(A.PROSPECTIVE_BIDDERS = 1,
				A.ACTIVE = TRUE,
                A.ID = 0
            ),
			A.ID = 0
		) AND
		A.ID						NOT IN (SELECT ORDER_ID FROM PUSH_HISTORY WHERE CATEGORY_ID = IN_CATEGORY_ID);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_SCHEDULE_VISIT_END_TEMP (
		ORDER_ID						BIGINT,
		DISPOSER_INFO					JSON,
		COLLECTOR_INFO					JSON
        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PUSH_SCHEDULE_VISIT_END_TEMP(
			ORDER_ID
		)
		VALUES(
			CUR_ORDER_ID
		);
		
		SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']입찰종료');
		SET VAR_BODY = '낙찰자를 확인하지 않아 거래가 종료되었습니다.';
        CALL sp_get_disposer_list_for_push(
			CUR_ORDER_ID,
			VAR_TITLE,
			VAR_BODY,
			IN_CATEGORY_ID,
            VAR_DISPOSER_INFO,
            rtn_val,
            msg_txt
        );
        IF rtn_val = 0 THEN
			CALL sp_get_collector_list_for_push_2(
				CUR_ORDER_ID,
				IN_CATEGORY_ID,
				VAR_COLLECTOR_INFO,
				rtn_val,
				msg_txt
			);
			IF rtn_val = 0 THEN
				UPDATE PUSH_SCHEDULE_VISIT_END_TEMP 
				SET 
					DISPOSER_INFO 			= VAR_DISPOSER_INFO,
					COLLECTOR_INFO 			= VAR_COLLECTOR_INFO
				WHERE ORDER_ID 				= CUR_ORDER_ID;
            ELSE
				LEAVE cloop;
            END IF;
        ELSE
			LEAVE cloop;
        END IF;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
		'DISPOSER_INFO'				, DISPOSER_INFO, 
		'COLLECTOR_INFO'			, COLLECTOR_INFO
	)) 
	INTO OUT_TARGET_LIST FROM PUSH_SCHEDULE_VISIT_END_TEMP;
	
	SET rtn_val = 0;
	SET msg_txt = 'Success';
	DROP TABLE IF EXISTS PUSH_SCHEDULE_VISIT_END_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_schedule_bidding_end_4`(
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_push_schedule_bidding_end_4
Input param 	: 1개
Output param 	: 1개
Job 			: 입찰 종료 후 배출자가 1순위자 낙찰자를 선정하지 않아 1순위자는 유찰되고 2순위자에게 선택의 기회가 생기는 경우 푸시 알림
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT;    
    DECLARE CUR_ORDER_CODE						VARCHAR(10);  
	DECLARE VAR_DISPOSER_INFO					JSON					DEFAULT NULL; 
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID,
        A.ORDER_CODE
    FROM SITE_WSTE_DISPOSAL_ORDER A 
	LEFT JOIN V_ORDER_STATE B ON A.ID = B.DISPOSER_ORDER_ID
	LEFT JOIN V_TRANSACTION_STATE C ON A.TRANSACTION_ID = C.TRANSACTION_ID
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION D ON A.TRANSACTION_ID = D.ID
    LEFT JOIN COMP_SITE E ON A.SITE_ID = E.ID
	WHERE 
		IF(B.STATE_CODE = 115,
			IF(A.PROSPECTIVE_BIDDERS = 2,
				A.ACTIVE = TRUE,
                A.ID = 0
            ),
			A.ID = 0
		) AND
		A.ID						NOT IN (SELECT ORDER_ID FROM PUSH_HISTORY WHERE CATEGORY_ID = IN_CATEGORY_ID);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_SCHEDULE_VISIT_END_TEMP (
		ORDER_ID						BIGINT,
		DISPOSER_INFO					JSON,
		COLLECTOR_INFO					JSON
        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PUSH_SCHEDULE_VISIT_END_TEMP(
			ORDER_ID
		)
		VALUES(
			CUR_ORDER_ID
		);
		
		SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']1순위유찰알림');
		SET VAR_BODY = '1순위 낙찰자를 확인하지 않아 1순위 낙찰자가 유찰되었습니다.';
        CALL sp_get_disposer_list_for_push(
			CUR_ORDER_ID,
			VAR_TITLE,
			VAR_BODY,
			IN_CATEGORY_ID,
            VAR_DISPOSER_INFO,
            rtn_val,
            msg_txt
        );
        IF rtn_val = 0 THEN
			CALL sp_get_collector_list_for_push_3(
				CUR_ORDER_ID,
				IN_CATEGORY_ID,
				VAR_COLLECTOR_INFO,
				rtn_val,
				msg_txt
			);
			IF rtn_val = 0 THEN
				UPDATE PUSH_SCHEDULE_VISIT_END_TEMP 
				SET 
					DISPOSER_INFO 			= VAR_DISPOSER_INFO,
					COLLECTOR_INFO 			= VAR_COLLECTOR_INFO
				WHERE ORDER_ID 				= CUR_ORDER_ID;
            ELSE
				LEAVE cloop;
            END IF;
        ELSE
			LEAVE cloop;
        END IF;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
		'DISPOSER_INFO'				, DISPOSER_INFO, 
		'COLLECTOR_INFO'			, COLLECTOR_INFO
	)) 
	INTO OUT_TARGET_LIST FROM PUSH_SCHEDULE_VISIT_END_TEMP;
	
	SET rtn_val = 0;
	SET msg_txt = 'Success';
	DROP TABLE IF EXISTS PUSH_SCHEDULE_VISIT_END_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_schedule_visit_end`(
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_push_schedule_visit_end
Input param 	: 1개
Output param 	: 1개
Job 			: 푸시를 보낼 배출 물건은 푸시가 발송되지 않은 상태에서 해당 물건이 입찰중인 입찰건을 반환한다.
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT;    
    DECLARE CUR_ORDER_CODE						VARCHAR(10);  
	DECLARE VAR_DISPOSER_INFO					JSON					DEFAULT NULL; 
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID,
        A.ORDER_CODE
    FROM SITE_WSTE_DISPOSAL_ORDER A 
	LEFT JOIN V_ORDER_STATE B ON A.ID = B.DISPOSER_ORDER_ID
	LEFT JOIN V_TRANSACTION_STATE C ON A.TRANSACTION_ID = C.TRANSACTION_ID
    LEFT JOIN COMP_SITE D ON A.SITE_ID = D.ID
	WHERE 
		IF(A.COLLECTOR_ID 					IS NULL,
			B.STATE_CODE 					= 102,
			C.TRANSACTION_STATE_CODE 		= 201
		) AND
        D.ACTIVE = TRUE AND
		A.ID						NOT IN (SELECT ORDER_ID FROM PUSH_HISTORY WHERE CATEGORY_ID = IN_CATEGORY_ID);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_SCHEDULE_VISIT_END_TEMP (
		ORDER_ID						BIGINT,
		DISPOSER_INFO					JSON,
		COLLECTOR_INFO					JSON
        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PUSH_SCHEDULE_VISIT_END_TEMP(
			ORDER_ID
		)
		VALUES(
			CUR_ORDER_ID
		);
		
		SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']방문신청마감');
		SET VAR_BODY = '방문신청이 마감되었습니다.';
        CALL sp_get_disposer_list_for_push(
			CUR_ORDER_ID,
			VAR_TITLE,
			VAR_BODY,
			IN_CATEGORY_ID,
            VAR_DISPOSER_INFO,
            rtn_val,
            msg_txt
        );
        IF rtn_val = 0 THEN
			SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']방문신청마감');
			SET VAR_BODY = '방문신청이 마감되었습니다.';
			CALL sp_get_collector_list_for_push(
				CUR_ORDER_ID,
				VAR_TITLE,
				VAR_BODY,
				IN_CATEGORY_ID,
				VAR_COLLECTOR_INFO,
				rtn_val,
				msg_txt
			);
			IF rtn_val = 0 THEN
				UPDATE PUSH_SCHEDULE_VISIT_END_TEMP 
				SET 
					DISPOSER_INFO 			= VAR_DISPOSER_INFO,
					COLLECTOR_INFO 			= VAR_COLLECTOR_INFO
				WHERE ORDER_ID 				= CUR_ORDER_ID;
            ELSE
				LEAVE cloop;
            END IF;
        ELSE
			LEAVE cloop;
        END IF;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
		'DISPOSER_INFO'				, DISPOSER_INFO, 
		'COLLECTOR_INFO'			, COLLECTOR_INFO
	)) 
	INTO OUT_TARGET_LIST FROM PUSH_SCHEDULE_VISIT_END_TEMP;
	
	SET rtn_val = 0;
	SET msg_txt = 'Success';
	DROP TABLE IF EXISTS PUSH_SCHEDULE_VISIT_END_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_schedule_visit_end_2`(
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_push_schedule_visit_end_2
Input param 	: 1개
Output param 	: 1개
Job 			: 무방문신청 종료에 대한 푸시를 반환한다
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT;  
    DECLARE CUR_ORDER_CODE						VARCHAR(10);  
	DECLARE VAR_DISPOSER_INFO					JSON					DEFAULT NULL; 
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID,
        A.ORDER_CODE
    FROM SITE_WSTE_DISPOSAL_ORDER A 
    LEFT JOIN COMP_SITE B ON A.SITE_ID = B.ID
	WHERE 
		IF(A.VISIT_END_AT 	IS NOT NULL,
			A.VISIT_END_AT	<= NOW() AND
            A.COLLECTOR_ID IS NULL AND
            A.ACTIVE = TRUE AND
            A.IS_DELETED = FALSE AND
            A.BIDDING_END_AT >= NOW() AND
			IF(A.SITE_ID 	= 0,
				A.ID NOT IN (SELECT ORDER_ID FROM PUSH_HISTORY WHERE CATEGORY_ID = IN_CATEGORY_ID) AND
				A.DISPOSER_ID IN (SELECT ID FROM USERS WHERE PUSH_ENABLED = TRUE AND ACTIVE = TRUE),
				B.ACTIVE 	= TRUE AND
                A.ID NOT IN (SELECT ORDER_ID FROM PUSH_HISTORY WHERE CATEGORY_ID = IN_CATEGORY_ID) AND
                A.SITE_ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE PUSH_ENABLED = TRUE AND ACTIVE = TRUE)
                
			),
            A.ID = 0
		);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_SCHEDULE_VISIT_END_TEMP (
		ORDER_ID						BIGINT,
		DISPOSER_INFO					JSON,
		COLLECTOR_INFO					JSON
        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PUSH_SCHEDULE_VISIT_END_TEMP(
			ORDER_ID
		)
		VALUES(
			CUR_ORDER_ID
		);
		
		SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']방문신청마감');
		SET VAR_BODY = '방문신청이 마감되었습니다.';
        CALL sp_get_disposer_list_for_push(
			CUR_ORDER_ID,
			VAR_TITLE,
			VAR_BODY,
			IN_CATEGORY_ID,
            VAR_DISPOSER_INFO,
            rtn_val,
            msg_txt
        );
        IF rtn_val = 0 THEN
			SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']방문신청마감');
			SET VAR_BODY = '방문신청이 마감되었습니다.';
			CALL sp_get_collector_list_for_push(
				CUR_ORDER_ID,
				VAR_TITLE,
				VAR_BODY,
				IN_CATEGORY_ID,
				VAR_COLLECTOR_INFO,
				rtn_val,
				msg_txt
			);
			IF rtn_val = 0 THEN
				UPDATE PUSH_SCHEDULE_VISIT_END_TEMP 
				SET 
					DISPOSER_INFO 			= VAR_DISPOSER_INFO,
					COLLECTOR_INFO 			= VAR_COLLECTOR_INFO
				WHERE ORDER_ID 				= CUR_ORDER_ID;
            ELSE
				LEAVE cloop;
            END IF;
        ELSE
			LEAVE cloop;
        END IF;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
		'DISPOSER_INFO'				, DISPOSER_INFO, 
		'COLLECTOR_INFO'			, COLLECTOR_INFO
	)) 
	INTO OUT_TARGET_LIST FROM PUSH_SCHEDULE_VISIT_END_TEMP;
	
	SET rtn_val = 0;
	SET msg_txt = 'Success11';
	DROP TABLE IF EXISTS PUSH_SCHEDULE_VISIT_END_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_schedule_visit_end_3`(
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val					INT,
    OUT msg_txt					VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_push_schedule_visit_end_3
Input param 	: 1개
Output param 	: 1개
Job 			: 방문마감 하루전 푸시 반환
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT;    
    DECLARE CUR_ORDER_CODE						VARCHAR(10);  
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TITLE_2							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY_2							VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID,
        A.ORDER_CODE
    FROM SITE_WSTE_DISPOSAL_ORDER A 
	LEFT JOIN V_ORDER_STATE B ON A.ID = B.DISPOSER_ORDER_ID
	LEFT JOIN V_TRANSACTION_STATE C ON A.TRANSACTION_ID = C.TRANSACTION_ID
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION D ON A.TRANSACTION_ID = D.ID
    LEFT JOIN COMP_SITE E ON A.SITE_ID = E.ID
    LEFT JOIN USERS F ON A.DISPOSER_ID = F.ID
	WHERE 
		IF(A.COLLECTOR_ID IS NULL,
			IF(B.STATE_CODE = 102,
				A.VISIT_END_AT <= DATE_ADD(NOW(), INTERVAL 1 DAY) AND
				A.ACTIVE = TRUE AND
                IF(A.SITE_ID = 0, F.ACTIVE = TRUE, E.ACTIVE = TRUE),
				A.ID = 0
			),
			IF(C.TRANSACTION_STATE_CODE = 201,
				D.VISIT_END_AT <= DATE_ADD(NOW(), INTERVAL 1 DAY) AND
				D.IN_PROGRESS = TRUE AND
                IF(A.SITE_ID = 0, F.ACTIVE = TRUE, E.ACTIVE = TRUE),
				A.ID = 0
			)
		) AND
		A.ID NOT IN (SELECT ORDER_ID FROM PUSH_HISTORY WHERE CATEGORY_ID = IN_CATEGORY_ID);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_SCHEDULE_VISIT_END_3_TEMP (
		ORDER_ID						BIGINT,
		DISPOSER_INFO					JSON,
		COLLECTOR_INFO					JSON
	);        
	
	SET rtn_val = NULL;
	SET msg_txt = NULL;
	SET OUT_TARGET_LIST = NULL;
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PUSH_SCHEDULE_VISIT_END_3_TEMP(
			ORDER_ID
		)
		VALUES(
			CUR_ORDER_ID
		);
		
		SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']방문마감 1일전');
		SET VAR_BODY = '방문마감이 1일 남았습니다.';
		SET VAR_TITLE_2 = VAR_TITLE;
		SET VAR_BODY_2 = VAR_BODY;
        CALL sp_get_member_list_for_push_2(
			CUR_ORDER_ID,
			VAR_TITLE,
			VAR_BODY,
			VAR_TITLE_2,
			VAR_BODY_2,
			IN_CATEGORY_ID,
            OUT_TARGET_LIST,
            rtn_val,
            msg_txt
        );
        /*
		UPDATE PUSH_SCHEDULE_VISIT_END_3_TEMP 
		SET 
			DISPOSER_INFO 			= VAR_DISPOSER_INFO,
			COLLECTOR_INFO 			= VAR_COLLECTOR_INFO
		WHERE ORDER_ID 				= CUR_ORDER_ID;
		*/
	END LOOP;   
	CLOSE TEMP_CURSOR;
	/*
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
		'DISPOSER_INFO'				, DISPOSER_INFO, 
		'COLLECTOR_INFO'			, COLLECTOR_INFO
	)) 
	INTO OUT_TARGET_LIST FROM PUSH_SCHEDULE_VISIT_END_3_TEMP;
	*/
	SET rtn_val = 0;
    SET msg_txt = 'success-8';
	DROP TABLE IF EXISTS PUSH_SCHEDULE_VISIT_END_3_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_schedule_visit_end_4`(
	IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_push_schedule_visit_end_4
Input param 	: 1개
Output param 	: 1개
Job 			: 방문신청자가 존재하지 않아 방문일정을 포함한 전체 입찰일정의 종료를 알림
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT;    
    DECLARE CUR_ORDER_CODE						VARCHAR(10);  
	DECLARE VAR_DISPOSER_INFO					JSON					DEFAULT NULL; 
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID,
        A.ORDER_CODE
    FROM SITE_WSTE_DISPOSAL_ORDER A 
	LEFT JOIN V_ORDER_STATE B ON A.ID = B.DISPOSER_ORDER_ID
	LEFT JOIN V_TRANSACTION_STATE C ON A.TRANSACTION_ID = C.TRANSACTION_ID
    LEFT JOIN COMP_SITE D ON A.SITE_ID = D.ID
	WHERE 
		B.STATE_CODE 					= 116 AND
        D.ACTIVE = TRUE AND
		A.ID						NOT IN (SELECT ORDER_ID FROM PUSH_HISTORY WHERE CATEGORY_ID = IN_CATEGORY_ID);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_SCHEDULE_VISIT_END_4_TEMP (
		ORDER_ID						BIGINT,
		PUSH_INFO						JSON
        
	);        
	
	SET rtn_val = NULL;
	SET msg_txt = NULL;
	SET OUT_TARGET_LIST = NULL;
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PUSH_SCHEDULE_VISIT_END_4_TEMP(
			ORDER_ID
		)
		VALUES(
			CUR_ORDER_ID
		);
		
		SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']무방문입찰종료');
		SET VAR_BODY = '방문신청자가 존재하지 않아 입찰이 자동마감되었습니다.';
        CALL sp_get_disposer_list_for_push(
			CUR_ORDER_ID,
			VAR_TITLE,
			VAR_BODY,
			IN_CATEGORY_ID,
            OUT_TARGET_LIST,
            rtn_val,
            msg_txt
        );
        /*
		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_SCHEDULE_VISIT_END_4_TEMP_PUSH_INFO (
			DISPOSER_INFO					JSON,
			COLLECTOR_INFO					JSON
		);        
		INSERT INTO PUSH_SCHEDULE_VISIT_END_4_TEMP_PUSH_INFO(
			DISPOSER_INFO, 
			COLLECTOR_INFO
		)
		VALUES(
			VAR_DISPOSER_INFO, 
			NULL
		);
*/
		/*
		UPDATE PUSH_SCHEDULE_VISIT_END_4_TEMP 
		SET 
			DISPOSER_INFO 			= VAR_DISPOSER_INFO,
			COLLECTOR_INFO 			= VAR_COLLECTOR_INFO
		WHERE ORDER_ID 				= CUR_ORDER_ID;
		*/
	END LOOP;   
	CLOSE TEMP_CURSOR;
	/*
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
		'DISPOSER_INFO'				, DISPOSER_INFO, 
		'COLLECTOR_INFO'			, COLLECTOR_INFO
	)) 
	INTO OUT_TARGET_LIST FROM PUSH_SCHEDULE_VISIT_END_4_TEMP;
	*/
	SET rtn_val = 0;
	SET msg_txt = 'Success-9';
	DROP TABLE IF EXISTS PUSH_SCHEDULE_VISIT_END_4_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_scheduler_base`(
	IN IN_CATEGORY_ID			INT
)
BEGIN
	DECLARE rtn_val 							INT 					DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 			DEFAULT NULL;
	DECLARE json_data							JSON 					DEFAULT NULL;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;  
    /*트랜잭션 시작*/
	IF IN_CATEGORY_ID = 8 THEN
		CALL sp_push_schedule_visit_end_3(
			IN_CATEGORY_ID,
			json_data,
			rtn_val,
			msg_txt
		);
		CALL sp_return_results(rtn_val, msg_txt, json_data);    
	ELSEIF IN_CATEGORY_ID = 9 THEN
		CALL sp_push_schedule_visit_end_4(
			IN_CATEGORY_ID,
			json_data,
			rtn_val,
			msg_txt
		);
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	ELSEIF IN_CATEGORY_ID = 17 THEN
		CALL sp_push_schedule_bidding_end_2(
			IN_CATEGORY_ID,
			json_data,
			rtn_val,
			msg_txt
		);
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	ELSEIF IN_CATEGORY_ID = 19 THEN
		CALL sp_push_schedule_bidding_end_1(
			IN_CATEGORY_ID,
			json_data,
			rtn_val,
			msg_txt
		);
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	ELSEIF IN_CATEGORY_ID = 26 THEN
		CALL sp_push_schedule_ask_review(
			IN_CATEGORY_ID,
			json_data,
			rtn_val,
			msg_txt
		);
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	ELSE
		SET rtn_val = 38801;
		SET msg_txt = 'scheduler does not exist';
		SIGNAL SQLSTATE '23000';
	END IF; 
    COMMIT;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_system_notice`(
	IN IN_SUBJECT					VARCHAR(255),
    IN IN_LAST_ID					BIGINT,
    IN IN_CATEGORY_ID				INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
    
    SET msg_txt = NULL;      
    CALL sp_req_current_time(VAR_REG_DT);  
	SET VAR_TITLE = CONCAT('[', IN_SUBJECT, ']');
	SET VAR_BODY = CONCAT('[', IN_SUBJECT, '] 새로운 공지가 도착했습니다.');
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'USER_ID'				, ID, 
			'USER_NAME'				, USER_NAME, 
			'FCM'					, FCM, 
			'AVATAR_PATH'			, AVATAR_PATH,
			'PHONE'					, PHONE,
			'TITLE'					, VAR_TITLE,
			'BODY'					, VAR_BODY,
			'ORDER_ID'				, NULL, 
			'BIDDING_ID'			, NULL, 
			'TRANSACTION_ID'		, NULL, 
			'REPORT_ID'				, NULL, 
			'CATEGORY_ID'			, IN_CATEGORY_ID,
			'CREATED_AT'			, VAR_REG_DT
		)
	) 
	INTO VAR_PUSH_INFO
	FROM USERS 
	WHERE 
		ACTIVE 					= TRUE AND
		PUSH_ENABLED			= TRUE;
	
	CALL sp_insert_push(
		0,
		VAR_PUSH_INFO,
		rtn_val,
		msg_txt
	);
	IF rtn_val = 0 THEN
		CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_INFO_TEMP (
			PUSH_INFO						JSON
		);     
		INSERT PUSH_INFO_TEMP(PUSH_INFO) VALUES(VAR_PUSH_INFO);
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PUSH_INFO'			, PUSH_INFO
		)) 
		INTO OUT_TARGET_LIST
		FROM PUSH_INFO_TEMP;  
		DROP TABLE IF EXISTS PUSH_INFO_TEMP;  
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_to_prospective_bidders`(
	IN IN_ORDER_ID			BIGINT
)
BEGIN

/*
Procedure Name 	: sp_push_to_prospective_bidders
Input param 	: 1개
Output param 	: 1개
Job 			: 무방문신청 종료에 대한 푸시를 반환한다
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    
	DECLARE json_data			JSON DEFAULT NULL;
    DECLARE rtn_val				INT DEFAULT NULL;
    DECLARE msg_txt				VARCHAR(200) DEFAULT NULL;
    
    CALL sp_push_to_prospective_bidders_without_handler(
		IN_ORDER_ID,
		json_data,
        rtn_val,
        msg_txt
    );
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_push_to_prospective_bidders_without_handler`(
	IN IN_ORDER_ID					INT,
    OUT OUT_TARGET_LIST				JSON,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_push_schedule_visit_end_2
Input param 	: 1개
Output param 	: 1개
Job 			: 무방문신청 종료에 대한 푸시를 반환한다
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ORDER_ID						BIGINT;  
    DECLARE CUR_ORDER_CODE						VARCHAR(10);  
	DECLARE VAR_DISPOSER_INFO					JSON					DEFAULT NULL; 
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_TITLE							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BODY							VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID,
        A.ORDER_CODE
    FROM SITE_WSTE_DISPOSAL_ORDER A 
    LEFT JOIN COMP_SITE B ON A.SITE_ID = B.ID
    LEFT JOIN V_ORDER_STATE C ON A.ID = C.DISPOSER_ORDER_ID
	WHERE 
		C.STATE_CODE = 103 AND
        A.PROSPECTIVE_BIDDERS > 0 AND
        A.IS_DELETED = FALSE AND
        A.ACTIVE = TRUE AND
        A.ID = IN_ORDER_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_TO_PROSPECTIVE_BIDDERS_WITHOUT_HANDLER_TEMP (
		ORDER_ID						BIGINT,
		DISPOSER_INFO					JSON,
		COLLECTOR_INFO					JSON
        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		SET VAR_DISPOSER_INFO = NULL;
		SET VAR_COLLECTOR_INFO = NULL; 
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ORDER_ID,
			CUR_ORDER_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PUSH_TO_PROSPECTIVE_BIDDERS_WITHOUT_HANDLER_TEMP(
			ORDER_ID
		)
		VALUES(
			CUR_ORDER_ID
		);
		
		SET VAR_TITLE = CONCAT('[', CUR_ORDER_CODE,']입찰가능알림');
		SET VAR_BODY = CONCAT('신청하신 [', CUR_ORDER_CODE, ']에 대하여 입찰대상자로 선정되었습니다. 지금 입찰하시기 바랍니다.');
		CALL sp_get_collector_list_for_push_4(
			CUR_ORDER_ID,
			VAR_TITLE,
			VAR_BODY,
			38,
			VAR_COLLECTOR_INFO,
			rtn_val,
			msg_txt
		);
		IF rtn_val = 0 THEN
			UPDATE PUSH_TO_PROSPECTIVE_BIDDERS_WITHOUT_HANDLER_TEMP 
			SET 
				DISPOSER_INFO 			= VAR_DISPOSER_INFO,
				COLLECTOR_INFO 			= VAR_COLLECTOR_INFO
			WHERE ORDER_ID 				= CUR_ORDER_ID;
		ELSE
			LEAVE cloop;
		END IF;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'PUSH_INFO'					, COLLECTOR_INFO
	)) 
	INTO OUT_TARGET_LIST FROM PUSH_TO_PROSPECTIVE_BIDDERS_WITHOUT_HANDLER_TEMP;
	
	SET rtn_val = 0;
	SET msg_txt = 'Success11';
	DROP TABLE IF EXISTS PUSH_TO_PROSPECTIVE_BIDDERS_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_register_site`(
    IN IN_USER_ID						BIGINT,
    IN IN_TARGET_ID						BIGINT
)
BEGIN

/*
Procedure Name 	: sp_register_site
Input param 	: 1개
Job 			: 배출자가 수거업체의 사이트를 등록업체로 등록한다.
Update 			: 2022.05.09
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/	
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'usccess';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_USER_ID							BIGINT					DEFAULT NULL;
	DECLARE VAR_TARGET_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_IS_SITE_REGISTERED				TINYINT					DEFAULT FALSE;
	DECLARE VAR_REGISTERED_SITE_COUNT			INT						DEFAULT 0;
	DECLARE MAX_SITE_REGISTERATION				VARCHAR(20)				DEFAULT NULL;
	
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data = NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;  
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	SET VAR_USER_ID 		= IN_USER_ID;
	SET VAR_TARGET_ID 		= IN_TARGET_ID;
    
	CALL sp_req_current_time(VAR_REG_DT);
    
    SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID
    FROM USERS
    WHERE ID = VAR_USER_ID;
    
    IF VAR_USER_SITE_ID = 0 THEN
    /*배출자가 개인인 경우*/
		SELECT COUNT(ID) INTO VAR_REGISTERED_SITE_COUNT
		FROM REGISTERED_SITE
		WHERE 
			USER_ID = VAR_USER_ID AND
            DELETED_AT IS NULL AND
			ACTIVE = TRUE AND
            REGISTER_TYPE = 1;
            
		SELECT COUNT(ID) INTO VAR_IS_SITE_REGISTERED
		FROM REGISTERED_SITE
		WHERE 
			USER_ID = VAR_USER_ID AND
            TARGET_ID = VAR_TARGET_ID AND
            DELETED_AT IS NULL AND
			ACTIVE = TRUE AND
            REGISTER_TYPE = 1;
    ELSE
    /*배출자가 사업자인 경우*/
		SELECT COUNT(ID) INTO VAR_REGISTERED_SITE_COUNT
		FROM REGISTERED_SITE
		WHERE 
			SITE_ID = VAR_USER_SITE_ID AND
            DELETED_AT IS NULL AND
			ACTIVE = TRUE AND
            REGISTER_TYPE = 1;
            
		SELECT COUNT(ID) INTO VAR_IS_SITE_REGISTERED
		FROM REGISTERED_SITE
		WHERE 
			SITE_ID = VAR_USER_SITE_ID AND
            TARGET_ID = VAR_TARGET_ID AND
            DELETED_AT IS NULL AND
			ACTIVE = TRUE AND
            REGISTER_TYPE = 1;
    END IF;
    
	/*무료로 등록할 수 있는 수거업체의 개소수를 MAX_SITE_REGISTERATION에 반환한다.*/
	CALL sp_req_policy_direction(
		'max_site_registeration',
		MAX_SITE_REGISTERATION
	);
    
    IF MAX_SITE_REGISTERATION > VAR_REGISTERED_SITE_COUNT THEN
    /*등록가능한 수거업체의 개소수에 여유가 있는 경우 정상처리한다.*/
		IF VAR_IS_SITE_REGISTERED = 0 THEN
        /*등록이 가능한 경우 정상처리한다.*/
			INSERT REGISTERED_SITE(
				USER_ID,
				SITE_ID,
				TARGET_ID,
				CREATED_AT,
				UPDATED_AT,
				DELETED_AT,
				ACTIVE,
                REGISTER_TYPE
			) VALUES (
				VAR_USER_ID,
				VAR_USER_SITE_ID,
				VAR_TARGET_ID,
				VAR_REG_DT,
				VAR_REG_DT,
				NULL,
				TRUE,
                1
			);
			IF ROW_COUNT() = 1 THEN
				SET rtn_val 		= 0;
				SET msg_txt 		= 'success';
			ELSE
				SET rtn_val 		= 39502;
				SET msg_txt 		= 'failed to register site information';
				SIGNAL SQLSTATE '23000';
			END IF;
        ELSE
        /*등록이 불가능한 경우 예외처리한다.*/
			SET rtn_val 		= 39503;
			SET msg_txt 		= 'site is already registered';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*등록가능한 수거업체의 개소수에 여유가 없는 경우 예외처리한다.*/
		SET rtn_val 		= 39501;
		SET msg_txt 		= 'can not register sites any more';
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
    SET json_data = NULL;
    CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_all_class`()
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0; 
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'usccess';
	DECLARE json_data							JSON					DEFAULT NULL;
    
	SET rtn_val = 0;
	SET msg_txt = 'Success';
	SELECT JSON_ARRAYAGG(JSON_OBJECT('ID', ID, 'CLASS_NM', CLASS_NM)) INTO json_data FROM USERS_CLASS;
    CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_apply_for_visit`(
	IN IN_SITE_ID							BIGINT,
    IN IN_DISPOSER_ORDER_ID					BIGINT,
    OUT OUT_COLLECTOR_BIDDING_ID			BIGINT,				/*출력값 : 처리결과 반환값*/
    OUT rtn_val 							INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 							VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_apply_for_visit
Input param 	: 2개
Output param 	: 2개
Job 			: 수거자등의 사업자가 방문신청을 했는지 여부 확인
Update 			: 2022.01.29
Version			: 0.0.3
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.3)
*/
	DECLARE VAR_APPLY_FOR_VISIT					INT						DEFAULT 0;

	SELECT COUNT(ID) 
    INTO VAR_APPLY_FOR_VISIT 
    FROM COLLECTOR_BIDDING 
    WHERE 
		COLLECTOR_ID = IN_SITE_ID AND 
        DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND
        DATE_OF_VISIT IS NOT NULL AND
        ACTIVE = TRUE;
	
    IF VAR_APPLY_FOR_VISIT = 1 THEN
		SELECT ID 
        INTO OUT_COLLECTOR_BIDDING_ID 
        FROM COLLECTOR_BIDDING 
        WHERE 
			COLLECTOR_ID = IN_SITE_ID AND 
			DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND
			DATE_OF_VISIT IS NOT NULL AND
			ACTIVE = TRUE;
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
		SET rtn_val = 26701;
		SET msg_txt = 'The collector does not apply for a visit';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_ask_visit`(
	IN IN_USER_ID				BIGINT,					/*방문요청신청자(USERS.ID)*/
	IN IN_DISPOSER_ORDER_ID		BIGINT,					/*폐기물 배출 내역 고유등록번호(SITE_WSTE_DISPOSAL_ORDER.ID)*/
	IN IN_VISIT_AT				DATETIME,				/*방문요청일*/
	IN IN_REG_DT				DATETIME,				/*등록일*/
    OUT rtn_val 				INT,					/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200)			/*출력값 : 처리결과 문자열*/	
)
BEGIN

/*
Procedure Name 	: sp_req_ask_visit
Input param 	: 4개
Output param 	: 2개
Job 			: 배출자의 방문요청일 수정 또는 신청
Update 			: 2022.01.21
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: REG_DT를 외부에서 입력자료로 받음
*/
    
	SELECT COUNT(ID) INTO @CHK_COUNT 
    FROM ASK_VISIT_SITE
    WHERE 
		DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID AND
		ASKER_ID 			= IN_USER_ID AND
        ACTIVE 				= TRUE;
	/*방문신청을 하는자가 기존에 방문신청을 한 사실 있는지 확인한다.*/
        
	IF @CHK_COUNT > 0 THEN
    /*만일 기존에 방문신청한 내역이 있는 경우*/
		UPDATE ASK_VISIT_SITE
        SET 
			VISIT_END_AT 		= IN_VISIT_AT,
            UPDATED_AT 			= IN_REG_DT
        WHERE 
			DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID AND
			ASKER_ID 			= IN_USER_ID;
        /*해당 방문내역의 방문시간을 변경처리한다.*/
        
        IF ROW_COUNT() = 1 THEN
        /*방문신청일 변경과정이 성공적으로 마무리 되었다면*/
			SET rtn_val = 0;
			SET msg_txt = 'Visit request success';
        ELSE
        /*방문신청일 변경과정에 오류가 발생하였다면 예외처리한다.*/
			SET rtn_val = 23201;
			SET msg_txt = 'Failed to change scheduled visit date';
        END IF;
    ELSE
    /*만일 기존에 방문신청한 내역이 없는 경우*/
		SELECT IF(MAX(ID) IS NULL, 1, MAX(ID) + 1) INTO @REG_ID
        FROM ASK_VISIT_SITE;
        /*신규로 등록할 신청고유등록번호를 계산한다.*/
        
		INSERT INTO ASK_VISIT_SITE (
			ID,
            DISPOSAL_ORDER_ID,
            ASKER_ID,
            ACTIVE,
            VISIT_END_AT,
            CREATED_AT,
            UPDATED_AT
        ) VALUES (
			@REG_ID,
            IN_DISPOSER_ORDER_ID,
            IN_USER_ID,
            TRUE,
            IN_VISIT_AT,
            IN_REG_DT,
            IN_REG_DT
        );
        /*방문신청일을 신규로 작성한다.*/
        
        IF ROW_COUNT() = 1 THEN
        /*방문신청일 신청과정이 성공적으로 마무리 되었다면*/
			SET rtn_val = 0;
			SET msg_txt = 'Visit request success';
        ELSE
        /*방문신청일 신청과정에 오류가 발생하였다면 예외처리한다.*/
			SET rtn_val = 23202;
			SET msg_txt = 'Failed to apply for scheduled visit date';
        END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_available_site_addresses_by_user_id`(
	IN IN_USER_ID			BIGINT,
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_available_site_addresses_by_user_id
Input param 	: 1개
Output param 	: 0개
Job 			: 입력받은 사업자 관리자에 의하여 관리되는 모든 사이트의 주소를 반환한다. 추후 JSON 리턴 로직 만들어야 함
Update 			: 2022.01.28
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/

	CALL sp_req_comp_id_of_user_by_id(
	/*사용자가 속하는 사업자의 고유등록번호를 반환한다.*/	
		IN_USER_ID,
        @COMP_ID
    );
    
    CALL sp_req_site_id_of_user_reg_id(
	/*사용자가 속하는 사이트의 고유등록번호를 반환한다.*/	
		IN_USER_ID,
        @SITE_ID,
		@rtn_val,
		@msg_txt
    );    
    
	IF @rtn_val = 0 THEN
	/*사이트가 정상(개인사용자는 제외됨)적인 경우*/
		CALL sp_req_is_site_head_office(
		/*사용자가 속한 사이트가 HEAD OFFICE인지 검사한다.*/
			@SITE_ID,
			@IS_USER_SITE_HEAD_OFFICE
		);
		
		IF @IS_USER_SITE_HEAD_OFFICE = TRUE THEN
		/*사용자가 속한 사이트가 사업자의 HEAD OFFICE인 경우에는 사업자에 속하는 모든 사이트의 주소를 반환한다.*/
			CALL sp_req_comp_site_addresses(
			/*사업자에 속하는 모든 사이트의 주소를 반환한다.*/
				@COMP_ID
			);
		ELSE
		/*사용자가 속한 사이트가 사업자의 HEAD OFFICE가 아닌 경우에는 사용자가 속하는 사이트의 주소만 반환한다.*/
			CALL sp_req_site_addresses_by_site_id(
			/*사이트 고유등록번호로 사이트의 주소를 반환한다.*/
				@SITE_ID
			);
		END IF;
	ELSE
	/*사이트가 존재하지 않거나 유효하지 않은(개인사용자의 경우) 경우*/
		SET rtn_val = @rtn_val;
		SET msg_txt = @msg_txt;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_b_contact_path_without_handler`(
	OUT rtn_val							INT,
    OUT msg_txt							VARCHAR(200),
	OUT OUT_CONTACT_PATH_LIST			JSON
)
BEGIN
	SET rtn_val = 0;
    SET msg_txt = 'success';
    SET OUT_CONTACT_PATH_LIST = NULL;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'					, ID, 
		'NAME'					, NAME
	))
	INTO OUT_CONTACT_PATH_LIST 
	FROM CONTACT_PATH
	ORDER BY ID; 
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_b_department`()
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'usccess';
	DECLARE json_data							JSON					DEFAULT NULL;
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'					, ID, 
			'NAME'					, NAME, 
			'BELONG_TO'				, BELONG_TO
		)
	) 
	INTO json_data 
	FROM DEPARTMENT
	ORDER BY ID;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_b_project_list`()
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'usccess';
	DECLARE json_data							JSON					DEFAULT NULL;
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'					, ID, 
			'NAME'					, NAME
		)
	) 
	INTO json_data 
	FROM DEV_PROJECT
	ORDER BY ID;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_b_trmt_biz`()
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'CODE'					, CODE, 
			'NAME'					, NAME, 
			'NOTE'					, NOTE, 
			'USER_TYPE'				, USER_TYPE, 
			'USER_TYPE_EN_NM'		, USER_TYPE_EN_NM, 
			'USER_TYPE_KO_NM'		, USER_TYPE_KO_NM
		)
	) 
	INTO json_data 
	FROM V_WSTE_TRMT_BIZ
	ORDER BY CODE;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_b_trmt_fctl`()
BEGIN
    DECLARE vRowCount 				INT 					DEFAULT 0;
    DECLARE endOfRow 				TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ID					INT; 
    DECLARE CUR_NAME				VARCHAR(200);
    DECLARE CUR_NOTE				VARCHAR(255);  
    DECLARE CUR_GHG_EMIT_ID			INT; 
	DECLARE VAR_SUB_CATEGORY		JSON					DEFAULT NULL;
	DECLARE rtn_val					INT						DEFAULT 0;
	DECLARE msg_txt					VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data				JSON					DEFAULT NULL;	
    DECLARE TEMP_CURSOR		 		CURSOR FOR 
	SELECT 
		ID, 
        NAME, 
        NOTE,
        GHG_EMIT_ID
	FROM WSTE_TRMT_FCTL
    WHERE DISPLAY = TRUE AND DEPTH = 2
	ORDER BY ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS REQ_B_TRMT_FCTL_TEMP (
		ID							INT,
		NAME						VARCHAR(200),
		NOTE						VARCHAR(255),
        GHG_EMIT_ID					INT,
        SUB_CATEGORY				JSON
	);        
    
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID,
			CUR_NAME,
			CUR_NOTE,
			CUR_GHG_EMIT_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		REQ_B_TRMT_FCTL_TEMP(
			ID, 
			NAME, 
			NOTE,
			GHG_EMIT_ID
		)
		VALUES(
			CUR_ID,
			CUR_NAME, 
			CUR_NOTE,
			CUR_GHG_EMIT_ID
		);
        
        CALL sp_req_b_trmt_fctl_sub_cat(
			CUR_GHG_EMIT_ID,
            VAR_SUB_CATEGORY
        );
        
        UPDATE REQ_B_TRMT_FCTL_TEMP
        SET SUB_CATEGORY = VAR_SUB_CATEGORY
        WHERE ID = CUR_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'				, ID, 
        'NAME'				, NAME, 
        'NOTE'				, NOTE, 
        'GHG_EMIT_ID'		, GHG_EMIT_ID, 
        'SUB_CATEGORY'		, SUB_CATEGORY
	)) 
    INTO json_data FROM REQ_B_TRMT_FCTL_TEMP;
    
	DROP TABLE IF EXISTS REQ_B_TRMT_FCTL_TEMP;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_b_trmt_fctl_sub_cat`(
	IN IN_PID						INT,
    OUT OUT_SUB_CATEGORY			JSON
)
BEGIN
    DECLARE vRowCount 				INT 					DEFAULT 0;
    DECLARE endOfRow 				TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ID					INT; 
    DECLARE CUR_NAME				VARCHAR(200);
	DECLARE VAR_SUB_CATEGORY		JSON					DEFAULT NULL;
    DECLARE TEMP_CURSOR		 		CURSOR FOR 
	SELECT 
		ID, 
        NAME
	FROM GHG_EMIT_FACTOR
    WHERE DEPTH = 2 AND PID = IN_PID
	ORDER BY ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS REQ_B_TRMT_FCTL_SUB_CAT_TEMP (
		ID							INT,
		NAME						VARCHAR(200),
        SUB_CATEGORY				JSON
	);        
    
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID,
			CUR_NAME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		REQ_B_TRMT_FCTL_SUB_CAT_TEMP(
			ID, 
			NAME
		)
		VALUES(
			CUR_ID,
			CUR_NAME
		);
        
        CALL sp_req_b_trmt_fctl_sub_cat_item(
			CUR_ID,
            VAR_SUB_CATEGORY
        );
        
        UPDATE REQ_B_TRMT_FCTL_SUB_CAT_TEMP
        SET SUB_CATEGORY = VAR_SUB_CATEGORY
        WHERE ID = CUR_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'				, ID, 
        'NAME'				, NAME, 
        'SUB_CATEGORY'		, SUB_CATEGORY
	)) 
    INTO OUT_SUB_CATEGORY FROM REQ_B_TRMT_FCTL_SUB_CAT_TEMP;
    
	DROP TABLE IF EXISTS REQ_B_TRMT_FCTL_SUB_CAT_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_b_trmt_fctl_sub_cat_item`(
	IN IN_PID						INT,
    OUT OUT_SUB_CATEGORY			JSON
)
BEGIN
    DECLARE vRowCount 				INT 					DEFAULT 0;
    DECLARE endOfRow 				TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ID					INT; 
    DECLARE CUR_NAME				VARCHAR(200);
    DECLARE CUR_FACTOR				FLOAT; 
    DECLARE TEMP_CURSOR		 		CURSOR FOR 
	SELECT 
		ID, 
        NAME,
        FACTOR
	FROM GHG_EMIT_FACTOR
    WHERE DEPTH = 3 AND PID = IN_PID
	ORDER BY ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS REQ_B_TRMT_FCTL_SUB_CAT_ITEM_TEMP (
		ID							INT,
		NAME						VARCHAR(200),
        FACTOR						FLOAT
	);        
    
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID,
			CUR_NAME,
            CUR_FACTOR;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		REQ_B_TRMT_FCTL_SUB_CAT_ITEM_TEMP(
			ID, 
			NAME,
            FACTOR
		)
		VALUES(
			CUR_ID,
			CUR_NAME,
            CUR_FACTOR
		);
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'				, ID, 
        'NAME'				, NAME, 
        'FACTOR'			, FACTOR
	)) 
    INTO OUT_SUB_CATEGORY FROM REQ_B_TRMT_FCTL_SUB_CAT_ITEM_TEMP;
    
	DROP TABLE IF EXISTS REQ_B_TRMT_FCTL_SUB_CAT_ITEM_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_b_trmt_method`()
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'usccess';
	DECLARE json_data							JSON					DEFAULT NULL;
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'CODE'						, CODE, 
			'WSTE_TRMT_CLS_1'			, WSTE_TRMT_CLS_1, 
			'WSTE_TRMT_CLS_2'			, WSTE_TRMT_CLS_2, 
			'NAME'						, NAME, 
			'WSTE_TRMT_CLS_NM_1'		, WSTE_TRMT_CLS_NM_1, 
			'WSTE_TRMT_CLS_NM_2'		, WSTE_TRMT_CLS_NM_2
		)
	) 
	INTO json_data 
	FROM V_WSTE_TRMT_METHOD
	ORDER BY CODE;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_b_wste_appearance`()
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'usccess';
	DECLARE json_data							JSON					DEFAULT NULL;
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'				, ID, 
			'KOREAN'			, KOREAN, 
			'ENGLISH'			, ENGLISH, 
			'ACTIVE'			, ACTIVE
		)
	) 
	INTO json_data 
	FROM WSTE_APPEARANCE
	ORDER BY ID;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_b_wste_class_code`()
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'usccess';
	DECLARE json_data							JSON					DEFAULT NULL;
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'CODE'					, CODE, 
			'NAME'					, NAME
		)
	) 
	INTO json_data 
	FROM WSTE_CLS_CODE
	ORDER BY CODE;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_b_wste_cls_1`()
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'usccess';
	DECLARE json_data							JSON					DEFAULT NULL;
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'				, ID, 
			'NAME'				, CLASS_NAME, 
			'ACTIVE'			, ACTIVE
		)
	) 
	INTO json_data 
	FROM WSTE_CLS_1
	ORDER BY ID;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_b_wste_code`()
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'usccess';
	DECLARE json_data							JSON					DEFAULT NULL;
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'CODE'					, CODE, 
			'CODE_1'				, CODE_1, 
			'CODE_2'				, CODE_2, 
			'CODE_3'				, CODE_3, 
			'CODE_4'				, CODE_4, 
			'NAME'					, NAME, 
			'LAW_REV'				, LAW_REV, 
			'WSTE_REPT_CLS_CODE'	, WSTE_REPT_CLS_CODE, 
			'WSTE_REPT_CLS_NM'		, WSTE_REPT_CLS_NM, 
			'CLASS_ID'				, CLASS_ID, 
			'CLASS_NAME'			, CLASS_NAME
		)
	) 
	INTO json_data 
	FROM V_WSTE_CODE
    WHERE DISPLAY = 1
	ORDER BY CODE_4;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_bidding_details`(
	IN IN_COLLECTOR_BIDDING_ID				BIGINT				/*입력값 : COLLECTOR_BIDDING.ID*/
)
BEGIN

/*
Procedure Name 	: sp_req_bidding_details
Input param 	: 1개
Job 			: 개별 수거자에 대한 입찰 상세 정보
Update 			: 2022.01.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_COLLECTOR_BIDDING_ID			BIGINT;
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;
    DECLARE CUR_COLLECTOR_SITE_NAME				VARCHAR(255);
    DECLARE CUR_COLLECTOR_SI_DO					VARCHAR(20);
    DECLARE CUR_COLLECTOR_SI_GUN_GU				VARCHAR(20);
    DECLARE CUR_DISPOSER_ORDER_CODE				VARCHAR(10);
    DECLARE CUR_DISPOSER_SI_DO					VARCHAR(20);
    DECLARE CUR_DISPOSER_SI_GUN_GU				VARCHAR(20);
    DECLARE CUR_DISPOSER_EUP_MYEON_DONG			VARCHAR(20);
    DECLARE CUR_DISPOSER_DONG_RI				VARCHAR(20);
    DECLARE CUR_DISPOSER_ADDR					VARCHAR(255);
    DECLARE CUR_COLLECTOR_CATEGORY_ID			INT;
    DECLARE CUR_STATE_CODE						INT;
    DECLARE CUR_STATE							VARCHAR(20);
    DECLARE CUR_TRANSACTION_ID					BIGINT;
	DECLARE VAR_BIDDING_WSTE_LIST				JSON					DEFAULT NULL;
	DECLARE VAR_DISPLAY_DATE					DATETIME				DEFAULT NULL;
	DECLARE VAR_DISPOSER_ORDER_INFO				JSON					DEFAULT NULL;
	DECLARE VAR_TRANSACTION_WSTE_LIST			JSON					DEFAULT NULL;
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
    DECLARE TEMP_CURSOR		 				CURSOR FOR 
	SELECT 
		A.ID, 
        B.SITE_NAME, 
        C.SI_DO, 
        C.SI_GUN_GU, 
        A.DISPOSAL_ORDER_ID, 
        D.ORDER_CODE, 
        G.SI_DO, 
        G.SI_GUN_GU, 
        G.EUP_MYEON_DONG, 
        G.DONG_RI, 
        F.ADDR,
        E.COLLECTOR_CATEGORY_ID,
        E.STATE_CODE,
        E.STATE, 
        D.TRANSACTION_ID 
    FROM COLLECTOR_BIDDING A
    LEFT JOIN COMP_SITE B ON A.COLLECTOR_ID = B.ID
    LEFT JOIN KIKCD_B C ON B.KIKCD_B_CODE = C.B_CODE
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER D ON A.DISPOSAL_ORDER_ID = D.ID
    LEFT JOIN V_BIDDING_STATE_NAME E ON A.ID = E.COLLECTOR_BIDDING_ID
    LEFT JOIN COMP_SITE F ON D.SITE_ID = F.ID
    LEFT JOIN KIKCD_B G ON F.KIKCD_B_CODE = G.B_CODE
	WHERE A.ID = IN_COLLECTOR_BIDDING_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS BIDDING_DETAILS_TEMP (
		COLLECTOR_BIDDING_ID			BIGINT,
		COLLECTOR_SITE_NAME				VARCHAR(255),
		COLLECTOR_SI_DO					VARCHAR(20),
		COLLECTOR_SI_GUN_GU				VARCHAR(20),
		DISPOSER_ORDER_ID				BIGINT,
		DISPOSER_ORDER_CODE				VARCHAR(10),
        DISPOSER_SI_DO 					VARCHAR(20),
        DISPOSER_SI_GUN_GU 				VARCHAR(20),
        DISPOSER_EUP_MYEON_DONG			VARCHAR(20),
        DISPOSER_DONG_RI				VARCHAR(20),
        DISPOSER_ADDR					VARCHAR(255),
        STATE_CODE						INT,
		WSTE_LIST						JSON,
		DISPLAY_DATE					DATETIME,
		STATE							VARCHAR(20),
        DISPOSER_ORDER_INFO				JSON,
        TRANSACTION_WSTE_LIST			JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_COLLECTOR_BIDDING_ID,
			CUR_COLLECTOR_SITE_NAME,
			CUR_COLLECTOR_SI_DO,
			CUR_COLLECTOR_SI_GUN_GU,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_SI_DO,
			CUR_DISPOSER_SI_GUN_GU,
			CUR_DISPOSER_EUP_MYEON_DONG,
			CUR_DISPOSER_DONG_RI,
			CUR_DISPOSER_ADDR,
			CUR_COLLECTOR_CATEGORY_ID,
			CUR_STATE_CODE,
			CUR_STATE,
			CUR_TRANSACTION_ID;   
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		BIDDING_DETAILS_TEMP(
			COLLECTOR_BIDDING_ID, 
			COLLECTOR_SITE_NAME, 
			COLLECTOR_SI_DO, 
			COLLECTOR_SI_GUN_GU, 
			DISPOSER_ORDER_ID, 
			DISPOSER_ORDER_CODE, 
			DISPOSER_SI_DO,
			DISPOSER_SI_GUN_GU,
			DISPOSER_EUP_MYEON_DONG,
			DISPOSER_DONG_RI,
			DISPOSER_ADDR,
			STATE_CODE,
			STATE
		)
		VALUES(
			CUR_COLLECTOR_BIDDING_ID, 
			CUR_COLLECTOR_SITE_NAME, 
			CUR_COLLECTOR_SI_DO, 
			CUR_COLLECTOR_SI_GUN_GU, 
			CUR_DISPOSER_ORDER_ID, 
			CUR_DISPOSER_ORDER_CODE, 
			CUR_DISPOSER_SI_DO,
			CUR_DISPOSER_SI_GUN_GU,
			CUR_DISPOSER_EUP_MYEON_DONG,
			CUR_DISPOSER_DONG_RI,
			CUR_DISPOSER_ADDR,
			CUR_STATE_CODE,
			CUR_STATE
		);
        
        CALL sp_get_collector_bidding_wste_lists(
			CUR_COLLECTOR_BIDDING_ID,
            VAR_BIDDING_WSTE_LIST
        );
            
		CALL sp_set_display_time_for_collector(
			CUR_DISPOSER_ORDER_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_COLLECTOR_CATEGORY_ID,
			VAR_DISPLAY_DATE
		);
        
        CALL sp_get_disposal_order_info(
			CUR_DISPOSER_ORDER_ID,
            VAR_DISPOSER_ORDER_INFO
        );
        
        CALL sp_get_collector_wste_lists(
			CUR_DISPOSER_ORDER_ID,
            CUR_TRANSACTION_ID,
            VAR_TRANSACTION_WSTE_LIST
        );
		
		UPDATE BIDDING_DETAILS_TEMP 
        SET 
			WSTE_LIST 				= VAR_BIDDING_WSTE_LIST, 
			DISPLAY_DATE 			= VAR_DISPLAY_DATE, 
			DISPOSER_ORDER_INFO 	= VAR_DISPOSER_ORDER_INFO, 
			TRANSACTION_WSTE_LIST 	= VAR_TRANSACTION_WSTE_LIST  
        WHERE DISPOSER_ORDER_ID 	= CUR_DISPOSER_ORDER_ID;
		/*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/
		
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
    
    IF vRowCount = 0 THEN
		SET rtn_val = 29301;
		SET msg_txt = 'No data found';
		SET json_data = NULL;
    ELSE
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'COLLECTOR_BIDDING_ID', 		COLLECTOR_BIDDING_ID, 
				'COLLECTOR_SITE_NAME', 			COLLECTOR_SITE_NAME, 
				'COLLECTOR_SI_DO', 				COLLECTOR_SI_DO, 
				'COLLECTOR_SI_GUN_GU', 			COLLECTOR_SI_GUN_GU, 
				'DISPOSER_ORDER_ID', 			DISPOSER_ORDER_ID, 
				'DISPOSER_ORDER_CODE', 			DISPOSER_ORDER_CODE, 
				'DISPOSER_SI_DO', 				DISPOSER_SI_DO, 
				'COLLECTOR_SI_GUN_GU', 			COLLECTOR_SI_GUN_GU, 
				'DISPOSER_EUP_MYEON_DONG', 		DISPOSER_EUP_MYEON_DONG, 
				'DISPOSER_DONG_RI', 			DISPOSER_DONG_RI, 
				'DISPOSER_ADDR', 				DISPOSER_ADDR, 
				'STATE_CODE', 					STATE_CODE, 
				'WSTE_LIST',					WSTE_LIST,
				'DISPLAY_DATE', 				DISPLAY_DATE,
				'STATE', 						STATE,
				'DISPOSER_ORDER_INFO', 			DISPOSER_ORDER_INFO,
				'TRANSACTION_WSTE_LIST', 		TRANSACTION_WSTE_LIST
			)
		) INTO json_data FROM BIDDING_DETAILS_TEMP;
    END IF;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
	DROP TABLE IF EXISTS BIDDING_DETAILS_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_bidding_end_date_expired`(
	IN IN_DISPOSER_ORDER_ID						BIGINT,
    OUT rtn_val 								INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 								VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_bidding_end_date_expired
Input param 	: 1개
Output param 	: 2개
Job 			: 폐기물배출신청건에 대한 입찰마감일이 종료되지 않았으면 0, 그렇지 않으면 예외처리코드를 반환함
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.2)
*/
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_BIDDING_END_AT					DATETIME				DEFAULT NULL; 

    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	SELECT BIDDING_END_AT
    INTO VAR_BIDDING_END_AT
    FROM SITE_WSTE_DISPOSAL_ORDER 
    WHERE 
		ID = IN_DISPOSER_ORDER_ID AND 
        ACTIVE = TRUE;
	
    IF VAR_BIDDING_END_AT IS NOT NULL THEN
		IF VAR_REG_DT >= VAR_BIDDING_END_AT THEN
			SET rtn_val = 27001;
			SET msg_txt = 'Bidding deadline has expired';
		ELSE
			SET rtn_val = 0;
			SET msg_txt = 'Success';
		END IF;
    ELSE
		SET rtn_val = 27002;
		SET msg_txt = 'No bid deadline set';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_biz_admin_id`(
	IN IN_BIZ_REG_CODE			VARCHAR(12),		/*입력값 : 사업자등록번호*/
	IN IN_USER_NAME				VARCHAR(20),		/*입력값 : 관리자 이름*/
	IN IN_USER_PHONE			VARCHAR(20),		/*입력값 : 관리자 등록 전화번호*/
    OUT OUT_USER_REG_ID			VARCHAR(50),		/*출력값 : 관리자가 존재하는 경우 관리자의 아이디*/
    OUT rtn_val					INT,				/*출력값 : 관리자 아이디가 존재하는 경우 0, 그렇지 않은경우 예외처리코드가 반환됨*/
    OUT msg_txt					VARCHAR(200)		/*출력값 : 처리결과*/
)
BEGIN

/*
Procedure Name 	: sp_req_biz_admin_id
Input param 	: 3개
Output param 	: 3개
Job 			: 입력받은 관리자의 이름 또는 전화번호를 가진 사용자가 입력받은 사업자등록번호를 가진 사업자의 관리자인 경우에 사용자의 아이디를 반환한다.
				: 조건에 맞는 정보가 없는 경우에는 Null을 반환함
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
    
	CALL sp_req_use_same_company_reg_id(
		IN_BIZ_REG_CODE, 
		@rtn_val, 
		@msg_txt
	);
    /*입력받은 사업자등록번호(IN_BIZ_REG_CODE)가 존재하면 @BIZ_REG_CODE_EXIST을 통하여 TRUE를 반환받게 되고 그렇지 않으면 0을 반환받음*/
    
    IF @rtn_val = 0 THEN
		SET rtn_val = 21101;
		SET msg_txt = 'Business registration number does not exist';
		SIGNAL SQLSTATE '23000';
    ELSE
		IF IN_USER_NAME IS NOT NULL OR IN_USER_PHONE IS NOT NULL THEN
			IF IN_USER_NAME IS NOT NULL THEN
				SELECT A.USER_ID 
                INTO OUT_USER_REG_ID 
                FROM USERS A LEFT JOIN COMPANY B ON A.BELONG_TO = B.ID 
                WHERE 
					B.ID IS NOT NULL AND 
                    A.USER_NAME = IN_USER_NAME;
            ELSE
				SELECT A.USER_ID 
                INTO OUT_USER_REG_ID 
                FROM USERS A LEFT JOIN COMPANY B ON A.BELONG_TO = B.ID 
                WHERE 
					B.ID IS NOT NULL AND 
                    A.PHONE = IN_USER_PHONE;
            END IF;
            IF OUT_USER_REG_ID IS NOT NULL THEN
				SET rtn_val = 0;
				SET msg_txt = 'Found admin information';
            ELSE
				SET rtn_val = 21102;
				SET msg_txt = 'Admin information not exists';
				SIGNAL SQLSTATE '23000';
            END IF;
        ELSE
			SET rtn_val = 21103;
			SET msg_txt = 'Admin information not entered';
			SIGNAL SQLSTATE '23000';
        END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_business_area`(
	IN IN_SITE_ID				BIGINT					/*사이트의 고유등록번호(COMP_SITE.ID)*/
)
BEGIN

/*
Procedure Name 	: sp_req_site_sigungu_code_by_site_id
Input param 	: 1개
Job 			: 사이트의 관심지역을 반환한다
Update 			: 2022.03.13
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_COMP_SITE_KIKCD_B_CODE			VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_COMP_SITE_SI_DO					VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_COMP_SITE_SI_GUN_GU				VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_COMP_SITE_EUP_MYEON_DONG		VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_COMP_SITE_DONG_RI				VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_COMP_SITE_ADDR					VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_BUSINESS_AREA					JSON					DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS BUSINESS_AREA_TEMP;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  

    
    IF IN_SITE_ID > 0 THEN
		CREATE TEMPORARY TABLE IF NOT EXISTS BUSINESS_AREA_TEMP (
			SITE_ID							BIGINT,
			B_CODE							VARCHAR(10),
			SI_DO							VARCHAR(20),
			SI_GUN_GU						VARCHAR(20),
			EUP_MYEON_DONG					VARCHAR(20),
			DONG_RI							VARCHAR(20),
			ADDR							VARCHAR(255),
			BUSINESS_AREA					JSON
		);   
        
		INSERT BUSINESS_AREA_TEMP(SITE_ID, BUSINESS_AREA) VALUES(IN_SITE_ID, NULL);	
        
        SELECT 
			COMP_SITE_KIKCD_B_CODE,
			COMP_SITE_SI_DO,
			COMP_SITE_SI_GUN_GU,
			COMP_SITE_EUP_MYEON_DONG,
			COMP_SITE_DONG_RI,
			COMP_SITE_ADDR
		INTO
			VAR_COMP_SITE_KIKCD_B_CODE,
			VAR_COMP_SITE_SI_DO,
			VAR_COMP_SITE_SI_GUN_GU,
			VAR_COMP_SITE_EUP_MYEON_DONG,
			VAR_COMP_SITE_DONG_RI,
			VAR_COMP_SITE_ADDR
		FROM V_COMP_SITE
        WHERE COMP_SITE_ID = IN_SITE_ID;	
        
		CALL sp_req_business_area_without_handler(
			IN_SITE_ID,
			VAR_BUSINESS_AREA
		);
        
		UPDATE BUSINESS_AREA_TEMP 
        SET 
			B_CODE 			= VAR_COMP_SITE_KIKCD_B_CODE,
			SI_DO 			= VAR_COMP_SITE_SI_DO,
			SI_GUN_GU 		= VAR_COMP_SITE_SI_GUN_GU,
			EUP_MYEON_DONG 	= VAR_COMP_SITE_EUP_MYEON_DONG,
			DONG_RI 		= VAR_COMP_SITE_DONG_RI,
			ADDR 			= VAR_COMP_SITE_ADDR,
			BUSINESS_AREA 	= VAR_BUSINESS_AREA 
		WHERE SITE_ID 		= IN_SITE_ID;	
			
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'SITE_ID', 					SITE_ID, 
				'B_CODE', 					B_CODE, 
				'SI_DO', 					SI_DO, 
				'SI_GUN_GU', 				SI_GUN_GU, 
				'EUP_MYEON_DONG', 			EUP_MYEON_DONG, 
				'DONG_RI', 					DONG_RI, 
				'ADDR', 					ADDR, 
				'BUSINESS_AREA', 			BUSINESS_AREA
			) 
		)
		INTO json_data 
		FROM BUSINESS_AREA_TEMP;
		SET rtn_val = 0;
		SET msg_txt = 'success';
		
		DROP TABLE IF EXISTS BUSINESS_AREA_TEMP;
    ELSE
		SET rtn_val = 32901;
		SET msg_txt = 'site does not exist';
    END IF;
    COMMIT;   
	CALL sp_return_results(rtn_val, msg_txt, json_data);
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_business_area_without_handler`(
	IN IN_SITE_ID							BIGINT,
    OUT OUT_LIST							JSON
)
BEGIN

/*
Procedure Name 	: sp_req_business_area_without_handler
Input param 	: 1개
Job 			: 관심지역 리스트를 반환한다
Update 			: 2022.06.14
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 										INT 					DEFAULT 0;
    DECLARE endOfRow 										TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ID											BIGINT; 
    DECLARE CUR_SITE_ID										BIGINT;
    DECLARE CUR_KIKCD_B_CODE								VARCHAR(10);
    DECLARE CUR_IS_DEFAULT									TINYINT;
    DECLARE CUR_CREATED_AT									DATETIME;
    DECLARE CUR_SI_DO										VARCHAR(20);
    DECLARE CUR_SI_GUN_GU									VARCHAR(20);
    DECLARE VAR_NEW_COMINGS									INT						DEFAULT 0;
	DECLARE json_data										JSON					DEFAULT NULL;	
    DECLARE TEMP_CURSOR		 								CURSOR FOR 
    
	SELECT 
		ID, 
		SITE_ID, 
		KIKCD_B_CODE, 
		IS_DEFAULT, 
		CREATED_AT, 
		SI_DO, 
		SI_GUN_GU
	FROM V_BUSINESS_AREA 
	WHERE 
		SITE_ID = IN_SITE_ID AND
		ACTIVE = TRUE;	
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS REQ_BUSINESS_AREA_WITHOUT_HANDLER_TEMP (
		ID								BIGINT,
		SITE_ID							BIGINT,
		KIKCD_B_CODE					BIGINT,
        IS_DEFAULT						INT,
        CREATED_AT						DATETIME,
        SI_DO							VARCHAR(20),
        SI_GUN_GU						VARCHAR(20),
        NEW_COMINGS						INT
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID,
			CUR_SITE_ID,
			CUR_KIKCD_B_CODE,
			CUR_IS_DEFAULT,
			CUR_CREATED_AT,
			CUR_SI_DO,
			CUR_SI_GUN_GU;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        /*
        SELECT COUNT(A.ID) INTO VAR_NEW_COMINGS
        FROM SITE_WSTE_DISPOSAL_ORDER A
        LEFT JOIN V_ORDER_STATE B ON A.ID = B.DISPOSER_ORDER_ID
        WHERE 
			LEFT(A.KIKCD_B_CODE, 5) = LEFT(CUR_KIKCD_B_CODE, 5) AND
            IF(A.VISIT_END_AT IS NOT NULL,
				B.STATE_CODE IN (101, 102),
				B.STATE_CODE IN (103)
			);
		*/
        SELECT COUNT(ID) INTO VAR_NEW_COMINGS
        FROM SITE_WSTE_DISPOSAL_ORDER
        WHERE 
			LEFT(KIKCD_B_CODE, 5) = LEFT(CUR_KIKCD_B_CODE, 5) AND
            VISIT_END_AT >= NOW() AND
            IS_DELETED = FALSE AND
            ID NOT IN (
				SELECT DISPOSAL_ORDER_ID 
                FROM COLLECTOR_BIDDING 
                WHERE
					COLLECTOR_ID = IN_SITE_ID AND
                    DATE_OF_VISIT IS NOT NULL
            );
            
		INSERT INTO 
		REQ_BUSINESS_AREA_WITHOUT_HANDLER_TEMP(
			ID,
			SITE_ID,
			KIKCD_B_CODE,
			IS_DEFAULT,
			CREATED_AT,
			SI_DO,
			SI_GUN_GU,
			NEW_COMINGS
		)
		VALUES(
			CUR_ID,
			CUR_SITE_ID,
			CUR_KIKCD_B_CODE,
			CUR_IS_DEFAULT,
			CUR_CREATED_AT,
			CUR_SI_DO,
			CUR_SI_GUN_GU,
			VAR_NEW_COMINGS
		);
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'				, ID, 
        'SITE_ID'			, SITE_ID, 
        'KIKCD_B_CODE'		, KIKCD_B_CODE, 
        'IS_DEFAULT'		, IS_DEFAULT, 
        'CREATED_AT'		, CREATED_AT, 
        'SI_DO'				, SI_DO, 
        'SI_GUN_GU'			, SI_GUN_GU, 
        'NEW_COMINGS'		, NEW_COMINGS
	)) 
    INTO json_data FROM REQ_BUSINESS_AREA_WITHOUT_HANDLER_TEMP;
    SET OUT_LIST = json_data;
	DROP TABLE IF EXISTS REQ_BUSINESS_AREA_WITHOUT_HANDLER_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_cancel_bidding`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 입찰취소를 시도하는 사용자 아이디(USERS.ID)*/
	IN IN_COLLECT_BIDDING_ID	BIGINT,				/*입력값 : 입찰 고유등록번호(COLLECTOR_BIDDING.ID)*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_cancel_bidding
Input param 	: 2개
Output param 	: 2개
Job 			: 수거자 등이 자신이 입찰한 내역에 대한 취소
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.30
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: sp_cancel_bidding의 기능 전부 sp_req_cancel_bidding에 통합
*/

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET @json_data 		= NULL;
		CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
	CALL sp_req_user_exists_by_id(
		IN_USER_ID, 
		TRUE, 
		@rtn_val,
		@msg_txt
	);
	/*IN_USER_ID가 이미 등록되어 있는 사용자인지 체크한다. 등록되어 있는 경우에는 @USER_EXISTS = 1, 그렇지 않은 경우에는 @USER_EXISTS = 0을 반환한다.*/
	/*이미 등록되어 있는 사용자인 경우에는 관리자(member.admin)인지 검사한 후 member.admin인 경우에는 사업자 생성권한을 부여하고 그렇지 않은 경우에는 예외처리한다.*/
	/*등록되어 있지 않은 경우에는 신규사업자 생성으로 간주하고 정상처리 진행한다.*/
	
	IF @rtn_val = 0 THEN
    /*입찰을 신청하는 사용자가 유효한 경우*/
		CALL sp_req_site_id_of_user_reg_id(
        /*사용자가 소속한 사이트의 고유등록번호를 반환한다.*/
			IN_USER_ID,
            @USER_SITE_ID
        );
        IF @USER_SITE_ID > 0 THEN
        /*사용자가 소속한 사이트가 존재하는 경우(개인 사용자 또는 치움 시스템 관리자가 아닌 경우)*/
			CALL sp_req_site_id_of_collector_bidding_id(
				IN_COLLECT_BIDDING_ID,
                @COLLECTOR_SITE_ID
            );
            IF @USER_SITE_ID = @COLLECTOR_SITE_ID THEN
            /*입찰을 취소하려는 사용자가 해당 입찰을 신청한 사업자의 사이트 소속인 경우*/
				CALL sp_req_user_class_by_user_reg_id(
				/*사용자의 권한을 반환한다.*/
					IN_USER_ID,
					@USER_CLASS
				);
				IF @USER_CLASS = 201 OR @USER_CLASS = 202 THEN
                /*입찰을 취소하려는 관리자가 취소권한을 가진 경우*/
					CALL sp_req_disposal_id_of_collector_bidding_id(
						IN_COLLECT_BIDDING_ID,
						@DISPOSAL_ORDER_ID
					);
					
					CALL sp_req_bidding_end_date_expired(
					/*입찰마감일이 종료되었는지 검사한다. 종료되었으면 TRUE, 그렇지 않으면 FALSE반환*/
						@DISPOSAL_ORDER_ID,
						@rtn_val,
						@msg_txt
					);
					IF @rtn_val = 0 THEN
					/*입찰마감일이 종료되지 않은 경우*/
						CALL sp_req_site_already_bid(
						/*이전에 입찰한 사실이 존재하는지 확인한다.*/
							@USER_SITE_ID,
							@DISPOSAL_ORDER_ID,
							@rtn_val,
							@msg_txt
						);
						IF @SITE_ALREADY_BID > 0 THEN
						/*사이트가 이전에 입찰한 사실이 있는 경우에는 입찰취소가 가능함*/
							CALL sp_req_current_time(@REG_DT);
							UPDATE COLLECTOR_BIDDING SET CANCEL_BIDDING = TRUE, CANCEL_BIDDING_AT = @REG_DT WHERE ID = IN_COLLECT_BIDDING_ID;
							/*입찰신청을 취소사태(비활성상태)로 변경한다.*/
							IF ROW_COUNT() = 0 THEN
							/*데이타베이스 입력에 실패한 경우*/
								SET rtn_val 		= 23705;
								SET msg_txt 		= 'db error occurred during bid cancellation';
								SIGNAL SQLSTATE '23000';
							ELSE
							/*데이타베이스 입력에 성공한 경우*/
								SET rtn_val 		= 0;
								SET msg_txt 		= 'Success';
							END IF;
						ELSE
						/*사이트가 이전에 입찰한 사실이 없는 경우 예외처리한다.*/
							SET rtn_val 		= 23704;
							SET msg_txt 		= 'No previous bids have been made';
							SIGNAL SQLSTATE '23000';
						END IF;
					ELSE
					/*입찰마감일이 종료된 경우 예외처리한다.*/
						SET rtn_val 		= @rtn_val;
						SET msg_txt 		= @msg_txt;
						SIGNAL SQLSTATE '23000';
					END IF;
                ELSE
                /*입찰을 취소하려는 관리자가 취소권한을 가지지 않은 경우 예외처리한다.*/
					SET rtn_val = 23701;
					SET msg_txt = 'The user who wants to cancel the bid does not have the right to cancel';
					SIGNAL SQLSTATE '23000';                    
                END IF;				
            ELSE
            /*입찰을 취소하려는 사용자가 해당 입찰을 신청한 사업자의 사이트 소속이 아닌 경우 예외처리한다.*/
				SET rtn_val = 23702;
				SET msg_txt = 'The applicant for cancellation of the bid does not belong to the site';
				SIGNAL SQLSTATE '23000';
            END IF;
        ELSE
        /*사용자가 소속한 사이트가 존재하지 않는 경우(개인 사용자 또는 치움 시스템 관리자인 경우)에는 예외처리한다.*/
			SET rtn_val = 23703;
			SET msg_txt = 'Individual users do not have the right to cancel bids';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*입찰을 신청하는 사용자가 존재하지 않거나 유효하지 않은 경우*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
    
	SET @json_data 		= NULL;
	CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_cancel_visit`(
	IN IN_USER_ID				BIGINT,					/*방문요청신청자(USERS.ID)*/
	IN IN_DISPOSER_ORDER_ID		BIGINT					/*폐기물 배출 내역 고유등록번호(SITE_WSTE_DISPOSAL_ORDER.ID)*/
)
BEGIN

/*
Procedure Name 	: sp_req_cancel_visit
Input param 	: 2개
Output param 	: 2개
Job 			: 배출자의 방문신청 취소
Update 			: 2022.02.21
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_DISPOSAL_ORDER_EXISTS			INT						DEFAULT 0;
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data = NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  

    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/ 
    
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,			/*사용자의 고유등록번호*/
        TRUE,					/*ACTIVE가 TRUE인 상태(활성화 상태)인 사용자에 한정*/
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*요청자의 고유등록번호가 존재하는 경우*/    
		CALL sp_req_disposal_order_exists(
		/*폐기물 배출 요청 내역이 존재하는지 검사한다.*/
			IN_DISPOSER_ORDER_ID,
			VAR_DISPOSAL_ORDER_EXISTS
		);
		IF VAR_DISPOSAL_ORDER_EXISTS > 0 THEN
		/*폐기물 배출 요청 내역이 존재하는 경우*/
			SELECT COUNT(ID) INTO VAR_CHK_COUNT 
			FROM ASK_VISIT_SITE
			WHERE 
				DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND
				ASKER_ID = IN_USER_ID;
			/*방문신청을 하는자가 기존에 방문신청을 한 사실 있는지 확인한다.*/
			
			IF VAR_CHK_COUNT < 2 THEN
			/*재 방문 신청이 아닌 경우*/
				SELECT COUNT(ID) INTO VAR_CHK_COUNT 
				FROM ASK_VISIT_SITE
				WHERE 
					DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND
					ASKER_ID = IN_USER_ID AND
					ACTIVE = TRUE;
				/*방문신청을 하는자가 기존에 방문신청을 한 사실 있는지 확인한다.*/
				IF VAR_CHK_COUNT = 1 THEN
				/*만일 기존에 방문신청한 내역이 있는 경우*/
					UPDATE ASK_VISIT_SITE
					SET 
						ACTIVE		 		= FALSE,
						UPDATED_AT 			= VAR_REG_DT
					WHERE 
						DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID AND
						ASKER_ID 			= IN_USER_ID AND
						ACTIVE				= TRUE;
					/*해당 방문신청내역을 변경처리한다.*/
					
					IF ROW_COUNT() = 1 THEN
					/*방문신청 정보 변경과정이 성공적으로 마무리 되었다면*/
						SET rtn_val = 0;
						SET msg_txt = 'success';
					ELSE
					/*방문신청 정보 변경과정에 오류가 발생하였다면 예외처리한다.*/
						SET rtn_val = 23301;
						SET msg_txt = 'Failed to cancel visit request';
                        SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*만일 기존에 방문신청한 내역이 없는 경우*/
					SET rtn_val = 23302;
					SET msg_txt = 'no application history to cancel the visit request';
                    SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*방문신청을 2회 한 경우*/
				SET rtn_val = 23303;
				SET msg_txt = 'A re-application for a visit cannot be canceled';
                SIGNAL SQLSTATE '23000';
			END IF;
        ELSE
		/*폐기물 배출 요청 내역이 존재하지 않는 경우*/
			SET rtn_val = 23304;
			SET msg_txt = 'No Waste Discharge Requests';
			SIGNAL SQLSTATE '23000';
        END IF;
	ELSE
    /*요청자의 고유등록번호가 존재하지 않는 경우*/   
        SIGNAL SQLSTATE '23000';
    END IF;
	COMMIT;
	SET json_data = NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_change_activation_user_account`(
	IN IN_USER_ID				BIGINT,
    IN IN_REG_AT				DATETIME,
    IN IN_ACTIVE				TINYINT,
    OUT rtn_val					INT,
    OUT msg_txt					VARCHAR(200)
)
BEGIN
	UPDATE USERS 
	SET 
		ACTIVE = FALSE, 
		UPDATED_AT = IN_REG_AT
	WHERE ID = IN_USER_ID;
		
	IF ROW_COUNT() = 0 THEN
	/*변경이 적용되지 않은 경우*/
		SET @rtn_val = 33001;
		SET @msg_txt = 'Failed to delete user account';
		SIGNAL SQLSTATE '23000';
	ELSE
	/*모든 트랜잭션이 성공한 경우에만 로그를 한다.*/
		SET @rtn_val = 0;
		SET @msg_txt = 'Success';
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_change_generic_user_pwd`(
	IN IN_USER_PHONE				VARCHAR(20),			/*입력값 : 사용자 전화번호*/
	IN IN_PWD						VARCHAR(50),			/*입력값 : 사용자 변경할 암호*/
    OUT rtn_val 					INT,					/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)			/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_change_generic_user_pwd
Input param 	: 3개
Output param 	: 2개
Job 			: 입력받은 암호를 해당사용자의 새로운 암호로 업데이트를 한다. 성공인면 0, 그렇지 않으면 예외코드를 반환한다.
Update 			: 2022.01.13
Version			: 0.0.1
AUTHOR 			: Leo Nam

처리결과 / 메시지	: 0 	- Password change successful
				: 21301 - Failed to change password for any other reason
				: 21302 - Phone number not found
*/

	SELECT ID INTO @USER_REG_ID FROM USERS WHERE ACTIVE = TRUE AND PHONE = IN_USER_PHONE AND BELONG_TO = 0 AND CLASS >= 200;
    /*
    WHERE 조건문
    1. ACTIVE = TRUE : 활성화 되어 있는 아이디만 수정 등이 가능하므로 활성화되어 있는 아이디를 가진 사용자
    2. PHONE = IN_USER_PHONE : 입력된 전화번호를 자신의 전화번호로 등록한 사용자
    3. BELONG_TO = 0 : 사업자에 소속된 관리자가 아닌 사용자(개인 또는 sys.admin)
    4. CLASS >= 200 : sys.admin이 아닌 사용자
    */
    
    IF @USER_REG_ID IS NOT NULL THEN
		SET rtn_val = 0;
		SET msg_txt = 'Password changed successfully';
    ELSE
		CALL sp_req_use_same_phone(
			IN_USER_PHONE, 
            0, 
            TRUE, 
			@rtn_val, 
			@msg_txt
		);
        IF @rtn_val = TRUE THEN
			SET rtn_val = @rtn_val;
			SET msg_txt = @msg_txt;
			SIGNAL SQLSTATE '23000';
        ELSE
			SET rtn_val = 21302;
			SET msg_txt = 'Phone number not found';
			SIGNAL SQLSTATE '23000';
        END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_change_price_units`(
	IN IN_ORDER_ID			BIGINT,
    IN IN_UNIT				VARCHAR(20)
)
BEGIN
	DECLARE rtn_val					INT				DEFAULT 0;
    DECLARE msg_txt					VARCHAR(200)	DEFAULT 'success';
    DECLARE json_data				JSON			DEFAULT NULL;
    DECLARE VAR_REG_DT				DATETIME		DEFAULT NULL;
    DECLARE VAR_ORDER_EXISTS		INT				DEFAULT 0;
    DECLARE VAR_CAN_BE_CHANGED		INT				DEFAULT 0;
    
    SELECT COUNT(ID) INTO VAR_ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE ID = IN_ORDER_ID;
    
    IF VAR_ORDER_EXISTS = 1 THEN
		SELECT COUNT(ID) INTO VAR_CAN_BE_CHANGED
        FROM SITE_WSTE_DISPOSAL_ORDER
        WHERE 
			ID = IN_ORDER_ID AND
            BIDDERS = 0;
		IF VAR_CAN_BE_CHANGED = 1 THEN
			CALL sp_req_current_time(VAR_REG_DT);
			UPDATE WSTE_DISCHARGED_FROM_SITE
			SET 
				UNIT = IN_UNIT,
				UPDATED_AT = VAR_REG_DT
			WHERE DISPOSAL_ORDER_ID = IN_ORDER_ID;
        ELSE
			SET rtn_val = 40802;
			SET msg_txt = 'Bidding has already started and units cannot be changed';
        END IF;
    ELSE
		SET rtn_val = 40801;
		SET msg_txt = 'Order does not exist';
    END IF;
    SELECT JSON_OBJECT(
		'ORDER_ID', 		IN_ORDER_ID,
        'UNIT',				IN_UNIT
    ) INTO json_data;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_change_read_state_of_history`(
	IN IN_USER_ID					BIGINT,
	IN IN_HISTORY_ID				BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_change_read_state_of_history
Input param 	: 3개
Job 			: 히스토리의 읽음 상태를 변경한다.
Update 			: 2022.04.19
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_HISTORY_COUNT					INT						DEFAULT 0;
	DECLARE VAR_DELETED							TINYINT					DEFAULT FALSE;
	DECLARE VAR_IS_READ							TINYINT					DEFAULT FALSE;
	DECLARE VAR_PUSH_USER_ID					BIGINT					DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/
		SELECT COUNT(ID) INTO VAR_HISTORY_COUNT
        FROM PUSH_HISTORY
        WHERE ID = IN_HISTORY_ID;
        
		IF VAR_HISTORY_COUNT = 1 THEN
		/*히스토리가 존재하는 경우 정상처리한다*/			
			SELECT DELETED, IS_READ, USER_ID 
            INTO VAR_DELETED, VAR_IS_READ, VAR_PUSH_USER_ID
			FROM PUSH_HISTORY
			WHERE 
				ID = IN_HISTORY_ID AND
				DELETED = FALSE;
			IF VAR_DELETED = FALSE THEN
            /*푸시 히스토리를 삭제하지 않은 경우 정상처리한다.*/
				IF VAR_IS_READ = FALSE THEN
				/*푸시 히스토리를 읽지 않은 경우에는 정상처리한다.*/
					IF VAR_PUSH_USER_ID = IN_USER_ID THEN
					/*푸시를 읽을수 있는 사용자인 경우에는 정상처리한다*/
						UPDATE PUSH_HISTORY 
						SET 
							IS_READ 		= TRUE, 
							IS_READ_AT 		= VAR_REG_DT
						WHERE ID = IN_HISTORY_ID;
						IF ROW_COUNT() = 1 THEN
						/*정보가 성공적으로 변경되었다면*/
							SET rtn_val = 0;
							SET msg_txt = 'success';
						ELSE
						/*정보변경에 실패했다면 예외처리한다.*/
							SET rtn_val = 38305;
							SET msg_txt = 'Failed to update the record';
							SIGNAL SQLSTATE '23000';
						END IF;
					ELSE
					/*푸시를 읽을수 없는 사용자인 경우에는 예외처리한다*/
						SET rtn_val = 38304;
						SET msg_txt = 'user not authorized';
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*푸시 히스토리를 이미 읽은 경우에는 예외처리한다.*/
					SET rtn_val = 38303;
					SET msg_txt = 'push history already read';
					SIGNAL SQLSTATE '23000';
				END IF;
            ELSE
            /*푸시 히스토리를 이미 삭제한 경우 예외처리한다.*/
				SET rtn_val = 38302;
				SET msg_txt = 'push history already deleted';
				SIGNAL SQLSTATE '23000';
            END IF;
		ELSE
		/*히스토리가 존재하는 경우 예외처리한다*/
			SET rtn_val = 38301;
			SET msg_txt = 'push history does not exist';
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_change_site_collector`(
	IN IN_USER_ID 						BIGINT,				/*입력값 : 사용자 고유등록번호*/
    IN IN_SITE_ID						BIGINT,				/*입력값 : 관리자암호*/
	IN IN_WSTE_LIST						JSON,				/*입력값 : 폐기물 구분 코드(JSON)*/
	IN IN_TRMT_BIZ_CODE					VARCHAR(4),			/*입력값 : 사이트 업종구분*/
	IN IN_PERMIT_REG_CODE				VARCHAR(100),		/*입력값 : 사이트 업종구분*/
	IN IN_PERMIT_REG_IMG_PATH			VARCHAR(200)		/*입력값 : 사이트 업종구분*/
    )
BEGIN

/*
Procedure Name 	: sp_req_change_site_collector
Input param 	: 6개
Job 			: 사이트를 수거업자등으로 변경한다.
Update 			: 2022.02.11
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    /*사이트가 소재하는 주소지에 대한 위도 경도값은 NULL처리 한다.*/
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    CALL sp_req_user_exists_by_id(
		IN_CREATOR_ID,			/*사이트를 개설하려는 자의 고유등록번호*/
        TRUE,					/*ACTIVE가 TRUE인 상태(활성화 상태)인 사용자에 한정*/
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
	/*사용자가 존재하는 경우 정상처리한다.*/
		CALL sp_req_site_id_of_user_reg_id(
			IN_USER_ID,
            VAR_USER_SITE_ID,
            rtn_val,
            msg_txt
        );
        IF rtn_val = 0 THEN
        /*사용자가 소속한 사이트가 존재하는 경우 정상처리한다.*/
			IF IN_SITE_ID = VAR_USER_SITE_ID THEN
            /*사용자가 소속한 사이트와 정보를 변경할 대상인 사이트가 동일한 경우 정상처리한다.*/
				CALL sp_req_user_class(
					IN_USER_ID,
                    VAR_USER_CLASS
                );
                IF VAR_USER_CLASS = 201 THEN
                /*사용자가 사이트의 정보를 변경할 권한이 있는 경우 정상처리한다.*/
					CALL sp_update_site_permit_info_without_handler(
						IN_USER_ID,
                        IN_SITE_ID,
                        IN_WSTE_LIST,
                        IN_TRMT_BIZ_CODE,
                        IN_PERMIT_REG_CODE,
                        IN_PERMIT_REG_IMG_PATH,
                        rtn_val,
                        msg_txt
                    );
                    IF rtn_val = 0 THEN
                    /*정보를 성공적으로 변경한 경우에는 정상처리한다.*/
						SET json_data 		= NULL;
						SET rtn_val = 0;
						SET msg_txt = 'Success';
                    ELSE
                    /*정보 변경에 실패한 경우에는 예외처리한다.*/
						SET json_data 		= NULL;
						SIGNAL SQLSTATE '23000';
                    END IF;
                ELSE
                /*사용자가 사이트의 정보를 변경할 권한이 없는 경우 예외처리한다.*/
					SET json_data 		= NULL;
					SET rtn_val = 30002;
					SET msg_txt = 'Users are not authorized to change information on the site.';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사용자가 소속한 사이트와 정보를 변경할 대상인 사이트가 동일하지 않은 경우 예외처리한다.*/
				SET json_data 		= NULL;
                SET rtn_val = 30001;
                SET msg_txt = 'User is not affiliated with the site';
				SIGNAL SQLSTATE '23000';
            END IF;
        ELSE
        /*사용자가 소속한 사이트가 존재하지 않는 경우 예외처리한다.*/
			SET json_data 		= NULL;
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
	/*사용자가 존재하지 않는 경우 예외처리한다.*/
		SET json_data 		= NULL;
		SIGNAL SQLSTATE '23000';
    END IF;
	COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_change_user_phone`(
	IN IN_USER_ID				BIGINT,										/*입력값 : 사용자 고유등록번호(USERS.ID)*/
	IN IN_OLD_NUMBER			VARCHAR(200),								/*입력값 : 이전전화번호*/
	IN IN_NEW_NUMBER			VARCHAR(200)								/*입력값 : 새전화번호*/
)
BEGIN

/*
Procedure Name 	: sp_req_change_user_phone
Input param 	: 2개
Job 			: 사용자의 전화번호를 변경처리한다.
Update 			: 2022.06-27
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_OLD_PHONE_EXISTS				TINYINT					DEFAULT FALSE; 
	DECLARE VAR_NEW_PHONE_EXISTS				TINYINT					DEFAULT FALSE; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  	

    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
	IF rtn_val = 0 THEN
	/*사용자가 유효한 경우에는 정상처리한다.*/
		SELECT COUNT(ID) INTO VAR_OLD_PHONE_EXISTS
        FROM USERS
        WHERE
			ID = IN_USER_ID AND
            PHONE = IN_OLD_NUMBER AND
            ACTIVE = TRUE;
		
        IF VAR_OLD_PHONE_EXISTS = TRUE THEN
        /*이전 전화번호가 존재하는 경우*/
			SELECT COUNT(ID) INTO VAR_NEW_PHONE_EXISTS
            FROM USERS
            WHERE PHONE = IN_NEW_NUMBER;
            
            IF VAR_NEW_PHONE_EXISTS = FALSE THEN
            /*새 전화번호가 존재하지 않는 경우 정상처리한다.*/
				UPDATE USERS SET PHONE = IN_NEW_NUMBER, UPDATED_AT = VAR_REG_DT WHERE ID = IN_USER_ID;
				/*사용자 암호를 변경한다.*/
				
				IF ROW_COUNT() = 1 THEN
				/*전화번호 변경에 성공한 경우*/
					SET rtn_val = 0;
					SET msg_txt = 'user phone number changed successfully';
				ELSE
				/*전화번호 변경에 실패한 경우*/
					SET rtn_val = 40603;
					SET msg_txt = 'failed to change user phone number';
					SIGNAL SQLSTATE '23000';
				END IF;
            ELSE
            /*새 전화번호가 이미 존재하는 경우 예외처리한다.*/
				SET rtn_val = 40602;
				SET msg_txt = 'new number already exists';
				SIGNAL SQLSTATE '23000';
            END IF;
        ELSE
        /*이전전화번호가 존재하지 않는 경우*/
			SET rtn_val = 40601;
			SET msg_txt = 'old phone does not exist';
			SIGNAL SQLSTATE '23000';
        END IF;
	ELSE
	/*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
	END IF;
    COMMIT;    
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'USER_ID'		, IN_USER_ID,
		'OLD_NUMBER'	, IN_OLD_NUMBER,
		'NEW_NUMBER'	, IN_NEW_NUMBER
	)) 
    INTO json_data;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_change_user_pwd`(
	IN IN_USER_ID				BIGINT,										/*입력값 : 사용자 고유등록번호(USERS.ID)*/
	IN IN_PWD					VARCHAR(200)									/*입력값 : 사용자 변경할 암호*/
)
BEGIN

/*
Procedure Name 	: sp_req_change_user_pwd
Input param 	: 2개
Job 			: 입력받은 암호를 해당사용자의 새로운 암호로 업데이트를 한다. 성공인면 0, 그렇지 않으면 예외코드를 반환한다.
Update 			: 2022.01.30
Version			: 0.0.4
AUTHOR 			: Leo Nam
Change			: 사용자 타입구분 폐지(전화번호는 유일한 키 => 전화번호가 중복되지 않으므로 사용자 타입을 구분할 필요 없음)(0.0.2)
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  	

    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
	IF rtn_val = 0 THEN
	/*사용자가 유효한 경우에는 정상처리한다.*/
		UPDATE USERS SET PWD = IN_PWD, UPDATED_AT = VAR_REG_DT WHERE ID = IN_USER_ID;
		/*사용자 암호를 변경한다.*/
		
		IF ROW_COUNT() = 1 THEN
		/*사용자 암호 변경에 성공한 경우*/
			SET rtn_val = 0;
			SET msg_txt = 'Password changed successfully';
		ELSE
		/*사용자 암호 변경에 실패한 경우*/
			SET rtn_val = 21301;
			SET msg_txt = 'Password change failed';
			SIGNAL SQLSTATE '23000';
		END IF;
	ELSE
	/*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
	END IF;
    COMMIT;
    
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'UID'			, IN_USER_ID,
		'pwd'			, IN_PWD
	)) 
    INTO json_data;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_close_bidding_early`(
	IN IN_USER_ID					BIGINT,
	IN IN_DISPOSER_ORDER_ID			BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_close_bidding_early
Input param 	: 2개
Job 			: 입찰일정을 조기마감한다.
Update 			: 2022.01.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;
	DECLARE VAR_PUSH_CATEGORY_ID				INT						DEFAULT 18;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/
		CALL sp_req_site_id_of_disposal_order_id(
        /*DISPOSAL ORDER 의 배출자 사이트 아이디를 구한다.*/
			IN_DISPOSER_ORDER_ID,
            VAR_DISPOSER_SITE_ID
        );
        
        CALL sp_req_site_id_of_user_reg_id(
        /*사용자가 소속한 사이트의 아이디를 구한다.*/
			IN_USER_ID,
            VAR_USER_SITE_ID,
			rtn_val,
			msg_txt
        );
        
		IF rtn_val = 0 OR VAR_USER_SITE_ID = 0 THEN
		/*사이트가 정상(개인사용자는 제외됨)적인 경우*/
			IF VAR_DISPOSER_SITE_ID = VAR_USER_SITE_ID THEN
			/*사용자가 정보변경 대상이 되는 사이트에 소속한 관리자인 경우*/
				CALL sp_req_user_class_by_user_reg_id(
				/*사용자의 권한을 구한다.*/
				IN_USER_ID,
				VAR_USER_CLASS
				);
				IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
				/*관리자가 정보를 변경할 권한이 있는 경우*/
					CALL sp_req_have_bidding_record(
                    /*수거자가 입찰한 기록이 있는지 검사한다.*/
						IN_DISPOSER_ORDER_ID,
                        rtn_val,
                        msg_txt
                    );
                    IF rtn_val = 0 THEN
                    /*수거자가 입찰한 기록이 존재하는 경우 정상처리한다.*/
						/*SELECT COUNT(ID) INTO @COUNT_OF_REQUEST_OF_BIDDING FROM COLLECTOR_BIDDING WHERE DATE_OF_BIDDING IS NOT NULL AND DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID;*/
						/*입찰신청한 업체수를 계산하여 @COUNT_OF_REQUEST_OF_BIDDING을 통하여 반환한다.*/
						
						/*IF @COUNT_OF_REQUEST_OF_BIDDING > 0 THEN*/
						/*입찰신청한 업체가 1이상 존재하는 경우*/
							UPDATE SITE_WSTE_DISPOSAL_ORDER 
							SET 
								BIDDING_EARLY_CLOSING 		= TRUE, 
								BIDDING_EARLY_CLOSED_AT 	= VAR_REG_DT, 
								BIDDING_END_AT 				= VAR_REG_DT
							WHERE ID = IN_DISPOSER_ORDER_ID;
							IF ROW_COUNT() = 1 THEN
							/*정보가 성공적으로 변경되었다면*/
								CALL sp_calc_max_decision_at(
								/*배출자가 입찰을 조기종료함으로써 모든 수거자의 최대결심일자를 변경적용한다.*/
									IN_DISPOSER_ORDER_ID,
                                    NULL,
                                    VAR_REG_DT
                                );
								CALL sp_calc_bidding_rank(
									IN_DISPOSER_ORDER_ID
								);
								CALL sp_push_disposer_close_bidding_early(
									IN_USER_ID,
									IN_DISPOSER_ORDER_ID,
									VAR_PUSH_CATEGORY_ID,
									json_data,
									rtn_val,
									msg_txt
								);
								IF rtn_val > 0 THEN
									SIGNAL SQLSTATE '23000';
								END IF;
							ELSE
							/*정보변경에 실패했다면 예외처리한다.*/
								SET rtn_val = 24501;
								SET msg_txt = 'failure to close early';
								SIGNAL SQLSTATE '23000';
							END IF;
                        /*ELSE*/
						/*입찰신청한 업체가 존재하지 않는 경우*/
						/*	SET rtn_val = 24504;
							SET msg_txt = 'The company requested to bid does not exist';
                        END IF;*/
                    ELSE
                    /*수거자가 입찰한 기록이 존재하지 않는 경우 예외처리한다.*/
						SIGNAL SQLSTATE '23000';
                    END IF;
				ELSE
				/*관리자가 정보를 변경할 권한이 없는 경우*/
					SET rtn_val = 24502;
					SET msg_txt = 'User does not have permission to change information';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*사용자가 정보변경 대상이 되는 사이트에 소속한 관리자가 아닌 경우 예외처리한다.*/
				SET rtn_val = 24503;
				SET msg_txt = 'The user is not an administrator of the site';
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
		/*사이트가 존재하지 않거나 유효하지 않은(개인사용자의 경우) 경우*/
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_close_visit_early`(
	IN IN_USER_ID					BIGINT,
	IN IN_DISPOSER_ORDER_ID			BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_close_visit_early
Input param 	: 2개
Job 			: 방문일정을 조기마감한다.
Update 			: 2022.02.14
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT 			DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200) 	DEFAULT 'success';
	DECLARE json_data							JSON 			DEFAULT NULL;
	DECLARE VAR_PUSH_CATEGORY_ID				INT 			DEFAULT 6;
	DECLARE VAR_REG_DT							DATETIME 		DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID					BIGINT 			DEFAULT NULL;
	DECLARE VAR_DISPOSER_ID						BIGINT 			DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT 			DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data = NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/
        
        SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID FROM USERS WHERE ID = IN_USER_ID;
        
        IF VAR_USER_SITE_ID = 0 THEN
        /*개인사용자인 경우*/
			SELECT DISPOSER_ID INTO VAR_DISPOSER_ID
            FROM SITE_WSTE_DISPOSAL_ORDER
            WHERE ID = IN_DISPOSER_ORDER_ID;
            IF VAR_DISPOSER_ID = IN_USER_ID THEN
            /*배출자가 자신인 경우*/
				CALL sp_req_close_visit_early_without_handler(
					IN_USER_ID,
                    IN_DISPOSER_ORDER_ID,
                    VAR_REG_DT,
                    rtn_val,
                    msg_txt,
                    json_data
                );
                IF rtn_val = 0 THEN
					CALL sp_push_disposer_close_visit_early(
						IN_USER_ID,
						IN_DISPOSER_ORDER_ID,
                        VAR_PUSH_CATEGORY_ID,
						json_data,
						rtn_val,
						msg_txt
					);
					CALL sp_calc_bidder_and_prospective_visitors(
						IN_DISPOSER_ORDER_ID
					);
                    IF rtn_val > 0 THEN
						SIGNAL SQLSTATE '23000';
                    END IF;
				ELSE
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*배출자가 자신이 아닌 경우 예외처리한다.*/
				SET rtn_val = 24302;
				SET msg_txt = 'The user is not an owner of the disposal order';
				SIGNAL SQLSTATE '23000';
            END IF;
        ELSE
        /*사업자의 관리자인 경우*/
			CALL sp_req_site_id_of_disposal_order_id(
			/*DISPOSAL ORDER 의 배출자 사이트 아이디를 구한다.*/
				IN_DISPOSER_ORDER_ID,
				VAR_DISPOSER_SITE_ID
			);
            IF VAR_USER_SITE_ID = VAR_DISPOSER_SITE_ID THEN
            /*자신이 소속한 사이트가 배출한 오더인 경우*/
				CALL sp_req_close_visit_early_without_handler(
					IN_USER_ID,
                    IN_DISPOSER_ORDER_ID,
                    VAR_REG_DT,
                    rtn_val,
                    msg_txt,
                    json_data
                );
                IF rtn_val = 0 THEN
					CALL sp_push_disposer_close_visit_early(
						IN_USER_ID,
						IN_DISPOSER_ORDER_ID,
                        VAR_PUSH_CATEGORY_ID,
						json_data,
						rtn_val,
						msg_txt
					);
					CALL sp_calc_bidder_and_prospective_visitors(
						IN_DISPOSER_ORDER_ID
					);
                    IF rtn_val > 0 THEN
						SIGNAL SQLSTATE '23000';
                    END IF;
				ELSE
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
			/*사용자가 정보변경 대상이 되는 사이트에 소속한 관리자가 아닌 경우 예외처리한다.*/
				SET rtn_val = 24301;
				SET msg_txt = 'The user is not an administrator of the site';
				SIGNAL SQLSTATE '23000';
            END IF;
        END IF;
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_close_visit_early_without_handler`(
	IN IN_USER_ID				BIGINT,
    IN IN_DISPOSER_ORDER_ID		BIGINT,
    IN IN_REG_DT				DATETIME,
    OUT rtn_val					INT,
    OUT msg_txt					VARCHAR(200),
    OUT json_data				JSON
)
BEGIN
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;
	DECLARE VAR_COUNT_OF_REQUEST_OF_VISIT		INT						DEFAULT 0;
	DECLARE VAR_PROSPECTIVE_VISITORS			INT						DEFAULT 0;
	DECLARE VAR_VISIT_START_AT					DATETIME				DEFAULT NULL;
	DECLARE DBEDATVC							VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;
    
	CALL sp_req_user_class_by_user_reg_id(
	/*사용자의 권한을 구한다.*/
		IN_USER_ID,
		VAR_USER_CLASS
	);
	IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
	/*관리자가 정보를 변경할 권한이 있는 경우*/
		SELECT COUNT(ID) INTO VAR_COUNT_OF_REQUEST_OF_VISIT 
		FROM COLLECTOR_BIDDING 
		WHERE 
			DATE_OF_VISIT IS NOT NULL AND 			/*방문승낙을 받은 업체가 존재하는 경우*/
			DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID;
		/*방문신청한 업체수를 계산하여 VAR_COUNT_OF_REQUEST_OF_VISIT을 통하여 반환한다.*/
		
		IF VAR_COUNT_OF_REQUEST_OF_VISIT > 0 THEN
		/*방문신청한 업체가 1이상 존재하는 경우*/
			SELECT PROSPECTIVE_VISITORS INTO VAR_PROSPECTIVE_VISITORS 
			FROM SITE_WSTE_DISPOSAL_ORDER 
			WHERE 
				ID = IN_DISPOSER_ORDER_ID;
			/*방문승낙 받은 업체수를 계산하여 @COUNT_OF_VISIT_CONFIRMED을 통하여 반환한다.*/
			IF VAR_PROSPECTIVE_VISITORS > 0 THEN
			/*방문승낙 받은 업체가 1이상 존재하는 경우*/
				SELECT VISIT_START_AT INTO VAR_VISIT_START_AT FROM SITE_WSTE_DISPOSAL_ORDER WHERE ID = IN_DISPOSER_ORDER_ID;
				IF VAR_VISIT_START_AT <= IN_REG_DT THEN
				/*방문시작이 된 경우에는 정상처리한다.*/
					CALL sp_req_policy_direction(
					/*조기마감이 된 배출신청에 등록된 입찰마감일자를 반환한다.*/
						'duration_bidding_end_date_after_the_visit_closing',
						DBEDATVC
					);
                    
					UPDATE SITE_WSTE_DISPOSAL_ORDER 
					SET 
						VISIT_EARLY_CLOSING 		= TRUE, 
						VISIT_EARLY_CLOSED_AT 		= IN_REG_DT, 
						BIDDING_END_AT 	= ADDTIME(IN_REG_DT, CONCAT(DBEDATVC, ':00:00')),
					/*	BIDDING_END_AT 	= IF(BIDDING_END_AT <= ADDTIME(IN_REG_DT, CONCAT(@PERIOD_UNTIL_BIDDING_END_DATE, ':00')), */
					/*						BIDDING_END_AT, 				*/	
											/*조건을 만족하는 경우로서 입찰마감일이 현재일로부터 정책으로 결정된 시간 이내인 경우에는 현재 설정된 입찰마감일을 그대로 사용하도록 한다.*/
					/*						ADDTIME(IN_REG_DT, CONCAT(@PERIOD_UNTIL_BIDDING_END_DATE, ':00'))		*/		
											/*조건을 만족하지 않는 경우로서 입찰마감일이 현재일로부터 정책으로 결정된 시간 이후인 경우에는 현재 시간으로부터 정책으로 결정된 시간 이후의 시간으로 입찰마감일을 변경한다.*/
					/*					), */
						VISIT_END_AT 	= IN_REG_DT,
						UPDATED_AT 		= IN_REG_DT
					WHERE ID 			= IN_DISPOSER_ORDER_ID;
                    
                    SELECT ID INTO VAR_TRANSACTION_ID
                    FROM WSTE_CLCT_TRMT_TRANSACTION
                    WHERE 
						DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND
                        IN_PROGRESS = TRUE;
					
                    UPDATE WSTE_CLCT_TRMT_TRANSACTION
                    SET VISIT_END_AT = IN_REG_DT
                    WHERE ID = VAR_TRANSACTION_ID;
                    
					CALL sp_calc_max_decision_at(
					/*배출자가 입찰을 조기종료함으로써 모든 수거자의 최대결심일자를 변경적용한다.*/
						IN_DISPOSER_ORDER_ID,
						NULL,
						IN_REG_DT
					);
					CALL sp_retrieve_sites_that_can_bid(
						IN_DISPOSER_ORDER_ID,
						rtn_val,
						msg_txt,
						json_data
					);
				ELSE
				/*방문시작이 되지 않은 경우에는 예외처리한다.*/
					SET json_data = NULL;
					SET rtn_val = 35804;
					SET msg_txt = 'The visit date has not arrived yet';
				END IF;
			ELSE
			/*방문승낙 받은 업체가 존재하지 않는 경우 예외처리한다.*/
				SET json_data = NULL;
				SET rtn_val = 35803;
				SET msg_txt = 'no company that has been approved to visit';
			END IF;
		ELSE
		/*방문신청한 업체가 존재하지 않는 경우에는 예외처리한다.*/
			SET json_data = NULL;
			SET rtn_val = 35802;
			SET msg_txt = 'The company requested to visit does not exist';
		END IF;
	ELSE
	/*관리자가 정보를 변경할 권한이 없는 경우*/
		SET json_data = NULL;
		SET rtn_val = 35801;
		SET msg_txt = 'User does not have permission to change information';
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_collect_bidding_max_id`(
	OUT OUT_COMP_MAX_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_collect_bidding_max_id
Output param 	: 1개
Job 			: 등록된 사업자 중에서 가장 큰 고유번호(ID) + 1을 반환한다.
Update 			: 2022.01.21
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT max(ID) INTO OUT_COMP_MAX_ID FROM COLLECTOR_BIDDING;			
	/*현재 테이블에서 가장 큰 사용자 고유번호를 구한 후 USER_MAX_ID에 저장한다.*/
	
	IF (OUT_COMP_MAX_ID IS NULL) THEN
		SET OUT_COMP_MAX_ID = 1;
		/*사용자 테이블의 저장된 고유번호가 하나도 없는 경우에는 NULL이 반환되므로 MAX_ID를 1로 저장한다.*/
	ELSE
		SET OUT_COMP_MAX_ID = OUT_COMP_MAX_ID + 1;
		/*최대값을 구하였다면 그 값에 1을 더하여 등록할 사용자의 고유번호로 정한다.*/
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_collector_ask_transaction_completed`(
	IN IN_USER_ID					BIGINT,								/*입렦값 : 폐기물 처리보고서 작성자(USERS.ID)*/
	IN IN_TRANSACTION_ID			BIGINT,								/*입렦값 : 폐기물 처리작업 코드(WSTE_CLCT_TRMT_TRANSACTION.ID)*/
	IN IN_WSTE_CODE					VARCHAR(8),							/*입렦값 : 폐기물코드(WSTE_CODE.CODE)*/
	IN IN_QUANTITY					FLOAT,								/*입렦값 : 폐기물수량*/
	IN IN_COMPLETED_AT				DATETIME,							/*입렦값 : 폐기물 최종처리일자*/
	IN IN_PRICE						INT,								/*입렦값 : 폐기물 처리가격*/
	IN IN_UNIT						ENUM('Kg','m³','식','전체견적가'),		/*입렦값 : 폐기물 처리단위*/
	IN IN_TRMT_METHOD				VARCHAR(4),							/*입렦값 : 폐기물 처리방법(WSTE_TRMT_METHOD.CODE)*/
	IN IN_WSTE_APPEARANCE			INT,								/*입렦값 : 폐기물 성상(WSTE_APPEARANCE.ID)으로서 1:고상, 2:액상*/
	IN IN_IMG_LIST					JSON,								/*입렦값 : 폐기물 처리사진*/
    IN IN_TRMT_FCTL					INT,
    IN IN_SUB_CATEGORY				JSON
)
BEGIN

/*
Procedure Name 	: sp_req_collector_ask_transaction_completed
Input param 	: 10개
Job 			: 폐기물처리보고서를 작성한다
Update 			: 2022.03.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_PUSH_CATEGORY_ID				INT						DEFAULT 25;
	DECLARE VAR_TRANSACTION_EXISTS				INT						DEFAULT 0;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;
	DECLARE VAR_TRANSACTION_STATE_CODE			INT						DEFAULT NULL;
	DECLARE VAR_DISPOSER_ORDER_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_VISIT_END_AT					DATETIME				DEFAULT NULL;
	DECLARE VAR_TRANSACTION_VISIT_END_AT		DATETIME				DEFAULT NULL;
	DECLARE VAR_REPORT_ID						BIGINT					DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  

	SET rtn_val 		= NULL;
	SET msg_txt 		= NULL;
	SET json_data 		= NULL;
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
	/*생성자가 존재하는지 체크한다.*/
		IN_USER_ID, 
		TRUE, 
		rtn_val,
		msg_txt
	);
	/*등록을 요청하는 사용자의 USER_ID가 이미 등록되어 있는 경우에는 @USER_EXISTS = 1, 그렇지 않은 경우에는 @USER_EXISTS = 0이 됨*/ 		
	IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우*/
		CALL sp_req_transaction_exists(
        /*트랜잭션이 존재하는지 검사한다.*/
			IN_TRANSACTION_ID,
            VAR_TRANSACTION_EXISTS
        );
        IF VAR_TRANSACTION_EXISTS = TRUE THEN
        /*트랜잭션이 존재하는 경우*/
			CALL sp_req_site_id_of_transaction_id(
            /*트랜잭션의 양 당사자(배출자와 수거자)의 사이트 등록번호를 반환한다.*/
				IN_TRANSACTION_ID,
                VAR_DISPOSER_SITE_ID,
                VAR_COLLECTOR_SITE_ID
            );
            SELECT AFFILIATED_SITE 
            INTO VAR_USER_SITE_ID 
            FROM USERS 
            WHERE ID = IN_USER_ID;
            IF VAR_USER_SITE_ID > 0 THEN
			/*사이트가 정상(개인사용자는 제외됨)적인 경우*/
				IF VAR_USER_SITE_ID = VAR_COLLECTOR_SITE_ID THEN
				/*사용자가 수거자 소속의 관리자인 경우*/
					CALL sp_req_user_class_by_user_reg_id(
					/*사용자의 권한을 반환한다.*/
						IN_USER_ID,
						VAR_USER_CLASS
					);
					IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
					/*사용자가 수거자 소속의 권한있는 사용자인 경우*/
						SELECT TRANSACTION_STATE_CODE, DISPOSAL_ORDER_ID, VISIT_END_AT
                        INTO VAR_TRANSACTION_STATE_CODE, VAR_DISPOSER_ORDER_ID, VAR_VISIT_END_AT 
                        FROM V_TRANSACTION_STATE
                        WHERE TRANSACTION_ID = IN_TRANSACTION_ID;
                        IF VAR_TRANSACTION_STATE_CODE = 221 THEN
							UPDATE WSTE_CLCT_TRMT_TRANSACTION 
							SET 
								COLLECTOR_REPORTED = TRUE,
								COLLECTOR_REPORTED_AT = VAR_REG_DT
							WHERE ID = IN_TRANSACTION_ID;
							IF ROW_COUNT() = 1 THEN
								INSERT INTO TRANSACTION_REPORT (
									TRANSACTION_ID,
									COLLECTOR_SITE_ID,
									DISPOSER_SITE_ID,
									COLLECTOR_MANAGER_ID,
									TRANSACTION_COMPLETED_AT,
									QUANTITY,
									UNIT,
									PRICE,
									WSTE_CODE,
									CREATED_AT,
									UPDATED_AT,
									DISPOSER_ORDER_ID,
                                    TRMT_METHOD,
                                    WSTE_APPEARANCE
								) VALUES (
									IN_TRANSACTION_ID,
									VAR_COLLECTOR_SITE_ID,
									VAR_DISPOSER_SITE_ID,
									IN_USER_ID,
									IN_COMPLETED_AT,
									IN_QUANTITY,
									IN_UNIT,
									IN_PRICE,
									IN_WSTE_CODE,
									VAR_REG_DT,
									VAR_REG_DT,
									VAR_DISPOSER_ORDER_ID,
                                    IN_TRMT_METHOD,
                                    IN_WSTE_APPEARANCE
								);
								IF ROW_COUNT() = 1 THEN   
									SELECT DISPOSAL_ORDER_ID 
                                    INTO VAR_DISPOSER_ORDER_ID 
                                    FROM WSTE_CLCT_TRMT_TRANSACTION 
                                    WHERE ID = IN_TRANSACTION_ID;
									CALL sp_create_site_wste_photo_information(
										VAR_DISPOSER_ORDER_ID,
                                        IN_TRANSACTION_ID,
										VAR_REG_DT,
										'처리',
										IN_IMG_LIST,
										rtn_val,
										msg_txt
									);
									IF rtn_val = 0 THEN
										IF VAR_VISIT_END_AT IS NOT NULL THEN
                                        /*방문일정이 존재하는 경우*/
											IF VAR_VISIT_END_AT <= VAR_REG_DT THEN
											/*방문일정 이후에 보고서를 작성한 경우에는 정상처리한다.*/
                                            /*이 부분에 sp_insert_wste_trmt_fctl_processing을 삽입하도록 한다.*/
												SELECT ID INTO VAR_REPORT_ID
                                                FROM TRANSACTION_REPORT
                                                WHERE TRANSACTION_ID = IN_TRANSACTION_ID;
                                                /*
												CALL sp_insert_wste_trmt_fctl_processing(
													VAR_REPORT_ID,
													IN_TRMT_FCTL,
													IN_SUB_CATEGORY,
													rtn_val,
													msg_txt
												);
                                                */
                                                SET rtn_val = 0;
                                                IF rtn_val = 0 THEN
													CALL sp_push_collector_ask_transaction_completed(
														IN_USER_ID,
														VAR_DISPOSER_ORDER_ID,
														NULL,
														IN_TRANSACTION_ID,
														VAR_PUSH_CATEGORY_ID,
														json_data,
														rtn_val,
														msg_txt
													);
													IF rtn_val = 0 THEN
														SELECT VISIT_END_AT INTO VAR_TRANSACTION_VISIT_END_AT
														FROM WSTE_CLCT_TRMT_TRANSACTION
														WHERE ID = IN_TRANSACTION_ID;
														IF VAR_TRANSACTION_VISIT_END_AT IS NOT NULL THEN
															IF VAR_TRANSACTION_VISIT_END_AT >= VAR_REG_DT THEN
																UPDATE WSTE_CLCT_TRMT_TRANSACTION
																SET VISIT_END_AT = VAR_REG_DT
																WHERE ID = IN_TRANSACTION_ID;
																IF ROW_COUNT() = 0 THEN
																	SET rtn_val = 25409;
																	SET msg_txt = 'failed to set visit end date now';
																	SIGNAL SQLSTATE '23000';
																END IF;
															END IF;
														END IF;
													ELSE
														SIGNAL SQLSTATE '23000';
													END IF;
												ELSE
													SIGNAL SQLSTATE '23000';
                                                END IF;
											ELSE
											/*방문일정중에 보고서를 작성한 경우에는 예외처리한다.*/
												SET rtn_val = 25408;
												SET msg_txt = 'Reports can be submitted during the visit schedule';
												SIGNAL SQLSTATE '23000';
											END IF;
                                        ELSE
                                        /*방문일정이 존재하지 않는 경우에는 정상처리한다.*/
											CALL sp_push_collector_ask_transaction_completed(
												IN_USER_ID,
												VAR_DISPOSER_ORDER_ID,
												NULL,
												IN_TRANSACTION_ID,
												VAR_PUSH_CATEGORY_ID,
												json_data,
												rtn_val,
												msg_txt
											);
											IF rtn_val > 0 THEN
												SIGNAL SQLSTATE '23000';
											END IF;
                                        END IF;
									ELSE
										SIGNAL SQLSTATE '23000';
									END IF;
								ELSE
									SET rtn_val = 25405;
									SET msg_txt = 'Failed to change database record';
									SIGNAL SQLSTATE '23000';
								END IF;
							ELSE
								SET rtn_val = 25401;
								SET msg_txt = 'Failed to change database record';
								SIGNAL SQLSTATE '23000';
							END IF;
                        ELSE
							SET rtn_val = 25406;
							SET msg_txt = CONCAT('Report can be submitted only in 221 state, but now ', VAR_TRANSACTION_STATE_CODE);
							SIGNAL SQLSTATE '23000';
                        END IF;
					ELSE
					/*사용자가 수거자 소속의 권한있는 사용자가 아닌 경우 예외처리한다.*/
						SET rtn_val = 25404;
						SET msg_txt = 'User not authorized';
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*사용자가 수거자 소속의 관리자가 아닌 경우 예외처리한다.*/
					SET rtn_val = 25403;
					SET msg_txt = CONCAT('User(', VAR_USER_SITE_ID ,') does not belong to the collector(', VAR_COLLECTOR_SITE_ID, ')');
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*사이트가 존재하지 않거나 유효하지 않은(개인사용자의 경우) 경우*/
				SET rtn_val = 25407;
				SET msg_txt = 'Not for personal use';
				SIGNAL SQLSTATE '23000';
			END IF;
        ELSE
        /*트랜잭션이 존재하지 않는 경우 예외처리한다.*/
			SET rtn_val = 25402;
			SET msg_txt = 'Transaction is not found or invalid';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_collector_ask_transaction_completed_without_handler`(
	IN IN_USER_ID					BIGINT,								/*입렦값 : 폐기물 처리보고서 작성자(USERS.ID)*/
	IN IN_TRANSACTION_ID			BIGINT,								/*입렦값 : 폐기물 처리작업 코드(WSTE_CLCT_TRMT_TRANSACTION.ID)*/
	IN IN_WSTE_CODE					VARCHAR(8),							/*입렦값 : 폐기물코드(WSTE_CODE.CODE)*/
	IN IN_QUANTITY					FLOAT,								/*입렦값 : 폐기물수량*/
	IN IN_COMPLETED_AT				DATETIME,							/*입렦값 : 폐기물 최종처리일자*/
	IN IN_PRICE						INT,								/*입렦값 : 폐기물 처리가격*/
	IN IN_UNIT						ENUM('Kg','m³','식','전체견적가'),		/*입렦값 : 폐기물 처리단위*/
	IN IN_TRMT_METHOD				VARCHAR(4),							/*입렦값 : 폐기물 처리방법(WSTE_TRMT_METHOD.CODE)*/
	IN IN_IMG_LIST					JSON,								/*입렦값 : 폐기물 처리사진*/
	IN IN_REG_DT					DATETIME,							/*입렦값 : 현재시간*/
	IN IN_COLLECTOR_SITE_ID			BIGINT,								/*입렦값 : 수거자 사이트 아이디*/
	IN IN_DISPOSER_SITE_ID			BIGINT,								/*입렦값 : 배출자 사이트 아이디*/
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_req_collector_ask_transaction_completed_without_handler
Input param 	: 12개
Job 			: 폐기물처리보고서를 작성한다
Update 			: 2022.04.07
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_DISPOSER_ORDER_ID				BIGINT					DEFAULT NULL;
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
    
    SELECT DISPOSER_ORDER_ID INTO VAR_DISPOSER_ORDER_ID
    FROM TRANSACTION_REPORT
    WHERE TRANSACTION_ID = TRANSACTION_ID;
    
	INSERT INTO TRANSACTION_REPORT (
		TRANSACTION_ID,
		COLLECTOR_SITE_ID,
		DISPOSER_SITE_ID,
		COLLECTOR_MANAGER_ID,
		TRANSACTION_COMPLETED_AT,
		QUANTITY,
		UNIT,
		PRICE,
		WSTE_CODE,
		CREATED_AT,
		UPDATED_AT,
		DISPOSER_ORDER_ID,
		TRMT_METHOD
	) VALUES (
		TRANSACTION_ID,
		IN_COLLECTOR_SITE_ID,
		IN_DISPOSER_SITE_ID,
		IN_USER_ID,
		IN_COMPLETED_AT,
		IN_QUANTITY,
		IN_UNIT,
		IN_PRICE,
		IN_WSTE_CODE,
		IN_REG_DT,
		IN_REG_DT,
		VAR_DISPOSER_ORDER_ID,
		IN_TRMT_METHOD
	);
	IF ROW_COUNT() = 0 THEN   
		SET rtn_val = 36701;
		SET msg_txt = 'Failed to change database record';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_collector_bidding_details`(
	IN IN_COLLECTOR_BIDDING_ID				BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_collector_bidding_details
Input param 	: 1개
Job 			: 수거자의 개별 입찰건에 대한 상세정보 보기
Update 			: 2022.02.10
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_COLLECTOR_BIDDING_ID			BIGINT; 
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;
    DECLARE CUR_DISPOSER_ORDER_CODE				VARCHAR(10);
    DECLARE CUR_STATE							VARCHAR(20);
    DECLARE CUR_STATE_CODE						INT;
    DECLARE CUR_COLLECTOR_CATEGORY_ID			INT;
    DECLARE CUR_COLLECTOR_CATEGORY				VARCHAR(20);
    DECLARE CUR_TRANSACTION_ID					BIGINT;
    DECLARE CUR_ORDER_VISIBLE					TINYINT;
    DECLARE CUR_ORDER_VISIBLE_CHANGED_AT		DATETIME;
    DECLARE CUR_BIDDING_VISIBLE					TINYINT;
    DECLARE CUR_BIDDING_VISIBLE_CHANGED_AT		DATETIME;
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_WSTE_BIDDING_LIST				JSON					DEFAULT NULL;
	DECLARE VAR_WSTE_DISPOSAL_LIST				JSON					DEFAULT NULL;
	DECLARE VAR_IMG_LIST						JSON					DEFAULT NULL;
	DECLARE VAR_DISPLAY_DATE					DATETIME				DEFAULT NULL;
	DECLARE VAR_DISPOSER_ORDER_INFO				JSON					DEFAULT NULL;
	DECLARE VAR_DISPOSER_WSTE_GEO_INFO			JSON					DEFAULT NULL;
	DECLARE VAR_SECOND_PLACE_ON					TINYINT					DEFAULT FALSE;
	DECLARE VAR_TRANSACTION_INFO				JSON					DEFAULT NULL;
	DECLARE VAR_USER_ID							BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_TYPE						INT						DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
        B.ID, 
        B.ORDER_CODE, 
        C.STATE, 
        C.STATE_CODE, 
        C.COLLECTOR_CATEGORY_ID, 
        C.COLLECTOR_CATEGORY, 
        D.ID,
		A.ORDER_VISIBLE, 
		A.ORDER_VISIBLE_CHANGED_AT,
		A.BIDDING_VISIBLE, 
		A.BIDDING_VISIBLE_CHANGED_AT
    FROM COLLECTOR_BIDDING A 
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
    LEFT JOIN V_BIDDING_STATE_NAME C ON A.ID = C.COLLECTOR_BIDDING_ID
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION D ON A.ID = D.COLLECTOR_BIDDING_ID
	WHERE A.ID = IN_COLLECTOR_BIDDING_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS COLLECTOR_BIDDING_DETAILS_TEMP;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS COLLECTOR_BIDDING_DETAILS_TEMP (
		COLLECTOR_BIDDING_ID			BIGINT,
		COLLECTOR_SITE_ID				BIGINT,
		DISPOSER_ORDER_ID				BIGINT,
		ORDER_CODE						VARCHAR(10),
		IMG_LIST						JSON,
		WSTE_BIDDING_LIST				JSON,
		WSTE_DISPOSAL_LIST				JSON,
		DISPOSER_ORDER_INFO				JSON,
		DISPOSER_WSTE_GEO_INFO			JSON,
		DISPOSER_INFO					JSON,
		TRANSACTION_INFO				JSON,
		DISPLAY_DATE					DATETIME,
		STATE							VARCHAR(20),
		STATE_CODE						INT,
		COLLECTOR_CATEGORY_ID			INT,
		COLLECTOR_CATEGORY				VARCHAR(20),
        SECOND_PLACE_ON					TINYINT,
        ORDER_VISIBLE					TINYINT,
        ORDER_VISIBLE_CHANGED_AT		DATETIME,
        BIDDING_VISIBLE					TINYINT,
        BIDDING_VISIBLE_CHANGED_AT		DATETIME
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_COLLECTOR_BIDDING_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_STATE,
			CUR_STATE_CODE,
			CUR_COLLECTOR_CATEGORY_ID,
			CUR_COLLECTOR_CATEGORY,
			CUR_TRANSACTION_ID,
			CUR_ORDER_VISIBLE,
			CUR_ORDER_VISIBLE_CHANGED_AT,
			CUR_BIDDING_VISIBLE,
			CUR_BIDDING_VISIBLE_CHANGED_AT;   
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		COLLECTOR_BIDDING_DETAILS_TEMP(
			COLLECTOR_BIDDING_ID, 
			DISPOSER_ORDER_ID, 
			ORDER_CODE, 
			STATE, 
			STATE_CODE, 
			COLLECTOR_CATEGORY_ID, 
			COLLECTOR_CATEGORY,
            ORDER_VISIBLE,
            ORDER_VISIBLE_CHANGED_AT,
            BIDDING_VISIBLE,
            BIDDING_VISIBLE_CHANGED_AT
		)
		VALUES(
			CUR_COLLECTOR_BIDDING_ID, 
			CUR_DISPOSER_ORDER_ID, 
			CUR_DISPOSER_ORDER_CODE, 
			CUR_STATE, 
			CUR_STATE_CODE, 
			CUR_COLLECTOR_CATEGORY_ID, 
			CUR_COLLECTOR_CATEGORY, 
			CUR_ORDER_VISIBLE, 
			CUR_ORDER_VISIBLE_CHANGED_AT, 
			CUR_BIDDING_VISIBLE, 
			CUR_BIDDING_VISIBLE_CHANGED_AT
		);
        
        CALL sp_get_collector_bidding_wste_lists_2(
			CUR_COLLECTOR_BIDDING_ID,
            VAR_WSTE_BIDDING_LIST
        );
		/*DISPOSAL_ORDER_ID에 등록된 폐기물 종류 중 하나만 불러온다.*/
        
        CALL sp_get_disposal_wste_lists(
			CUR_DISPOSER_ORDER_ID,
            VAR_WSTE_DISPOSAL_LIST
        );
		
        CALL sp_get_disposal_img_lists(
			CUR_DISPOSER_ORDER_ID,
            '입찰',
            VAR_IMG_LIST
        );
            
		CALL sp_set_display_time_for_collector(
			CUR_DISPOSER_ORDER_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_COLLECTOR_CATEGORY_ID,
			VAR_DISPLAY_DATE
		);
		
        CALL sp_get_disposal_order_info(
			CUR_DISPOSER_ORDER_ID,
            VAR_DISPOSER_ORDER_INFO
        );
		
        CALL sp_get_disposer_wste_geo_info(
			CUR_DISPOSER_ORDER_ID,
            VAR_DISPOSER_WSTE_GEO_INFO
        );
        
        CALL sp_check_if_second_place_on(
			CUR_DISPOSER_ORDER_ID,
            CUR_COLLECTOR_BIDDING_ID,
            VAR_SECOND_PLACE_ON
        );
        
        CALL sp_get_transaction_info_2(
			CUR_TRANSACTION_ID,
            VAR_TRANSACTION_INFO
        );
        
		UPDATE COLLECTOR_BIDDING_DETAILS_TEMP 
        SET 
			DISPLAY_DATE 			= VAR_DISPLAY_DATE, 
			IMG_LIST 				= VAR_IMG_LIST, 
            WSTE_BIDDING_LIST 		= VAR_WSTE_BIDDING_LIST, 
            WSTE_DISPOSAL_LIST 		= VAR_WSTE_DISPOSAL_LIST, 
            DISPOSER_ORDER_INFO 	= VAR_DISPOSER_ORDER_INFO, 
            DISPOSER_WSTE_GEO_INFO 	= VAR_DISPOSER_WSTE_GEO_INFO, 
            TRANSACTION_INFO 		= VAR_TRANSACTION_INFO, 
            SECOND_PLACE_ON 		= VAR_SECOND_PLACE_ON
        WHERE DISPOSER_ORDER_ID = CUR_DISPOSER_ORDER_ID;
		/*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/
        
        SELECT A.ID, A.AFFILIATED_SITE, A.USER_CURRENT_TYPE
        INTO VAR_USER_ID, VAR_USER_SITE_ID, VAR_USER_TYPE
        FROM USERS A
        LEFT JOIN COLLECTOR_BIDDING B ON A.AFFILIATED_SITE = B.COLLECTOR_ID
        WHERE 
			A.CLASS = 201 AND
            B.ID = CUR_COLLECTOR_BIDDING_ID;
        
        CALL sp_set_check_state_3(
			CUR_DISPOSER_ORDER_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_TRANSACTION_ID,
			VAR_USER_ID,
			VAR_USER_SITE_ID,
			VAR_USER_TYPE,
			rtn_val,
			msg_txt
        );
        
        IF rtn_val > 0 THEN
			SIGNAL SQLSTATE '23000';
        END IF;		
		
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'COLLECTOR_BIDDING_ID'			, COLLECTOR_BIDDING_ID, 
        'DISPOSER_ORDER_ID'				, DISPOSER_ORDER_ID, 
        'ORDER_CODE'					, ORDER_CODE, 
        'DISPLAY_DATE'					, DISPLAY_DATE, 
        'STATE'							, STATE, 
        'STATE_CODE'					, STATE_CODE, 
        'IMG_LIST'						, IMG_LIST, 
        'COLLECTOR_CATEGORY_ID'			, COLLECTOR_CATEGORY_ID, 
        'COLLECTOR_CATEGORY'			, COLLECTOR_CATEGORY, 
        'WSTE_BIDDING_LIST'				, WSTE_BIDDING_LIST, 
        'WSTE_DISPOSAL_LIST'			, WSTE_DISPOSAL_LIST, 
        'DISPOSER_ORDER_INFO'			, DISPOSER_ORDER_INFO, 
        'DISPOSER_WSTE_GEO_INFO'		, DISPOSER_WSTE_GEO_INFO, 
        'TRANSACTION_INFO'				, TRANSACTION_INFO, 
        'SECOND_PLACE_ON'				, SECOND_PLACE_ON, 
        'ORDER_VISIBLE'					, ORDER_VISIBLE, 
        'ORDER_VISIBLE_CHANGED_AT'		, ORDER_VISIBLE_CHANGED_AT, 
        'BIDDING_VISIBLE'				, BIDDING_VISIBLE, 
        'BIDDING_VISIBLE_CHANGED_AT'	, BIDDING_VISIBLE_CHANGED_AT
	)) 
    INTO json_data 
    FROM COLLECTOR_BIDDING_DETAILS_TEMP;
    /*
    IF vRowCount = 0 THEN
		SET rtn_val = 27901;
		SET msg_txt = 'No data found';
		SIGNAL SQLSTATE '23000';
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    END IF; 
    */
    COMMIT;   
	DROP TABLE IF EXISTS COLLECTOR_BIDDING_DETAILS_TEMP;
	CALL sp_return_results(rtn_val, msg_txt, json_data);   
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_collector_bidding_exists`(
	IN IN_COLLECTOR_BIDDING_ID				BIGINT,					/*찾고자 하는 COLLECTOR_BIDDING 고유등록번호*/
    IN IN_ACTIVE							TINYINT,				/*찾고자 하는 COLLECTOR_BIDDING의 활성화 상태, TRUE:활성화, FALSE:비활성화*/
    OUT rtn_val 							INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 							VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 		: sp_req_collector_bidding_exists
Input param 		: 2개
Output param 		: 1개
Job 				: COLLECTOR_BIDDING이 존재하는지 검사한다.
Update 				: 2022.01.25
Version				: 0.0.1
AUTHOR 				: Leo Nam
*/
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;
	
	IF IN_ACTIVE IS NULL THEN
		SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM COLLECTOR_BIDDING WHERE ID = IN_COLLECTOR_BIDDING_ID;
	ELSE
		SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM COLLECTOR_BIDDING WHERE ID = IN_COLLECTOR_BIDDING_ID AND ACTIVE = IN_ACTIVE;
	END IF;
    
    IF VAR_CHK_COUNT = 1 THEN
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
		SET rtn_val = 28001;
		SET msg_txt = 'Collector has no bidding information';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_collector_can_ask_visit`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,				/*폐기물 배출내역 고유등록번호(SITE_WSTE_DISPOSAL_ORDER.ID)*/
    OUT	OUT_COLLECTOR_CAN_VISIT			TINYINT				/*방문신청가능한 경우 TRUE, 그렇지 않은 경우 FALSE 반환*/,
    OUT rtn_val							INT,
    OUT msg_txt							VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_req_collector_can_ask_visit
Output param 	: 1개
Input param 	: 1개
Job 			: 수집운반업자등이 배출자의 방문예정일 안에 방문신청이 가능한지 검사한다. 
Update 			: 2022.01.19
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE MINIMUM_REQUIRED_TIME				VARCHAR(20)				DEFAULT NULL; 
	DECLARE VAR_TIME_PLUS						VARCHAR(20)				DEFAULT NULL; 
	DECLARE VAR_TIME_NEW						DATETIME				DEFAULT NULL; 
	DECLARE VAR_VISIT_END_AT					DATETIME				DEFAULT NULL; 

    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_policy_direction('minimum_visit_required', MINIMUM_REQUIRED_TIME);

	SET VAR_TIME_PLUS = CONCAT(MINIMUM_REQUIRED_TIME, ':00:00');
	SET VAR_TIME_NEW = ADDTIME(VAR_REG_DT, VAR_TIME_PLUS);
    
    SELECT VISIT_END_AT INTO VAR_VISIT_END_AT FROM SITE_WSTE_DISPOSAL_ORDER WHERE ID = IN_DISPOSER_ORDER_ID;
    /*배출자가 지정한 방문예정일을 구해온다.*/
    
    IF VAR_VISIT_END_AT IS NULL THEN
    /*배출자의 방문예정일이 NULL인 경우로서 배출자가 방문예정일을 정하지 않은 경우*/
		SET OUT_COLLECTOR_CAN_VISIT = FALSE;
		SET rtn_val 				= 31302;
		SET msg_txt 				= 'no scheduled visit date set by the emitter';
    ELSE
    /*배출자의 방문예정일이 NULL이 아닌 경우로서 배출자가 방문예정일을 정하고 있는 경우*/
		IF VAR_VISIT_END_AT >= VAR_TIME_NEW THEN
		/*배출자의 방문예정일에 여유가 있는 경우*/
			SET OUT_COLLECTOR_CAN_VISIT = TRUE;
			SET rtn_val 				= 0;
			SET msg_txt 				= 'success';
        ELSE
		/*배출자의 방문예정일에 여유가 없는 경우*/
			SET OUT_COLLECTOR_CAN_VISIT = FALSE;
			SET rtn_val 				= 31301;
			SET msg_txt 				= CONCAT('Request for visit must be made at least ', MINIMUM_REQUIRED_TIME, ' hours in advance');
        END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_collector_id_of_transaction`(
	IN IN_TRANSACTION_ID		BIGINT,				/*입력값: 수거단위작업코드(WSTE_CLCT_TRMT_TRANSACTION.ID)*/
    OUT OUT_SITE_ID				BIGINT,				/*출력값 : COMP_SITE.ID*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_collector_id_of_transaction
Input param 	: 1개
Output param 	: 3개
Job 			: 수거단위작업의 수거자 사이트 아이디를 반환한다.
Update 			: 2022.03.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_IS_TRANSACTION_EXISTS			INT						DEFAULT 0;

	SELECT COUNT(ID) INTO VAR_IS_TRANSACTION_EXISTS 
    FROM WSTE_CLCT_TRMT_TRANSACTION WHERE ID = IN_TRANSACTION_ID;
    IF VAR_IS_TRANSACTION_EXISTS = 1 THEN
    /*트랜잭션이 존재하는 경우 정상처리한다.*/
		SELECT B.COLLECTOR_ID INTO OUT_SITE_ID 
		FROM WSTE_CLCT_TRMT_TRANSACTION A 
		LEFT JOIN COLLECTOR_BIDDING B ON A.COLLECTOR_BIDDING_ID = B.ID
		WHERE A.ID = IN_TRANSACTION_ID;
		SET rtn_val 		= 0;
		SET msg_txt 		= 'success';
    ELSE
    /*트랜잭션이 존재하지 않는 경우 예외처리한다.*/
		SET rtn_val 		= 34701;
		SET msg_txt 		= 'transaction not exists';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_collector_transaction_details`(
	IN IN_TRANSACTION_ID				BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_collector_transaction_details
Input param 	: 1개
Job 			: 수거자의 개별 트랜잭션에 대한 상세정보 보기
Update 			: 2022.04.12
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;   
    DECLARE CUR_TRANSACTION_ID					BIGINT;
    DECLARE CUR_USER_ID							BIGINT;
    DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;
    DECLARE CUR_DISPOSER_USER_ID				BIGINT;
    DECLARE CUR_DISPOSER_SITE_ID				BIGINT;
    DECLARE CUR_STATE							VARCHAR(20);
    DECLARE CUR_STATE_CODE						INT;
    DECLARE CUR_USER_TYPE						INT;
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_WSTE_DISPOSAL_LIST				JSON					DEFAULT NULL;
	DECLARE VAR_IMG_LIST						JSON					DEFAULT NULL;
	DECLARE VAR_DISPLAY_DATE					DATETIME				DEFAULT NULL;
	DECLARE VAR_DISPOSER_ORDER_INFO				JSON					DEFAULT NULL;
	DECLARE VAR_DISPOSER_WSTE_GEO_INFO			JSON					DEFAULT NULL;
	DECLARE VAR_TRANSACTION_INFO				JSON					DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
        B.ID, 
        A.COLLECTOR_SITE_ID, 
        A.DISPOSAL_ORDER_ID, 
        E.ID, 
        E.AFFILIATED_SITE,
        C.STATE,
        C.STATE_CODE,
        B.USER_CURRENT_TYPE
    FROM WSTE_CLCT_TRMT_TRANSACTION A
    LEFT JOIN USERS B ON A.COLLECTOR_SITE_ID = B.AFFILIATED_SITE
    LEFT JOIN V_TRANSACTION_STATE_NAME C ON A.ID = C.TRANSACTION_ID
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER D ON A.DISPOSAL_ORDER_ID = D.ID
    LEFT JOIN USERS E ON D.DISPOSER_ID = E.ID
	WHERE A.ID = IN_TRANSACTION_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS COLLECTOR_BIDDING_DETAILS_TEMP;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS COLLECTOR_BIDDING_DETAILS_TEMP (
		TRANSACTION_ID							BIGINT,
		USER_ID									BIGINT,
		COLLECTOR_SITE_ID						BIGINT,
        DISPOSER_ORDER_ID						BIGINT,
        DISPOSER_USER_ID						BIGINT,
        DISPOSER_SITE_ID						BIGINT,
        STATE									VARCHAR(20),
        STATE_CODE								BIGINT,
		DISPLAY_DATE 							DATETIME,
		IMG_LIST 								JSON,
		WSTE_DISPOSAL_LIST 						JSON,
		DISPOSER_ORDER_INFO 					JSON,
		DISPOSER_WSTE_GEO_INFO 					JSON,
		TRANSACTION_INFO	 					JSON,
		USER_TYPE			 					INT
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_TRANSACTION_ID,
			CUR_USER_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_USER_ID,
			CUR_DISPOSER_SITE_ID,
			CUR_STATE,
			CUR_STATE_CODE,
			CUR_USER_TYPE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		COLLECTOR_BIDDING_DETAILS_TEMP(
			TRANSACTION_ID,
			USER_ID,
			COLLECTOR_SITE_ID,
			DISPOSER_ORDER_ID,
			DISPOSER_USER_ID,
			DISPOSER_SITE_ID,
			STATE,
			STATE_CODE
		)
		VALUES(
			CUR_TRANSACTION_ID,
			CUR_USER_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_USER_ID,
			CUR_DISPOSER_SITE_ID,
			CUR_STATE,
			CUR_STATE_CODE
		);
        
        CALL sp_get_disposal_wste_lists(
			CUR_DISPOSER_ORDER_ID,
            VAR_WSTE_DISPOSAL_LIST
        );
		
        CALL sp_get_disposal_img_lists(
			CUR_DISPOSER_ORDER_ID,
            '입찰',
            VAR_IMG_LIST
        );
            
		CALL sp_set_display_time_for_transaction(
			CUR_TRANSACTION_ID,
			CUR_STATE_CODE,
			VAR_DISPLAY_DATE
		);
		
        CALL sp_get_disposal_order_info(
			CUR_DISPOSER_ORDER_ID,
            VAR_DISPOSER_ORDER_INFO
        );
		
        CALL sp_get_disposer_wste_geo_info(
			CUR_DISPOSER_ORDER_ID,
            VAR_DISPOSER_WSTE_GEO_INFO
        );
		
        CALL sp_get_transaction_info_2(
			CUR_TRANSACTION_ID,
            VAR_TRANSACTION_INFO
        );
        
		UPDATE COLLECTOR_BIDDING_DETAILS_TEMP 
        SET 
			DISPLAY_DATE 			= VAR_DISPLAY_DATE, 
			IMG_LIST 				= VAR_IMG_LIST, 
            WSTE_DISPOSAL_LIST 		= VAR_WSTE_DISPOSAL_LIST, 
            DISPOSER_ORDER_INFO 	= VAR_DISPOSER_ORDER_INFO, 
            DISPOSER_WSTE_GEO_INFO 	= VAR_DISPOSER_WSTE_GEO_INFO, 
            TRANSACTION_INFO 		= VAR_TRANSACTION_INFO
        WHERE TRANSACTION_ID 		= CUR_TRANSACTION_ID;
		/*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/
        
        CALL sp_set_check_state(
			CUR_DISPOSER_ORDER_ID,
			NULL,
			CUR_TRANSACTION_ID,
			CUR_USER_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_USER_TYPE,
			rtn_val,
			msg_txt
        );
        
        IF rtn_val > 0 THEN
			SIGNAL SQLSTATE '23000';
        END IF;		
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'TRANSACTION_ID'			, TRANSACTION_ID, 
        'USER_ID'					, USER_ID, 
        'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
        'DISPOSER_ORDER_ID'			, DISPOSER_ORDER_ID, 
        'DISPOSER_USER_ID'			, DISPOSER_USER_ID, 
        'DISPOSER_SITE_ID'			, DISPOSER_SITE_ID, 
        'STATE'						, STATE, 
        'STATE_CODE'				, STATE_CODE, 
        'DISPLAY_DATE'				, DISPLAY_DATE, 
        'IMG_LIST'					, IMG_LIST, 
        'WSTE_DISPOSAL_LIST'		, WSTE_DISPOSAL_LIST, 
        'DISPOSER_ORDER_INFO'		, DISPOSER_ORDER_INFO, 
        'DISPOSER_WSTE_GEO_INFO'	, DISPOSER_WSTE_GEO_INFO, 
        'TRANSACTION_INFO'			, TRANSACTION_INFO
	)) 
    INTO json_data 
    FROM COLLECTOR_BIDDING_DETAILS_TEMP;
    
    IF vRowCount = 0 THEN
		SET rtn_val = 37501;
		SET msg_txt = 'No data found';
		SIGNAL SQLSTATE '23000';
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    END IF; 
    COMMIT;   
	DROP TABLE IF EXISTS COLLECTOR_BIDDING_DETAILS_TEMP;
	CALL sp_return_results(rtn_val, msg_txt, json_data);   
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_comp_id_by_reg_code`(
	IN IN_COMP_BIZ_REG_CODE		VARCHAR(12),		/*입력값 : 사업자등록번호*/
    OUT OUT_COMP_ID				BIGINT				/*출력값 : 사업자 등록 고유번호*/
)
BEGIN

/*
Procedure Name 	: sp_req_comp_id_by_reg_code
Input param 	: 1개
Output param 	: 1개
Job 			: IN_COMP_REG_CODE를 사업자 등록번호로 사용하는 사업자의 고유등록번호를 OUT_COMP_ID를 통하여 반환한다.
Update 			: 2022.01.13
Version			: 0.0.1
AUTHOR 			: Leo Nam
NOTE			: 이 프로시저를 호출하는 프로시저에서 사업자등록번호의 존재에 대한 유효성 검사는 한 후 이 프로시저를 실행하도록 한다.
*/

		SELECT ID INTO OUT_COMP_ID FROM COMPANY WHERE BIZ_REG_CODE = IN_COMP_BIZ_REG_CODE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_comp_id_of_site`(
	IN IN_SITE_ID		BIGINT,
    OUT OUT_COMP_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_comp_id_of_site
Input param 	: 1개
Output param 	: 1개
Job 			: 입력 IN_SITE_ID의 사이트가 속하는 사업자 고유등록번호 반환
Update 			: 2022.01.15
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/

	SELECT COMP_ID INTO OUT_COMP_ID FROM COMP_SITE WHERE ID = IN_SITE_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_comp_id_of_user`(
	IN IN_USER_REG_ID		VARCHAR(50),
    OUT OUT_BELONG_TO		BIGINT
)
BEGIN
	SELECT BELONG_TO INTO OUT_BELONG_TO FROM USERS WHERE USER_ID = IN_USER_REG_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_comp_id_of_user_by_id`(
	IN IN_USER_ID		BIGINT,
	OUT OUT_BELONG_TO		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_comp_id_of_user_by_id
Input param 	: 1개
Output param 	: 1개
Job 			: 사용자 고유등록번호로 사용자의 소속 사업자의 고유등록번호 반환
Update 			: 2022.01.17
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT BELONG_TO INTO OUT_BELONG_TO FROM USERS WHERE ID = IN_USER_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_comp_max_id`(
	OUT OUT_COMP_MAX_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_comp_max_id
Output param 	: 1개
Job 			: 등록된 사업자 중에서 가장 큰 고유번호(ID) + 1을 반환한다.
Update 			: 2022.01.05
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT max(ID) into OUT_COMP_MAX_ID FROM COMPANY;			
	/*현재 테이블에서 가장 큰 사용자 고유번호를 구한 후 USER_MAX_ID에 저장한다.*/
	
	IF (OUT_COMP_MAX_ID IS NULL) THEN
		SET OUT_COMP_MAX_ID = 1;
		/*사용자 테이블의 저장된 고유번호가 하나도 없는 경우에는 NULL이 반환되므로 MAX_ID를 1로 저장한다.*/
	ELSE
		SET OUT_COMP_MAX_ID = OUT_COMP_MAX_ID + 1;
		/*최대값을 구하였다면 그 값에 1을 더하여 등록할 사용자의 고유번호로 정한다.*/
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_comp_name_by_comp_id`(
	IN IN_COMP_ID			BIGINT,
    OUT OUT_COMP_NAME		VARCHAR(100)
)
BEGIN
	SELECT COMP_NAME INTO OUT_COMP_NAME FROM COMPANY WHERE ID = IN_COMP_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_comp_name_by_site_id`(
	IN IN_SITE_ID			BIGINT,
    OUT OUT_COMP_NAME		VARCHAR(100)
)
BEGIN

/*
Procedure Name 	: sp_req_comp_name_by_site_id
Input param 	: 1개
Output param 	: 1개
Job 			: 사이트 아이디(COMP_SITE.ID)로 사이트가 소속하고 있는 사업자의 이름을 반환한다.
Update 			: 2022.01.17
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT A.COMP_NAME 
    INTO OUT_COMP_NAME 
    FROM COMPANY A 
    LEFT JOIN 
		COMP_SITE B ON A.ID = B.COMP_ID 
    WHERE B.ID = IN_SITE_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_comp_site_addresses`(
	IN IN_COMP_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_comp_site_addresses
Input param 	: 1개
Output param 	: 0개
Job 			: 입력받은 사업자 고유등록번호에 속하는 모든 사이트의 주소를 반환한다.
Update 			: 2022.01.20
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT * FROM V_COMP_SITE_ADDRESS WHERE COMP_ID = IN_COMP_ID AND ACTIVE = TRUE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_comp_site_exists`(
	IN IN_COMP_ID				BIGINT,					/*찾고자 하는 사업자 고유등록번호*/
    IN IN_ACTIVE				TINYINT,				/*찾고자 하는 사업자의 활성화 상태, TRUE:활성화, FALSE:비활성화*/
    OUT rtn_val 				INT,					/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(100)			/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 		: sp_req_comp_site_exists
Input param 		: 2개
Output param 		: 2개
Job 				: 입력 param의 IN_COMP_REG_CODE를 사업자 등록번호로 등록된 STIE의 갯수를 반환
					: 사이트의 활성화 상태에 무관하게 모든 사이트를 검색하고자 하는 경우에는 IN_ACTIVE를 NULL로 입력받는다.
Update 				: 2022.01.29
Version				: 0.0.3
AUTHOR 				: Leo Nam
*/
	
	/*동일한 사업자 등록번호로 등록된 사이트의 개수를 구하여 NUMBER_OF_SITES를 통하여 반환한다.*/
	IF IN_ACTIVE IS NULL THEN
		SELECT COUNT(A.ID) INTO @CHK_COUNT FROM COMPANY A LEFT JOIN COMP_SITE B ON A.ID = B.COMP_ID WHERE A.ID = IN_COMP_ID;
	ELSE
		SELECT COUNT(A.ID) INTO @CHK_COUNT FROM COMPANY A LEFT JOIN COMP_SITE B ON A.ID = B.COMP_ID WHERE A.ID = IN_COMP_ID AND B.ACTIVE = IN_ACTIVE;
	END IF;
    
    IF @CHK_COUNT = 1 THEN
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
		SET rtn_val = 28301;
		SET msg_txt = 'site does not exist';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_comp_site_max_id`(
	OUT OUT_COMP_SITE_MAX_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_comp_site_max_id
Output param 	: 1개
Job 			: 등록된 사이트 중에서 가장 큰 고유번호(ID) + 1을 반환한다.
Update 			: 2022.01.13
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT max(ID) into OUT_COMP_SITE_MAX_ID FROM COMP_SITE;			
	/*현재 테이블에서 가장 큰 사용자 고유번호를 구한 후 USER_MAX_ID에 저장한다.*/
	
	IF (OUT_COMP_SITE_MAX_ID IS NULL) THEN
		SET OUT_COMP_SITE_MAX_ID = 1;
		/*사용자 테이블의 저장된 고유번호가 하나도 없는 경우에는 NULL이 반환되므로 MAX_ID를 1로 저장한다.*/
	ELSE
		SET OUT_COMP_SITE_MAX_ID = OUT_COMP_SITE_MAX_ID + 1;
		/*최대값을 구하였다면 그 값에 1을 더하여 등록할 사용자의 고유번호로 정한다.*/
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_company_exists`(
	IN IN_COMP_ID			BIGINT,
    IN IN_ACTIVE			TINYINT,
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_company_exists
Input param 	: 2개
Output param 	: 2개
Job 			: 입력 param의 IN_COMP_ID를 사업자 고유번호로 사용하는 사업자가 존재하는지 여부 반환
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;

	IF IN_ACTIVE IS NULL THEN
		SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM COMPANY WHERE ID = IN_COMP_ID;
    ELSE
		SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM COMPANY WHERE ID = IN_COMP_ID AND ACTIVE = IN_ACTIVE;
    END IF;
    
    IF VAR_CHK_COUNT = 1 THEN
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
		SET rtn_val = 28401;
		SET msg_txt = 'company does not exist';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_company_validation`(
    IN IN_COMP_ID			BIGINT,				/*입력값 : 사용자 아이디*/
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_company_validation
Input param 	: 1개
Output param 	: 2개
Job 			: 사업자 계정이 활성상태로 존재하는지 체크하여 정상이면 0, 그렇지 않으면 예외처리코드 반환
Update 			: 2022.01.10
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_COMPANY_EXISTS					INT						DEFAULT 0;

	DECLARE ACTIVE_STAT		TINYINT;			/*사용자계정의 활성화 상태를 저장할 변수 선언*/
    
    SELECT COUNT(ID) INTO VAR_COMPANY_EXISTS FROM COMPANY WHERE ID = IN_COMP_ID;
	/*COMPANY ID가 존재하는지 체크한다.*/
	/*COMPANY ID가 존재한다면 VAR_COMPANY_EXISTS값이 1의 값을 가지게 되며 그렇지 않은 경우에는 0의 값을 가지게 된다.*/ 
    
	IF VAR_COMPANY_EXISTS = 0 THEN
	/*COMPANY ID가 존재하지 않는 경우 예외처리한다.*/
		SET rtn_val = 20201;
		SET msg_txt = 'company is not existed';
	ELSE  
	/*COMPANY ID가 존재하는 경우에는 정상처리 진행한다.*/
		SELECT ACTIVE INTO ACTIVE_STAT FROM COMPANY WHERE ID = IN_COMP_ID;
		/*사업자의 활성상태를 VALID_STAT에 저정한다.*/
		
		IF ACTIVE_STAT = FALSE THEN
		/*계정이 비활성화된 상태인 경우에는 예외처리한다.*/
			SET rtn_val = 20202;
			SET msg_txt = 'company is not activated';
		ELSE
		/*계정이 활성화된 상태인 경우에는 정상처리한다.*/
			SET rtn_val = 0;
			SET msg_txt = 'company is valid';
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_count_of_sites`(
	IN IN_COMP_ID				BIGINT,					/*찾고자 하는 사업자 고유등록번호*/
    IN IN_ACTIVE				TINYINT,				/*찾고자 하는 사업자의 활성화 상태, TRUE:활성화, FALSE:비활성화*/
    OUT NUMBER_OF_SITES			INT						/*개설된 사이트의 개소수를 반환함*/
)
BEGIN

/*
Procedure Name 		: sp_req_count_of_sites
Input param 		: 2개
Output param 		: 1개
Job 				: 동일한 사업자가 개설한 사이트의 개소수를 반환한다.
Update 				: 2022.01.14
Version				: 0.0.1
AUTHOR 				: Leo Nam
*/
	
	/*동일한 사업자 등록번호로 등록된 사이트의 개수를 구하여 NUMBER_OF_SITES를 통하여 반환한다.*/
	IF IN_ACTIVE IS NULL THEN
		SELECT COUNT(ID) INTO NUMBER_OF_SITES FROM COMP_SITE WHERE COMP_ID = IN_COMP_ID;
	ELSE
		SELECT COUNT(ID) INTO NUMBER_OF_SITES FROM COMP_SITE WHERE COMP_ID = IN_COMP_ID AND ACTIVE = IN_ACTIVE;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_count_of_users`(
	IN IN_SITE_ID				BIGINT,					/*찾고자 하는 사이트 고유등록번호*/
    IN IN_ACTIVE				TINYINT,				/*찾고자 하는 사용자의 활성화 상태, TRUE:활성화, FALSE:비활성화*/
    OUT NUMBER_OF_USERS			INT						/*동일한 사이트에 등록된 사용자의 수*/
)
BEGIN

/*
Procedure Name 		: sp_req_count_of_users
Input param 		: 2개
Output param 		: 1개
Job 				: 동일한 사이트에 소속한 사용자의 수를 반환한다.
Update 				: 2022.01.14
Version				: 0.0.1
AUTHOR 				: Leo Nam
*/
	
	IF IN_ACTIVE IS NULL THEN
		SELECT COUNT(ID) INTO NUMBER_OF_USERS FROM USERS WHERE AFFILIATED_SITE = IN_SITE_ID;
	ELSE
		SELECT COUNT(ID) INTO NUMBER_OF_USERS FROM USERS WHERE AFFILIATED_SITE = IN_SITE_ID AND ACTIVE = IN_ACTIVE;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_cs_manager_id_of_company`(
	IN IN_SITE_ID				BIGINT,								/*사이트 고유등록번호*/
	OUT MANAGER_ID				BIGINT								/*CS 담당 매니저 고유등록번호*/
)
BEGIN

/*
Procedure Name 	: sp_req_cs_manager_id_of_company
Input param 	: 0개
Output param 	: 1개
Job 			: 사이트가 소속한 사업자의 CS_MANAGER_ID를 반환한다.
Update 			: 2022.01.16
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	SELECT B.CS_MANAGER_ID INTO MANAGER_ID 
    FROM COMP_SITE A 
    LEFT JOIN COMPANY B
    ON A.COMP_ID = B.ID
    WHERE A.ID = IN_SITE_ID;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_cs_manager_in_charge`(
	OUT MANAGER_ID			BIGINT		/*CS 담당 매니저 고유등록번호*/
)
BEGIN

/*
Procedure Name 	: sp_req_cs_manager_in_charge
Input param 	: 0개
Output param 	: 1개
Job 			: CS의 현재 진행작업 및 개별 업무상황을 고려하여 자동으로 담당자를 선택하여 반환함
				: 추후 알고리즘 개발하여야 함
				: 지금은 USER_ID = 20이 자동 반환되도록 함
Update 			: 2022.01.15
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	SELECT MIN(ID) INTO MANAGER_ID FROM USERS WHERE BELONG_TO = 0 AND ACTIVE = TRUE AND DEPARTMENT = 'CS' AND CLASS = 102;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_current_time`(
	OUT OUT_TIME	DATETIME
)
BEGIN

/*
Procedure Name 	: sp_req_current_time
Output param 	: 1개
Job 			: UTC + 09:00 SEOUL/ASIA TIME을 반환한다.
Update 			: 2022.01.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SET OUT_TIME = ADDTIME(CURRENT_TIMESTAMP, '00:00');
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_decide_on_processing_date`(
	IN IN_USER_ID					BIGINT,
	IN IN_DISPOSER_ORDER_ID			BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_decide_on_processing_date
Input param 	: 2개
Job 			: 배출자가 처리예정일을 결정한다.
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_DISPOSER_SITE_ID				JSON					DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID					JSON					DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_DISPOSER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/
		CALL sp_req_site_id_of_disposal_order_id(
        /*DISPOSAL ORDER 의 배출자 사이트 아이디를 구한다.*/
			IN_DISPOSER_ORDER_ID,
            VAR_DISPOSER_SITE_ID
        );
        
        CALL sp_req_site_id_of_user_reg_id(
        /*사용자가 소속한 사이트의 아이디를 구한다.*/
			IN_USER_ID,
            VAR_USER_SITE_ID,
			rtn_val,
			msg_txt
        );
        
		IF VAR_USER_SITE_ID IS NOT NULL THEN
		/*사이트가 유효한 경우*/        
			IF VAR_DISPOSER_SITE_ID = VAR_USER_SITE_ID THEN
			/*사용자가 정보변경 대상이 되는 사이트에 소속한 관리자인 경우*/
				CALL sp_req_user_class_by_user_reg_id(
				/*사용자의 권한을 구한다.*/
				IN_USER_ID,
				VAR_USER_CLASS
				);
				IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
				/*관리자가 정보를 변경할 권한이 있는 경우*/
					UPDATE SITE_WSTE_DISPOSAL_ORDER SET OPEN_AT = VAR_REG_DT WHERE ID = IN_DISPOSER_ORDER_ID;
					IF ROW_COUNT() = 1 THEN
					/*정보가 성공적으로 변경되었다면*/
						SET rtn_val = 0;
						SET msg_txt = 'Success';
					ELSE
					/*정보변경에 실패했다면 예외처리한다.*/
						SET rtn_val = 24701;
						SET msg_txt = 'failure to close early in DB';
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*관리자가 정보를 변경할 권한이 없는 경우*/
					SET rtn_val = 24702;
					SET msg_txt = 'User does not have permission to change information';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*사용자가 정보변경 대상이 되는 사이트에 소속한 관리자가 아닌 경우 예외처리한다.*/
				SET rtn_val = 24703;
				SET msg_txt = 'The user is not an administrator of the site';
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
		/*사이트가 존재하지 않거나 유효하지 않은 경우*/
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_delete_collector_bidding`(
	IN IN_USER_ID					BIGINT,
	IN IN_COLLECTOR_BIDDING_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_delete_collector_bidding
Input param 	: 2개
Job 			: 수거자가 자신이 입찰한 내역(collector_bidding)을 삭제처리한다.
Update 			: 2022.04.07
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_BIDDING_EXISTS					INT						DEFAULT 0; 
	DECLARE VAR_COLLECTOR_SITE_ID				BIGINT					DEFAULT NULL; 
	DECLARE VAR_DELETED							TINYINT					DEFAULT FALSE; 
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL; 
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/	
		SELECT COUNT(ID) INTO VAR_BIDDING_EXISTS
        FROM COLLECTOR_BIDDING
        WHERE ID = IN_COLLECTOR_BIDDING_ID;
        IF VAR_BIDDING_EXISTS = 1 THEN
        /*투찰한 내역이 존재하는 경우 정상처리한다.*/
			SELECT COLLECTOR_ID, DELETED
            INTO VAR_COLLECTOR_SITE_ID, VAR_DELETED
			FROM COLLECTOR_BIDDING 
			WHERE ID = IN_COLLECTOR_BIDDING_ID;
            
            SELECT AFFILIATED_SITE, CLASS INTO VAR_USER_SITE_ID, VAR_USER_CLASS
            FROM USERS
            WHERE ID = IN_USER_ID;
            IF VAR_COLLECTOR_SITE_ID = VAR_USER_SITE_ID THEN
            /*사용자가 수거자 소속인 경우에는 정상처리한다.*/
				IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
                /*사용자에게 권한이 있는 경우 정상처리한다.*/
					IF VAR_DELETED = FALSE THEN
                    /*이전에 삭제하지 않은 경우 정상처리한다.*/
						UPDATE COLLECTOR_BIDDING
						SET 
							DELETED = TRUE,
							DELETED_AT = VAR_REG_DT,
							UPDATED_AT = VAR_REG_DT
						WHERE ID = IN_COLLECTOR_BIDDING_ID;
                    ELSE
                    /*이전에 이미 삭제한 경우 예외처리한다.*/
						SET rtn_val = 36404;
						SET msg_txt = 'The order is not deleted by the emitter';
						SIGNAL SQLSTATE '23000';
                    END IF;
                ELSE
                /*사용자에게 권한이 없는 경우 예외처리한다.*/
					SET rtn_val = 36403;
					SET msg_txt = 'users are not authorized';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사용자가 수거자 소속이 아닌 경우에는 예외처리한다.*/
				SET rtn_val = 36402;
				SET msg_txt = 'user does not belong to the collector';
				SIGNAL SQLSTATE '23000';
            END IF;
        ELSE
        /*투찰한 내역이 존재하지 않는 경우 예외처리한다.*/
			SET rtn_val = 36401;
			SET msg_txt = 'No bidding history';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_delete_disposal_order`(
	IN IN_USER_ID					BIGINT,
	IN IN_DISPOSER_ORDER_ID			BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_delete_disposal_order
Input param 	: 2개
Job 			: 이미 신청한 폐기물배출신청을 삭제한다.
Update 			: 2022.02.22
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL; 
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL; 
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/
		CALL sp_req_site_id_of_disposal_order_id(
        /*DISPOSAL ORDER 의 배출자 사이트 아이디를 구한다.*/
			IN_DISPOSER_ORDER_ID,
            VAR_DISPOSER_SITE_ID
        );
        
        CALL sp_req_site_id_of_user_reg_id(
        /*사용자가 소속한 사이트의 아이디를 구한다.*/
			IN_USER_ID,
            VAR_USER_SITE_ID,
			rtn_val,
			msg_txt
        );
        
		IF rtn_val = 0 OR VAR_USER_SITE_ID = 0 THEN
		/*사이트가 정상(개인사용자는 제외됨)적인 경우*/
			IF VAR_DISPOSER_SITE_ID = VAR_USER_SITE_ID THEN
			/*사용자가 정보변경 대상이 되는 사이트에 소속한 관리자인 경우*/
				CALL sp_req_user_class_by_user_reg_id(
				/*사용자의 권한을 구한다.*/
				IN_USER_ID,
				VAR_USER_CLASS
				);
				IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
				/*관리자가 정보를 변경할 권한이 있는 경우*/
					UPDATE SITE_WSTE_DISPOSAL_ORDER 
                    SET 
						IS_DELETED 		= TRUE, 
                        DELETED_AT 		= VAR_REG_DT, 
                        UPDATED_AT 		= VAR_REG_DT 
					WHERE ID = IN_DISPOSER_ORDER_ID;
					IF ROW_COUNT() = 1 THEN
					/*정보가 성공적으로 변경되었다면*/
						SET rtn_val = 0;
						SET msg_txt = 'success';
					ELSE
					/*정보변경에 실패했다면 예외처리한다.*/
						SET rtn_val = 31101;
						SET msg_txt = 'Failed to delete waste disposal application';
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*관리자가 정보를 변경할 권한이 없는 경우*/
					SET rtn_val = 31102;
					SET msg_txt = 'User does not have permission to change information';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*사용자가 정보변경 대상이 되는 사이트에 소속한 관리자가 아닌 경우 예외처리한다.*/
				SET rtn_val = 31103;
				SET msg_txt = 'The user is not an administrator of the site';
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
		/*사이트가 존재하지 않거나 유효하지 않은(개인사용자의 경우) 경우*/
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_delete_registered_site`(
	IN IN_USER_ID					BIGINT,
    IN IN_USER_TYPE					INT,
	IN IN_TARGET_ID					BIGINT,
    IN IN_EVENT_TYPE				INT
)
BEGIN

/*
Procedure Name 	: sp_req_delete_registered_site
Input param 	: 2개
Job 			: 관심업체로 등록한 사이트를 삭제한다.
Update 			: 2022.05.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_EVENT_TYPE						INT						DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    SET VAR_EVENT_TYPE = IN_EVENT_TYPE;
    IF VAR_EVENT_TYPE = 1 THEN
		CALL sp_req_delete_registered_site_1_without_handler(
			IN_USER_ID,
			IN_USER_TYPE,
			IN_TARGET_ID,
			rtn_val,
			msg_txt
		);
    ELSE
		CALL sp_req_delete_registered_site_2_without_handler(
			IN_USER_ID,
			IN_USER_TYPE,
			IN_TARGET_ID,
			rtn_val,
			msg_txt
		);
    END IF;
    IF rtn_val > 0 THEN
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_delete_registered_site_1_without_handler`(
	IN IN_USER_ID					BIGINT,
    IN IN_USER_TYPE					INT,
	IN IN_TARGET_ID					BIGINT,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_req_delete_registered_site
Input param 	: 2개
Job 			: 관심업체로 등록한 사이트를 삭제한다.
Update 			: 2022.05.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL; 
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL; 
	DECLARE VAR_RECORD_EXISTS					INT						DEFAULT 0; 
    
    CALL sp_req_current_time(VAR_REG_DT);
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/
		SELECT CLASS, AFFILIATED_SITE INTO VAR_USER_CLASS, VAR_USER_SITE_ID
        FROM USERS
        WHERE ID = IN_USER_ID;
        IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
        /*관심업체를 삭제하고자 하는 사용자에게 권한이 있는 경우 정상처리한다*/
			IF IN_USER_TYPE = 2 THEN
            /*사용자가 배출자인 경우*/
				SELECT COUNT(ID) INTO VAR_RECORD_EXISTS
                FROM REGISTERED_SITE
                WHERE 
					SITE_ID = VAR_USER_SITE_ID AND
                    TARGET_ID = IN_TARGET_ID AND
                    DELETED_AT IS NULL AND
                    REGISTER_TYPE = 1;
                IF VAR_RECORD_EXISTS = 1 THEN
                /*삭제가능한 레코드가 존재하는 경우 정상처리한다.*/
					UPDATE REGISTERED_SITE
                    SET 
						DELETED_AT = VAR_REG_DT,
						ACTIVE = FALSE,
                        UPDATED_AT = VAR_REG_DT
					WHERE 
						SITE_ID = VAR_USER_SITE_ID AND 
                        TARGET_ID = IN_TARGET_ID AND
						REGISTER_TYPE = 1 AND
                        DELETED_AT IS NULL;
					IF ROW_COUNT() = 1 THEN
                    /*삭제처리에 성공한 경우에는 정상처리한다.*/
						SET rtn_val = 0;
						SET msg_txt = 'success';
                    ELSE
                    /*삭제처리에 실패한 경우에는 예외처리한다.*/
						SET rtn_val = 39605;
						SET msg_txt = 'failed to delete record';
                    END IF;
                ELSE
                /*삭제가능한 레코드가 존재하지 않는 경우 예외처리한다.*/
					SET rtn_val = 39604;
					SET msg_txt = 'record not found';
                END IF;
            ELSE
            /*사용자가 수거자인 경우*/
				SELECT COUNT(ID) INTO VAR_RECORD_EXISTS
                FROM REGISTERED_SITE
                WHERE 
					TARGET_ID = VAR_USER_SITE_ID AND
                    SITE_ID = IN_TARGET_ID AND
                    DELETED2_AT IS NULL AND
                    REGISTER_TYPE = 1;
                IF VAR_RECORD_EXISTS = 1 THEN
                /*삭제가능한 레코드가 존재하는 경우 정상처리한다.*/
					UPDATE REGISTERED_SITE
                    SET 
						DELETED2_AT = VAR_REG_DT,
						ACTIVE = FALSE,
                        UPDATED_AT = VAR_REG_DT
					WHERE 
						TARGET_ID = VAR_USER_SITE_ID AND 
                        SITE_ID = IN_TARGET_ID AND
						REGISTER_TYPE = 1 AND
                        DELETED_AT IS NULL;
					IF ROW_COUNT() = 1 THEN
                    /*삭제처리에 성공한 경우에는 정상처리한다.*/
						SET rtn_val = 0;
						SET msg_txt = 'success';
                    ELSE
                    /*삭제처리에 실패한 경우에는 예외처리한다.*/
						SET rtn_val = 39603;
						SET msg_txt = 'failed to delete record';
                    END IF;
                ELSE
                /*삭제가능한 레코드가 존재하지 않는 경우 예외처리한다.*/
					SET rtn_val = 39602;
					SET msg_txt = 'record not found';
                END IF;
            END IF;
        ELSE
        /*관심업체를 삭제하고자 하는 사용자에게 권한이 없는 경우 예외처리한다*/
			SET rtn_val = 39601;
			SET msg_txt = 'users not authorized';
        END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_delete_registered_site_2_without_handler`(
	IN IN_USER_ID					BIGINT,
    IN IN_USER_TYPE					INT,
	IN IN_TARGET_ID					BIGINT,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_req_delete_registered_site_2_without_handler
Input param 	: 2개
Job 			: 기존업체를 관심목록에서 삭제한다.
Update 			: 2022.05.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL; 
	DECLARE VAR_REGISTERED_SITE_COUNT			INT						DEFAULT 0; 
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL; 
	DECLARE VAR_IS_SITE_REGISTERED				INT						DEFAULT 0; 
	DECLARE VAR_IS_SITE_DELETED					INT						DEFAULT 0; 
    
	CALL sp_req_current_time(VAR_REG_DT);
    
    SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID
    FROM USERS
    WHERE ID = IN_USER_ID;
    
    SET VAR_IS_SITE_REGISTERED = FALSE;
    SET VAR_REGISTERED_SITE_COUNT = 0;
    IF VAR_USER_SITE_ID = 0 THEN
    /*배출자가 개인인 경우*/
		SELECT COUNT(ID) INTO VAR_IS_SITE_DELETED
		FROM REGISTERED_SITE
		WHERE 
			USER_ID = IN_USER_ID AND
            TARGET_ID = IN_TARGET_ID AND
            REGISTER_TYPE = 2;
    ELSE
    /*배출자가 사업자인 경우*/
		SELECT COUNT(ID) INTO VAR_IS_SITE_DELETED
		FROM REGISTERED_SITE
		WHERE 
			SITE_ID = VAR_USER_SITE_ID AND
            TARGET_ID = IN_TARGET_ID AND
            REGISTER_TYPE = 2;
    END IF;
    
	IF VAR_IS_SITE_DELETED = 0 THEN
	/*삭제 등록이 가능한 경우 정상처리한다.*/
		INSERT REGISTERED_SITE(
			USER_ID,
			SITE_ID,
			TARGET_ID,
			CREATED_AT,
			UPDATED_AT,
			DELETED_AT,
			ACTIVE,
			REGISTER_TYPE
		) VALUES (
			IN_USER_ID,
			VAR_USER_SITE_ID,
			IN_TARGET_ID,
			VAR_REG_DT,
			VAR_REG_DT,
			VAR_REG_DT,
			TRUE,
			2
		);
		IF ROW_COUNT() = 1 THEN
			SET rtn_val 		= 0;
			SET msg_txt 		= concat('success987', '/', IN_USER_ID, '/', IN_USER_TYPE, '/', IN_TARGET_ID);
		ELSE
			SET rtn_val 		= 39702;
			SET msg_txt 		= 'failed to register site information';
		END IF;
	ELSE
	/*삭제 등록이 불가능한 경우 예외처리한다.*/
		SET rtn_val 		= 39701;
		SET msg_txt 		= 'site is already deleted';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_delete_review`(
	IN IN_USER_ID					BIGINT,
	IN IN_POST_ID					BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_delete_review
Input param 	: 2개
Job 			: 배출자가 리뷰를 삭제한다
Update 			: 2022.04.07
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_POST_EXISTS						INT						DEFAULT 0; 
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL; 
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL; 
	DECLARE VAR_CREATOR_ID						BIGINT					DEFAULT NULL; 
	DECLARE VAR_CREATOR_SITE_ID					BIGINT					DEFAULT NULL; 
	DECLARE VAR_CREATOR_CLASS					INT						DEFAULT NULL; 

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/	
		SELECT COUNT(ID) INTO VAR_POST_EXISTS
        FROM POSTS
        WHERE ID = IN_POST_ID;
        IF VAR_POST_EXISTS = 1 THEN
        /*리뷰가 존재하는 경우 정상처리한다.*/            
            SELECT AFFILIATED_SITE, CLASS INTO VAR_USER_SITE_ID, VAR_USER_CLASS
            FROM USERS
            WHERE ID = IN_USER_ID;          
            SELECT CREATOR_ID INTO VAR_CREATOR_ID
            FROM POSTS
            WHERE ID = IN_POST_ID;
            IF VAR_CREATOR_ID = IN_USER_ID THEN
            /*사용자가 리뷰작성자인 경우*/
				CALL sp_delete_review_without_handler(
					IN_USER_ID,
					IN_POST_ID,
					rtn_val,
					msg_txt
				);
				IF rtn_val > 0 THEN
					SIGNAL SQLSTATE '23000';
				ELSE
					SET rtn_val = 0;
					SET msg_txt = 'success';
				END IF;
            ELSE
            /*사용자가 리뷰작성자가 아닌 경우*/
				SELECT CREATOR_ID
				INTO VAR_CREATOR_ID
				FROM POSTS 
				WHERE ID = IN_POST_ID;
                
				SELECT AFFILIATED_SITE, CLASS 
                INTO VAR_CREATOR_SITE_ID, VAR_CREATOR_CLASS
                FROM USERS
                WHERE ID = VAR_CREATOR_ID;
                IF VAR_CREATOR_SITE_ID = VAR_USER_SITE_ID THEN
                /*사용자가 삭제자와 같은 소속인 경우 정상처리한다.*/
					IF VAR_USER_CLASS > VAR_CREATOR_CLASS THEN
                    /*사용자가 작성자보다 높은 권한을 가진 경우 정상처리한다.*/
						CALL sp_delete_review_without_handler(
							IN_USER_ID,
							IN_POST_ID,
							rtn_val,
							msg_txt
						);
						IF rtn_val > 0 THEN
							SIGNAL SQLSTATE '23000';
						END IF;
                    ELSE
                    /*사용자가 작성자보다 높은 권한을 가지지 않은 경우 예외처리한다.*/
						SET rtn_val = 36603;
						SET msg_txt = 'user not autorized';
						SIGNAL SQLSTATE '23000';
                    END IF;
                ELSE
                /*사용자가 삭제자와 다른 소속인 경우 예외처리한다.*/
					SET rtn_val = 36602;
					SET msg_txt = 'user does not belong to the site of creator';
					SIGNAL SQLSTATE '23000';
                END IF;
            END IF;
        ELSE
        /*리뷰가 존재하지 않는 경우 예외처리한다.*/
			SET rtn_val = 36601;
			SET msg_txt = 'No Reivew exists';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_dispoer_site_id_of_collector_bidding_id`(
	IN IN_COLLECTOR_BIDDING_ID		BIGINT,
    OUT OUT_SITE_ID					BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_dispoer_site_id_of_collector_bidding_id
Input param 	: 1개
Output param 	: 1개
Job 			: COLLECTOR_BIDDING.ID로 해당 폐기물 처리 신청을 한 배출자 사이트의 고유등록번호를 반환한다.
Update 			: 2022.01.20
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT B.SITE_ID 
    INTO OUT_SITE_ID 
    FROM COLLECTOR_BIDDING A 
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
    WHERE A.ID = IN_COLLECTOR_BIDDING_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_disposal_id_of_collector_bidding_id`(
	IN IN_COLLECTOR_BIDDING_ID		BIGINT,
    OUT OUT_DISPOSER_ORDER_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_disposal_id_of_collector_bidding_id
Input param 	: 1개
Output param 	: 1개
Job 			: COLLECTOR_BIDDING.ID로 해당 폐기물 처리 신청을 한 disposal_order_id(SITE_WSTE_DISPOSAL_ORDER.ID)를 반환한다.
Update 			: 2022.01.20
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT DISPOSAL_ORDER_ID INTO OUT_DISPOSER_ORDER_ID FROM COLLECTOR_BIDDING WHERE ID = IN_COLLECTOR_BIDDING_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_disposal_order_details`(
	IN IN_DISPOSER_ORDER_ID							BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_disposal_order_details
Input param 	: 1개
Job 			: 배출자의 배출신청에 대한 입찰 상세정보
Update 			: 2022.02.15
Version			: 0.0.4
AUTHOR 			: Leo Nam
*/
    

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;
    DECLARE CUR_COLLECTOR_ID					BIGINT;
    DECLARE CUR_DISPOSER_ORDER_CODE				VARCHAR(10);
    DECLARE CUR_DISPOSER_SITE_ID				BIGINT;
    DECLARE CUR_DISPOSER_SITE_SI_DO				VARCHAR(20);
    DECLARE CUR_DISPOSER_SITE_SI_GUN_GU			VARCHAR(20);
    DECLARE CUR_DISPOSER_SITE_EUP_MYEON_DONG	VARCHAR(20);
    DECLARE CUR_DISPOSER_SITE_DONG_RI			VARCHAR(20);
    DECLARE CUR_DISPOSER_SITE_ADDR				VARCHAR(255);
    DECLARE CUR_DATE 							DATETIME;	
    DECLARE CUR_STATE							VARCHAR(20);
    DECLARE CUR_STATE_CODE						INT;
    DECLARE CUR_NOTE							VARCHAR(255);
    DECLARE CUR_B_CODE							VARCHAR(10);
    DECLARE CUR_WSTE_DISPOSED_SI_DO				VARCHAR(20);
    DECLARE CUR_WSTE_DISPOSED_SI_GUN_GU			VARCHAR(20);
    DECLARE CUR_WSTE_DISPOSED_EUP_MYEON_DONG	VARCHAR(20);
    DECLARE CUR_WSTE_DISPOSED_DONG_RI			VARCHAR(20);
    DECLARE CUR_WSTE_DISPOSED_KIKCD_B_CODE		VARCHAR(20);
    DECLARE CUR_WSTE_DISPOSED_ADDR				VARCHAR(255);
    DECLARE CUR_DISPOSER_CREATED_AT				DATETIME;	
    DECLARE CUR_DISPOSER_CLOSE_AT				DATETIME;	
    DECLARE CUR_STATE_CATEGORY_CODE				INT;
    DECLARE CUR_TRANSACTION_ID					BIGINT;
    DECLARE CUR_WSTE_LAT						DECIMAL(12,9);
    DECLARE CUR_WSTE_LNG						DECIMAL(12,9);
    DECLARE CUR_VISIT_START_AT					DATETIME;	
    DECLARE CUR_VISIT_END_AT					DATETIME;	
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_DISPOSAL_WSTE_LIST				JSON					DEFAULT NULL;
	DECLARE VAR_IMG_LIST						JSON					DEFAULT NULL;
	DECLARE VAR_DISPLAY_DATE					DATETIME				DEFAULT NULL;
	DECLARE VAR_TRANSACTION_INFO				JSON					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_ID				BIGINT					DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
		A.COLLECTOR_ID, 
		A.ORDER_CODE, 
        A.SITE_ID,
        B.COMP_SITE_SI_DO,
        B.COMP_SITE_SI_GUN_GU,
        B.COMP_SITE_EUP_MYEON_DONG,
        B.COMP_SITE_DONG_RI,
        B.COMP_SITE_ADDR,
        C.STATE, 
        C.STATE_CODE,
        A.NOTE,
        B.COMP_SITE_KIKCD_B_CODE,
        D.SI_DO,
        D.SI_GUN_GU,
        D.EUP_MYEON_DONG,
        D.DONG_RI,
        A.KIKCD_B_CODE,
        A.ADDR,
        A.CREATED_AT,
        A.CLOSE_AT,
        C.STATE_CATEGORY_ID,
        A.TRANSACTION_ID,
        A.LAT,
        A.LNG,
        A.VISIT_START_AT,
        A.VISIT_END_AT
    FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN V_COMP_SITE B ON A.SITE_ID = B.COMP_SITE_ID
    LEFT JOIN V_ORDER_STATE_NAME C ON A.ID = C.DISPOSER_ORDER_ID
    LEFT JOIN KIKCD_B D ON A.KIKCD_B_CODE = D.B_CODE
    LEFT JOIN COMP_SITE E ON A.SITE_ID = E.ID
    LEFT JOIN COMPANY F ON E.COMP_ID = F.ID
	WHERE 
		A.ID = IN_DISPOSER_ORDER_ID AND
		IF(A.SITE_ID = 0, 
			A.ID = IN_DISPOSER_ORDER_ID, 
            A.ID = IN_DISPOSER_ORDER_ID AND E.ACTIVE = TRUE AND F.ACTIVE = TRUE
		);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS ORDER_DETAIL_TEMP;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ORDER_DETAIL_TEMP (
		DISPOSER_ORDER_ID							BIGINT,
		DISPOSER_ORDER_CODE							VARCHAR(10),
		DISPOSER_SITE_ID							BIGINT,
		DISPOSER_SITE_SI_DO							VARCHAR(20),
		DISPOSER_SITE_SI_GUN_GU						VARCHAR(20),
		DISPOSER_SITE_EUP_MYEON_DONG				VARCHAR(20),
		DISPOSER_SITE_DONG_RI						VARCHAR(20),
		DISPOSER_SITE_ADDR							VARCHAR(255),
		DISPLAY_DATE								DATETIME,
		STATE										VARCHAR(20),
		STATE_CODE									INT,
		NOTE										VARCHAR(255),
		DISPOSER_SITE_KIKCD_B_CODE					VARCHAR(20),
		WSTE_DISPOSED_SI_DO							VARCHAR(20),
		WSTE_DISPOSED_SI_GUN_GU						VARCHAR(20),
		WSTE_DISPOSED_EUP_MYEON_DONG				VARCHAR(20),
		WSTE_DISPOSED_DONG_RI						VARCHAR(20),
		WSTE_DISPOSED_KIKCD_B_CODE					VARCHAR(20),
		WSTE_DISPOSED_ADDR							VARCHAR(255),
		DISPOSER_CREATED_AT							DATETIME,
		DISPOSER_CLOSE_AT							DATETIME,
		STATE_CATEGORY_CODE							INT,
		TRANSACTION_ID								BIGINT,
		WSTE_LAT									DECIMAL(12,9),
		WSTE_LNG									DECIMAL(12,9),
		TRANSACTION_TYPE							VARCHAR(20),
		VISIT_START_AT								DATETIME,
		VISIT_END_AT								DATETIME,
		DISPOSAL_WSTE_LIST							JSON,
		IMG_LIST									JSON,
		COLLECTOR_INFO								JSON,
		TRANSACTION_INFO							JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_DISPOSER_ORDER_ID,
			CUR_COLLECTOR_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_SITE_ID,
			CUR_DISPOSER_SITE_SI_DO,
			CUR_DISPOSER_SITE_SI_GUN_GU,
			CUR_DISPOSER_SITE_EUP_MYEON_DONG,
			CUR_DISPOSER_SITE_DONG_RI,
			CUR_DISPOSER_SITE_ADDR,
			CUR_STATE,
			CUR_STATE_CODE,
			CUR_NOTE,
			CUR_B_CODE,
			CUR_WSTE_DISPOSED_SI_DO,
			CUR_WSTE_DISPOSED_SI_GUN_GU,
			CUR_WSTE_DISPOSED_EUP_MYEON_DONG,
			CUR_WSTE_DISPOSED_DONG_RI,
			CUR_WSTE_DISPOSED_KIKCD_B_CODE,
			CUR_WSTE_DISPOSED_ADDR,
			CUR_DISPOSER_CREATED_AT,
			CUR_DISPOSER_CLOSE_AT,
			CUR_STATE_CATEGORY_CODE,
			CUR_TRANSACTION_ID,
			CUR_WSTE_LAT,
			CUR_WSTE_LNG,
			CUR_VISIT_START_AT,
			CUR_VISIT_END_AT;     
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ORDER_DETAIL_TEMP(
			DISPOSER_ORDER_ID, 
			DISPOSER_ORDER_CODE, 
			DISPOSER_SITE_ID, 
			DISPOSER_SITE_SI_DO,
			DISPOSER_SITE_SI_GUN_GU,
			DISPOSER_SITE_EUP_MYEON_DONG,
			DISPOSER_SITE_DONG_RI,
			DISPOSER_SITE_ADDR,
			STATE, 
			STATE_CODE,
			NOTE, 
			DISPOSER_SITE_KIKCD_B_CODE,
			WSTE_DISPOSED_SI_DO,
			WSTE_DISPOSED_SI_GUN_GU,
			WSTE_DISPOSED_EUP_MYEON_DONG,
			WSTE_DISPOSED_DONG_RI,
			WSTE_DISPOSED_KIKCD_B_CODE,
			WSTE_DISPOSED_ADDR,
			DISPOSER_CREATED_AT,
			DISPOSER_CLOSE_AT,
			STATE_CATEGORY_CODE,
			TRANSACTION_ID,
			WSTE_LAT,
			WSTE_LNG,
			VISIT_START_AT,
			VISIT_END_AT
		)
		VALUES(
			CUR_DISPOSER_ORDER_ID, 
			CUR_DISPOSER_ORDER_CODE, 
			CUR_DISPOSER_SITE_ID,
			CUR_DISPOSER_SITE_SI_DO,
			CUR_DISPOSER_SITE_SI_GUN_GU,
			CUR_DISPOSER_SITE_EUP_MYEON_DONG,
			CUR_DISPOSER_SITE_DONG_RI,
			CUR_DISPOSER_SITE_ADDR,
			CUR_STATE, 
			CUR_STATE_CODE,
			CUR_NOTE,
			CUR_B_CODE,
			CUR_WSTE_DISPOSED_SI_DO,
			CUR_WSTE_DISPOSED_SI_GUN_GU,
			CUR_WSTE_DISPOSED_EUP_MYEON_DONG,
			CUR_WSTE_DISPOSED_DONG_RI,
			CUR_WSTE_DISPOSED_KIKCD_B_CODE,
			CUR_WSTE_DISPOSED_ADDR,
			CUR_DISPOSER_CREATED_AT,
			CUR_DISPOSER_CLOSE_AT,
			CUR_STATE_CATEGORY_CODE,
			CUR_TRANSACTION_ID,
			CUR_WSTE_LAT,
			CUR_WSTE_LNG,
			CUR_VISIT_START_AT,
			CUR_VISIT_END_AT
		);
		
		IF CUR_COLLECTOR_ID IS NULL THEN
			CALL sp_get_collector_lists(
				CUR_DISPOSER_ORDER_ID,
				CUR_STATE_CATEGORY_CODE,
				VAR_COLLECTOR_INFO
			);
		ELSE
			CALL sp_get_site_info(
				CUR_COLLECTOR_ID,
				VAR_COLLECTOR_INFO
			);
		END IF;
		
		CALL sp_get_disposal_wste_lists(
			CUR_DISPOSER_ORDER_ID,
			VAR_DISPOSAL_WSTE_LIST 
		);
		
		CALL sp_get_disposal_img_lists(
			CUR_DISPOSER_ORDER_ID,
			'입찰',
			VAR_IMG_LIST
		);
		
		CALL sp_set_display_time(
			CUR_DISPOSER_ORDER_ID,
			CUR_STATE_CATEGORY_CODE,
			VAR_DISPLAY_DATE
		);
		
		CALL sp_get_transaction_info(
			CUR_DISPOSER_ORDER_ID,
			VAR_TRANSACTION_INFO 
		);
		
		SELECT COLLECTOR_SITE_ID INTO VAR_COLLECTOR_SITE_ID 
		FROM WSTE_CLCT_TRMT_TRANSACTION 
		WHERE 
			DISPOSAL_ORDER_ID = CUR_DISPOSER_ORDER_ID AND
			IN_PROGRESS = TRUE;
		
		UPDATE ORDER_DETAIL_TEMP 
		SET 
			COLLECTOR_INFO 				= VAR_COLLECTOR_INFO, 
			DISPOSAL_WSTE_LIST 			= VAR_DISPOSAL_WSTE_LIST, 
			IMG_LIST		 			= VAR_IMG_LIST,
			DISPLAY_DATE				= VAR_DISPLAY_DATE,
			TRANSACTION_INFO			= VAR_TRANSACTION_INFO,
			TRANSACTION_TYPE			= IF(VAR_COLLECTOR_SITE_ID IS NULL, '입찰거래', '기존거래')
		WHERE DISPOSER_ORDER_ID 		= CUR_DISPOSER_ORDER_ID;
		/*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/
        
        UPDATE SITE_WSTE_DISPOSAL_ORDER
        SET CHECK_STATE = FALSE
        WHERE ID = CUR_DISPOSER_ORDER_ID;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'DISPOSER_ORDER_ID'						, DISPOSER_ORDER_ID, 
			'DISPOSER_ORDER_CODE'					, DISPOSER_ORDER_CODE, 
			'DISPOSER_SITE_ID'						, DISPOSER_SITE_ID, 
			'DISPOSER_SITE_SI_DO'					, DISPOSER_SITE_SI_DO, 
			'DISPOSER_SITE_SI_GUN_GU'				, DISPOSER_SITE_SI_GUN_GU, 
			'DISPOSER_SITE_EUP_MYEON_DONG'			, DISPOSER_SITE_EUP_MYEON_DONG, 
			'DISPOSER_SITE_DONG_RI'					, DISPOSER_SITE_DONG_RI, 
			'DISPOSER_SITE_ADDR'					, DISPOSER_SITE_ADDR, 
			'DISPLAY_DATE'							, DISPLAY_DATE,
			'STATE'									, STATE, 
			'STATE_CODE'							, STATE_CODE, 
			'NOTE'									, NOTE, 
			'DISPOSER_SITE_KIKCD_B_CODE'			, DISPOSER_SITE_KIKCD_B_CODE, 
			'WSTE_DISPOSED_SI_DO'					, WSTE_DISPOSED_SI_DO, 
			'WSTE_DISPOSED_SI_GUN_GU'				, WSTE_DISPOSED_SI_GUN_GU, 
			'WSTE_DISPOSED_EUP_MYEON_DONG'			, WSTE_DISPOSED_EUP_MYEON_DONG, 
			'WSTE_DISPOSED_DONG_RI'					, WSTE_DISPOSED_DONG_RI, 
			'WSTE_DISPOSED_KIKCD_B_CODE'			, WSTE_DISPOSED_KIKCD_B_CODE, 
			'WSTE_DISPOSED_ADDR'					, WSTE_DISPOSED_ADDR, 
			'DISPOSER_CREATED_AT'					, DISPOSER_CREATED_AT, 
			'STATE_CATEGORY_CODE'					, STATE_CATEGORY_CODE, 
			'TRANSACTION_ID'						, TRANSACTION_ID, 
			'WSTE_LAT'								, WSTE_LAT, 
			'WSTE_LNG'								, WSTE_LNG, 
			'TRANSACTION_TYPE'						, TRANSACTION_TYPE, 
			'DISPOSAL_WSTE_LIST'					, DISPOSAL_WSTE_LIST, 
			'IMG_LIST'								, IMG_LIST, 
			'COLLECTOR_INFO'						, COLLECTOR_INFO, 
			'TRANSACTION_INFO'						, TRANSACTION_INFO, 
			'VISIT_START_AT'						, VISIT_START_AT, 
			'VISIT_END_AT'							, VISIT_END_AT
		)
	) 
	INTO json_data FROM ORDER_DETAIL_TEMP;
	
	DROP TABLE IF EXISTS ORDER_DETAIL_TEMP;  
	COMMIT;     
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_disposal_order_details_2`(
	IN IN_DISPOSER_ORDER_ID							BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_disposal_order_details_2
Input param 	: 1개
Job 			: 배출자의 배출신청에 대한 입찰 상세정보
Update 			: 2022.02.15
Version			: 0.0.4
AUTHOR 			: Leo Nam
*/
    

    CALL sp_req_disposal_order_details(
		IN_DISPOSER_ORDER_ID
    );
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_disposal_order_details_3`(
	IN IN_DISPOSER_ORDER_ID							BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_disposal_order_details_2
Input param 	: 1개
Job 			: 배출자의 배출신청에 대한 입찰 상세정보
Update 			: 2022.02.15
Version			: 0.0.4
AUTHOR 			: Leo Nam
*/
    

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;    
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;
    DECLARE CUR_DISPOSER_ORDER_CODE				VARCHAR(10);
    DECLARE CUR_DISPOSER_SITE_ID				BIGINT;
    DECLARE CUR_DISPOSER_SITE_SI_DO				VARCHAR(20);
    DECLARE CUR_DISPOSER_SITE_SI_GUN_GU			VARCHAR(20);
    DECLARE CUR_DISPOSER_SITE_EUP_MYEON_DONG	VARCHAR(20);
    DECLARE CUR_DISPOSER_SITE_DONG_RI			VARCHAR(20);
    DECLARE CUR_DISPOSER_SITE_ADDR				VARCHAR(255);
    DECLARE CUR_STATE							VARCHAR(20);
    DECLARE CUR_STATE_CODE						INT;
    DECLARE CUR_NOTE							VARCHAR(255);
    DECLARE CUR_B_CODE							VARCHAR(10);
    DECLARE CUR_WSTE_DISPOSED_SI_DO				VARCHAR(20);
    DECLARE CUR_WSTE_DISPOSED_SI_GUN_GU			VARCHAR(20);
    DECLARE CUR_WSTE_DISPOSED_EUP_MYEON_DONG	VARCHAR(20);
    DECLARE CUR_WSTE_DISPOSED_DONG_RI			VARCHAR(20);
    DECLARE CUR_WSTE_DISPOSED_KIKCD_B_CODE		VARCHAR(20);
    DECLARE CUR_WSTE_DISPOSED_ADDR				VARCHAR(255);
    DECLARE CUR_DISPOSER_CREATED_AT				DATETIME;	
    DECLARE CUR_DISPOSER_CLOSE_AT				DATETIME;	
    DECLARE CUR_STATE_CATEGORY_CODE				INT;
    DECLARE CUR_TRANSACTION_ID					BIGINT;
    DECLARE CUR_LAT								DECIMAL(12,9);
    DECLARE CUR_LNG								DECIMAL(12,9);
    DECLARE CUR_VISIT_START_AT					DATETIME;	
    DECLARE CUR_VISIT_END_AT					DATETIME;	
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_DISPOSAL_WSTE_LIST				JSON					DEFAULT NULL;
	DECLARE VAR_IMG_LIST						JSON					DEFAULT NULL;
	DECLARE VAR_DISPLAY_DATE					DATETIME				DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_ID				BIGINT					DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		DISPOSER_ORDER_ID, 
		DISPOSER_ORDER_CODE, 
        DISPOSER_SITE_ID,
        DISPOSER_SITE_SI_DO,
        DISPOSER_SITE_SI_GUN_GU,
        DISPOSER_SITE_EUP_MYEON_DONG,
        DISPOSER_SITE_DONG_RI,
        DISPOSER_SITE_ADDR,
        STATE, 
        STATE_CODE,
        NOTE,
        DISPOSER_SITE_KIKCD_B_CODE,
        WSTE_DISPOSED_SI_DO,
        WSTE_DISPOSED_SI_GUN_GU,
        WSTE_DISPOSED_EUP_MYEON_DONG,
        WSTE_DISPOSED_DONG_RI,
        WSTE_DISPOSED_KIKCD_B_CODE,
        WSTE_DISPOSED_ADDR,
        DISPOSER_CREATED_AT,
        DISPOSER_CLOSE_AT,
        STATE_CATEGORY_ID,
        TRANSACTION_ID,
        DISPOSER_SITE_LAT,
        DISPOSER_SITE_LNG,
        DISPOSER_VISIT_START_AT,
        DISPOSER_VISIT_END_AT
    FROM V_SITE_WSTE_DISPOSAL_ORDER_WITH_STATE
	WHERE DISPOSER_ORDER_ID = IN_DISPOSER_ORDER_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS CURRENT_STATE;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS CURRENT_STATE (
		DISPOSER_ORDER_ID							BIGINT,
		DISPOSER_ORDER_CODE							VARCHAR(10),
		DISPOSER_SITE_ID							BIGINT,
		DISPOSER_SITE_SI_DO							VARCHAR(20),
		DISPOSER_SITE_SI_GUN_GU						VARCHAR(20),
		DISPOSER_SITE_EUP_MYEON_DONG				VARCHAR(20),
		DISPOSER_SITE_DONG_RI						VARCHAR(20),
		DISPOSER_SITE_ADDR							VARCHAR(255),
		DISPLAY_DATE								DATETIME,
		STATE										VARCHAR(20),
		STATE_CODE									INT,
		NOTE										VARCHAR(255),
		DISPOSER_SITE_KIKCD_B_CODE					VARCHAR(20),
		WSTE_DISPOSED_SI_DO							VARCHAR(20),
		WSTE_DISPOSED_SI_GUN_GU						VARCHAR(20),
		WSTE_DISPOSED_EUP_MYEON_DONG				VARCHAR(20),
		WSTE_DISPOSED_DONG_RI						VARCHAR(20),
		WSTE_DISPOSED_KIKCD_B_CODE					VARCHAR(20),
		WSTE_DISPOSED_ADDR							VARCHAR(255),
		DISPOSER_CREATED_AT							DATETIME,
		DISPOSER_CLOSE_AT							DATETIME,
		STATE_CATEGORY_CODE							INT,
		TRANSACTION_ID								BIGINT,
		DISPOSER_SITE_LAT							DECIMAL(12,9),
		DISPOSER_SITE_LNG							DECIMAL(12,9),
		DISPOSER_VISIT_START_AT						DATETIME,
		DISPOSER_VISIT_END_AT						DATETIME,
		TRANSACTION_TYPE							VARCHAR(20),
		DISPOSAL_WSTE_LIST							JSON,
		IMG_LIST									JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_SITE_ID,
			CUR_DISPOSER_SITE_SI_DO,
			CUR_DISPOSER_SITE_SI_GUN_GU,
			CUR_DISPOSER_SITE_EUP_MYEON_DONG,
			CUR_DISPOSER_SITE_DONG_RI,
			CUR_DISPOSER_SITE_ADDR,
			CUR_STATE,
			CUR_STATE_CODE,
			CUR_NOTE,
			CUR_B_CODE,
			CUR_WSTE_DISPOSED_SI_DO,
			CUR_WSTE_DISPOSED_SI_GUN_GU,
			CUR_WSTE_DISPOSED_EUP_MYEON_DONG,
			CUR_WSTE_DISPOSED_DONG_RI,
			CUR_WSTE_DISPOSED_KIKCD_B_CODE,
			CUR_WSTE_DISPOSED_ADDR,
			CUR_DISPOSER_CREATED_AT,
            CUR_DISPOSER_CLOSE_AT,
			CUR_STATE_CATEGORY_CODE,
            CUR_TRANSACTION_ID,
            CUR_LAT,
            CUR_LNG,
            CUR_VISIT_START_AT,
            CUR_VISIT_END_AT;     
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		CURRENT_STATE(
			DISPOSER_ORDER_ID, 
			DISPOSER_ORDER_CODE, 
			DISPOSER_SITE_ID, 
			DISPOSER_SITE_SI_DO,
			DISPOSER_SITE_SI_GUN_GU,
			DISPOSER_SITE_EUP_MYEON_DONG,
			DISPOSER_SITE_DONG_RI,
			DISPOSER_SITE_ADDR,
			STATE, 
			STATE_CODE,
			NOTE, 
			DISPOSER_SITE_KIKCD_B_CODE,
            WSTE_DISPOSED_SI_DO,
            WSTE_DISPOSED_SI_GUN_GU,
            WSTE_DISPOSED_EUP_MYEON_DONG,
            WSTE_DISPOSED_DONG_RI,
            WSTE_DISPOSED_KIKCD_B_CODE,
            WSTE_DISPOSED_ADDR,
            DISPOSER_CREATED_AT,
            DISPOSER_CLOSE_AT,
            STATE_CATEGORY_CODE,
            TRANSACTION_ID,
            DISPOSER_SITE_LAT,
            DISPOSER_SITE_LNG,
            DISPOSER_VISIT_START_AT,
            DISPOSER_VISIT_END_AT
		)
		VALUES(
			CUR_DISPOSER_ORDER_ID, 
			CUR_DISPOSER_ORDER_CODE, 
			CUR_DISPOSER_SITE_ID,
			CUR_DISPOSER_SITE_SI_DO,
			CUR_DISPOSER_SITE_SI_GUN_GU,
			CUR_DISPOSER_SITE_EUP_MYEON_DONG,
			CUR_DISPOSER_SITE_DONG_RI,
			CUR_DISPOSER_SITE_ADDR,
			CUR_STATE, 
			CUR_STATE_CODE,
			CUR_NOTE,
			CUR_B_CODE,
			CUR_WSTE_DISPOSED_SI_DO,
			CUR_WSTE_DISPOSED_SI_GUN_GU,
			CUR_WSTE_DISPOSED_EUP_MYEON_DONG,
			CUR_WSTE_DISPOSED_DONG_RI,
			CUR_WSTE_DISPOSED_KIKCD_B_CODE,
			CUR_WSTE_DISPOSED_ADDR,
			CUR_DISPOSER_CREATED_AT,
			CUR_DISPOSER_CLOSE_AT,
			CUR_STATE_CATEGORY_CODE,
			CUR_TRANSACTION_ID,
			CUR_LAT,
			CUR_LNG,
			CUR_VISIT_START_AT,
			CUR_VISIT_END_AT
		);
        
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'WSTE_REG_ID'			, WSTE_REG_ID, 
                'DISPOSAL_ORDER_ID'		, DISPOSAL_ORDER_ID, 
                'WSTE_CLASS'			, WSTE_CLASS, 
                'WSTE_CLASS_NM'			, WSTE_CLASS_NM, 
                'WSTE_APPEARANCE_NM'	, WSTE_APPEARANCE_NM, 
                'WSTE_QUANTITY'			, WSTE_QUANTITY, 
                'WSTE_UNIT'				, WSTE_UNIT
			)
		) 
		INTO VAR_DISPOSAL_WSTE_LIST 
        FROM V_WSTE_DISCHARGED_FROM_SITE
        WHERE DISPOSAL_ORDER_ID 		= CUR_DISPOSER_ORDER_ID;
        
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'FILE_NAME'			, FILE_NAME, 
                'IMG_PATH'			, IMG_PATH, 
                'FILE_SIZE'			, FILE_SIZE
			)
		) 
		INTO VAR_IMG_LIST 
        FROM WSTE_REGISTRATION_PHOTO  
        WHERE DISPOSAL_ORDER_ID 		= CUR_DISPOSER_ORDER_ID;
		
            
		CALL sp_set_display_time(
			CUR_DISPOSER_ORDER_ID,
			CUR_STATE_CATEGORY_CODE,
			VAR_DISPLAY_DATE
		);
		
        SELECT A.COLLECTOR_SITE_ID INTO VAR_COLLECTOR_SITE_ID 
        FROM WSTE_CLCT_TRMT_TRANSACTION A LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
        WHERE B.ID = CUR_DISPOSER_ORDER_ID;
        
		UPDATE CURRENT_STATE 
        SET 
			DISPOSAL_WSTE_LIST 			= VAR_DISPOSAL_WSTE_LIST, 
			IMG_LIST		 			= VAR_IMG_LIST,
            DISPLAY_DATE				= VAR_DISPLAY_DATE,
            TRANSACTION_TYPE			= IF(VAR_COLLECTOR_SITE_ID IS NULL, '입찰거래', '기존거래')
        WHERE DISPOSER_ORDER_ID 		= CUR_DISPOSER_ORDER_ID;
		/*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'DISPOSER_ORDER_ID'						, DISPOSER_ORDER_ID, 
            'DISPOSER_ORDER_CODE'					, DISPOSER_ORDER_CODE, 
            'DISPOSER_SITE_ID'						, DISPOSER_SITE_ID, 
            'DISPOSER_SITE_SI_DO'					, DISPOSER_SITE_SI_DO, 
            'DISPOSER_SITE_SI_GUN_GU'				, DISPOSER_SITE_SI_GUN_GU, 
            'DISPOSER_SITE_EUP_MYEON_DONG'			, DISPOSER_SITE_EUP_MYEON_DONG, 
            'DISPOSER_SITE_DONG_RI'					, DISPOSER_SITE_DONG_RI, 
            'DISPOSER_SITE_ADDR'					, DISPOSER_SITE_ADDR, 
            'DISPLAY_DATE'							, DISPLAY_DATE,
            'STATE'									, STATE, 
            'STATE_CODE'							, STATE_CODE, 
            'NOTE'									, NOTE, 
            'DISPOSER_SITE_KIKCD_B_CODE'			, DISPOSER_SITE_KIKCD_B_CODE, 
            'WSTE_DISPOSED_SI_DO'					, WSTE_DISPOSED_SI_DO, 
            'WSTE_DISPOSED_SI_GUN_GU'				, WSTE_DISPOSED_SI_GUN_GU, 
            'WSTE_DISPOSED_EUP_MYEON_DONG'			, WSTE_DISPOSED_EUP_MYEON_DONG, 
            'WSTE_DISPOSED_DONG_RI'					, WSTE_DISPOSED_DONG_RI, 
            'WSTE_DISPOSED_KIKCD_B_CODE'			, WSTE_DISPOSED_KIKCD_B_CODE, 
            'WSTE_DISPOSED_ADDR'					, WSTE_DISPOSED_ADDR, 
            'DISPOSER_CREATED_AT'					, DISPOSER_CREATED_AT, 
            'STATE_CATEGORY_CODE'					, STATE_CATEGORY_CODE, 
            'TRANSACTION_ID'						, TRANSACTION_ID, 
            'DISPOSER_SITE_LAT'						, DISPOSER_SITE_LAT, 
            'DISPOSER_SITE_LNG'						, DISPOSER_SITE_LNG, 
            'DISPOSER_VISIT_START_AT'				, DISPOSER_VISIT_START_AT, 
            'DISPOSER_VISIT_END_AT'					, DISPOSER_VISIT_END_AT, 
            'TRANSACTION_TYPE'						, TRANSACTION_TYPE, 
            'DISPOSAL_WSTE_LIST'					, DISPOSAL_WSTE_LIST, 
            'IMG_LIST'								, IMG_LIST
		)
	) 
    INTO json_data FROM CURRENT_STATE;
    
    IF vRowCount = 0 THEN
		SET rtn_val 					= 27901;
		SET msg_txt 					= 'No data found';
		SIGNAL SQLSTATE '23000';
    ELSE
		SET rtn_val 					= 0;
		SET msg_txt 					= 'Success';
    END IF;
    COMMIT;   
	DROP TABLE IF EXISTS CURRENT_STATE;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_disposal_order_exists`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,				/*SITE_WSTE_DISPOSAL_ORDER.ID*/
    OUT OUT_PARAM						INT					/*폐기물 배출 요청 내역이 존재하면 1, 그렇지 않으면 0 반환*/
)
BEGIN

/*
Procedure Name 	: sp_req_disposal_order_exists
Input param 	: 1개
Output param 	: 1개
Job 			: 폐기물 배출 요청 내역이 존재하는지 검사
Update 			: 2022.01.19
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT COUNT(ID) INTO OUT_PARAM FROM SITE_WSTE_DISPOSAL_ORDER WHERE ACTIVE = TRUE AND ID = IN_DISPOSER_ORDER_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_disposer_site_id_of_collector_bidding_id`(
	IN IN_COLLECTOR_BIDDING_ID		BIGINT,
    OUT OUT_SITE_ID					BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_disposer_site_id_of_collector_bidding_id
Input param 	: 1개
Output param 	: 1개
Job 			: COLLECTOR_BIDDING.ID로 해당 폐기물 처리 신청을 한 배출자 사이트의 고유등록번호를 반환한다.
Update 			: 2022.01.20
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT DISPOSER_SITE_ID INTO OUT_SITE_ID FROM V_COLLECTOR_BIDDING WHERE COLLECTOR_BIDDING_ID = IN_COLLECTOR_BIDDING_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_fcm_token`(
	IN IN_USER_ID					BIGINT
)
BEGIN	
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_USER_COUNT						INT						DEFAULT 0;
    
	SELECT COUNT(ID) INTO VAR_USER_COUNT
    FROM USERS
    WHERE ID = IN_USER_ID AND ACTIVE = TRUE;
    IF VAR_USER_COUNT = 1 THEN
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'USER_ID'	, ID, 
				'FCM'		, JWT
			)
		) 
		INTO json_data
		FROM USERS 
		WHERE ID = IN_USER_ID AND ACTIVE = TRUE;
    ELSE
		SET rtn_val 	= 37601;
		SET msg_txt 	= 'user not found';
		SET json_data 	= NULL;
    END IF;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_find_pwd`(
	IN IN_USER_ID			VARCHAR(50),		/*입력값 : 사용자 아이디*/
	IN IN_USER_NAME			VARCHAR(20),		/*입력값 : 사용자 고유번호*/
	IN IN_PHONE				VARCHAR(20)			/*입력값 : 사용자 등록 전화번호*/
)
BEGIN

/*
Procedure Name 	: sp_req_find_pwd
Input param 	: 3개
Job 			: 사용자찾기기능으로서 사용자의 아이디와 이름, 전화번호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.01.30
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;

	SELECT COUNT(ID) 
	INTO VAR_CHK_COUNT 
	FROM USERS 
	WHERE 
		USER_ID 				= IN_USER_ID AND 
		USER_NAME 				= IN_USER_NAME AND 
		PHONE 					= IN_PHONE;
	IF VAR_CHK_COUNT 				= 0 THEN
		SET rtn_val 			= 22001;
		SET msg_txt 			= 'user does not exist';
		SET json_data 			= NULL;
	ELSE
		SELECT COUNT(ID) 
		INTO VAR_CHK_COUNT 
		FROM USERS 
		WHERE 
			USER_ID 			= IN_USER_ID AND 
			USER_NAME 			= IN_USER_NAME AND 
			PHONE 				= IN_PHONE AND 
            ACTIVE 				= TRUE;
            
		IF VAR_CHK_COUNT = 0 THEN
			SET rtn_val 		= 22002;
			SET msg_txt 		= 'user is disabled';
            SET json_data 		= NULL;
		ELSE
			SET rtn_val 		= 0;
			SET msg_txt 		= 'user found';
            SELECT JSON_OBJECT(
				'ID', 			ID, 
                'USER_ID', 		USER_ID, 
                'USER_NAME', 	USER_NAME, 
                'PHONE', 		PHONE
			) 
            INTO json_data 
            FROM USERS 
            WHERE 
				USER_ID 		= IN_USER_ID AND 
				USER_NAME 		= IN_USER_NAME AND 
				PHONE 			= IN_PHONE AND 
				ACTIVE 			= TRUE;
		END IF;
	END IF;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_find_user`(
	IN IN_USER_REG_ID		VARCHAR(50),		/*입력값 : 사용자 아이디*/
	IN IN_USER_NAME			VARCHAR(20),		/*입력값 : 사용자 고유번호*/
	IN IN_PHONE				VARCHAR(20),		/*입력값 : 사용자 등록 전화번호*/
	OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
	OUT msg_txt 			VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_find_user
Input param 	: 3개
Output param 	: 2개
Job 			: 사용자찾기기능으로서 사용자의 아이디와 이름, 전화번호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.01.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT COUNT(ID) 
	INTO @CHK_COUNT 
	FROM USERS 
	WHERE 
		USER_ID = IN_USER_REG_ID AND 
		USER_NAME = IN_USER_NAME AND 
		PHONE = IN_PHONE;
	IF @CHK_COUNT = 0 THEN
		SET rtn_val = 25701;
		SET msg_txt = 'user does not exist';
	ELSE
		SELECT COUNT(ID) 
		INTO @CHK_COUNT 
		FROM USERS 
		WHERE 
			USER_ID = IN_USER_REG_ID AND 
			USER_NAME = IN_USER_NAME AND 
			PHONE = IN_PHONE AND 
            ACTIVE = TRUE;
		IF @CHK_COUNT = 0 THEN
			SET rtn_val = 25702;
			SET msg_txt = 'user is disabled';
		ELSE
			SET rtn_val = 0;
			SET msg_txt = 'user found';
		END IF;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_find_user_id`(
	IN IN_USER_NAME			VARCHAR(50),		/*입력값 : 사용자 이름*/
	IN IN_PHONE				VARCHAR(20)			/*입력값 : 사용자 등록 전화번호*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_login
Input param 	: 2개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자의 아이디를 반환함
Update 			: 2022.02.05
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;

	SELECT COUNT(USER_ID)
    INTO VAR_CHK_COUNT
	FROM USERS 
	WHERE 
		USER_NAME 				= IN_USER_NAME AND 
		PHONE 					= IN_PHONE;
        
	IF VAR_CHK_COUNT = 1 THEN
		SELECT COUNT(USER_ID)				/*0.0.2에서 수정함 SELECT USER_ID => SELECT COUNT(USER_ID)*/
		INTO VAR_CHK_COUNT
		FROM USERS 
		WHERE 
			USER_NAME 			= IN_USER_NAME AND 
			PHONE 				= IN_PHONE AND 
			ACTIVE 				= TRUE;
            
		IF VAR_CHK_COUNT = 1 THEN
			SET rtn_val 		= 0;
            SET msg_txt 		= 'user account found';
            
            SELECT JSON_OBJECT(
                'USER_ID', 		USER_ID
			) 
            INTO json_data 
            FROM USERS 
            WHERE 
				USER_NAME 		= IN_USER_NAME AND 
				PHONE 			= IN_PHONE AND 
				ACTIVE 			= TRUE;
		ELSE
			SET rtn_val 		= 22201;
            SET msg_txt 		= 'user account is disabled';
			SET json_data 		= NULL;
        END IF;
    ELSE
		SET rtn_val 			= 22202;
		SET msg_txt 			= 'user account does not exist';
		SET json_data 			= NULL;
    END IF;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_get_my_question`(
	IN IN_USER_ID				BIGINT				/*입력값 : 사용자 아이디(USERS.ID)*/
)
BEGIN
/*
Procedure Name 	: sp_req_get_my_question
Input param 	: 1개
Job 			: 사용자가 등록한 문의사항을 모두 반환한다
Update 			: 2022.03.17
Version			: 0.0.2
AUTHOR 			: Leo Nam
Changes			: 조건으로 사용하는 site_id는 삭제함(0.0.2)
*/	
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
    
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt        
    );
    IF rtn_val = 0 THEN
		CALL sp_req_get_my_question_without_handler(
			IN_USER_ID,
			rtn_val,
			msg_txt,
			json_data
		);
    END IF;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_get_my_question_without_handler`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 사용자 아이디(USERS.ID)*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200),		/*출력값 : 처리결과 문자열*/
    OUT json_data 				json				/*출력값 : 포스팅 리스트*/
)
BEGIN

/*
Procedure Name 	: sp_req_get_my_question_without_handler
Input param 	: 1개
Job 			: 문의사항 작성자가 자신이 작성한 문의사항 리스트를 반환한다
Update 			: 2022.03.17
Version			: 0.0.2
AUTHOR 			: Leo Nam
Changes			: 조건으로 사용하는 site_id는 삭제함(0.0.2)
*/		

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;  
    DECLARE CUR_ID		 						BIGINT;
    DECLARE CUR_SITE_ID			 				BIGINT;
    DECLARE CUR_SITE_NAME		 				VARCHAR(255);
    DECLARE CUR_CREATOR_ID			 			BIGINT;
    DECLARE CUR_CREATOR_NAME		 			VARCHAR(20);
    DECLARE CUR_CONTENTS			 			TEXT;
    DECLARE CUR_SUB_CATEGORY		 			INT;
    DECLARE CUR_SUB_CATEGORY_NAME	 			VARCHAR(45);
    DECLARE CUR_CREATED_AT			 			DATETIME;
    DECLARE CUR_UPDATED_AT			 			DATETIME;
    DECLARE CUR_STATUS				 			TINYINT;
	DECLARE VAR_REPLY							JSON					DEFAULT NULL;
	DECLARE VAR_AVATAR_PATH						VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR 						CURSOR FOR 
    SELECT 
		POST_ID, 
        POST_SITE_ID, 
        POST_SITE_NAME, 
        POST_CREATOR_ID, 
        POST_CREATOR_NAME, 
        POST_CONTENTS, 
        POST_SUB_CATEGORY_ID, 
        POST_SUB_CATEGORY_NAME, 
        POST_CREATED_AT, 
        POST_UPDATED_AT, 
        POST_STATUS 
	FROM V_POSTS 
    WHERE 
		POST_PID 			= 0 AND 
        POST_CREATOR_ID 	= IN_USER_ID AND 
        POST_CATEGORY_ID	= 3 AND 
        POST_ACTIVE		 	= TRUE 
	ORDER BY POST_UPDATED_AT DESC /*LIMIT IN_OFFSET, IN_ITEMS*/;   
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;   
    
    SET json_data = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_QUESTION_LIST (
		ID 					BIGINT, 
		SITE_ID 			BIGINT, 
		SITE_NAME 			VARCHAR(255), 
		CREATOR_ID 			BIGINT, 
		CREATOR_NAME 		VARCHAR(20), 
		CONTENTS 			TEXT, 
		SUB_CATEGORY_ID 	INT, 
		SUB_CATEGORY_NAME 	VARCHAR(45), 
		CREATED_AT 			DATETIME, 
		UPDATED_AT 			DATETIME, 
		REPLY 				JSON, 
		AVATAR_PATH			VARCHAR(255), 
		STATUS				TINYINT
	);
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		SET VAR_REPLY 		= NULL;
		SET VAR_AVATAR_PATH = NULL;
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID, 
			CUR_SITE_ID, 
			CUR_SITE_NAME, 
			CUR_CREATOR_ID, 
			CUR_CREATOR_NAME, 
			CUR_CONTENTS, 
			CUR_SUB_CATEGORY, 
			CUR_SUB_CATEGORY_NAME, 
			CUR_CREATED_AT, 
			CUR_UPDATED_AT, 
			CUR_STATUS;   
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
				
		INSERT INTO 
		TEMP_QUESTION_LIST(
			ID, 
			SITE_ID, 
			SITE_NAME, 
			CREATOR_ID, 
			CREATOR_NAME, 
			CONTENTS, 
			SUB_CATEGORY_ID, 
			SUB_CATEGORY_NAME, 
			CREATED_AT, 
			UPDATED_AT, 
			STATUS
		) 
		VALUES(
			CUR_ID, 
			CUR_SITE_ID, 
			CUR_SITE_NAME, 
			CUR_CREATOR_ID, 
			CUR_CREATOR_NAME, 
			CUR_CONTENTS, 
			CUR_SUB_CATEGORY, 
			CUR_SUB_CATEGORY_NAME, 
			CUR_CREATED_AT, 
			CUR_UPDATED_AT, 
			CUR_STATUS
		);    

		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'ID'					, POST_ID, 
				'SITE_ID'				, POST_SITE_ID, 
				'SITE_NAME'				, POST_SITE_NAME, 
				'CREATOR_ID'			, POST_CREATOR_ID, 
				'CREATOR_NAME'			, POST_CREATOR_NAME, 
				'CONTENTS'				, POST_CONTENTS, 
				'SUB_CATEGORY_ID'		, POST_SUB_CATEGORY_ID, 
				'SUB_CATEGORY_NAME'		, POST_SUB_CATEGORY_NAME, 
				'CREATED_AT'			, POST_CREATED_AT, 
				'UPDATED_AT'			, POST_UPDATED_AT
			)
		) 
		INTO VAR_REPLY 
		FROM V_POSTS 
		WHERE POST_PID = CUR_ID AND
			POST_ACTIVE = TRUE;   
			
		UPDATE TEMP_QUESTION_LIST SET REPLY = VAR_REPLY WHERE ID = CUR_ID;   
        
        SELECT AVATAR_PATH INTO VAR_AVATAR_PATH FROM USERS WHERE ID = IN_USER_ID;

	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'					, ID, 
		'SITE_ID'				, SITE_ID, 
		'SITE_NAME'				, SITE_NAME, 
		'CREATOR_ID'			, CREATOR_ID, 
		'CREATOR_NAME'			, CREATOR_NAME, 
		'CONTENTS'				, CONTENTS, 
		'SUB_CATEGORY_ID'		, SUB_CATEGORY_ID, 
		'SUB_CATEGORY_NAME'		, SUB_CATEGORY_NAME, 
		'CREATED_AT'			, CREATED_AT, 
		'UPDATED_AT'			, UPDATED_AT, 
		'REPLY'					, REPLY, 
		'AVATAR_PATH'			, VAR_AVATAR_PATH, 
		'STATUS'				, STATUS
	)) 
	INTO json_data 
	FROM TEMP_QUESTION_LIST;
	
	SET rtn_val = 0;
	SET msg_txt = 'Success';
    DROP TABLE IF EXISTS TEMP_QUESTION_LIST;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_get_my_reviews`(
	IN IN_USER_ID				BIGINT
)
BEGIN
/*
Procedure Name 	: sp_req_get_my_reviews
Input param 	: 1개
Job 			: 사용자가 작성한 리뷰를 반환한다
Update 			: 2022.03.15
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/		
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/
		CALL sp_req_get_my_reviews_without_handler(
			IN_USER_ID,
			rtn_val,
			msg_txt,
			json_data
		);
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_get_my_reviews_without_handler`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 게시판 소유자(COMP_SITE.ID)*/
	OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
	OUT msg_txt 				VARCHAR(200),		/*출력값 : 처리결과 문자열*/
	OUT json_data 				json				/*출력값 : 포스팅 리스트*/
)
BEGIN

/*
Procedure Name 	: sp_req_get_my_reviews_without_handler
Input param 	: 2개
Job 			: 게시판 목록을 반환한다.
Update 			: 2022.02.16
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/		

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;  
    DECLARE CUR_ID		 						BIGINT;
    DECLARE CUR_RATING				 			FLOAT;
    DECLARE CUR_SITE_ID		 					BIGINT;
    DECLARE CUR_SITE_NAME		 				VARCHAR(255);
    DECLARE CUR_CONTENTS			 			TEXT;
    DECLARE CUR_CREATED_AT			 			DATETIME;
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;
	DECLARE VAR_AVATAR_PATH						VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_USER_NAME						VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_USER_TYPE						VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_USER_CURRENT_TYPE_NM			VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_DISPOSER_ORDER_CODE				VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
    DECLARE TEMP_CURSOR 						CURSOR FOR 
    SELECT 
		POST_ID, 
        POST_RATING, 
        POST_SITE_ID, 
        POST_SITE_NAME, 
        POST_CONTENTS, 
        POST_CREATED_AT, 
        POST_DISPOSER_ORDER_ID
	FROM V_POSTS 
    WHERE 
        POST_CREATOR_ID 	= IN_USER_ID AND 
        POST_CATEGORY_ID 	= 4  AND 
        POST_ACTIVE		 	= TRUE AND
        POST_DELETED		= FALSE
	ORDER BY POST_UPDATED_AT DESC /*LIMIT IN_OFFSET, IN_ITEMS*/;   
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;   
    
    SET json_data = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_POST_LIST2 (
		ID 							BIGINT, 
		RATING						FLOAT, 
		SITE_ID						BIGINT, 
		SITE_NAME 					VARCHAR(255), 
		CONTENTS 					TEXT, 
		CREATED_AT 					DATETIME, 
		AVATAR_PATH 				VARCHAR(255), 
		DISPOSER_ORDER_ID			BIGINT, 
		DISPOSER_ORDER_CODE			VARCHAR(10), 
		USER_NAME					VARCHAR(20), 
		USER_TYPE					VARCHAR(20), 
		USER_CURRENT_TYPE_NM		VARCHAR(20),
        COLLECTOR_INFO				JSON
	);
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID, 
			CUR_RATING, 
			CUR_SITE_ID, 
			CUR_SITE_NAME, 
			CUR_CONTENTS, 
			CUR_CREATED_AT, 
			CUR_DISPOSER_ORDER_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
				
		INSERT INTO 
			TEMP_POST_LIST2(
			ID, 
			RATING, 
			SITE_ID, 
			SITE_NAME, 
			CONTENTS, 
			CREATED_AT, 
			DISPOSER_ORDER_ID
		) 
		VALUES(
			CUR_ID, 
			CUR_RATING, 
			CUR_SITE_ID, 
			CUR_SITE_NAME, 
			CUR_CONTENTS, 
            CUR_CREATED_AT,
			CUR_DISPOSER_ORDER_ID
		);  
        
        CALL sp_get_site_info_simple(
			CUR_SITE_ID,
            VAR_COLLECTOR_INFO
        );
        
		SELECT AVATAR_PATH, USER_NAME, USER_TYPE, USER_CURRENT_TYPE_NM
        INTO VAR_AVATAR_PATH, VAR_USER_NAME, VAR_USER_TYPE, VAR_USER_CURRENT_TYPE_NM 
        FROM V_USERS 
        WHERE ID = IN_USER_ID;	
        
        SELECT ORDER_CODE INTO VAR_DISPOSER_ORDER_CODE 
        FROM SITE_WSTE_DISPOSAL_ORDER 
        WHERE ID = CUR_DISPOSER_ORDER_ID;
        
        UPDATE TEMP_POST_LIST2 
        SET 
			AVATAR_PATH 			= VAR_AVATAR_PATH, 
            DISPOSER_ORDER_CODE 	= VAR_DISPOSER_ORDER_CODE, 
            USER_NAME 				= VAR_USER_NAME, 
            USER_CURRENT_TYPE_NM	= VAR_USER_CURRENT_TYPE_NM, 
            USER_TYPE				= VAR_USER_TYPE , 
            COLLECTOR_INFO			= VAR_COLLECTOR_INFO 
        WHERE ID = CUR_ID;
        

	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'						, ID, 
		'RATING'					, RATING, 
		'SITE_ID'					, SITE_ID, 
		'SITE_NAME'					, SITE_NAME, 
		'CONTENTS'					, CONTENTS, 
		'CREATED_AT'				, CREATED_AT, 
		'AVATAR_PATH'				, AVATAR_PATH, 
		'DISPOSER_ORDER_ID'			, DISPOSER_ORDER_ID, 
		'DISPOSER_ORDER_CODE'		, DISPOSER_ORDER_CODE, 
		'USER_NAME'					, USER_NAME, 
		'USER_TYPE'					, USER_TYPE, 
		'USER_CURRENT_TYPE_NM'		, USER_CURRENT_TYPE_NM, 
		'COLLECTOR_INFO'			, COLLECTOR_INFO
	)) 
	INTO json_data 
	FROM TEMP_POST_LIST2;
	
	SET rtn_val = 0;
	SET msg_txt = 'Success1';
    DROP TABLE IF EXISTS TEMP_POST_LIST2;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_get_notice`(
	IN IN_USER_ID				BIGINT
)
BEGIN
/*
Procedure Name 	: sp_req_get_notice
Input param 	: 1개
Job 			: 공지사항을 반환한다
Update 			: 2022.03.15
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/		
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;		

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다.*/
		CALL sp_req_get_notice_without_handler(
			IN_USER_ID,
			rtn_val,
			msg_txt,
			json_data
		);
		IF rtn_val > 0 THEN
		/*공지사항 반환에 실패한 경우 예외처리한다*/
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
		SET json_data = NULL;
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_get_notice_without_handler`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 게시판 소유자(COMP_SITE.ID)*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200),		/*출력값 : 처리결과 문자열*/
    OUT json_data 				json				/*출력값 : 포스팅 리스트*/
)
BEGIN

/*
Procedure Name 	: sp_req_get_notice_without_handler
Input param 	: 1개
Job 			: 공지사항을 반환한다.
Update 			: 2022.03.17
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/		

    DECLARE vRowCount 						INT DEFAULT 0;
    DECLARE endOfRow 						TINYINT DEFAULT FALSE;      
    DECLARE CUR_ID		 					BIGINT;
    DECLARE CUR_SUBJECTS	 				VARCHAR(255);
    DECLARE CUR_CONTENTS			 		TEXT;
    DECLARE CUR_CREATED_AT			 		DATETIME;    
    DECLARE TEMP_CURSOR 					CURSOR FOR 
    SELECT 
		POST_ID, 
        POST_SUBJECTS, 
        POST_CONTENTS, 
        POST_CREATED_AT
	FROM V_POSTS 
    WHERE 
        POST_CATEGORY_ID 	= 1  AND 
        POST_ACTIVE		 	= TRUE 
	ORDER BY POST_UPDATED_AT DESC /*LIMIT IN_OFFSET, IN_ITEMS*/;   
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;   
    
    SET json_data = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_NOTICE_LIST (
		POST_ID 						BIGINT, 
		POST_SUBJECTS 					VARCHAR(255), 
		POST_CONTENTS 					TEXT, 
		POST_CREATED_AT 				DATETIME
	);
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID, 
			CUR_SUBJECTS, 
			CUR_CONTENTS, 
			CUR_CREATED_AT;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
				
		INSERT INTO 
			TEMP_NOTICE_LIST(
			POST_ID, 
			POST_SUBJECTS, 
			POST_CONTENTS, 
			POST_CREATED_AT
		) 
		VALUES(
			CUR_ID, 
			CUR_SUBJECTS, 
			CUR_CONTENTS, 
			CUR_CREATED_AT
		);  

	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'POST_ID'						, POST_ID, 
		'POST_SUBJECTS'					, POST_SUBJECTS, 
		'POST_CONTENTS'					, POST_CONTENTS, 
		'POST_CREATED_AT'				, POST_CREATED_AT
	)) 
	INTO json_data 
	FROM TEMP_NOTICE_LIST;
	
	SET rtn_val = 0;
	SET msg_txt = 'Success';
    DROP TABLE IF EXISTS TEMP_NOTICE_LIST;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_get_posts`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 게시판 소유자(COMP_SITE.ID)*/
	IN IN_SITE_ID				BIGINT,				/*입력값 : 게시판 소유자(COMP_SITE.ID)*/
	IN IN_CATEGORY				INT				/*입력값 : 게시판 종류(POST_CATEGORY.ID)*/   
/*    IN IN_OFFSET				INT,*/				/*입력값 : 스킵할 아이템의 갯수*/
/*    IN IN_ITEMS					INT	*/				/*입력값 : 폐이지당 반환할 리스트의 개수*/
)
BEGIN
/*
Procedure Name 	: sp_req_get_posts
Input param 	: 5개
Job 			: 게시판 목록을 반환한다.
Update 			: 2022.02.23
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/			
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;		
    
    CALL sp_req_get_posts_without_handler(
		IN_SITE_ID,
		IN_CATEGORY,
/*		IN_OFFSET,
		IN_ITEMS,*/
		rtn_val,
		msg_txt,
		json_data
    );
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_get_posts_without_handler`(
	IN IN_SITE_ID				BIGINT,				/*입력값 : 게시판 소유자(COMP_SITE.ID)*/
	IN IN_CATEGORY				INT,				/*입력값 : 게시판 종류(1: 공지사항, 2: 업무게시판)*/    
/*    IN IN_OFFSET				INT,*/				/*입력값 : 스킵할 아이템의 갯수*/
/*    IN IN_ITEMS					INT,*/				/*입력값 : 폐이지당 반환할 리스트의 개수*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200),		/*출력값 : 처리결과 문자열*/
    OUT json_data 				json				/*출력값 : 포스팅 리스트*/
)
BEGIN

/*
Procedure Name 	: sp_req_get_posts
Input param 	: 5개
Job 			: 게시판 목록을 반환한다.
Update 			: 2022.02.16
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/		

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;      
    DECLARE CUR_ID		 						BIGINT;
    DECLARE CUR_SITE_ID			 				BIGINT;
    DECLARE CUR_SITE_NAME		 				VARCHAR(255);
    DECLARE CUR_CREATOR_ID			 			BIGINT;
    DECLARE CUR_CREATOR_NAME		 			VARCHAR(20);
    DECLARE CUR_SUBJECTS			 			VARCHAR(255);
    DECLARE CUR_CONTENTS			 			TEXT;
    DECLARE CUR_CATEGORY			 			INT;
    DECLARE CUR_CATEGORY_NAME		 			VARCHAR(45);
    DECLARE CUR_SUB_CATEGORY		 			INT;
    DECLARE CUR_SUB_CATEGORY_NAME	 			VARCHAR(45);
    DECLARE CUR_VISITORS			 			INT;
    DECLARE CUR_CREATED_AT			 			DATETIME;
    DECLARE CUR_UPDATED_AT			 			DATETIME;
    DECLARE CUR_RATING				 			FLOAT;
    DECLARE CUR_STATUS				 			TINYINT;
	DECLARE VAR_REPLY							JSON					DEFAULT NULL;
	DECLARE VAR_AVATAR_PATH						VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR 						CURSOR FOR 
    SELECT 
		POST_ID, 
        POST_SITE_ID, 
        POST_SITE_NAME, 
        POST_CREATOR_ID, 
        POST_CREATOR_NAME, 
        POST_SUBJECTS, 
        POST_CONTENTS, 
        POST_CATEGORY_ID, 
        POST_CATEGORY_NAME, 
        POST_SUB_CATEGORY_ID, 
        POST_SUB_CATEGORY_NAME, 
        POST_VISITORS, 
        POST_CREATED_AT, 
        POST_UPDATED_AT, 
        POST_RATING , 
        POST_STATUS 
	FROM V_POSTS 
    WHERE 
		POST_PID 			= 0 AND 
        POST_SITE_ID 		= IN_SITE_ID AND 
        POST_CATEGORY_ID 	= IN_CATEGORY  AND 
        POST_ACTIVE		 	= TRUE 
	ORDER BY POST_UPDATED_AT DESC /*LIMIT IN_OFFSET, IN_ITEMS*/;   
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;   
    
    SET json_data = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_POST_LIST (
		ID 					BIGINT, 
		SITE_ID 			BIGINT, 
		SITE_NAME 			VARCHAR(255), 
		CREATOR_ID 			BIGINT, 
		CREATOR_NAME 		VARCHAR(20), 
		SUBJECTS 			VARCHAR(255), 
		CONTENTS 			TEXT, 
		CATEGORY_ID 		INT, 
		CATEGORY_NAME 		VARCHAR(45), 
		SUB_CATEGORY_ID 	INT, 
		SUB_CATEGORY_NAME 	VARCHAR(45), 
		VISITORS 			INT, 
		CREATED_AT 			DATETIME, 
		UPDATED_AT 			DATETIME, 
		REPLY 				JSON, 
		RATING				FLOAT, 
		AVATAR_PATH			VARCHAR(255), 
		STATUS				TINYINT
	);
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID, 
			CUR_SITE_ID, 
			CUR_SITE_NAME, 
			CUR_CREATOR_ID, 
			CUR_CREATOR_NAME, 
			CUR_SUBJECTS, 
			CUR_CONTENTS, 
			CUR_CATEGORY, 
			CUR_CATEGORY_NAME, 
			CUR_SUB_CATEGORY, 
			CUR_SUB_CATEGORY_NAME, 
			CUR_VISITORS,  
			CUR_CREATED_AT, 
			CUR_UPDATED_AT, 
			CUR_RATING, 
			CUR_STATUS;   
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
				
		INSERT INTO 
		TEMP_POST_LIST(
			ID, 
			SITE_ID, 
			SITE_NAME, 
			CREATOR_ID, 
			CREATOR_NAME, 
			SUBJECTS, 
			CONTENTS, 
			CATEGORY_ID, 
			CATEGORY_NAME, 
			SUB_CATEGORY_ID, 
			SUB_CATEGORY_NAME, 
			VISITORS, 
			CREATED_AT, 
			UPDATED_AT, 
			RATING, 
			STATUS
		) 
		VALUES(
			CUR_ID, 
			CUR_SITE_ID, 
			CUR_SITE_NAME, 
			CUR_CREATOR_ID, 
			CUR_CREATOR_NAME, 
			CUR_SUBJECTS, 
			CUR_CONTENTS, 
			CUR_CATEGORY, 
			CUR_CATEGORY_NAME, 
			CUR_SUB_CATEGORY, 
			CUR_SUB_CATEGORY_NAME, 
			CUR_VISITORS, 
			CUR_CREATED_AT, 
			CUR_UPDATED_AT, 
			CUR_RATING, 
			CUR_STATUS
		);    

		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'ID'					, POST_ID, 
				'SITE_ID'				, POST_SITE_ID, 
				'SITE_NAME'				, POST_SITE_NAME, 
				'CREATOR_ID'			, POST_CREATOR_ID, 
				'CREATOR_NAME'			, POST_CREATOR_NAME, 
				'SUBJECTS'				, POST_SUBJECTS, 
				'CONTENTS'				, POST_CONTENTS, 
				'CATEGORY_ID'			, POST_CATEGORY_ID, 
				'CATEGORY_NAME'			, POST_CATEGORY_NAME, 
				'SUB_CATEGORY_ID'		, POST_SUB_CATEGORY_ID, 
				'SUB_CATEGORY_NAME'		, POST_SUB_CATEGORY_NAME, 
				'VISITORS'				, POST_VISITORS, 
				'CREATED_AT'			, POST_CREATED_AT, 
				'UPDATED_AT'			, POST_UPDATED_AT, 
				'RATING'				, POST_RATING
			)
		) 
		INTO VAR_REPLY 
		FROM V_POSTS 
		WHERE POST_PID = CUR_ID AND
			POST_ACTIVE = TRUE;   
			
		UPDATE TEMP_POST_LIST SET REPLY = VAR_REPLY WHERE ID = CUR_ID;   
        
        SELECT A.AVATAR_PATH INTO VAR_AVATAR_PATH FROM USERS A LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID WHERE A.AFFILIATED_SITE = CUR_SITE_ID AND A.CLASS = 201;

	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'					, ID, 
		'SITE_ID'				, SITE_ID, 
		'SITE_NAME'				, SITE_NAME, 
		'CREATOR_ID'			, CREATOR_ID, 
		'CREATOR_NAME'			, CREATOR_NAME, 
		'SUBJECTS'				, SUBJECTS, 
		'CONTENTS'				, CONTENTS, 
		'CATEGORY_ID'			, CATEGORY_ID, 
		'CATEGORY_NAME'			, CATEGORY_NAME, 
		'SUB_CATEGORY_ID'		, SUB_CATEGORY_ID, 
		'SUB_CATEGORY_NAME'		, SUB_CATEGORY_NAME, 
		'VISITORS'				, VISITORS, 
		'CREATED_AT'			, CREATED_AT, 
		'UPDATED_AT'			, UPDATED_AT, 
		'REPLY'					, REPLY, 
		'RATING'				, RATING, 
		'AVATAR_PATH'			, VAR_AVATAR_PATH, 
		'STATUS'				, STATUS
	)) 
	INTO json_data 
	FROM TEMP_POST_LIST;
	
	SET rtn_val = 0;
	SET msg_txt = 'Success';
    DROP TABLE IF EXISTS TEMP_POST_LIST;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_get_question_category`()
BEGIN		
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID', 							ID, 
			'QUEST_CATEGORY', 				CATEGORY_NAME
		) 
	)
	INTO json_data 
	FROM POST_SUB_CATEGORY
    WHERE PID = 3; 
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_get_question_without_handler`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 사용자 아이디(USERS.ID)*/
	IN IN_SITE_ID				BIGINT,				/*입력값 : 게시판 소유자(COMP_SITE.ID)*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200),		/*출력값 : 처리결과 문자열*/
    OUT json_data 				json				/*출력값 : 포스팅 리스트*/
)
BEGIN

/*
Procedure Name 	: sp_req_get_question_without_handler
Input param 	: 2개
Job 			: 문의사항 작성자가 자신이 작성한 문의사항 리스트를 반환한다
Update 			: 2022.02.16
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/		

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;      
    DECLARE CUR_ID		 						BIGINT;
    DECLARE CUR_SITE_ID			 				BIGINT;
    DECLARE CUR_SITE_NAME		 				VARCHAR(255);
    DECLARE CUR_CREATOR_ID			 			BIGINT;
    DECLARE CUR_CREATOR_NAME		 			VARCHAR(20);
    DECLARE CUR_CONTENTS			 			TEXT;
    DECLARE CUR_SUB_CATEGORY		 			INT;
    DECLARE CUR_SUB_CATEGORY_NAME	 			VARCHAR(45);
    DECLARE CUR_CREATED_AT			 			DATETIME;
    DECLARE CUR_UPDATED_AT			 			DATETIME;
    DECLARE CUR_STATUS				 			TINYINT;
	DECLARE VAR_REPLY							JSON					DEFAULT NULL;
	DECLARE VAR_AVATAR_PATH						VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR 						CURSOR FOR 
    SELECT 
		POST_ID, 
        POST_SITE_ID, 
        POST_SITE_NAME, 
        POST_CREATOR_ID, 
        POST_CREATOR_NAME, 
        POST_CONTENTS, 
        POST_SUB_CATEGORY_ID, 
        POST_SUB_CATEGORY_NAME, 
        POST_CREATED_AT, 
        POST_UPDATED_AT, 
        POST_STATUS 
	FROM V_POSTS 
    WHERE 
		POST_PID 			= 0 AND 
        POST_CREATOR_ID 	= IN_USER_ID AND 
        POST_SITE_ID 		= IN_SITE_ID  AND 
        POST_CATEGORY_ID	= 3 AND 
        POST_ACTIVE		 	= TRUE 
	ORDER BY POST_UPDATED_AT DESC /*LIMIT IN_OFFSET, IN_ITEMS*/;   
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;   
    
    SET json_data = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_QUESTION_LIST (
		ID 					BIGINT, 
		SITE_ID 			BIGINT, 
		SITE_NAME 			VARCHAR(255), 
		CREATOR_ID 			BIGINT, 
		CREATOR_NAME 		VARCHAR(20), 
		CONTENTS 			TEXT, 
		SUB_CATEGORY_ID 	INT, 
		SUB_CATEGORY_NAME 	VARCHAR(45), 
		CREATED_AT 			DATETIME, 
		UPDATED_AT 			DATETIME, 
		REPLY 				JSON, 
		AVATAR_PATH			VARCHAR(255), 
		STATUS				TINYINT
	);
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_ID, 
			CUR_SITE_ID, 
			CUR_SITE_NAME, 
			CUR_CREATOR_ID, 
			CUR_CREATOR_NAME, 
			CUR_CONTENTS, 
			CUR_SUB_CATEGORY, 
			CUR_SUB_CATEGORY_NAME, 
			CUR_CREATED_AT, 
			CUR_UPDATED_AT, 
			CUR_STATUS;   
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
				
		INSERT INTO 
		TEMP_QUESTION_LIST(
			ID, 
			SITE_ID, 
			SITE_NAME, 
			CREATOR_ID, 
			CREATOR_NAME, 
			CONTENTS, 
			SUB_CATEGORY_ID, 
			SUB_CATEGORY_NAME, 
			CREATED_AT, 
			UPDATED_AT, 
			STATUS
		) 
		VALUES(
			CUR_ID, 
			CUR_SITE_ID, 
			CUR_SITE_NAME, 
			CUR_CREATOR_ID, 
			CUR_CREATOR_NAME, 
			CUR_CONTENTS, 
			CUR_SUB_CATEGORY, 
			CUR_SUB_CATEGORY_NAME, 
			CUR_CREATED_AT, 
			CUR_UPDATED_AT, 
			CUR_STATUS
		);    

		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'ID'					, POST_ID, 
				'SITE_ID'				, POST_SITE_ID, 
				'SITE_NAME'				, POST_SITE_NAME, 
				'CREATOR_ID'			, POST_CREATOR_ID, 
				'CREATOR_NAME'			, POST_CREATOR_NAME, 
				'CONTENTS'				, POST_CONTENTS, 
				'SUB_CATEGORY_ID'		, POST_SUB_CATEGORY_ID, 
				'SUB_CATEGORY_NAME'		, POST_SUB_CATEGORY_NAME, 
				'CREATED_AT'			, POST_CREATED_AT, 
				'UPDATED_AT'			, POST_UPDATED_AT
			)
		) 
		INTO VAR_REPLY 
		FROM V_POSTS 
		WHERE POST_PID = CUR_ID AND
			POST_ACTIVE = TRUE;   
			
		UPDATE TEMP_QUESTION_LIST SET REPLY = VAR_REPLY WHERE ID = CUR_ID;   
        
        SELECT AVATAR_PATH INTO VAR_AVATAR_PATH FROM USERS WHERE ID = IN_USER_ID;

	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ID'					, ID, 
		'SITE_ID'				, SITE_ID, 
		'SITE_NAME'				, SITE_NAME, 
		'CREATOR_ID'			, CREATOR_ID, 
		'CREATOR_NAME'			, CREATOR_NAME, 
		'CONTENTS'				, CONTENTS, 
		'SUB_CATEGORY_ID'		, SUB_CATEGORY_ID, 
		'SUB_CATEGORY_NAME'		, SUB_CATEGORY_NAME, 
		'CREATED_AT'			, CREATED_AT, 
		'UPDATED_AT'			, UPDATED_AT, 
		'REPLY'					, REPLY, 
		'AVATAR_PATH'			, VAR_AVATAR_PATH, 
		'STATUS'				, STATUS
	)) 
	INTO json_data 
	FROM TEMP_QUESTION_LIST;
	
	SET rtn_val = 0;
	SET msg_txt = 'Success';
    DROP TABLE IF EXISTS TEMP_QUESTION_LIST;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_get_site_reviews_without_handler`(
	IN IN_SITE_ID				BIGINT,				/*입력값 : 게시판 소유자(COMP_SITE.ID)*/
	OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
	OUT msg_txt 				VARCHAR(200),		/*출력값 : 처리결과 문자열*/
	OUT avg_rating 				FLOAT,				/*출력값 : 평점평균*/
	OUT json_data 				json				/*출력값 : 포스팅 리스트*/
)
BEGIN

/*
Procedure Name 	: sp_req_get_site_reviews_without_handler
Input param 	: 1개
Job 			: 사이트별 리뷰 리스트를 반환한다.
Update 			: 2022.03.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/		

    DECLARE vReviewCount						INT 					DEFAULT 0;
    DECLARE endOfReviewRow 						TINYINT 				DEFAULT FALSE;      
    DECLARE CUR_ID		 						BIGINT;
    DECLARE CUR_CREATOR_ID 						BIGINT;
    DECLARE CUR_RATING				 			FLOAT;
    DECLARE CUR_SITE_ID		 					BIGINT;
    DECLARE CUR_SITE_NAME		 				VARCHAR(255);
    DECLARE CUR_CONTENTS			 			TEXT;
    DECLARE CUR_CREATED_AT			 			DATETIME;
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;    
	DECLARE VAR_REVIEW_COUNT					INT						DEFAULT 0; 
	DECLARE VAR_AVG_RATING						FLOAT					DEFAULT 0;
	DECLARE VAR_AVATAR_PATH						VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_USER_NAME						VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_USER_TYPE						VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_USER_CURRENT_TYPE_NM			VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_DISPOSER_ORDER_CODE				VARCHAR(10)				DEFAULT NULL;
	DECLARE VAR_REPLY							JSON					DEFAULT NULL;
    DECLARE TEMP_REVIEW_CURSOR 					CURSOR FOR 
    SELECT 
		POST_ID, 
		POST_CREATOR_ID, 
        POST_RATING, 
        POST_SITE_ID, 
        POST_SITE_NAME, 
        POST_CONTENTS, 
        POST_CREATED_AT, 
        POST_DISPOSER_ORDER_ID
	FROM V_POSTS 
    WHERE 
        POST_SITE_ID 		= IN_SITE_ID AND 
        POST_CATEGORY_ID 	= 4  AND 
        POST_PID 			= 0  AND 
        POST_ACTIVE		 	= TRUE  AND 
        POST_DELETED		= FALSE 
	ORDER BY POST_UPDATED_AT DESC /*LIMIT IN_OFFSET, IN_ITEMS*/;   
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfReviewRow = TRUE;   
    
    SELECT COUNT(POST_ID) INTO VAR_REVIEW_COUNT FROM V_POSTS 
    WHERE 
        POST_SITE_ID 		= IN_SITE_ID AND 
        POST_CATEGORY_ID 	= 4  AND 
        POST_ACTIVE		 	= TRUE AND 
        POST_DELETED	 	= FALSE;
    
    IF VAR_REVIEW_COUNT > 0 THEN
		SELECT AVG(POST_RATING) INTO VAR_AVG_RATING FROM V_POSTS 
		WHERE 
			POST_SITE_ID 	= IN_SITE_ID AND 
			POST_CATEGORY_ID 	= 4  AND 
			POST_ACTIVE		 	= TRUE  AND 
			POST_DELETED	 	= FALSE;
		
		SET json_data = NULL;
		CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_POST_LIST2 (
			ID 							BIGINT, 
			CREATOR_ID					BIGINT, 
			RATING						FLOAT, 
			SITE_ID						BIGINT, 
			SITE_NAME 					VARCHAR(255), 
			CONTENTS 					TEXT, 
			CREATED_AT 					DATETIME, 
			AVATAR_PATH 				VARCHAR(255), 
			DISPOSER_ORDER_ID			BIGINT, 
			DISPOSER_ORDER_CODE			VARCHAR(10), 
			USER_NAME					VARCHAR(20), 
			USER_TYPE					VARCHAR(20), 
			USER_CURRENT_TYPE_NM		VARCHAR(20),
			REPLY						JSON
		);
		
		OPEN TEMP_REVIEW_CURSOR;	
		cloop: LOOP
			FETCH TEMP_REVIEW_CURSOR 
			INTO 
				CUR_ID, 
				CUR_CREATOR_ID,
				CUR_RATING, 
				CUR_SITE_ID, 
				CUR_SITE_NAME, 
				CUR_CONTENTS, 
				CUR_CREATED_AT, 
				CUR_DISPOSER_ORDER_ID;
			
			SET vReviewCount = vReviewCount + 1;
			IF endOfReviewRow THEN
				LEAVE cloop;
			END IF;
					
			INSERT INTO 
				TEMP_POST_LIST2(
				ID, 
				CREATOR_ID, 
				RATING, 
				SITE_ID, 
				SITE_NAME, 
				CONTENTS, 
				CREATED_AT, 
				DISPOSER_ORDER_ID
			) 
			VALUES(
				CUR_ID, 
				CUR_CREATOR_ID, 
				CUR_RATING, 
				CUR_SITE_ID, 
				CUR_SITE_NAME, 
				CUR_CONTENTS, 
				CUR_CREATED_AT,
				CUR_DISPOSER_ORDER_ID
			);  
			
			SELECT AVATAR_PATH, USER_NAME, USER_TYPE, USER_CURRENT_TYPE_NM
			INTO VAR_AVATAR_PATH, VAR_USER_NAME, VAR_USER_TYPE, VAR_USER_CURRENT_TYPE_NM 
			FROM V_USERS 
			WHERE ID = CUR_CREATOR_ID;	
			
			SELECT ORDER_CODE INTO VAR_DISPOSER_ORDER_CODE 
			FROM SITE_WSTE_DISPOSAL_ORDER 
			WHERE ID = CUR_DISPOSER_ORDER_ID;  

			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'ID'					, POST_ID, 
					'SITE_ID'				, POST_SITE_ID, 
					'SITE_NAME'				, POST_SITE_NAME, 
					'CREATOR_ID'			, POST_CREATOR_ID, 
					'CREATOR_NAME'			, POST_CREATOR_NAME, 
					'SUBJECTS'				, POST_SUBJECTS, 
					'CONTENTS'				, POST_CONTENTS, 
					'CATEGORY_ID'			, POST_CATEGORY_ID, 
					'CATEGORY_NAME'			, POST_CATEGORY_NAME, 
					'SUB_CATEGORY_ID'		, POST_SUB_CATEGORY_ID, 
					'SUB_CATEGORY_NAME'		, POST_SUB_CATEGORY_NAME, 
					'VISITORS'				, POST_VISITORS, 
					'CREATED_AT'			, POST_CREATED_AT, 
					'UPDATED_AT'			, POST_UPDATED_AT, 
					'RATING'				, POST_RATING
				)
			) 
			INTO VAR_REPLY 
			FROM V_POSTS 
			WHERE POST_PID = CUR_ID AND
				POST_ACTIVE = TRUE AND
				POST_DELETED = FALSE;   
			
			UPDATE TEMP_POST_LIST2 
			SET 
				AVATAR_PATH 			= VAR_AVATAR_PATH, 
				DISPOSER_ORDER_CODE 	= VAR_DISPOSER_ORDER_CODE, 
				USER_NAME 				= VAR_USER_NAME, 
				USER_CURRENT_TYPE_NM	= VAR_USER_CURRENT_TYPE_NM, 
				USER_TYPE				= VAR_USER_TYPE, 
				REPLY					= VAR_REPLY
			WHERE ID = CUR_ID;
			

		END LOOP;   
		CLOSE TEMP_REVIEW_CURSOR;
		
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'ID'						, ID, 
			'CREATOR_ID'				, CREATOR_ID, 
			'RATING'					, RATING, 
			'SITE_ID'					, SITE_ID, 
			'SITE_NAME'					, SITE_NAME, 
			'CONTENTS'					, CONTENTS, 
			'CREATED_AT'				, CREATED_AT, 
			'AVATAR_PATH'				, AVATAR_PATH, 
			'DISPOSER_ORDER_ID'			, DISPOSER_ORDER_ID, 
			'DISPOSER_ORDER_CODE'		, DISPOSER_ORDER_CODE, 
			'USER_NAME'					, USER_NAME, 
			'USER_TYPE'					, USER_TYPE, 
			'USER_CURRENT_TYPE_NM'		, USER_CURRENT_TYPE_NM, 
			'REPLY'						, REPLY
		)) 
		INTO json_data 
		FROM TEMP_POST_LIST2;
		
		SET avg_rating = VAR_AVG_RATING;
		SET rtn_val = 0;
		SET msg_txt = 'Success1';
		DROP TABLE IF EXISTS TEMP_POST_LIST2;
    ELSE
		SET avg_rating = NULL;
		SET json_data = NULL;
		SET rtn_val = 0;
		SET msg_txt = 'Success1';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_get_user_current_type`(
	IN IN_USER_ID				BIGINT,
    OUT OUT_USER_CURRENT_TYPE	INT
)
BEGIN          
	SELECT USER_CURRENT_TYPE INTO OUT_USER_CURRENT_TYPE
	FROM USERS WHERE ID = IN_USER_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_have_bidding_record`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,				/*입력값 : 배출자의 폐기물 배출신청 번호(SITE_WSTE_DISPOSAL_ORDER.ID)*/
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_have_bidding_record
Input param 	: 1개
Job 			: 입찰한 내역이 존재하는지 검사한 후 입찰사실이 있다면 0, 그렇지 않으면 예외처리한다.
Update 			: 2022.02.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/		
	DECLARE VAR_COUNT_BIDDING					INT						DEFAULT 0; 

	SELECT COUNT(ID) INTO VAR_COUNT_BIDDING FROM COLLECTOR_BIDDING WHERE DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND ACTIVE = TRUE;
    IF VAR_COUNT_BIDDING > 0 THEN
    /*수거자가 입찰한 기록이 존재하는 경우 정상처리한다.*/
		SET rtn_val = 0;
		SET msg_txt = 'success'; 
    ELSE
    /*수거자가 입찰한 기록이 존재하지 않는 경우 예외처리한다.*/
		SET rtn_val = 31301;
		SET msg_txt = 'No bidding record'; 
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_bidding_schedule_close_early`(
	IN IN_DISPOSER_ORDER_ID					BIGINT,
    OUT rtn_val 							INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 							VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_is_bidding_schedule_close_early
Input param 	: 1개
Output param 	: 2개
Job 			: 배출자의 일정 중에 입찰마감일정이 조기마감되 않은 경우 0, 그렇지 않으면 예외처리코드를 반환한다.
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.2)
*/
	DECLARE VAR_BIDDING_EARLY_CLOSING			TINYINT					DEFAULT 0; 

	SELECT BIDDING_EARLY_CLOSING 
    INTO VAR_BIDDING_EARLY_CLOSING 
    FROM SITE_WSTE_DISPOSAL_ORDER 
    WHERE ID = IN_DISPOSER_ORDER_ID;
    
    IF VAR_BIDDING_EARLY_CLOSING IS NULL THEN
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
		IF VAR_BIDDING_EARLY_CLOSING = FALSE THEN
		/*입찰마감일정이 조기마감되지 않은 경우*/
			SET rtn_val = 0;
			SET msg_txt = 'Success';
		ELSE
		/*입찰마감일정이 조기마감된 경우*/
			SET rtn_val = 26801;
			SET msg_txt = 'The bidding schedule has ended early';
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_biz_reg_code_duplicate`(
	IN IN_BIZ_REG_CODE		VARCHAR(12)				/*입력값 : 사업자등록번호*/
)
BEGIN

/*
Procedure Name 	: sp_req_is_biz_reg_code_duplicate
Input param 	: 1개
Job 			: INPUT PARAM으로 들어온 사업자등록번호가 중복되었는지 확인한 후 중복되었으면 1, 그렇지 않으면 0을 반환함
Creation		: 2022.01.16
Update 			: 2022.01.30
Version			: 0.0.3
AUTHOR 			: Leo Nam
Change			: 처리결과 코드 및 문자열 반환기능 추가(0.0.2)
*/		
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_IS_DUPLICATED					INT						DEFAULT 0;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;  
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	SELECT COUNT(ID)
	INTO VAR_IS_DUPLICATED 
	FROM COMPANY 
	WHERE BIZ_REG_CODE = IN_BIZ_REG_CODE;
    
	IF VAR_IS_DUPLICATED >= 1 THEN
/*		SELECT ID 
        INTO @ID 
        FROM COMPANY 
        WHERE BIZ_REG_CODE = IN_BIZ_REG_CODE;
        
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'ID', @ID,
			'BIZ_REG_CODE', IN_BIZ_REG_CODE
		)) INTO json_data;
*/
		SET json_data 		= NULL;
		SET rtn_val 		= 21601;
		SET msg_txt 		= 'Business registration code already exists';
	ELSE
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'ID', NULL,
			'BIZ_REG_CODE', IN_BIZ_REG_CODE
		)) INTO json_data;
	END IF;
    
    COMMIT;
    CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_disposal_order_prev_transaction`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,			/*입력값 : SITE_WSTE_DISPOSAL_ORDER.ID*/
    OUT OUT_WHOSE_TRANSACTION			BIGINT			/*출력값 : 이 배출오더가 기존거래인 경우에는 배출자가 지정한 COLLECTOR_ID가 반환되고 그렇지 않으면 NULL이 반환됨*/
)
BEGIN

/*
Procedure Name 	: sp_req_is_disposal_order_prev_transaction
Input param 	: 1개
Output param 	: 1개
Job 			: 이 배출오더가 기존거래인 경우에는 배출자가 지정한 COLLECTOR_ID가 반환되고 그렇지 않으면 NULL이 반환됨
Update 			: 2022.01.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT COLLECTOR_ID INTO @COLLECTOR_ID FROM SITE_WSTE_DISPOSAL_ORDER WHERE ID = IN_DISPOSAL_ORDER_ID;
    
    IF @COLLECTOR_ID IS NULL THEN
		SET OUT_WHOSE_TRANSACTION = NULL;
    ELSE
		SET OUT_WHOSE_TRANSACTION = @COLLECTOR_ID;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_phone_number_duplicate`(
	IN IN_PHONE			VARCHAR(20)			/*입력값: 체크할 전화번호*/
)
BEGIN

/*
Procedure Name 	: sp_req_use_same_phone
Input param 	: 3개
Job 			: 등록하고자 하는 휴대폰번호의 이중등록여부 검사(이중등록이 아닌 경우 0 반환)
Update 			: 2022.03.10
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/	
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  

	SELECT COUNT(ID) INTO VAR_CHK_COUNT 
	FROM USERS 
	WHERE 
		PHONE = IN_PHONE AND 
		ACTIVE = TRUE;
	
    IF VAR_CHK_COUNT = 0 THEN
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PHONE_NUMBER', NULL
		)) INTO json_data;
    ELSE
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'PHONE_NUMBER', IN_PHONE
		)) INTO json_data;
		SET rtn_val = 32501;
		SET msg_txt = 'phone number is duplicated';
    END IF;
    
	COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_site_collector`(
	IN IN_SITE_ID					BIGINT,				/*사이트의 고유등록번호(COMP_SITE.ID)*/
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_is_site_collector
Input param 	: 1개
Output param 	: 1개
Job 			: 사이트가 수집운반업자 등인 경우에는 TRUE를 반환하고 그렇지 않은 경우에는 FALSE를 반환한다.
Update 			: 2022.01.24
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_PERMIT_REG_CODE					VARCHAR(100)			DEFAULT NULL;
	DECLARE VAR_PERMIT_REG_IMG_PATH				VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_LICENSE_CONFIRMED				TINYINT					DEFAULT FALSE;

	SELECT PERMIT_REG_CODE, PERMIT_REG_IMG_PATH, LICENSE_CONFIRMED 
    INTO VAR_PERMIT_REG_CODE, VAR_PERMIT_REG_IMG_PATH, VAR_LICENSE_CONFIRMED
    FROM COMP_SITE 
    WHERE ID = IN_SITE_ID;
    IF VAR_PERMIT_REG_IMG_PATH IS NOT NULL THEN
		IF VAR_LICENSE_CONFIRMED = TRUE THEN
			SET rtn_val = 0;
			SET msg_txt = 'Success';
		ELSE
			SET rtn_val = 29703;
			SET msg_txt = 'collector license is not confirmed';
		END IF;
    ELSE
		SET rtn_val = 29702;
		SET msg_txt = 'collector license image file does not exist';
    END IF;
/*    
    IF VAR_PERMIT_REG_IMG_PATH IS NOT NULL THEN
		IF VAR_PERMIT_REG_CODE IS NOT NULL THEN
			IF VAR_LICENSE_CONFIRMED = TRUE THEN
				SET rtn_val = 0;
				SET msg_txt = 'Success';
			ELSE
				SET rtn_val = 29703;
				SET msg_txt = 'collector license is not confirmed';
			END IF;
		ELSE
			SET rtn_val = 29701;
			SET msg_txt = 'The site does not have the collector license';
		END IF;
    ELSE
		SET rtn_val = 29702;
		SET msg_txt = 'collector license image file does not exist';
    END IF;
*/
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_site_final_bidder`(
	IN IN_SITE_ID					BIGINT,				/*입력값 : 입찰 고유등록번호(COMP_SITE.ID)*/
    OUT OUT_IS_SITE_FINAL_BIDDER	TINYINT				/*출력값 : 처리결과 반환값*/   
)
BEGIN

/*
Procedure Name 	: sp_req_is_site_final_bidder
Input param 	: 1개
Output param 	: 1개
Job 			: 사이트가 최종 낙찰자로 배출자로부터 선택을 받았는지 여부 반환
Update 			: 2022.01.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;

	SELECT COUNT(ID) 
    INTO VAR_CHK_COUNT 
    FROM COLLECTOR_BIDDING
    WHERE 
		COLLECTOR_ID = IN_SITE_ID AND 
        SELECTED = TRUE;
    IF VAR_CHK_COUNT = 0 THEN
		SET OUT_IS_SITE_FINAL_BIDDER = FALSE;
    ELSE
		SET OUT_IS_SITE_FINAL_BIDDER = TRUE;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_site_head_office`(
	IN IN_SITE_ID		BIGINT,
    OUT OUT_PARAM		TINYINT
)
BEGIN

/*
Procedure Name 	: sp_req_is_site_head_office
Input param 	: 1개
Output param 	: 1개
Job 			: 입력 param의 IN_SITE_ID를 사이트 고유등록번호로 사용하는 사이트가 존재하는지 여부 반환
Update 			: 2022.01.15
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT HEAD_OFFICE
	INTO OUT_PARAM 
	FROM COMP_SITE 
	WHERE ID 	= IN_SITE_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_user_collector`(
	IN IN_USER_ID					BIGINT,				/*사용자의 고유등록번호(USERS.ID)*/
    OUT rtn_val 					INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_is_user_collector
Input param 	: 1개
Output param 	: 2개
Job 			: 사용자가 소속한 사이트가 수집운반업자 등인 경우에는 0를 반환하고 그렇지 않은 경우에는 예외코드를 반환한다.
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.2)
*/
	DECLARE VAR_TRMT_BIZ_CODE					VARCHAR(4)				DEFAULT NULL;

	SELECT TRMT_BIZ_CODE INTO VAR_TRMT_BIZ_CODE FROM V_USERS WHERE ID = IN_USER_ID;
    IF VAR_TRMT_BIZ_CODE IS NOT NULL THEN
		IF CAST(VAR_TRMT_BIZ_CODE AS UNSIGNED) < 9 THEN
			SET rtn_val = 0;
            SET msg_txt = 'Success987';
		ELSE
			SET rtn_val = 26301;
            SET msg_txt = 'User is not a manager belonging to the collector';
		END IF;
    ELSE
		SET rtn_val = 26302;
		SET msg_txt = 'The site does not exist or the waste disposal code is invalid';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_userid_duplicate`(
	IN IN_USER_REG_ID		VARCHAR(50)
)
BEGIN

/*
Procedure Name 	: sp_req_is_userid_duplicate
Input param 	: 1개
Job 			: INPUT PARAM으로 들어온 사용자 아이디가 중복되었는지 확인한 후 중복되었으면 0, 그렇지 않으면 예외처리코드를 반환함1
Update 			: 2022.01.30
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_USER_REG_ID						VARCHAR(50)				DEFAULT NULL;
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
    
	SET VAR_USER_REG_ID = IN_USER_REG_ID;
	SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM USERS WHERE USER_ID = VAR_USER_REG_ID;
    
    IF VAR_CHK_COUNT > 0 THEN
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'UID'			, ID
		)) 
		INTO json_data FROM USERS
		WHERE USER_ID = VAR_USER_REG_ID;
		SET rtn_val 		= 29401;
		SET msg_txt 		= 'User ID already exists';
    END IF;
    
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_visit_reqeust_rejected`(
	IN IN_COLLECTOR_SITE_ID					BIGINT,
    IN IN_DISPOSER_ORDER_ID					BIGINT,
    OUT rtn_val 							INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 							VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_is_visit_reqeust_rejected
Input param 	: 2개
Output param 	: 2개
Job 			: 수거자가 배출자로부터 방문신청에 대한 거절이 있었다면 0, 그렇지 않으면 예외처리코드를 반환한다.
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.2)
*/

	SELECT RESPONSE_VISIT 
    INTO @RESPONSE_VISIT 
    FROM COLLECTOR_BIDDING 
    WHERE 
		COLLECTOR_ID = IN_COLLECTOR_SITE_ID AND 
        DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND 
        RESPONSE_VISIT_AT IS NOT NULL;
        
	IF @RESPONSE_VISIT IS NOT NULL THEN
		IF @RESPONSE_VISIT = FALSE THEN
		/*방문거절을 당한 경우*/
			SET rtn_val = 26901;
			SET msg_txt = 'No refusal to visit';
		ELSE
		/*방문거절이 아닌 경우*/
			SET rtn_val = 0;
			SET msg_txt = 'Success';
		END IF;
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_visit_request_already_not_canceled`(
	IN IN_COLLECTOR_BIDDING_ID				BIGINT,
    IN IN_DISPOSER_ORDER_ID					BIGINT,
    OUT rtn_val 							INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 							VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_is_visit_request_already_not_canceled
Input param 	: 2개
Output param 	: 2개
Job 			: 수거자가 자신이 신청한 방문신청에 대하여 취소한 사실이 있는지 검사하여 취소한 사실이 있다면 0, 그렇지 않으면 예외처리한다.
Update 			: 2022.03.02
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_CANCEL_VISIT					TINYINT					DEFAULT FALSE;

	SELECT CANCEL_VISIT 
    INTO VAR_CANCEL_VISIT 
    FROM COLLECTOR_BIDDING 
    WHERE 
		ID = IN_COLLECTOR_BIDDING_ID AND 
        DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID;
        
	IF VAR_CANCEL_VISIT = FALSE THEN
	/*방문신청을 취소한 사실이 없는 경우*/
		SET rtn_val = 0;
		SET msg_txt = 'Success';
	ELSE
	/*방문신청을 취소한 사실이 있는 경우*/
		SET rtn_val = 31401;
		SET msg_txt = 'The visit request has already been canceled';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_visit_request_rejected`(
	IN IN_COLLECTOR_BIDDING_ID				BIGINT,
    IN IN_DISPOSER_ORDER_ID					BIGINT,
    OUT rtn_val 							INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 							VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_is_visit_reqeust_rejected
Input param 	: 2개
Output param 	: 2개
Job 			: 수거자가 배출자로부터 방문신청에 대한 거절이 있었다면 0, 그렇지 않으면 예외처리코드를 반환한다.
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.2)
*/
	DECLARE VAR_RESPONSE_VISIT					TINYINT					DEFAULT FALSE;

	SELECT RESPONSE_VISIT 
    INTO VAR_RESPONSE_VISIT 
    FROM COLLECTOR_BIDDING 
    WHERE 
		ID = IN_COLLECTOR_BIDDING_ID AND 
        DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND 
        RESPONSE_VISIT_AT IS NOT NULL;
        
	IF VAR_RESPONSE_VISIT IS NOT NULL THEN
		IF VAR_RESPONSE_VISIT = FALSE THEN
		/*방문거절을 당한 경우*/
			SET rtn_val = 26901;
			SET msg_txt = 'No refusal to visit';
		ELSE
		/*방문거절이 아닌 경우*/
			SET rtn_val = 0;
			SET msg_txt = 'Success';
		END IF;
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_is_visit_schedule_close_early`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    OUT rtn_val 					INT,						/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_is_visit_schedule_close_early
Input param 	: 1개
Output param 	: 1개
Job 			: 배출자의 일정 중에 방문일정이 조기마감되었는지 여부를 반환한다.
Update 			: 2022.01.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_VISIT_EARLY_CLOSING				TINYINT					DEFAULT FALSE;

	SELECT VISIT_EARLY_CLOSING 
    INTO VAR_VISIT_EARLY_CLOSING 
    FROM SITE_WSTE_DISPOSAL_ORDER 
    WHERE ID = IN_DISPOSER_ORDER_ID;
    
    IF VAR_VISIT_EARLY_CLOSING IS NULL THEN
    /*조기마감되지 않은 상태*/
		SET rtn_val 		= 0;
		SET msg_txt 		= 'Success123';
    ELSE
    /*VAR_VISIT_EARLY_CLOSING이 NULL값이 아니라면*/
		IF VAR_VISIT_EARLY_CLOSING = FALSE THEN
		/*방문이 조기마감이 되지 않은 경우*/
			SET rtn_val 		= 0;
			SET msg_txt 		= 'Success234';
		ELSE
		/*방문이 조기마감된 경우*/
			SET rtn_val 		= 29501;
			SET msg_txt 		= 'Visit schedule has ended early';
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_last_bidder_set_bidding_end_date_now`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    IN IN_COLLECTOR_BIDDING_ID		BIGINT,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN
    CALL sp_req_current_time(@REG_DT);
    
    SELECT COUNT(ID) INTO @ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID = IN_DISPOSER_ORDER_ID AND 
        ACTIVE = TRUE AND
        IS_DELETED = FALSE;
	IF @ORDER_EXISTS = 1 THEN
		SELECT DATE_OF_BIDDING INTO @ALREADY_BID
        FROM COLLECTOR_BIDDING
        WHERE ID = IN_COLLECTOR_BIDDING_ID;
        IF @ALREADY_BID IS NOT NULL THEN
        /*이미 입찰한 사람인 경우*/
			SET rtn_val = 0;
			SET msg_txt = 'success';
        ELSE
        /*아직 입찰하지 않은 사람인 경우*/
			SELECT PROSPECTIVE_BIDDERS INTO @PROSPECTIVE_BIDDERS
			FROM SITE_WSTE_DISPOSAL_ORDER
			WHERE ID = IN_DISPOSER_ORDER_ID;
			IF @PROSPECTIVE_BIDDERS = 1 THEN
				SELECT DISPOSAL_ORDER_ID INTO @BIDDING_ORDER_ID
				FROM COLLECTOR_BIDDING
				WHERE ID = IN_COLLECTOR_BIDDING_ID;
				IF @BIDDING_ORDER_ID = IN_DISPOSER_ORDER_ID THEN                
					UPDATE SITE_WSTE_DISPOSAL_ORDER
					SET BIDDING_END_AT = @REG_DT
					WHERE ID = IN_DISPOSER_ORDER_ID;
					IF ROW_COUNT() = 1 THEN
						SET rtn_val = 0;
						SET msg_txt = 'success';
					ELSE
						SET rtn_val = 38504;
						SET msg_txt = 'bidding failed to set bidding end date now';
					END IF;
				ELSE
					SET rtn_val = 38503;
					SET msg_txt = 'bidding does not belong to the order';
				END IF;
			ELSE
				SET rtn_val = 0;
				SET msg_txt = 'success';
			END IF;
        END IF;
    ELSE
		SET rtn_val = 38501;
		SET msg_txt = 'order does not exist';
    END IF;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_last_bidder_set_bidding_end_date_now_for_bidding`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    IN IN_COLLECTOR_BIDDING_ID		BIGINT,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;
	DECLARE VAR_ORDER_EXISTS					INT						DEFAULT 0;
    
    CALL sp_req_current_time(VAR_REG_DT);
    
    SELECT COUNT(ID) INTO VAR_ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID = IN_DISPOSER_ORDER_ID AND 
        ACTIVE = TRUE AND
        IS_DELETED = FALSE;
	IF VAR_ORDER_EXISTS = 1 THEN
		CALL sp_set_bidding_end_at(
			IN_DISPOSER_ORDER_ID,
            IN_COLLECTOR_BIDDING_ID,
            VAR_REG_DT,
			rtn_val,
            msg_txt
        );
    ELSE
		SET rtn_val = 38501;
		SET msg_txt = 'order does not exist';
    END IF;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_last_bidder_set_bidding_end_date_now_for_cancel`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    IN IN_COLLECTOR_BIDDING_ID		BIGINT,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;
	DECLARE VAR_ORDER_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_ALREADY_BID						DATETIME				DEFAULT NULL;
    
    CALL sp_req_current_time(VAR_REG_DT);
    
    SELECT COUNT(ID) INTO VAR_ORDER_EXISTS
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE 
		ID = IN_DISPOSER_ORDER_ID AND 
        ACTIVE = TRUE AND
        IS_DELETED = FALSE;
	IF VAR_ORDER_EXISTS = 1 THEN
		SELECT DATE_OF_BIDDING INTO VAR_ALREADY_BID
        FROM COLLECTOR_BIDDING
        WHERE ID = IN_COLLECTOR_BIDDING_ID;
        IF VAR_ALREADY_BID IS NOT NULL THEN
        /*이미 입찰한 사람인 경우*/
			SET rtn_val = 0;
			SET msg_txt = 'success';
        ELSE
        /*아직 입찰하지 않은 사람인 경우*/
			CALL sp_set_bidding_end_at(
				IN_DISPOSER_ORDER_ID,
				IN_COLLECTOR_BIDDING_ID,
				VAR_REG_DT,
				rtn_val,
				msg_txt
			);
        END IF;
    ELSE
		SET rtn_val = 39101;
		SET msg_txt = 'order does not exist';
    END IF;


END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_last_trigger`()
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'				, ID, 
			'TABLE_NM'			, TABLE_NM, 
			'EVENT'				, EVENT, 
			'CREATED_AT'		, CREATED_AT
		)
	) 
	INTO json_data 
	FROM TRIGGER_TABLE 
	WHERE 
		ID IN (SELECT MAX(ID) FROM TRIGGER_TABLE);
        
	SET rtn_val = 0;
	SET msg_txt = 'Success';
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_manager_exists_in_company`(
	IN IN_COMP_ID		BIGINT,
	IN IN_CLASS			INT,
    OUT OUT_PARAM		INT
)
BEGIN

/*
Procedure Name 	: sp_req_manager_exists_in_company
Input param 	: 1개
Output param 	: 1개
Job 			: IN_COMP_ID의 등록번호를 가진 사업자를 관리하는 magager.admin:201이 존재하는지 체크한후 존재한다면 1, 그렇지 않으면 0을 반환함
Update 			: 2022.01.06
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT COUNT(ID) INTO OUT_PARAM FROM USERS WHERE BELONG_TO = IN_COMP_ID AND CLASS = IN_CLASS;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_manager_exists_in_site`(
	IN IN_SITE_ID		BIGINT,
	IN IN_CLASS			INT,
    OUT OUT_PARAM		INT
)
BEGIN

/*
Procedure Name 	: sp_req_manager_exists_in_site
Input param 	: 1개
Output param 	: 1개
Job 			: IN_SITE_ID의 등록번호를 가진 사이트를 관리하는 magager.admin:201이 존재하는지 체크한후 존재한다면 1, 그렇지 않으면 0을 반환함
Update 			: 2022.01.15
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT COUNT(ID) INTO OUT_PARAM FROM USERS WHERE AFFILIATED_SITE = IN_SITE_ID AND CLASS = IN_CLASS;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_order_details_102`(
	IN IN_ORDER_ID				BIGINT,
    OUT OUT_DETAILS				JSON
)
BEGIN

    DECLARE vRowCount 								INT DEFAULT 0;
    DECLARE endOfRow 								TINYINT DEFAULT FALSE;    
    DECLARE CUR_COLLECTOR_SITE_ID					BIGINT;
    DECLARE CUR_COLLECTOR_SITE_NAME					VARCHAR(255);  
    DECLARE CUR_COLLECTOR_TRMT_BIZ_CODE				VARCHAR(4);    
    DECLARE CUR_COLLECTOR_TRMT_BIZ_NAME				VARCHAR(255);    
    DECLARE CUR_RESPONSE_VISIT						TINYINT;
    DECLARE CUR_AVATAR_PATH							VARCHAR(255);  
    DECLARE CUR_COLLECTOR_BIDDING_ID				BIGINT; 
    DECLARE VAR_STATE_CODE							INT DEFAULT NULL;
    DECLARE VAR_STATE								VARCHAR(20) DEFAULT NULL;
    DECLARE VAR_STATE_CATEGORY_ID					INT DEFAULT NULL;
    DECLARE VAR_STATE_CATEGORY						VARCHAR(20) DEFAULT NULL;
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
	SELECT 
		C.ID, 
        C.SITE_NAME, 
        C.TRMT_BIZ_CODE,        
        E.NAME,
        A.RESPONSE_VISIT,
        D.AVATAR_PATH,
        A.ID
    FROM COLLECTOR_BIDDING A
    LEFT JOIN V_ORDER_STATE_NAME B 	ON A.DISPOSAL_ORDER_ID 		= B.DISPOSER_ORDER_ID
    LEFT JOIN COMP_SITE C 			ON A.COLLECTOR_ID 	= C.ID
    LEFT JOIN USERS D				ON C.ID = D.AFFILIATED_SITE
    LEFT JOIN WSTE_TRMT_BIZ E		ON C.TRMT_BIZ_CODE = E.CODE
	WHERE 
		B.STATE_CODE 		= 102 AND 
        A.DELETED	 		= FALSE AND
        C.ACTIVE			= TRUE AND
        B.DISPOSER_ORDER_ID	= IN_ORDER_ID AND
        D.ACTIVE			= TRUE AND
        D.CLASS				= 201;
            
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	CREATE TEMPORARY TABLE IF NOT EXISTS ORDER_DETAILS_102_TEMP (
		COLLECTOR_SITE_ID					BIGINT,
		COLLECTOR_SITE_NAME					VARCHAR(255),
		COLLECTOR_TRMT_BIZ_CODE				VARCHAR(4),    
		COLLECTOR_TRMT_BIZ_NAME				VARCHAR(255),
		RESPONSE_VISIT						TINYINT,
		AVATAR_PATH							VARCHAR(255),
		COLLECTOR_BIDDING_ID				BIGINT,
        STATE_CODE							INT,
        STATE								VARCHAR(20),
        STATE_CATEGORY_ID					INT,
        STATE_CATEGORY						VARCHAR(20)
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP        
		FETCH TEMP_CURSOR 
		INTO 
			CUR_COLLECTOR_SITE_ID,
			CUR_COLLECTOR_SITE_NAME,
			CUR_COLLECTOR_TRMT_BIZ_CODE,    
			CUR_COLLECTOR_TRMT_BIZ_NAME,
			CUR_RESPONSE_VISIT,
			CUR_AVATAR_PATH,
			CUR_COLLECTOR_BIDDING_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ORDER_DETAILS_102_TEMP(
			COLLECTOR_SITE_ID, 
			COLLECTOR_SITE_NAME, 
			COLLECTOR_TRMT_BIZ_CODE,     
			COLLECTOR_TRMT_BIZ_NAME,
			RESPONSE_VISIT,
			AVATAR_PATH,
			COLLECTOR_BIDDING_ID
		)
		VALUES(
			CUR_COLLECTOR_SITE_ID,
			CUR_COLLECTOR_SITE_NAME,
			CUR_COLLECTOR_TRMT_BIZ_CODE,    
			CUR_COLLECTOR_TRMT_BIZ_NAME,
			CUR_RESPONSE_VISIT,
			CUR_AVATAR_PATH,
			CUR_COLLECTOR_BIDDING_ID
		);    
        
        CALL sp_get_collector_state(
			IN_ORDER_ID,
            CUR_COLLECTOR_SITE_ID,
			VAR_STATE,
            VAR_STATE_CODE,
            VAR_STATE_CATEGORY_ID,
            VAR_STATE_CATEGORY
        );
    
		UPDATE ORDER_DETAILS_102_TEMP 
		SET 
			STATE = VAR_STATE,
			STATE_CODE = VAR_STATE_CODE,
			STATE_CATEGORY_ID = VAR_STATE_CATEGORY_ID,
			STATE_CATEGORY = VAR_STATE_CATEGORY 
		WHERE COLLECTOR_SITE_ID = CUR_COLLECTOR_SITE_ID;
            
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'COLLECTOR_SITE_ID'					, COLLECTOR_SITE_ID, 
            'COLLECTOR_SITE_NAME'				, COLLECTOR_SITE_NAME, 
            'COLLECTOR_TRMT_BIZ_CODE'			, COLLECTOR_TRMT_BIZ_CODE,             
            'COLLECTOR_TRMT_BIZ_NAME'			, COLLECTOR_TRMT_BIZ_NAME, 
            'RESPONSE_VISIT'					, RESPONSE_VISIT, 
            'AVATAR_PATH'						, AVATAR_PATH, 
            'COLLECTOR_BIDDING_ID'				, COLLECTOR_BIDDING_ID, 
            'STATE'								, STATE, 
            'STATE_CODE'						, STATE_CODE, 
            'STATE_CATEGORY_ID'					, STATE_CATEGORY_ID, 
            'STATE_CATEGORY'					, STATE_CATEGORY
		)
	) 
    INTO OUT_DETAILS 
    FROM ORDER_DETAILS_102_TEMP;
	DROP TABLE IF EXISTS ORDER_DETAILS_102_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_order_details_104`(
	IN IN_ORDER_ID				BIGINT,
    OUT OUT_DETAILS				JSON
)
BEGIN
	DECLARE VAR_DISPOSER_WSTE_LIST				JSON					DEFAULT NULL;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ORDER_DETAILS_104_TEMP (
		ORDER_ID							BIGINT,
		ORDER_CODE							VARCHAR(10),
        COLLECTOR_SITE_ID					BIGINT,
        COLLECTOR_SITE_NAME					VARCHAR(255),
		COLLECTOR_TRMT_BIZ_CODE				VARCHAR(4),    
		COLLECTOR_TRMT_BIZ_NAME				VARCHAR(255),  
        AVATAR_PATH							VARCHAR(255),
		DISPOSER_WSTE_LIST					JSON,
        STATE_CODE							INT,
        STATE								VARCHAR(20),
        STATE_CATEGORY_ID					INT,
        STATE_CATEGORY						VARCHAR(20)
        
	);        
    
    INSERT INTO ORDER_DETAILS_104_TEMP(
		ORDER_ID, 
        ORDER_CODE, 
        COLLECTOR_SITE_ID, 
        COLLECTOR_SITE_NAME, 
        COLLECTOR_TRMT_BIZ_CODE, 
        COLLECTOR_TRMT_BIZ_NAME, 
        AVATAR_PATH,
        STATE_CODE,
        STATE,
        STATE_CATEGORY_ID,
        STATE_CATEGORY
    )
    SELECT 
		A.ID,
        A.ORDER_CODE,
        B.COLLECTOR_SITE_ID,
        C.SITE_NAME,
        C.TRMT_BIZ_CODE,
        D.NAME,
        E.AVATAR_PATH,
        F.STATE_CODE,
        F.STATE,
        F.STATE_CATEGORY_ID,
        F.STATE_CATEGORY
    FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION B ON A.ID = B.DISPOSAL_ORDER_ID
    LEFT JOIN COMP_SITE C ON B.COLLECTOR_SITE_ID = C.ID
    LEFT JOIN WSTE_TRMT_BIZ D ON C.TRMT_BIZ_CODE = D.CODE
    LEFT JOIN USERS E ON C.ID = E.AFFILIATED_SITE
    LEFT JOIN V_BIDDING_STATE_NAME F ON C.ID = F.COLLECTOR_ID
    WHERE 
		A.ID = IN_ORDER_ID AND
        E.CLASS = 201 AND
        E.ACTIVE = TRUE AND
        F.DISPOSER_ORDER_ID = IN_ORDER_ID;  
	
    CALL sp_get_disposal_wste_lists(
		IN_ORDER_ID,
        VAR_DISPOSER_WSTE_LIST
    );
    
    UPDATE ORDER_DETAILS_104_TEMP 
    SET 
		DISPOSER_WSTE_LIST = VAR_DISPOSER_WSTE_LIST
    WHERE ORDER_ID = IN_ORDER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
        'ORDER_CODE'				, ORDER_CODE, 
        'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
        'COLLECTOR_SITE_NAME'		, COLLECTOR_SITE_NAME, 
        'COLLECTOR_TRMT_BIZ_CODE'	, COLLECTOR_TRMT_BIZ_CODE, 
        'COLLECTOR_TRMT_BIZ_NAME'	, COLLECTOR_TRMT_BIZ_NAME, 
        'AVATAR_PATH'				, AVATAR_PATH, 
        'DISPOSER_WSTE_LIST'		, DISPOSER_WSTE_LIST, 
		'STATE'						, STATE, 
		'STATE_CODE'				, STATE_CODE, 
		'STATE_CATEGORY_ID'			, STATE_CATEGORY_ID, 
		'STATE_CATEGORY'			, STATE_CATEGORY
	)) 
    INTO OUT_DETAILS 
    FROM ORDER_DETAILS_104_TEMP;
	DROP TABLE IF EXISTS ORDER_DETAILS_104_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_order_details_110`(
	IN IN_ORDER_ID				BIGINT,
    OUT OUT_DETAILS				JSON
)
BEGIN
	DECLARE VAR_FIRST_PLACE						BIGINT					DEFAULT NULL;
	DECLARE VAR_MAX_SELECT_AT					DATETIME				DEFAULT NULL;
	DECLARE VAR_SITE_ID							BIGINT					DEFAULT NULL;
	DECLARE VAR_SITE_NAME						VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TRMT_BIZ_CODE					VARCHAR(4)				DEFAULT NULL;
	DECLARE VAR_TRMT_BIZ_NAME					VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_COLLECTOR_BIDDING_ID			BIGINT					DEFAULT NULL;
	DECLARE VAR_STATE_CODE						INT						DEFAULT NULL;
	DECLARE VAR_STATE							VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_STATE_CATEGORY_ID				INT						DEFAULT NULL;
	DECLARE VAR_STATE_CATEGORY					VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;
	DECLARE VAR_AVATAR_PATH						VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_DISPOSER_WSTE_LIST				JSON					DEFAULT NULL;
	DECLARE VAR_BIDDING_RANK					INT						DEFAULT NULL;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ORDER_DETAILS_110_TEMP (
		ORDER_ID							BIGINT,
		ORDER_CODE							VARCHAR(10),
        BIDDING_RANK						INT,
        COLLECTOR_SITE_ID					BIGINT,
        COLLECTOR_SITE_NAME					VARCHAR(255),
		COLLECTOR_TRMT_BIZ_CODE				VARCHAR(4),    
		COLLECTOR_TRMT_BIZ_NAME				VARCHAR(255),  
		COLLECTOR_BIDDING_ID				BIGINT,
        AVATAR_PATH							VARCHAR(255),
		DISPOSER_WSTE_LIST					JSON,
        STATE_CODE							INT,
        STATE								VARCHAR(20),
        STATE_CATEGORY_ID					INT,
        STATE_CATEGORY						VARCHAR(20)
        
	);  
    CALL sp_req_current_time(VAR_REG_DT);
    
    INSERT INTO ORDER_DETAILS_110_TEMP(
		ORDER_ID, 
        ORDER_CODE
    )
    SELECT 
		ID,
        ORDER_CODE
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE ID = IN_ORDER_ID;  
    
    SELECT 
		A.FIRST_PLACE, 
        A.MAX_SELECT_AT, 
        B.COLLECTOR_ID,
        C.SITE_NAME,
        C.TRMT_BIZ_CODE,
        D.NAME,
        B.ID
    INTO 
		VAR_FIRST_PLACE, 
        VAR_MAX_SELECT_AT, 
        VAR_SITE_ID,
        VAR_SITE_NAME,
        VAR_TRMT_BIZ_CODE,
        VAR_TRMT_BIZ_NAME,
        VAR_COLLECTOR_BIDDING_ID
    FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN COLLECTOR_BIDDING B ON A.FIRST_PLACE = B.ID
    LEFT JOIN COMP_SITE C ON B.COLLECTOR_ID = C.ID
    LEFT JOIN WSTE_TRMT_BIZ D ON C.TRMT_BIZ_CODE = D.CODE
    WHERE A.ID = IN_ORDER_ID;
    
    SELECT AVATAR_PATH INTO VAR_AVATAR_PATH
    FROM USERS
    WHERE 
		AFFILIATED_SITE = VAR_SITE_ID AND
        CLASS = 201 AND
        ACTIVE = TRUE;
	
    CALL sp_get_disposal_wste_lists(
		IN_ORDER_ID,
        VAR_DISPOSER_WSTE_LIST
    );
        
	CALL sp_get_collector_state(
		IN_ORDER_ID,
		VAR_SITE_ID,
		VAR_STATE,
		VAR_STATE_CODE,
		VAR_STATE_CATEGORY_ID,
		VAR_STATE_CATEGORY
	);
    
    SELECT BIDDING_RANK INTO VAR_BIDDING_RANK
    FROM COLLECTOR_BIDDING
    WHERE ID = VAR_COLLECTOR_BIDDING_ID;
    
    UPDATE ORDER_DETAILS_110_TEMP 
    SET 
		BIDDING_RANK 				= VAR_BIDDING_RANK, 
		COLLECTOR_SITE_ID 			= VAR_SITE_ID,
		COLLECTOR_SITE_NAME 		= VAR_SITE_NAME, 
		COLLECTOR_TRMT_BIZ_CODE 	= VAR_TRMT_BIZ_CODE, 
		COLLECTOR_TRMT_BIZ_NAME 	= VAR_TRMT_BIZ_NAME, 
		AVATAR_PATH 				= VAR_AVATAR_PATH, 
		COLLECTOR_BIDDING_ID 		= VAR_COLLECTOR_BIDDING_ID, 
		DISPOSER_WSTE_LIST 			= VAR_DISPOSER_WSTE_LIST,
		STATE 						= VAR_STATE,
		STATE_CODE 					= VAR_STATE_CODE,
		STATE_CATEGORY_ID 			= VAR_STATE_CATEGORY_ID,
		STATE_CATEGORY 				= VAR_STATE_CATEGORY 
    WHERE ORDER_ID = IN_ORDER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
        'ORDER_CODE'				, ORDER_CODE, 
        'BIDDING_RANK'				, BIDDING_RANK, 
        'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
        'COLLECTOR_SITE_NAME'		, COLLECTOR_SITE_NAME, 
        'COLLECTOR_TRMT_BIZ_CODE'	, COLLECTOR_TRMT_BIZ_CODE, 
        'COLLECTOR_TRMT_BIZ_NAME'	, COLLECTOR_TRMT_BIZ_NAME, 
        'AVATAR_PATH'				, AVATAR_PATH, 
        'COLLECTOR_BIDDING_ID'		, COLLECTOR_BIDDING_ID, 
        'DISPOSER_WSTE_LIST'		, DISPOSER_WSTE_LIST, 
		'STATE'						, STATE, 
		'STATE_CODE'				, STATE_CODE, 
		'STATE_CATEGORY_ID'			, STATE_CATEGORY_ID, 
		'STATE_CATEGORY'			, STATE_CATEGORY
	)) 
    INTO OUT_DETAILS 
    FROM ORDER_DETAILS_110_TEMP;
	DROP TABLE IF EXISTS ORDER_DETAILS_110_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_order_details_117`(
	IN IN_ORDER_ID				BIGINT,
    OUT OUT_DETAILS				JSON
)
BEGIN
	CREATE TEMPORARY TABLE IF NOT EXISTS ORDER_DETAILS_117_TEMP (
		VISITORS								INT,
		BIDDERS									INT   
	);        
    
    INSERT INTO ORDER_DETAILS_117_TEMP(
		VISITORS, 
        BIDDERS
    )
    SELECT PROSPECTIVE_VISITORS, BIDDERS
    FROM SITE_WSTE_DISPOSAL_ORDER 
    WHERE ID = IN_ORDER_ID;  
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'VISITORS'				, VISITORS, 
        'BIDDERS'				, BIDDERS
	)) 
    INTO OUT_DETAILS 
    FROM ORDER_DETAILS_117_TEMP;
	DROP TABLE IF EXISTS ORDER_DETAILS_117_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_order_details_118`(
	IN IN_ORDER_ID				BIGINT,
    OUT OUT_DETAILS				JSON
)
BEGIN
	DECLARE VAR_DISPOSER_WSTE_LIST				JSON					DEFAULT NULL;
	DECLARE VAR_SITE_ID							BIGINT					DEFAULT NULL;
	DECLARE VAR_STATE_CATEGORY_ID				INT 					DEFAULT NULL;
	DECLARE VAR_STATE_CATEGORY					VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_STATE_CODE						INT 					DEFAULT NULL;
	DECLARE VAR_STATE							VARCHAR(20)				DEFAULT NULL;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ORDER_DETAILS_118_TEMP (
		ORDER_ID							BIGINT,
		ORDER_CODE							VARCHAR(10),
        COLLECTOR_SITE_ID					BIGINT,
        COLLECTOR_SITE_NAME					VARCHAR(255),
		COLLECTOR_TRMT_BIZ_CODE				VARCHAR(4),    
		COLLECTOR_TRMT_BIZ_NAME				VARCHAR(255),  
        AVATAR_PATH							VARCHAR(255),
		COLLECTOR_BIDDING_ID				BIGINT,
		DISPOSER_WSTE_LIST					JSON,
        STATE_CODE							INT,
        STATE								VARCHAR(20),
        STATE_CATEGORY_ID					INT,
        STATE_CATEGORY						VARCHAR(20)
        
	);        
    
    INSERT INTO ORDER_DETAILS_118_TEMP(
		ORDER_ID, 
        ORDER_CODE, 
        COLLECTOR_SITE_ID, 
        COLLECTOR_SITE_NAME, 
        COLLECTOR_TRMT_BIZ_CODE, 
        COLLECTOR_TRMT_BIZ_NAME, 
        AVATAR_PATH, 
        COLLECTOR_BIDDING_ID
    )
    SELECT 
		A.ID,
        A.ORDER_CODE,
        D.ID,
        D.SITE_NAME,
        D.TRMT_BIZ_CODE,
        E.NAME,
        F.AVATAR_PATH,
        C.ID
    FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION B ON A.ID = B.DISPOSAL_ORDER_ID
    LEFT JOIN COLLECTOR_BIDDING C ON B.COLLECTOR_BIDDING_ID = C.ID
    LEFT JOIN COMP_SITE D ON C.COLLECTOR_ID = D.ID
    LEFT JOIN WSTE_TRMT_BIZ E ON D.TRMT_BIZ_CODE = E.CODE
    LEFT JOIN USERS F ON D.ID = F.AFFILIATED_SITE
    LEFT JOIN V_ORDER_STATE G ON A.ID = G.DISPOSER_ORDER_ID
    WHERE 
        F.CLASS = 201 AND
        F.ACTIVE = TRUE AND
        G.STATE_CODE = 118 AND
        A.ID = IN_ORDER_ID AND
        A.COLLECTOR_ID IS NULL;
	
    CALL sp_get_disposal_wste_lists(
		IN_ORDER_ID,
        VAR_DISPOSER_WSTE_LIST
    );
    
    SELECT COLLECTOR_SITE_ID INTO VAR_SITE_ID
    FROM ORDER_DETAILS_118_TEMP
    WHERE ORDER_ID = IN_ORDER_ID;
        
	CALL sp_get_collector_state(
		IN_ORDER_ID,
		VAR_SITE_ID,
		VAR_STATE,
		VAR_STATE_CODE,
		VAR_STATE_CATEGORY_ID,
		VAR_STATE_CATEGORY
	);
    
    UPDATE ORDER_DETAILS_118_TEMP 
    SET 
		DISPOSER_WSTE_LIST = VAR_DISPOSER_WSTE_LIST
    WHERE ORDER_ID = IN_ORDER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
        'ORDER_CODE'				, ORDER_CODE, 
        'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
        'COLLECTOR_SITE_NAME'		, COLLECTOR_SITE_NAME, 
        'COLLECTOR_TRMT_BIZ_CODE'	, COLLECTOR_TRMT_BIZ_CODE, 
        'COLLECTOR_TRMT_BIZ_NAME'	, COLLECTOR_TRMT_BIZ_NAME, 
        'AVATAR_PATH'				, AVATAR_PATH, 
        'COLLECTOR_BIDDING_ID'		, COLLECTOR_BIDDING_ID, 
        'DISPOSER_WSTE_LIST'		, DISPOSER_WSTE_LIST, 
		'STATE'						, VAR_STATE, 
		'STATE_CODE'				, VAR_STATE_CODE, 
		'STATE_CATEGORY_ID'			, VAR_STATE_CATEGORY_ID, 
		'STATE_CATEGORY'			, VAR_STATE_CATEGORY
	)) 
    INTO OUT_DETAILS 
    FROM ORDER_DETAILS_118_TEMP;
	DROP TABLE IF EXISTS ORDER_DETAILS_118_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_order_details_119`(
	IN IN_ORDER_ID				BIGINT,
    OUT OUT_DETAILS				JSON
)
BEGIN
	DECLARE VAR_DISPOSER_WSTE_LIST				JSON					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_BIDDING_ID			BIGINT					DEFAULT NULL;
	DECLARE VAR_STATE_CATEGORY_ID				INT 					DEFAULT NULL;
	DECLARE VAR_STATE_CATEGORY					VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_STATE_CODE						INT 					DEFAULT NULL;
	DECLARE VAR_STATE							VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;
	DECLARE VAR_BIDDING_RANK					INT 					DEFAULT NULL;
	DECLARE VAR_SITE_ID							BIGINT					DEFAULT NULL;
	DECLARE VAR_SITE_NAME						VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_TRMT_BIZ_CODE					VARCHAR(4)				DEFAULT NULL;
	DECLARE VAR_TRMT_BIZ_NAME					VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_AVATAR_PATH						VARCHAR(255)			DEFAULT NULL;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ORDER_DETAILS_119_TEMP (
		ORDER_ID							BIGINT,
		ORDER_CODE							VARCHAR(10),
        BIDDING_RANK						INT,
        COLLECTOR_SITE_ID					BIGINT,
        COLLECTOR_SITE_NAME					VARCHAR(255),
		COLLECTOR_TRMT_BIZ_CODE				VARCHAR(4),    
		COLLECTOR_TRMT_BIZ_NAME				VARCHAR(255),  
        COLLECTOR_BIDDING_ID				BIGINT,
        AVATAR_PATH							VARCHAR(255),
		DISPOSER_WSTE_LIST					JSON,
        STATE_CODE							INT,
        STATE								VARCHAR(20),
        STATE_CATEGORY_ID					INT,
        STATE_CATEGORY						VARCHAR(20)
        
	);        
    
    CALL sp_req_current_time(VAR_REG_DT);
    
    INSERT INTO ORDER_DETAILS_119_TEMP(
		ORDER_ID, 
        ORDER_CODE
    )
    SELECT 
		ID,
        ORDER_CODE
    FROM SITE_WSTE_DISPOSAL_ORDER
    WHERE ID = IN_ORDER_ID;  
    
    SELECT 
        IF(VAR_REG_DT < A.COLLECTOR_MAX_DECISION_AT, 1, 2),
        IF(VAR_REG_DT < A.COLLECTOR_MAX_DECISION_AT, B.COLLECTOR_ID, E.COLLECTOR_ID),
        IF(VAR_REG_DT < A.COLLECTOR_MAX_DECISION_AT, C.SITE_NAME, F.SITE_NAME),
        IF(VAR_REG_DT < A.COLLECTOR_MAX_DECISION_AT, C.TRMT_BIZ_CODE, F.TRMT_BIZ_CODE),
        IF(VAR_REG_DT < A.COLLECTOR_MAX_DECISION_AT, D.NAME, G.NAME),
        IF(VAR_REG_DT < A.COLLECTOR_MAX_DECISION_AT, B.ID, E.ID)
    INTO 
        VAR_BIDDING_RANK,
        VAR_SITE_ID,
        VAR_SITE_NAME,
        VAR_TRMT_BIZ_CODE,
        VAR_TRMT_BIZ_NAME,
        VAR_COLLECTOR_BIDDING_ID
    FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN COLLECTOR_BIDDING B ON A.FIRST_PLACE = B.ID
    LEFT JOIN COMP_SITE C ON B.COLLECTOR_ID = C.ID
    LEFT JOIN WSTE_TRMT_BIZ D ON C.TRMT_BIZ_CODE = D.CODE    
    LEFT JOIN COLLECTOR_BIDDING E ON A.SECOND_PLACE = E.ID
    LEFT JOIN COMP_SITE F ON E.COLLECTOR_ID = F.ID
    LEFT JOIN WSTE_TRMT_BIZ G ON F.TRMT_BIZ_CODE = G.CODE
    WHERE A.ID = IN_ORDER_ID;
    
    SELECT AVATAR_PATH INTO VAR_AVATAR_PATH
    FROM USERS
    WHERE 
		AFFILIATED_SITE = VAR_SITE_ID AND
        CLASS = 201 AND
        ACTIVE = TRUE;
	
    CALL sp_get_disposal_wste_lists(
		IN_ORDER_ID,
        VAR_DISPOSER_WSTE_LIST
    );  

	CALL sp_get_collector_state(
		IN_ORDER_ID,
		VAR_SITE_ID,
		VAR_STATE,
		VAR_STATE_CODE,
		VAR_STATE_CATEGORY_ID,
		VAR_STATE_CATEGORY
	);
    
    UPDATE ORDER_DETAILS_119_TEMP 
    SET 
		BIDDING_RANK 				= VAR_BIDDING_RANK, 
		COLLECTOR_SITE_ID 			= VAR_SITE_ID,
		COLLECTOR_SITE_NAME 		= VAR_SITE_NAME, 
		COLLECTOR_TRMT_BIZ_CODE 	= VAR_TRMT_BIZ_CODE, 
		COLLECTOR_TRMT_BIZ_NAME 	= VAR_TRMT_BIZ_NAME, 
		COLLECTOR_BIDDING_ID 		= VAR_COLLECTOR_BIDDING_ID, 
		AVATAR_PATH 				= VAR_AVATAR_PATH, 
		DISPOSER_WSTE_LIST 			= VAR_DISPOSER_WSTE_LIST,
		STATE 						= VAR_STATE,
		STATE_CODE 					= VAR_STATE_CODE,
		STATE_CATEGORY_ID 			= VAR_STATE_CATEGORY_ID,
		STATE_CATEGORY 				= VAR_STATE_CATEGORY  
    WHERE ORDER_ID = IN_ORDER_ID;

    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
        'ORDER_CODE'				, ORDER_CODE, 
        'BIDDING_RANK'				, BIDDING_RANK, 
        'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
        'COLLECTOR_SITE_NAME'		, COLLECTOR_SITE_NAME, 
        'COLLECTOR_TRMT_BIZ_CODE'	, COLLECTOR_TRMT_BIZ_CODE, 
        'COLLECTOR_TRMT_BIZ_NAME'	, COLLECTOR_TRMT_BIZ_NAME, 
        'COLLECTOR_BIDDING_ID'		, COLLECTOR_BIDDING_ID, 
        'AVATAR_PATH'				, AVATAR_PATH, 
        'DISPOSER_WSTE_LIST'		, DISPOSER_WSTE_LIST, 
		'STATE'						, STATE, 
		'STATE_CODE'				, STATE_CODE, 
		'STATE_CATEGORY_ID'			, STATE_CATEGORY_ID, 
		'STATE_CATEGORY'			, STATE_CATEGORY
	)) 
    INTO OUT_DETAILS 
    FROM ORDER_DETAILS_119_TEMP;
	DROP TABLE IF EXISTS ORDER_DETAILS_119_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_order_details_122`(
	IN IN_ORDER_ID				BIGINT,
    OUT OUT_DETAILS				JSON
)
BEGIN
	CREATE TEMPORARY TABLE IF NOT EXISTS ORDER_DETAILS_122_TEMP (
		TRANSACTION_ID								INT,
		REJECT_REASON								VARCHAR(255)   
	);        
    
    INSERT INTO ORDER_DETAILS_122_TEMP(
		TRANSACTION_ID, 
        REJECT_REASON
    )
    SELECT ID, REJECT_REASON
    FROM WSTE_CLCT_TRMT_TRANSACTION 
    WHERE DISPOSAL_ORDER_ID = IN_ORDER_ID;  
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'TRANSACTION_ID'				, TRANSACTION_ID, 
        'REJECT_REASON'					, REJECT_REASON
	)) 
    INTO OUT_DETAILS 
    FROM ORDER_DETAILS_122_TEMP;
	DROP TABLE IF EXISTS ORDER_DETAILS_122_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_order_details_t252`(
	IN IN_ORDER_ID				BIGINT,
    OUT OUT_DETAILS				JSON
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;
	DECLARE VAR_STATE_CATEGORY_ID				INT 					DEFAULT NULL;
	DECLARE VAR_STATE_CATEGORY					VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_STATE_CODE						INT 					DEFAULT NULL;
	DECLARE VAR_STATE							VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_DISPOSER_WSTE_LIST				JSON					DEFAULT NULL;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS ORDER_DETAILS_T252_TEMP (
		ORDER_ID							BIGINT,
		ORDER_CODE							VARCHAR(10),
        COLLECTOR_SITE_ID					BIGINT,
        COLLECTOR_SITE_NAME					VARCHAR(255),
		COLLECTOR_TRMT_BIZ_CODE				VARCHAR(4),    
		COLLECTOR_TRMT_BIZ_NAME				VARCHAR(255),  
        AVATAR_PATH							VARCHAR(255),
		DISPOSER_WSTE_LIST					JSON,
        STATE_CODE							INT,
        STATE								VARCHAR(20),
        STATE_CATEGORY_ID					INT,
        STATE_CATEGORY						VARCHAR(20)
        
	);        
    
    CALL sp_req_current_time(VAR_REG_DT);
    
    INSERT INTO ORDER_DETAILS_T252_TEMP(
		ORDER_ID, 
        ORDER_CODE, 
        COLLECTOR_SITE_ID, 
        COLLECTOR_SITE_NAME, 
        COLLECTOR_TRMT_BIZ_CODE, 
        COLLECTOR_TRMT_BIZ_NAME, 
        AVATAR_PATH,
        STATE_CODE,
        STATE,
        STATE_CATEGORY_ID,
        STATE_CATEGORY
    )
    SELECT 
		A.ID,
        A.ORDER_CODE,
        A.COLLECTOR_ID,
        B.SITE_NAME,
        B.TRMT_BIZ_CODE,
        C.NAME,
        D.AVATAR_PATH,
        E.STATE_CODE,
        E.STATE,
        E.STATE_CATEGORY_ID,
        E.STATE_CATEGORY
    FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN COMP_SITE B ON A.COLLECTOR_ID = B.ID
    LEFT JOIN WSTE_TRMT_BIZ C ON B.TRMT_BIZ_CODE = C.CODE
    LEFT JOIN USERS D ON B.ID = D.AFFILIATED_SITE
    LEFT JOIN V_TRANSACTION_STATE_NAME E ON A.ID = E.DISPOSAL_ORDER_ID
    WHERE 
		A.ID = IN_ORDER_ID AND
        D.CLASS = 201 AND
        D.ACTIVE = TRUE;  
    	
    CALL sp_get_disposal_wste_lists(
		IN_ORDER_ID,
        VAR_DISPOSER_WSTE_LIST
    );
    
    UPDATE ORDER_DETAILS_T252_TEMP 
    SET DISPOSER_WSTE_LIST 			= VAR_DISPOSER_WSTE_LIST 
    WHERE ORDER_ID = IN_ORDER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
        'ORDER_CODE'				, ORDER_CODE, 
        'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
        'COLLECTOR_SITE_NAME'		, COLLECTOR_SITE_NAME, 
        'COLLECTOR_TRMT_BIZ_CODE'	, COLLECTOR_TRMT_BIZ_CODE, 
        'COLLECTOR_TRMT_BIZ_NAME'	, COLLECTOR_TRMT_BIZ_NAME, 
        'AVATAR_PATH'				, AVATAR_PATH, 
        'DISPOSER_WSTE_LIST'		, DISPOSER_WSTE_LIST, 
		'STATE'						, STATE, 
		'STATE_CODE'				, STATE_CODE, 
		'STATE_CATEGORY_ID'			, STATE_CATEGORY_ID, 
		'STATE_CATEGORY'			, STATE_CATEGORY
	)) 
    INTO OUT_DETAILS 
    FROM ORDER_DETAILS_T252_TEMP;
	DROP TABLE IF EXISTS ORDER_DETAILS_T252_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_parent_comp_id`(
	IN IN_COMP_ID		BIGINT,
    OUT OUT_PARENT_ID	BIGINT
)
BEGIN
	SELECT P_COMP_ID INTO OUT_PARENT_ID FROM COMPANY WHERE ID = IN_COMP_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_policy_direction`(
	IN IN_POLICY 		VARCHAR(255),			/*정책주제*/
	OUT OUT_RESULT 		VARCHAR(255)			/*정책추진방향*/
)
BEGIN

/*
Procedure Name 	: sp_req_policy_direction
Input param 	: 1개
Output param 	: 1개
Job 			: 정책테이블(sys_policy)에서 특정 정책에 대한 방향을 반환함
Update 			: 2022.01.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_POLICY_EXISTS					INT						DEFAULT 0;
	DECLARE VAR_DIRECTION						VARCHAR(255)			DEFAULT NULL;
    
	SELECT COUNT(ID) INTO VAR_POLICY_EXISTS FROM sys_policy WHERE policy = IN_POLICY;
    /*sys_policy에서 요청받은 정책이 존재하는지 체크한다.*/
    
    IF VAR_POLICY_EXISTS = 0 THEN
    /*요청받은 정책이 존재하지 않는 경우*/
		SET OUT_RESULT = '0';
    ELSE
		SELECT direction INTO VAR_DIRECTION FROM sys_policy WHERE policy = IN_POLICY;
		SET OUT_RESULT = VAR_DIRECTION;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_policy_direction_by_id`(
	IN IN_POLICY_ID		INT,					/*정책주제*/
	OUT OUT_RESULT 		VARCHAR(255)			/*정책추진방향*/
)
BEGIN

/*
Procedure Name 	: sp_req_policy_direction
Input param 	: 1개
Output param 	: 1개
Job 			: 정책테이블(sys_policy)에서 특정 정책에 대한 방향을 반환함
Update 			: 2022.01.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    
    SELECT COUNT(id) INTO @POLICY_EXISTS FROM sys_policy WHERE id = IN_POLICY_ID;
    /*sys_policy에서 요청받은 정책이 존재하는지 체크한다.*/
    
    IF @POLICY_EXISTS = 0 THEN
    /*요청받은 정책이 존재하지 않는 경우*/
		SET OUT_RESULT = '0';
    ELSE
	/*sys_policy에서 요청받은 정책이 활성화된 상태인 경우*/
		SELECT direction INTO @direction FROM sys_policy WHERE id = IN_POLICY_ID;
		SET OUT_RESULT = @direction;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_policy_exists`(
	IN IN_POLICY 		VARCHAR(50),	/*정책주제*/
    OUT OUT_RESULT		TINYINT			/*찾고자 하는 정책이 존재하면 1, 그렇지 않으면 0을 반환함*/
)
BEGIN

/*
Procedure Name 	: sp_req_policy_exists
Input param 	: 1개
Output param 	: 1개
Job 			: 입력 param의 IN_POLICY 정책이 sys_policy에 존재하는지 여부 반환
Update 			: 2022.01.04
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT COUNT(ID) INTO OUT_RESULT FROM sys_policy WHERE policy = IN_POLICY;
    /*sys_policy에서 요청받은 정책이 존재하는지 체크한다.*/
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_policy_exists_by_id`(
	IN IN_POLICY_ID		INT,			/*정책주제*/
    OUT OUT_RESULT		TINYINT			/*찾고자 하는 정책이 존재하면 1, 그렇지 않으면 0을 반환함*/
)
BEGIN

/*
Procedure Name 	: sp_req_policy_exists_by_id
Input param 	: 1개
Output param 	: 1개
Job 			: 입력 param의 IN_POLICY 정책이 sys_policy에 존재하는지 여부 반환
Update 			: 2022.01.04
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT COUNT(id) INTO OUT_RESULT FROM sys_policy WHERE id = IN_POLICY_ID;
    /*sys_policy에서 요청받은 정책이 존재하는지 체크한다.*/
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_prev_transaction_details`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 사용자 등록번호(USERS.ID)*/
	IN IN_COLLECTOR_SITE_ID		BIGINT				/*입력값 : 수거자 사이트 등록번호(COMP_SITE.ID)*/
)
BEGIN

/*
Procedure Name 	: sp_req_prev_transaction_site_lists
Input param 	: 2개
Job 			: 이전거래 이력이 있는 사이트를 반환한다.
Update 			: 2022.02.10
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_COLLECTOR_BIDDING_ID			BIGINT;
    DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
    DECLARE CUR_COLLECTOR_SITE_NM				VARCHAR(255);
    DECLARE CUR_DISPOSER_SI_DO					VARCHAR(20);
    DECLARE CUR_DISPOSER_SI_GUN_GU				VARCHAR(20);
    DECLARE CUR_DISPOSER_EUP_MYEON_DONG			VARCHAR(20);
    DECLARE CUR_DISPOSER_DONG_RI				VARCHAR(20);
    DECLARE CUR_DISPOSER_ADDR					VARCHAR(200);
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_WSTE_LIST						JSON					DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		COLLECTOR_BIDDING_ID, 
		COLLECTOR_SITE_ID, 
        COLLECTOR_SITE_NM, 
        DISPOSER_SI_DO, 
        DISPOSER_SI_GUN_GU, 
        DISPOSER_EUP_MYEON_DONG, 
        DISPOSER_DONG_RI, 
        DISPOSER_ADDR
    FROM V_PREV_TRANSACTION_SITES
	WHERE 
		DISPOSER_SITE_ID IS NOT NULL AND 
        COLLECTOR_SITE_ID = IN_COLLECTOR_SITE_ID AND 
        DISPOSER_SITE_ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE ID = IN_USER_ID AND ACTIVE = TRUE);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS CURRENT_STATE;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  
    

	CREATE TEMPORARY TABLE IF NOT EXISTS CURRENT_STATE (
		COLLECTOR_BIDDING_ID			BIGINT,
		COLLECTOR_SITE_ID				BIGINT,
		COLLECTOR_SITE_NM				VARCHAR(255),
		DISPOSER_SI_DO					VARCHAR(20), 
		DISPOSER_SI_GUN_GU				VARCHAR(20), 
		DISPOSER_EUP_MYEON_DONG			VARCHAR(20), 
		DISPOSER_DONG_RI				VARCHAR(20), 
		DISPOSER_ADDR					VARCHAR(200),
		WSTE_LIST						JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_COLLECTOR_BIDDING_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_COLLECTOR_SITE_NM,
			CUR_DISPOSER_SI_DO,
			CUR_DISPOSER_SI_GUN_GU,
			CUR_DISPOSER_EUP_MYEON_DONG,
			CUR_DISPOSER_DONG_RI,
			CUR_DISPOSER_ADDR;   
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		CURRENT_STATE(
			COLLECTOR_BIDDING_ID,
			COLLECTOR_SITE_ID, 
			COLLECTOR_SITE_NM, 
			DISPOSER_SI_DO, 
			DISPOSER_SI_GUN_GU, 
			DISPOSER_EUP_MYEON_DONG, 
			DISPOSER_DONG_RI, 
			DISPOSER_ADDR
		)
		VALUES(
			CUR_COLLECTOR_BIDDING_ID,
			CUR_COLLECTOR_SITE_ID, 
			CUR_COLLECTOR_SITE_NM, 
			CUR_DISPOSER_SI_DO, 
			CUR_DISPOSER_SI_GUN_GU, 
			CUR_DISPOSER_EUP_MYEON_DONG, 
			CUR_DISPOSER_DONG_RI, 
			CUR_DISPOSER_ADDR
		);
		
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'WSTE_NM'						, B.NAME, 
				'APPEARANCE'					, C.KOREAN, 
				'QTY'							, A.WSTE_QUANTITY, 
				'UNIT'							, A.WSTE_UNIT, 
				'UNIT_PRICE'					, A.PRICE_UNIT, 
				'CREATED_AT'					, A.CREATED_AT 
			)
		) 
		INTO VAR_WSTE_LIST 
		FROM WSTE_CLCT_TRMT_TRANSACTION A 
        LEFT JOIN WSTE_CODE B ON A.WSTE_CODE = B.CODE
        LEFT JOIN WSTE_APPEARANCE C ON A.WSTE_APPEARANCE = C.ID
		WHERE A.COLLECTOR_BIDDING_ID = CUR_COLLECTOR_BIDDING_ID;
		/*처리된 폐기물 종류를 JSON형태로 변환한다.*/
		
		UPDATE CURRENT_STATE SET WSTE_LIST = VAR_WSTE_LIST WHERE COLLECTOR_SITE_ID = CUR_COLLECTOR_SITE_ID;
		/*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/
		
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	IF vRowCount = 0 THEN
		SET rtn_val = 29601;
		SET msg_txt = 'No data found1';
		SET json_data = NULL;
	ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Success';	
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'COLLECTOR_BIDDING_ID'		, COLLECTOR_BIDDING_ID, 
				'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
				'COLLECTOR_SITE_NM'			, COLLECTOR_SITE_NM, 
				'DISPOSER_SI_DO'			, DISPOSER_SI_DO, 
				'DISPOSER_SI_GUN_GU'		, DISPOSER_SI_GUN_GU, 
				'DISPOSER_EUP_MYEON_DONG'	, DISPOSER_EUP_MYEON_DONG, 
				'DISPOSER_DONG_RI'			, DISPOSER_DONG_RI, 
				'DISPOSER_ADDR'				, DISPOSER_ADDR, 
				'WSTE_LIST'					, WSTE_LIST
			)
		) 
		INTO json_data 
		FROM CURRENT_STATE;
	END IF;
    COMMIT;   
	DROP TABLE IF EXISTS CURRENT_STATE;
	CALL sp_return_results(rtn_val, msg_txt, json_data);  
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_prev_transaction_site_lists`(
	IN IN_USER_ID			BIGINT				/*입력값 : 사용자 등록번호(USERS.ID)*/
)
BEGIN

/*
Procedure Name 	: sp_req_prev_transaction_site_lists
Input param 	: 3개
Job 			: 이전거래 이력이 있는 사이트를 반환한다.
Update 			: 2022.01.30
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_USER_ID							BIGINT; 
    DECLARE CUR_USER_SITE_ID					BIGINT; 
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REGISTERED_SITE_LIST			JSON					DEFAULT NULL;
	DECLARE VAR_PREV_TRANSACTION_LIST			JSON					DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		ID,
        AFFILIATED_SITE
    FROM USERS 
    WHERE ID = IN_USER_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS RETRIEVE_PREV_TRANSACTION_SITE_TEMP_999 (
		USER_ID							BIGINT,
		PREV_TRANSACTION_LIST			JSON,
		REGISTERED_SITE_LIST			JSON        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_USER_ID,
			CUR_USER_SITE_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		RETRIEVE_PREV_TRANSACTION_SITE_TEMP_999(
			USER_ID
		)
		VALUES(
			CUR_USER_ID
		);
    
		CALL sp_req_registered_site_lists_without_handler(
			CUR_USER_ID,
			CUR_USER_SITE_ID,
			rtn_val,
			msg_txt,
			VAR_REGISTERED_SITE_LIST
		);
    
		CALL sp_req_prev_transaction_site_lists_without_handler(
			CUR_USER_ID,
			CUR_USER_SITE_ID,
			rtn_val,
			msg_txt,
			VAR_PREV_TRANSACTION_LIST
		);
		
		UPDATE RETRIEVE_PREV_TRANSACTION_SITE_TEMP_999 
        SET 
			PREV_TRANSACTION_LIST 			= VAR_PREV_TRANSACTION_LIST, 
            REGISTERED_SITE_LIST 			= VAR_REGISTERED_SITE_LIST
        WHERE USER_ID = CUR_USER_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'USER_ID'					, USER_ID, 
        'PREV_TRANSACTION_LIST'		, PREV_TRANSACTION_LIST, 
        'REGISTERED_SITE_LIST'		, REGISTERED_SITE_LIST
	)) 
    INTO json_data FROM RETRIEVE_PREV_TRANSACTION_SITE_TEMP_999;
    
	DROP TABLE IF EXISTS RETRIEVE_PREV_TRANSACTION_SITE_TEMP_999;
    
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_prev_transaction_site_lists_without_handler`(
	IN IN_USER_ID			BIGINT,				/*입력값 : 사용자 등록번호(USERS.ID)*/
    IN IN_USER_SITE_ID		BIGINT,	
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200),
    OUT OUT_SITE_LISTS		JSON
)
BEGIN

/*
Procedure Name 	: sp_req_prev_transaction_site_lists_without_handler
Input param 	: 3개
Job 			: 이전거래 이력이 있는 사이트를 반환한다.
Update 			: 2022.05.09
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;  
    DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
    DECLARE CUR_COUNT_OF_TRANSACTION			INT;
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_REPORT_CONFIRMED_AT				DATETIME				DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.COLLECTOR_SITE_ID,
        COUNT(A.COLLECTOR_SITE_ID)
    FROM TRANSACTION_REPORT A 
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSER_ORDER_ID = B.ID
    LEFT JOIN USERS C ON B.SITE_ID = C.AFFILIATED_SITE
    LEFT JOIN USERS D ON B.DISPOSER_ID = D.ID
    LEFT JOIN COMP_SITE E ON A.COLLECTOR_SITE_ID = E.ID
	WHERE 
		A.CONFIRMED = TRUE AND
        B.CLOSE_AT <= NOW() AND
        IF (B.SITE_ID = 0, D.ID = IN_USER_ID, C.ID = IN_USER_ID) AND
        (C.CLASS = 201 OR C.CLASS = 202) AND
        C.ACTIVE = TRUE AND
        E.ACTIVE = TRUE AND/*
        IF (B.SITE_ID = 0, 
			A.COLLECTOR_SITE_ID NOT IN (SELECT TARGET_ID FROM REGISTERED_SITE WHERE USER_ID = IN_USER_ID), 
			A.COLLECTOR_SITE_ID NOT IN (SELECT TARGET_ID FROM REGISTERED_SITE WHERE SITE_ID = B.SITE_ID)
		) AND*/
        A.COLLECTOR_SITE_ID NOT IN (
			SELECT TARGET_ID 
            FROM REGISTERED_SITE 
            WHERE 
				IF(IN_USER_SITE_ID = 0,
					USER_ID = IN_USER_ID,
                    SITE_ID = IN_USER_SITE_ID
				) AND
                REGISTER_TYPE = 2 AND
                ACTIVE = TRUE
        )
	GROUP BY A.DISPOSER_SITE_ID, A.COLLECTOR_SITE_ID
	ORDER BY COUNT(A.COLLECTOR_SITE_ID) DESC;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PREV_TRANSACTION_SITE_LIST_TEMP (
		COLLECTOR_SITE_ID				BIGINT,
		CATEGORY						TINYINT,
		COUNT_OF_TRANSACTION			INT,
		REPORT_CONFIRMED_AT				DATETIME,
        COLLECTOR_INFO					JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_COLLECTOR_SITE_ID,
			CUR_COUNT_OF_TRANSACTION;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PREV_TRANSACTION_SITE_LIST_TEMP(
			COLLECTOR_SITE_ID,
			CATEGORY,
			COUNT_OF_TRANSACTION
		)
		VALUES(
			CUR_COLLECTOR_SITE_ID,
			FALSE,
			CUR_COUNT_OF_TRANSACTION
		);		
        
        CALL sp_get_site_info(
			CUR_COLLECTOR_SITE_ID,
            VAR_COLLECTOR_INFO
        );
        
        CALL sp_get_last_report_confirmed_at(
			IN_USER_ID,
			CUR_COLLECTOR_SITE_ID,
            VAR_REPORT_CONFIRMED_AT
        );
        
		UPDATE PREV_TRANSACTION_SITE_LIST_TEMP 
        SET 
			COLLECTOR_INFO 			= VAR_COLLECTOR_INFO,
			REPORT_CONFIRMED_AT 	= VAR_REPORT_CONFIRMED_AT
		WHERE COLLECTOR_SITE_ID		= CUR_COLLECTOR_SITE_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
    
    IF vRowCount = 0 THEN
		SET rtn_val 				= 29701;
		SET msg_txt 				= 'No data found';
		SET OUT_SITE_LISTS 				= NULL;
    ELSE
		SET rtn_val 				= 0;
		SET msg_txt 				= 'Success';	
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'COLLECTOR_SITE_ID'				, COLLECTOR_SITE_ID, 
				'CATEGORY'						, CATEGORY,
				'COUNT_OF_TRANSACTION'			, COUNT_OF_TRANSACTION,
				'REPORT_CONFIRMED_AT'			, REPORT_CONFIRMED_AT,
				'COLLECTOR_INFO'				, COLLECTOR_INFO
			)
		) 
		INTO OUT_SITE_LISTS 
		FROM PREV_TRANSACTION_SITE_LIST_TEMP;
    END IF; 
	DROP TABLE IF EXISTS PREV_TRANSACTION_SITE_LIST_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_processing_status`(
	IN IN_TRANSACTION_ID					BIGINT,
	IN IN_STATE								TINYINT			/*입력값 : 현재처리중인것은 TRUE, 과거처리내역은 FALSE*/
)
BEGIN

/*
Procedure Name 	: sp_req_processing_status
Input param 	: 2개
Job 			: 폐기물 처리중인 작업에 대한 개별 상태 반환
Update 			: 2022.01.30
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_TRANSACTION_ID					BIGINT;
    DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;	
    DECLARE CUR_COLLECTOR_BIDDING_ID			BIGINT;	
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_WSTE_LIST						JSON					DEFAULT NULL;
	DECLARE VAR_IMG_LIST						JSON					DEFAULT NULL;
	DECLARE VAR_ORDER_INFO						JSON					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		ID, 
        COLLECTOR_SITE_ID,
        DISPOSAL_ORDER_ID,
        COLLECTOR_BIDDING_ID
        
    FROM WSTE_CLCT_TRMT_TRANSACTION
	WHERE 
		ID = IN_TRANSACTION_ID AND 
        ISNULL(CONFIRMED_AT) = IF(IN_STATE = FALSE, FALSE, TRUE);
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		DROP TABLE IF EXISTS PROCESSING_STATUS_TEMP;
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PROCESSING_STATUS_TEMP (
		TRANSACTION_ID				BIGINT,
		COLLECTOR_SITE_ID			BIGINT,
		DISPOSER_ORDER_ID			BIGINT,
		WSTE_LIST					JSON,
		IMG_LIST					JSON,
		ORDER_INFO					JSON,
		COLLECTOR_INFO				JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_TRANSACTION_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_COLLECTOR_BIDDING_ID;   
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PROCESSING_STATUS_TEMP(
			TRANSACTION_ID, 
			COLLECTOR_SITE_ID, 
			DISPOSER_ORDER_ID
		)
		VALUES(
			CUR_TRANSACTION_ID, 
			CUR_COLLECTOR_SITE_ID, 
			CUR_DISPOSER_ORDER_ID
		);
        
        CALL sp_get_report_wste_lists(
			CUR_DISPOSER_ORDER_ID,
            CUR_TRANSACTION_ID,
            VAR_WSTE_LIST
        );
		/*처리된 폐기물 종류를 JSON형태로 변환한다.*/
        
        CALL sp_get_collector_img_lists(
            CUR_TRANSACTION_ID,
            VAR_IMG_LIST
        );
        
        CALL sp_get_disposal_order_info(
			CUR_DISPOSER_ORDER_ID,
            VAR_ORDER_INFO
        );
        
        IF CUR_COLLECTOR_SITE_ID IS NOT NULL THEN
			SET VAR_COLLECTOR_SITE_ID = CUR_COLLECTOR_SITE_ID;
		ELSE
			SELECT COLLECTOR_ID INTO VAR_COLLECTOR_SITE_ID
            FROM COLLECTOR_BIDDING
            WHERE ID = CUR_COLLECTOR_BIDDING_ID;
        END IF;
        
        CALL sp_get_site_info(
			VAR_COLLECTOR_SITE_ID,
            VAR_COLLECTOR_INFO
        );
		
		UPDATE PROCESSING_STATUS_TEMP 
        SET 
			IMG_LIST 			= VAR_IMG_LIST, 
            WSTE_LIST 			= VAR_WSTE_LIST, 
            ORDER_INFO 			= VAR_ORDER_INFO , 
            COLLECTOR_INFO 		= VAR_COLLECTOR_INFO 
        WHERE TRANSACTION_ID = CUR_TRANSACTION_ID;
		/*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/
		
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
    
    IF vRowCount = 0 THEN
		SET rtn_val = 20801;
		SET msg_txt = 'No data found';
		SET json_data = NULL;
		SIGNAL SQLSTATE '23000';
    ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Success';	
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'TRANSACTION_ID'			, TRANSACTION_ID, 
				'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
				'DISPOSER_ORDER_ID'			, DISPOSER_ORDER_ID, 
				'WSTE_LIST'					, WSTE_LIST, 
				'IMG_LIST'					, IMG_LIST, 
				'ORDER_INFO'				, ORDER_INFO, 
				'COLLECTOR_INFO'			, COLLECTOR_INFO
			)
		) 
		INTO json_data 
		FROM PROCESSING_STATUS_TEMP;
    END IF;   
	DROP TABLE IF EXISTS PROCESSING_STATUS_TEMP;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);  
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_quest_class`()
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'					, ID, 
			'CLASS_NM'				, CATEGORY_NAME
		)
	) 
	INTO json_data 
	FROM POST_SUB_CATEGORY
    WHERE PID = 3
	ORDER BY ID;
	CALL sp_return_results(rtn_val, msg_txt, json_data);   
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_rate_site`(
	IN IN_USER_ID					BIGINT,
    IN IN_SITE_ID					BIGINT,
    IN IN_SCORE						INT,
    IN IN_DESC						VARCHAR(255)
)
BEGIN

/*
Procedure Name 	: sp_req_rate_site
Input param 	: 2개
Job 			: 서비스 사용후 상대 사업자를 평가한다.
Update 			: 2022.01.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/
		INSERT INTO SITE_EVALUATION (USER_ID, SITE_ID, SCORE, DESCRIPTION, CREATED_AT) VALUES (IN_USER_ID, IN_SITE_ID, IN_SCORE, IN_DESC, VAR_REG_DT);
        IF ROW_COUNT() = 0 THEN
        /*평가 내용의 저장에 오류가 발생한 경우 예외처리한다.*/
			SET rtn_val = 24801;
			SET msg_txt = 'An error occurred while saving the database';
		SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;  
    COMMIT;  
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_registered_site_lists_without_handler`(
	IN IN_USER_ID			BIGINT,				/*입력값 : 사용자 등록번호(USERS.ID)*/
    IN IN_USER_SITE_ID		BIGINT,	
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200),
    OUT OUT_SITE_LISTS		JSON
)
BEGIN

/*
Procedure Name 	: sp_req_registered_site_lists_without_handler
Input param 	: 3개
Job 			: 등록 사이트를 반환한다.
Update 			: 2022.05.09
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;  
    DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
    DECLARE CUR_COUNT_OF_TRANSACTION			INT;	
	DECLARE VAR_COLLECTOR_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_REPORT_CONFIRMED_AT				DATETIME				DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.TARGET_ID,
		COUNT(B.ID)
	FROM REGISTERED_SITE A 
	LEFT JOIN TRANSACTION_REPORT B ON A.TARGET_ID = B.COLLECTOR_SITE_ID
	LEFT JOIN COMP_SITE C ON A.TARGET_ID = C.ID
	LEFT JOIN USERS D ON IF(IN_USER_SITE_ID = 0, A.USER_ID = D.ID, A.SITE_ID = D.AFFILIATED_SITE)
	WHERE 
		A.ACTIVE = TRUE AND
		A.DELETED_AT IS NULL AND
        A.REGISTER_TYPE = 1 AND
		C.ACTIVE = TRUE AND
		D.ACTIVE = TRUE AND
		D.ID = IN_USER_ID
	GROUP BY A.TARGET_ID
	ORDER BY A.ID DESC;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PREV_TRANSACTION_SITE_LIST_TEMP (
		COLLECTOR_SITE_ID				BIGINT,
		CATEGORY						TINYINT,
		COUNT_OF_TRANSACTION			INT,
        COLLECTOR_INFO					JSON,
        REPORT_CONFIRMED_AT				DATETIME
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_COLLECTOR_SITE_ID,
			CUR_COUNT_OF_TRANSACTION;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PREV_TRANSACTION_SITE_LIST_TEMP(
			COLLECTOR_SITE_ID,
			CATEGORY,
			COUNT_OF_TRANSACTION
		)
		VALUES(
			CUR_COLLECTOR_SITE_ID,
			TRUE,
			CUR_COUNT_OF_TRANSACTION
		);		
        
        CALL sp_get_site_info(
			CUR_COLLECTOR_SITE_ID,
            VAR_COLLECTOR_INFO
        );	
        
        CALL sp_get_last_report_confirmed_at(
			IN_USER_ID,
			CUR_COLLECTOR_SITE_ID,
            VAR_REPORT_CONFIRMED_AT
        );
        
		UPDATE PREV_TRANSACTION_SITE_LIST_TEMP 
        SET 
			COLLECTOR_INFO 			= VAR_COLLECTOR_INFO,
			REPORT_CONFIRMED_AT 	= VAR_REPORT_CONFIRMED_AT
		WHERE COLLECTOR_SITE_ID		= CUR_COLLECTOR_SITE_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
    
    IF vRowCount = 0 THEN
		SET rtn_val 				= 29701;
		SET msg_txt 				= 'No data found';
		SET OUT_SITE_LISTS 				= NULL;
    ELSE
		SET rtn_val 				= 0;
		SET msg_txt 				= 'Success';	
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'COLLECTOR_SITE_ID'				, COLLECTOR_SITE_ID, 
				'CATEGORY'						, CATEGORY,
				'COUNT_OF_TRANSACTION'			, COUNT_OF_TRANSACTION,
				'REPORT_CONFIRMED_AT'			, REPORT_CONFIRMED_AT,
				'COLLECTOR_INFO'				, COLLECTOR_INFO
			)
		) 
		INTO OUT_SITE_LISTS 
		FROM PREV_TRANSACTION_SITE_LIST_TEMP;
    END IF; 
	DROP TABLE IF EXISTS PREV_TRANSACTION_SITE_LIST_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_reject_bidding`(
	IN IN_USER_ID				BIGINT,				/*수거자의 입찰자격박탈을 신청하는 배출자의 관리자 고유등록번호(USERS.ID)*/
	IN IN_DISPOSER_ORDER_ID		BIGINT,				/*사용자의 배출신청번호(SITE_WSTE_DISPOSAL_ORDER.ID)*/
    IN IN_COLLECTOR_BIDDING_ID	BIGINT				/*수거자의 투찰신청번호(COLLECTOR_BIDDING.ID)*/
)
BEGIN

/*
Procedure Name 	: sp_req_reject_bidding
Input param 	: 3개
Job 			: 배출자가 수거자의 투찰신청에 대하여 거절한다
Update 			: 2022.03.19
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;
	DECLARE VAR_COLLECTOR_ALREADY_BID			INT						DEFAULT NULL;
	DECLARE VAR_USER_DISPOSAL_ORDER_EXISTS		INT						DEFAULT NULL;
	DECLARE VAR_COLLECTOR_APPLICATION_EXISTS	INT						DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  

    CALL sp_req_current_time(VAR_REG_DT);
    
	CALL sp_req_user_exists_by_id(
    /*사용자가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다.*/
		SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID 
        FROM USERS 
        WHERE ID = IN_USER_ID;
        IF VAR_USER_SITE_ID > 0 THEN
        /*사용자가 사이트에 소속한 경우(사업자의 관리자인 경우)에는 정상처리한다.*/
			SELECT SITE_ID INTO VAR_DISPOSER_SITE_ID 
            FROM SITE_WSTE_DISPOSAL_ORDER 
            WHERE ID = IN_DISPOSER_ORDER_ID;
			IF VAR_USER_SITE_ID = VAR_DISPOSER_SITE_ID THEN
            /*사용자가 배출자 사이트에 소속한 경우에는 정상처리한다.*/
				CALL sp_req_user_class_by_user_reg_id(
                /*사용자의 권한을 반환한다.*/
					IN_USER_ID,
                    VAR_USER_CLASS
                );
                IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
                /*사용자가 업무처리권한을 가진 경우 정상처리한다.*/
					SELECT COUNT(ID) INTO VAR_COLLECTOR_ALREADY_BID 
                    FROM COLLECTOR_BIDDING 
                    WHERE 
						ID = IN_COLLECTOR_BIDDING_ID AND
						DATE_OF_BIDDING IS NOT NULL;
                    IF VAR_COLLECTOR_ALREADY_BID = 1 THEN
                    /*수거자가 투찰을 한 경우에는 정상처리한다.*/
						UPDATE COLLECTOR_BIDDING 
						SET 
							REJECT_BIDDING 		= TRUE, 
							REJECT_BIDDING_AT 	= VAR_REG_DT 
						WHERE ID = IN_COLLECTOR_BIDDING_ID;
						/*수거자의 투찰신청을 거절한다.*/
						IF ROW_COUNT() = 1 THEN
						/*배출자가 수거자의 투찰신청을 성공적으로 거절한 경우*/
							CALL sp_calc_bidding_rank(
								IN_DISPOSER_ORDER_ID
							);
							SET rtn_val = 0;
							SET msg_txt = 'Success';
						ELSE
						/*배출자가 수거자의 투찰신청을 성공적으로 거절하지 못한 경우*/
							SET rtn_val = 34306;
							SET msg_txt = 'Failed to reject the collector bidding application';
							SIGNAL SQLSTATE '23000';
						END IF;
                    ELSE
                    /*수거자가 투찰을 하지 않은 경우에는 예외처리한다.*/
						SET rtn_val = 34307;
						SET msg_txt = 'Collector did not bid';
						SIGNAL SQLSTATE '23000';
                    END IF;
                ELSE
                /*사용자가 업무처리권한을 가지지 않은 경우 예외처리한다.*/
					SET rtn_val = 34305;
					SET msg_txt = 'User not authorized';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사용자가 배출자 사이트에 소속되지 않은 경우에는 예외처리한다.*/
				SET rtn_val = 34304;
				SET msg_txt = 'The user is not affiliated with the disposer site';
				SIGNAL SQLSTATE '23000';
            END IF;
        ELSE
        /*사용자가 사이트에 소속되지 않은 경우(개인사용자인 경우)*/
			SELECT COUNT(ID) INTO VAR_USER_DISPOSAL_ORDER_EXISTS 
            FROM SITE_WSTE_DISPOSAL_ORDER 
            WHERE 
				DISPOSER_ID 	= IN_USER_ID AND 
                ID 				= IN_DISPOSER_ORDER_ID;
            IF VAR_USER_DISPOSAL_ORDER_EXISTS = 1 THEN
            /*사용자가 배출신청정보의 소유자인 경우 정상처리한다.*/
				SELECT COUNT(ID) INTO VAR_COLLECTOR_APPLICATION_EXISTS 
                FROM COLLECTOR_BIDDING 
                WHERE 
					DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID AND 
                    ID 					= IN_COLLECTOR_BIDDING_ID;
                IF VAR_COLLECTOR_APPLICATION_EXISTS = 1 THEN
                /*수거자의 입찰정보가 존재하는 경우 정상처리한다.*/
					SELECT COUNT(ID) INTO VAR_COLLECTOR_ALREADY_BID 
                    FROM COLLECTOR_BIDDING 
                    WHERE 
						ID = IN_COLLECTOR_BIDDING_ID AND
						DATE_OF_BIDDING IS NOT NULL;
                    IF VAR_COLLECTOR_ALREADY_BID = 1 THEN
                    /*수거자가 투찰을 한 경우에는 정상처리한다.*/
						UPDATE COLLECTOR_BIDDING 
						SET 
							REJECT_BIDDING 		= TRUE, 
							REJECT_BIDDING_AT 	= VAR_REG_DT 
						WHERE ID = IN_COLLECTOR_BIDDING_ID;
						/*수거자의 투찰신청을 거절한다.*/
						IF ROW_COUNT() = 1 THEN
						/*배출자가 수거자의 투찰신청을 성공적으로 거절한 경우*/
							CALL sp_calc_bidding_rank(
								IN_DISPOSER_ORDER_ID
							);
							SET rtn_val = 0;
							SET msg_txt = 'Success';
						ELSE
						/*배출자가 수거자의 투찰신청을 성공적으로 거절하지 못한 경우*/
							SET rtn_val = 34303;
							SET msg_txt = 'Failed to reject the collector bidding application';
							SIGNAL SQLSTATE '23000';
						END IF;
                    ELSE
                    /*수거자가 투찰을 하지 않은 경우에는 예외처리한다.*/
						SET rtn_val = 34308;
						SET msg_txt = 'Collector did not bid';
						SIGNAL SQLSTATE '23000';
                    END IF;
                ELSE
                /*수거자의 입찰정보가 존재하지 않는 경우 예외처리한다.*/
					SET rtn_val = 34302;
					SET msg_txt = 'Collector bidding information does not exist';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사용자가 배출신청정보의 소유자가 아닌 경우 예외처리한다.*/
				SET rtn_val = 34301;
				SET msg_txt = 'The user is not a discharge applicant';
				SIGNAL SQLSTATE '23000';
            END IF;
        END IF;
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_reject_bidding_apply`(
	IN IN_USER_ID				BIGINT,				/*수거자의 입찰자격박탈을 신청하는 배출자의 관리자 고유등록번호(USERS.ID)*/
	IN IN_DISPOSER_ORDER_ID		BIGINT,				/*사용자의 배출신청번호(SITE_WSTE_DISPOSAL_ORDER.ID)*/
    IN IN_COLLECTOR_BIDDING_ID	BIGINT				/*수거자의 입찰자격박탈을 당할 입찰신청번호(COLLECTOR_BIDDING.ID)*/
)
BEGIN

/*
Procedure Name 	: sp_req_reject_bidding_apply
Input param 	: 3개
Job 			: 배출자가 수거자의 입찰자격을 박탈한다
Update 			: 2022.03.19
Version			: 0.0.2
AUTHOR 			: Leo Nam
Changes			: 입찰자격을 박탈할 때 전체 입찰자를 계산한다.(sp_calc_bidding_rank 실행)(0.0.2)
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;
	DECLARE VAR_PUSH_INFO						JSON					DEFAULT NULL;
	DECLARE VAR_USER_DISPOSAL_ORDER_EXISTS		INT						DEFAULT NULL;
	DECLARE VAR_COLLECTOR_APPLICATION_EXISTS	INT						DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  

    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*사용자가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다.*/
		SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID 
        FROM USERS 
        WHERE ID = IN_USER_ID;
        IF VAR_USER_SITE_ID > 0 THEN
        /*사용자가 사이트에 소속한 경우에는 정상처리한다.*/
			SELECT SITE_ID INTO VAR_DISPOSER_SITE_ID 
            FROM SITE_WSTE_DISPOSAL_ORDER 
            WHERE ID = IN_DISPOSER_ORDER_ID;
			IF VAR_USER_SITE_ID = VAR_DISPOSER_SITE_ID THEN
            /*사용자가 배출자 사이트에 소속한 경우에는 정상처리한다.*/
				CALL sp_req_user_class_by_user_reg_id(
                /*사용자의 권한을 반환한다.*/
					IN_USER_ID,
                    VAR_USER_CLASS
                );
                IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
                /*사용자가 업무처리권한을 가진 경우 정상처리한다.*/
					UPDATE COLLECTOR_BIDDING 
                    SET 
						REJECT_BIDDING_APPLY 		= TRUE, 
                        REJECT_BIDDING_APPLY_AT 	= VAR_REG_DT 
                    WHERE ID = IN_COLLECTOR_BIDDING_ID;
                    /*수거자의 입찰자격을 박탈한다.*/
                    IF ROW_COUNT() = 1 THEN
                    /*배출자가 수거자의 입찰자격을을 성공적으로 박탈한 경우*/
						CALL sp_calc_bidding_rank(
							IN_DISPOSAL_ORDER_ID
						);
						CALL sp_push_disposer_reject_bidding_apply(
							IN_DISPOSER_ORDER_ID,
							IN_COLLECTOR_BIDDING_ID,
							VAR_PUSH_INFO
						);
						SELECT JSON_ARRAYAGG(
							JSON_OBJECT(
								'PUSH_INFO'	, VAR_PUSH_INFO
							)
						) INTO json_data;
						SET rtn_val = 0;
						SET msg_txt = 'Success';
                    ELSE
                    /*배출자가 수거자의 입찰자격을을 성공적으로 박탈하지 못한 경우*/
						SET rtn_val = 34103;
						SET msg_txt = 'Failed to disqualify collectors from bidding';
						SIGNAL SQLSTATE '23000';
                    END IF;
                ELSE
                /*사용자가 업무처리권한을 가지지 않은 경우 예외처리한다.*/
					SET rtn_val = 34102;
					SET msg_txt = 'User not authorized';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사용자가 배출자 사이트에 소속되지 않은 경우에는 예외처리한다.*/
				SET rtn_val = 34101;
				SET msg_txt = 'The user is not affiliated with the disposer site';
				SIGNAL SQLSTATE '23000';
            END IF;
        ELSE
        /*사용자가 사이트에 소속되지 않은 경우에는 예외처리한다.*/
			SELECT COUNT(ID) INTO VAR_USER_DISPOSAL_ORDER_EXISTS 
            FROM SITE_WSTE_DISPOSAL_ORDER 
            WHERE 
				DISPOSER_ID 	= IN_USER_ID AND 
                ID 				= IN_DISPOSER_ORDER_ID;
            IF VAR_USER_DISPOSAL_ORDER_EXISTS = 1 THEN
            /*사용자가 배출신청정보의 소유자인 경우 정상처리한다.*/
				SELECT COUNT(ID) INTO VAR_COLLECTOR_APPLICATION_EXISTS 
                FROM COLLECTOR_BIDDING 
                WHERE 
					DISPOSAL_ORDER_ID 	= IN_DISPOSER_ORDER_ID AND 
                    ID 					= IN_COLLECTOR_BIDDING_ID;
                IF VAR_COLLECTOR_APPLICATION_EXISTS = 1 THEN
                /*수거자의 입찰정보가 존재하는 경우 정상처리한다.*/
					UPDATE COLLECTOR_BIDDING 
                    SET 
						REJECT_BIDDING_APPLY 		= TRUE, 
                        REJECT_BIDDING_APPLY_AT 	= VAR_REG_DT 
                    WHERE ID = IN_COLLECTOR_BIDDING_ID;
                    /*수거자의 입찰자격을 박탈한다.*/
                    IF ROW_COUNT() = 1 THEN
                    /*배출자가 수거자의 입찰자격을을 성공적으로 박탈한 경우*/
						CALL sp_calc_bidding_rank(
							IN_DISPOSAL_ORDER_ID
						);
						CALL sp_push_disposer_reject_bidding_apply(
							IN_DISPOSER_ORDER_ID,
							IN_COLLECTOR_BIDDING_ID,
							VAR_PUSH_INFO
						);
						SELECT JSON_ARRAYAGG(
							JSON_OBJECT(
								'PUSH_INFO'	, VAR_PUSH_INFO
							)
						) INTO json_data;
						SET rtn_val = 0;
						SET msg_txt = 'Success';
                    ELSE
                    /*배출자가 수거자의 입찰자격을을 성공적으로 박탈하지 못한 경우*/
						SET rtn_val = 34106;
						SET msg_txt = 'Failed to disqualify collectors from bidding';
						SIGNAL SQLSTATE '23000';
                    END IF;
                ELSE
                /*수거자의 입찰정보가 존재하지 않는 경우 예외처리한다.*/
					SET rtn_val = 34105;
					SET msg_txt = 'Collector bidding information does not exist';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사용자가 배출신청정보의 소유자가 아닌 경우 예외처리한다.*/
				SET rtn_val = 34104;
				SET msg_txt = 'The user is not a discharge applicant';
				SIGNAL SQLSTATE '23000';
            END IF;
        END IF;
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_reject_visit`(
	IN IN_USER_ID				BIGINT,				/*방문거절을 신청하는 배출자의 관리자 고유등록번호(USERS.ID)*/
	IN IN_DISPOSER_SITE_ID		BIGINT,				/*방문거절을 신청하는 사이트의 고유등록번호(COMP_SITE.ID)*/
    IN IN_COLLECTOR_BIDDING_ID	BIGINT				/*방문거절을 당할 입찰신청번호(COLLECTOR_BIDDING.ID)*/
)
BEGIN

/*
Procedure Name 	: sp_req_reject_visit
Input param 	: 2개
Job 			: 배출자가 수거자의 방문신청을 거절한다.
Update 			: 2022.02.07
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;
	DECLARE VAR_SITE_ID							BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;

    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*사용자가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다.*/
		CALL sp_req_site_id_of_user_reg_id(
        /*사용자가 소속된 사이트의 고유등록번호를 반환한다.*/
			IN_USER_ID,
            VAR_SITE_ID,
            rtn_val,
            msg_txt
        );
        IF rtn_val = 0 THEN
        /*사용자가 사이트에 소속한 경우에는 정상처리한다.*/
			IF VAR_SITE_ID = IN_DISPOSER_SITE_ID THEN
            /*사용자가 배출자 사이트에 소속한 경우에는 정상처리한다.*/
				CALL sp_req_user_class_by_user_reg_id(
                /*사용자의 권한을 반환한다.*/
					IN_USER_ID,
                    VAR_USER_CLASS
                );
                IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
                /*사용자가 업무처리권한을 가진 경우 정상처리한다.*/
					UPDATE COLLECTOR_BIDDING SET RESPONSE_VISIT = FALSE WHERE ID = IN_COLLECTOR_BIDDING_ID;
                    /*수거자의 방문신청을 거절한다.*/
                    IF ROW_COUNT() = 1 THEN
                    /*배출자가 수거자의 방문신청을 성공적으로 처리한 경우*/
						SET rtn_val = 0;
						SET msg_txt = 'Success';
                    ELSE
                    /*배출자가 수거자의 방문신청을 성공적으로 처리하지 못한 경우*/
						SET rtn_val = 29903;
						SET msg_txt = 'Failure to reject the collector request for visitation';
						SIGNAL SQLSTATE '23000';
                    END IF;
                ELSE
                /*사용자가 업무처리권한을 가지지 않은 경우 예외처리한다.*/
					SET rtn_val = 29902;
					SET msg_txt = 'User not authorized';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사용자가 배출자 사이트에 소속되지 않은 경우에는 예외처리한다.*/
				SET rtn_val = 29901;
				SET msg_txt = 'The user is not affiliated with the disposer site';
				SIGNAL SQLSTATE '23000';
            END IF;
        ELSE
        /*사용자가 사이트에 소속되지 않은 경우에는 예외처리한다.*/
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
	
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_same_company_permit_code_exists`(
	IN IN_PERMIT_REG_CODE	VARCHAR(100),		/*입력값: 체크할 수거자 업체등의 허가 또는 신고번호*/
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_same_company_permit_code_exists
Input param 	: 1개
Output param 	: 2개
Job 			: 체크할 허가 또는 신고번호로 등록된 사업자가 존재하는지 체크한 후 존재하지 않으면 0, 그렇지 않으면 예외처리코드를 반환하게 됨
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.2)
*/
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;

	SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM COMPANY WHERE PERMIT_REG_CODE = IN_PERMIT_REG_CODE;
    
    IF VAR_CHK_COUNT = 0 THEN
		SET rtn_val = 0;
        SET msg_txt = 'Success';
    ELSE
		SET rtn_val = 27201;
        SET msg_txt = 'There is already a registered business license';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_select_collector`(
	IN IN_USER_ID					BIGINT,
	IN IN_COLLECTOR_BIDDING_ID		BIGINT,
	IN IN_DISPOSER_ORDER_ID			BIGINT,
	IN IN_DISCHARGED_END_AT			DATETIME
)
BEGIN

/*
Procedure Name 	: sp_req_select_collector
Input param 	: 3개
Job 			: 최종낙찰업체에 대한 선정결정을 한다.
Update 			: 2022.01.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val									INT						DEFAULT 0;
	DECLARE msg_txt									VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data								JSON					DEFAULT NULL;	
	DECLARE VAR_PUSH_CATEGORY_ID					INT						DEFAULT 21;	
	DECLARE VAR_REG_DT								DATETIME				DEFAULT NULL;
	DECLARE VAR_DISPOSER_SITE_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_SITE_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_CLASS							INT						DEFAULT NULL;
	DECLARE VAR_COLLECTOR_DISPOSAL_ORDER_ID			BIGINT					DEFAULT NULL;
	DECLARE VAR_WINNER								TINYINT					DEFAULT NULL;
	DECLARE VAR_BIDDING_RANK						INT						DEFAULT NULL;
	DECLARE VAR_FIRST_PLACE_WINNER_ID				BIGINT					DEFAULT NULL;
	DECLARE VAR_FIRST_PLACE_WINNER_MAKE_DECISION	TINYINT					DEFAULT NULL;
	DECLARE VAR_FIRST_PLACE_WINNER_MAX_DECISION_AT	DATETIME				DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		/*ROLLBACK;*/
        COMMIT;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/
		CALL sp_req_site_id_of_disposal_order_id(
        /*DISPOSAL ORDER 의 배출자 사이트 아이디를 구한다.*/
			IN_DISPOSER_ORDER_ID,
            VAR_DISPOSER_SITE_ID
        );        
        
        SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID
        FROM USERS
        WHERE ID = IN_USER_ID;
        
		IF VAR_USER_SITE_ID IS NOT NULL THEN
		/*사이트가 유효한 경우*/
			IF VAR_DISPOSER_SITE_ID = VAR_USER_SITE_ID THEN
			/*사용자가 정보변경 대상이 되는 사이트에 소속한 관리자인 경우*/
				CALL sp_req_user_class_by_user_reg_id(
				/*사용자의 권한을 구한다.*/
				IN_USER_ID,
				VAR_USER_CLASS
				);
				IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
				/*관리자가 정보를 변경할 권한이 있는 경우*/
					SELECT DISPOSAL_ORDER_ID, WINNER 
                    INTO VAR_COLLECTOR_DISPOSAL_ORDER_ID, VAR_WINNER 
                    FROM COLLECTOR_BIDDING 
                    WHERE ID = IN_COLLECTOR_BIDDING_ID;
                    
                    IF VAR_COLLECTOR_DISPOSAL_ORDER_ID IS NOT NULL THEN
                    /*입찰에 참여한 수거자의 입찰등록번호가 존재하는 경우 정상처리한다.*/
						IF VAR_COLLECTOR_DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID THEN
                        /*배출자의 폐기물 입찰에 등록한 수거자의 입찰정보인 경우 정상처리한다.*/
							IF VAR_WINNER = TRUE THEN
                            /*수거자가 최종낙찰자격을 갖추었다면 정상처리한다.*/
								CALL sp_req_select_collector_without_handler(
									IN_USER_ID,
                                    IN_COLLECTOR_BIDDING_ID,
									IN_DISPOSER_ORDER_ID,
									IN_DISCHARGED_END_AT,
                                    VAR_REG_DT,
                                    1,
									rtn_val,
									msg_txt,
									json_data
                                );
                            ELSE
                            /*수거자가 최종낙찰자격을 갖추지 못한경우에는 예외처리한다.*/
								SELECT BIDDING_RANK INTO VAR_BIDDING_RANK FROM COLLECTOR_BIDDING WHERE ID = IN_COLLECTOR_BIDDING_ID;
								IF VAR_BIDDING_RANK = 2 THEN
									SELECT SELECTED INTO VAR_FIRST_PLACE_WINNER_ID FROM SITE_WSTE_DISPOSAL_ORDER WHERE ID = IN_DISPOSER_ORDER_ID;
									SELECT MAKE_DECISION, MAX_DECISION_AT INTO VAR_FIRST_PLACE_WINNER_MAKE_DECISION, VAR_FIRST_PLACE_WINNER_MAX_DECISION_AT FROM COLLECTOR_BIDDING WHERE ID = VAR_FIRST_PLACE_WINNER_ID;
									IF VAR_FIRST_PLACE_WINNER_MAKE_DECISION = TRUE THEN
										SET rtn_val = 24604;
										SET msg_txt = '1st place bidder has already been selected';
										SIGNAL SQLSTATE '23000';
									ELSE
										IF VAR_FIRST_PLACE_WINNER_MAKE_DECISION IS NULL THEN
											IF VAR_FIRST_PLACE_WINNER_MAX_DECISION_AT <= NOW() THEN
											/*1순위가 낙찰자 수락 또는 거절의 의사표시를 하지 않고 최대시간에 도달한 상태로서 조건부 가능한 상태*/
												CALL sp_req_select_collector_without_handler(
													IN_USER_ID,
													IN_COLLECTOR_BIDDING_ID,
													IN_DISPOSER_ORDER_ID,
													IN_DISCHARGED_END_AT,
													VAR_REG_DT,
													VAR_BIDDING_RANK,
													rtn_val,
													msg_txt,
													json_data
												);
                                                IF rtn_val = 0 THEN
													SET rtn_val = 0;
													SET msg_txt = 'success-sp_req_select_collector-1';
                                                ELSE
													SIGNAL SQLSTATE '23000';
                                                END IF;
											ELSE
											/*1순위가 아직 결정할 시간이 존재하는 경우로서 불가능*/
												SET rtn_val = 24601;
												SET msg_txt = '1st place still has a choice';
												SIGNAL SQLSTATE '23000';
											END IF;
										ELSE
										/*1순위가 낙찰자를 포기한 경우로서 항상 가능*/
											CALL sp_req_select_collector_without_handler(
												IN_USER_ID,
												IN_COLLECTOR_BIDDING_ID,
												IN_DISPOSER_ORDER_ID,
												IN_DISCHARGED_END_AT,
												VAR_REG_DT,
												VAR_BIDDING_RANK,
												rtn_val,
												msg_txt,
												json_data
											);
											IF rtn_val = 0 THEN
												SET rtn_val = 0;
												SET msg_txt = 'success-sp_req_select_collector-2';
											ELSE
												SIGNAL SQLSTATE '23000';
											END IF;
										END IF;
									END IF;
								ELSE
									SET rtn_val = 24606;
									SET msg_txt = 'No 2nd placed bidder';
									SIGNAL SQLSTATE '23000';
								END IF;
                            END IF;
                        ELSE
                        /*배출자의 폐기물 입찰에 등록한 수거자의 입찰정보가 아닌 경우 예외처리한다.*/
							SET rtn_val = 24607;
							SET msg_txt = 'The collection company you want to select is an unbidden company';
							SIGNAL SQLSTATE '23000';
                        END IF;
                    ELSE
                    /*입찰에 참여한 수거자의 입찰등록번호가 존재하지 않는 경우 예외처리한다.*/
						SET rtn_val = 24605;
						SET msg_txt = 'Collectors bidding information does not exist';
						SIGNAL SQLSTATE '23000';
                    END IF;
				ELSE
				/*관리자가 정보를 변경할 권한이 없는 경우*/
					SET rtn_val = 24602;
					SET msg_txt = 'User does not have permission to change information';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*사용자가 정보변경 대상이 되는 사이트에 소속한 관리자가 아닌 경우 예외처리한다.*/
				SET rtn_val = 24603;
				SET msg_txt = 'The user is not an administrator of the site';
				SIGNAL SQLSTATE '23000';
			END IF;
		END IF;   
    END IF;
    COMMIT;  
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_select_collector_without_handler`(
	IN IN_USER_ID							BIGINT,
	IN IN_COLLECTOR_BIDDING_ID				BIGINT,
    IN IN_DISPOSER_ORDER_ID					BIGINT,
	IN IN_DISCHARGED_END_AT					DATETIME,
    IN IN_REG_DT							DATETIME,
    IN IN_RANK								INT,
    OUT rtn_val								INT,
    OUT msg_txt								VARCHAR(200),
    OUT json_data							JSON
)
BEGIN
	DECLARE VAR_SELECTED_AT						DATETIME				DEFAULT NULL;
	DECLARE VAR_TRANSACTION_COUNT				INT						DEFAULT 0;
	DECLARE VAR_PUSH_CATEGORY_ID				INT						DEFAULT 21;
    
	SET rtn_val = NULL;
    SET msg_txt = NULL;
	SET VAR_SELECTED_AT = IN_REG_DT;
/*
	CALL sp_req_policy_direction(
		'max_decision_duration',
		@max_decision_duration
	);
    SET @MAX_DECISION_AT = ADDTIME(VAR_SELECTED_AT, CONCAT(CAST(@max_decision_duration AS UNSIGNED), ':00:00'));
    SET @MAX_SELECT2_AT = ADDTIME(@MAX_DECISION_AT, CONCAT(CAST(@max_decision_duration AS UNSIGNED), ':00:00'));
    SET @MAX_DECISION2_AT = ADDTIME(@MAX_SELECT2_AT, CONCAT(CAST(@max_decision_duration AS UNSIGNED), ':00:00'));
*/    
    IF IN_RANK = 1 THEN
    
		UPDATE SITE_WSTE_DISPOSAL_ORDER 
		SET 
			SELECTED = IN_COLLECTOR_BIDDING_ID, 
            SELECTED_AT = VAR_SELECTED_AT,
            UPDATED_AT = VAR_SELECTED_AT
        WHERE ID = IN_DISPOSER_ORDER_ID;
    
		CALL sp_setup_first_place_schedule(
			IN_DISPOSER_ORDER_ID,
			VAR_SELECTED_AT,
			rtn_val,
			msg_txt
		);    
    ELSE
		UPDATE SITE_WSTE_DISPOSAL_ORDER 
		SET 
			SELECTED2 = IN_COLLECTOR_BIDDING_ID, 
			SELECTED2_AT = VAR_SELECTED_AT,
			UPDATED_AT = VAR_SELECTED_AT
		WHERE ID = IN_DISPOSER_ORDER_ID;
		
		CALL sp_setup_second_place_schedule(
			IN_DISPOSER_ORDER_ID,
			VAR_SELECTED_AT,
			rtn_val,
			msg_txt
		);           
    END IF;
	IF rtn_val = 0 THEN
		UPDATE COLLECTOR_BIDDING 
		SET 
			SELECTED = TRUE, 
			SELECTED_AT = VAR_SELECTED_AT,
            UPDATED_AT = VAR_SELECTED_AT
		WHERE ID = IN_COLLECTOR_BIDDING_ID;
		/*수거자가 배출자의 최종입찰선정에 응답을 할 수 있는 최대의 시간으로서 배출자의 최종낙찰자선정일에 합산하여 MAX_DECISION_AT을 결정한다.*/
		IF ROW_COUNT() = 1 THEN
/*        
			IF IN_RANK = 1 THEN
				SELECT SECOND_PLACE INTO @SECOND_PLACE 
                FROM SITE_WSTE_DISPOSAL_ORDER 
                WHERE ID = IN_DISPOSER_ORDER_ID;
				IF @SECOND_PLACE IS NOT NULL THEN
					UPDATE COLLECTOR_BIDDING 
					SET 
						MAX_DECISION_AT = @MAX_DECISION2_AT,
						UPDATED_AT = VAR_SELECTED_AT
					WHERE ID = @SECOND_PLACE;
				END IF;
            END IF;
*/            
			SELECT COUNT(ID) INTO VAR_TRANSACTION_COUNT 
            FROM WSTE_CLCT_TRMT_TRANSACTION 
            WHERE 
				DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND 
                IN_PROGRESS = 1;
                
			IF VAR_TRANSACTION_COUNT > 1 THEN
				SET rtn_val = 35105;
				SET msg_txt = '2 or more transactions exist';
            ELSE
				IF VAR_TRANSACTION_COUNT = 1 THEN
					UPDATE WSTE_CLCT_TRMT_TRANSACTION 
					SET 
						COLLECT_ASK_END_AT = IN_DISCHARGED_END_AT,
						UPDATED_AT = VAR_SELECTED_AT 
					WHERE 
						DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND 
						IN_PROGRESS = 1;
                        
					IF ROW_COUNT() = 1 THEN
						CALL sp_push_disposer_select_collector_without_handler(
							IN_USER_ID,
							IN_DISPOSER_ORDER_ID,
							IN_COLLECTOR_BIDDING_ID,
							VAR_PUSH_CATEGORY_ID,
							json_data,
							rtn_val,
							msg_txt
						);
                    ELSE
						SET rtn_val = 35104;
						SET msg_txt = 'Failed to save transaction';
                    END IF;
				ELSE
					SET rtn_val = 35103;
					SET msg_txt = 'transaction does not exist';
                END IF;
            END IF;
		ELSE
			SET rtn_val = 35102;
			SET msg_txt = 'Failed to determine the maximum successful bid acceptance date of the collector';
		END IF;
	ELSE
		SET rtn_val = 35101;
		SET msg_txt = 'Failure to record collector selection information';
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_service_instruction_id_of_site`(
	IN IN_SITE_ID						BIGINT,			/*사이트의 고유등록번호(COMP_SITE.ID)*/
    OUT OUT_SERVICE_INSTRUCTION_ID		BIGINT			/*사이트가 사용하는 작업지시서의 고유등록번호(SITE_WORK_ORDER.ID)*/
)
BEGIN

/*
Procedure Name 	: sp_req_service_instruction_id_of_site
Input param 	: 1개
Output param 	: 1개
Job 			: 사이트가 사용할 작업지시서의 고유등록번호(SITE_WORK_ORDER.ID)를 반환한다.
Update 			: 2022.01.19
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT IF(MAX(ID) IS NULL, NULL, MAX(ID)) INTO OUT_SERVICE_INSTRUCTION_ID
    FROM SITE_WORK_ORDER
    WHERE 
		SITE_ID = IN_SITE_ID AND
        ACTIVE = TRUE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_sido`()
BEGIN
	DECLARE rtn_val									INT						DEFAULT 0;
	DECLARE msg_txt									VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data								JSON					DEFAULT NULL;	
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'B_CODE'		, B_CODE, 
			'SI_DO'			, SI_DO
		)
	) 
	INTO json_data 
	FROM KIKCD_B 
	WHERE 
		RIGHT(B_CODE, 8) = '00000000' AND 
		CANCELED_DATE IS NULL 
	ORDER BY B_CODE;
    IF ROW_COUNT() > 0 THEN
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
		SET rtn_val = 21701;
		SET msg_txt = 'Data not found';
		SET json_data = NULL;
    END IF;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_sigungu`(
	IN IN_SIDO_CODE				VARCHAR(10)
)
BEGIN
	DECLARE rtn_val									INT						DEFAULT 0;
	DECLARE msg_txt									VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data								JSON					DEFAULT NULL;	
    
	IF IN_SIDO_CODE = '3600000000' THEN
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'B_CODE'		, B_CODE, 
				'SI_DO'			, SI_DO, 
				'SI_GUN_GU'		, SI_GUN_GU
			)
		) 
		INTO json_data 
		FROM KIKCD_B 
		WHERE 
			LEFT(B_CODE, 2) 	= LEFT(IN_SIDO_CODE, 2) AND 
            RIGHT(B_CODE, 8) 	= '00000000' AND 
            CANCELED_DATE 		IS NULL 
		ORDER BY B_CODE;
		IF ROW_COUNT() > 0 THEN
			SET rtn_val = 0;
			SET msg_txt = 'Success';
		ELSE
			SET rtn_val = 23901;
			SET msg_txt = 'Data not found';
			SET json_data = NULL;
		END IF;
    ELSE
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'B_CODE'		, B_CODE, 
				'SI_DO'			, SI_DO, 
				'SI_GUN_GU'		, SI_GUN_GU
			)
		) 
		INTO json_data 
		FROM KIKCD_B 
		WHERE 
			LEFT(B_CODE, 2) 	= LEFT(IN_SIDO_CODE, 2) AND 
            RIGHT(B_CODE, 5) 	= '00000' AND 
            JACHIGU 			IS NULL AND 
            B_CODE 				<> IN_SIDO_CODE AND 
            SI_GUN_GU 			IS NOT NULL AND 
            CANCELED_DATE 		IS NULL 
		ORDER BY B_CODE;
		IF ROW_COUNT() > 0 THEN
			SET rtn_val = 0;
			SET msg_txt = 'Success';
		ELSE
			SET rtn_val = 23902;
			SET msg_txt = 'Data not found';
			SET json_data = NULL;
		END IF;
    END IF;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_sigungu_is_already_added`(
	IN IN_SITE_ID						BIGINT,
    IN IN_SIGUNGU_CODE					VARCHAR(10),
    OUT rtn_val 						INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 						VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_sigungu_is_already_added
Input param 	: 2개
Output param 	: 1개
Job 			: 검사하고자 하는 시군구가 이미 사이트에 등록되어 있는지 검사한다.
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.2)
*/
	DECLARE VAR_CHK_COUNT							INT						DEFAULT 0;

	SELECT COUNT(ID) 
    INTO VAR_CHK_COUNT 
    FROM BUSINESS_AREA 
    WHERE 
		SITE_ID = IN_SITE_ID AND 
        KIKCD_B_CODE = IN_SIGUNGU_CODE AND
        ACTIVE = TRUE;
	
    IF VAR_CHK_COUNT = 0 THEN
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
		SET rtn_val = 26401;
		SET msg_txt = 'The area of ​​interest is already registered';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_addresses_by_site_id`(
	IN IN_SITE_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_site_addresses_by_site_id
Input param 	: 1개
Output param 	: 0개
Job 			: 사이트 고유등록번호로 사이트의 주소를 반환한다.
Update 			: 2022.01.20
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT * FROM V_COMP_SITE_ADDRESS WHERE SITE_ID = IN_SITE_ID AND ACTIVE = TRUE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_already_bid`(
	IN IN_SITE_ID			BIGINT,				/*입력값 : 수거자의 고유등록번호(COMP_SITE.ID)*/
	IN IN_DISPOSER_ORDER_ID	BIGINT,				/*입력값 : 배출자의 폐기물배출 고유등록번호(SITE_WSTE_DISPOSAL_ORDER.ID)*/
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_site_already_bid
Input param 	: 2개
Output param 	: 2개
Job 			: 사이트가 해당 폐기물배출정보에 이미 입찰을 했는지 여부 확인. 기존 입찰사실이 없다면 0, 그렇지 않으면 예외처리코드 반환
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.2)
*/
	DECLARE VAR_CHK_COUNT							INT						DEFAULT 0;

	SELECT COUNT(ID) 
    INTO VAR_CHK_COUNT 
    FROM COLLECTOR_BIDDING 
    WHERE 
		COLLECTOR_ID = IN_SITE_ID AND 
        DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND 
        DATE_OF_BIDDING IS NOT NULL;
        
    IF VAR_CHK_COUNT = 0 THEN
    /*이전에 입찰한 사실이 존재하지 않는 경우*/
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
    /*이전에 입찰한 사실이 존재하는 경우*/
		SET rtn_val = 27101;
		SET msg_txt = 'This site has already bid';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_close_visiting_early`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    OUT OUT_CLOSED_EARLY			TINYINT
)
BEGIN
	DECLARE VAR_SITE_CLOSED_EARLY					TINYINT					DEFAULT FALSE;
    
	SELECT VISIT_EARLY_CLOSING INTO VAR_SITE_CLOSED_EARLY FROM SITE_WSTE_DISPOSAL_ORDER WHERE ID = IN_DISPOSER_ORDER_ID;
    IF VAR_SITE_CLOSED_EARLY IS NULL OR VAR_SITE_CLOSED_EARLY = FALSE THEN
		SET OUT_CLOSED_EARLY = FALSE;
    ELSE
		SET OUT_CLOSED_EARLY = TRUE;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_detail`(
	IN IN_USER_ID				BIGINT,				/*입력값 : USERS.ID*/
	IN IN_SITE_ID				BIGINT				/*입력값 : COMP_SITE.ID*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_detail
Input param 	: 1개
Job 			: 사이트에 대한 정보를 반환한다
Update 			: 2022.03.12
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;
	DECLARE VAR_MANAGER_DETAILS					JSON					DEFAULT NULL;	
	DECLARE VAR_COMPANY_DETAILS					JSON					DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;
	START TRANSACTION;
    /*트랜잭션 시작*/
    
    IF IN_SITE_ID > 0 THEN
		CALL sp_req_user_exists_by_id(
			IN_USER_ID,
			TRUE,
			rtn_val,
			msg_txt
		);
		
		IF rtn_val = 0 THEN
			CALL sp_req_site_id_of_user_reg_id(
				IN_USER_ID,
				VAR_USER_SITE_ID,
				rtn_val,
				msg_txt
			);
			IF rtn_val = 0 THEN
				SELECT CLASS INTO VAR_USER_CLASS FROM USERS WHERE ID = IN_USER_ID;
				IF VAR_USER_CLASS = 101 OR VAR_USER_CLASS = 102 OR VAR_USER_CLASS = 201 THEN
					IF VAR_USER_SITE_ID = IN_SITE_ID THEN
						IF VAR_USER_CLASS = 201 THEN
							CREATE TEMPORARY TABLE IF NOT EXISTS SITE_TEMP (
								ID								BIGINT,
								COMP_ID							BIGINT,
								KIKCD_B_CODE					VARCHAR(10),
								ADDR							VARCHAR(255),
								CONTACT							VARCHAR(100),
								LAT								DECIMAL(12,9),
								LNG								DECIMAL(12,9),
								SITE_NAME						VARCHAR(255),
								TRMT_BIZ_CODE					VARCHAR(4),
								CREATOR_ID						BIGINT,
								HEAD_OFFICE 					TINYINT,
								PERMIT_REG_CODE 				VARCHAR(100),
								PERMIT_REG_IMG_PATH				VARCHAR(200),
								CS_MANAGER_ID					BIGINT,
								CONFIRMED						TINYINT,
								CONFIRMED_AT					DATETIME,
								CREATED_AT						DATETIME,
								UPDATED_AT						DATETIME,
								MANAGER_DETAILS					JSON,
								COMPANY_DETAILS					JSON
							);   
								
							INSERT INTO 
							SITE_TEMP(
								ID, 
								COMP_ID, 
								KIKCD_B_CODE, 
								ADDR, 
								CONTACT, 
								LAT, 
								LNG,
								SITE_NAME,
								TRMT_BIZ_CODE,
								CREATOR_ID,
								HEAD_OFFICE,
								PERMIT_REG_CODE,
								PERMIT_REG_IMG_PATH,
								CS_MANAGER_ID,
								CONFIRMED,
								CONFIRMED_AT,
								CREATED_AT, 
								UPDATED_AT
							)	
							SELECT 
								ID, 
								COMP_ID, 
								KIKCD_B_CODE, 
								ADDR, 
								CONTACT, 
								LAT, 
								LNG,
								SITE_NAME,
								TRMT_BIZ_CODE,
								CREATOR_ID,
								HEAD_OFFICE,
								PERMIT_REG_CODE,
								PERMIT_REG_IMG_PATH,
								CS_MANAGER_ID,
								CONFIRMED,
								CONFIRMED_AT,
								CREATED_AT, 
								UPDATED_AT
							FROM COMP_SITE
							WHERE ID = IN_SITE_ID;	
								
							SELECT JSON_ARRAYAGG(
								JSON_OBJECT(
									'ID', 							ID, 
									'USER_ID', 						USER_ID, 
									'USER_NAME', 					USER_NAME, 
									'PHONE', 						PHONE, 
									'CLASS', 						CLASS, 
									'AVATAR_PATH', 					AVATAR_PATH
								) 
							)
							INTO VAR_MANAGER_DETAILS 
							FROM USERS 
							WHERE ID IN (SELECT ID FROM USERS WHERE AFFILIATED_SITE = IN_SITE_ID AND CLASS = 201);	
							UPDATE SITE_TEMP SET MANAGER_DETAILS = VAR_MANAGER_DETAILS WHERE ID = IN_SITE_ID;						
							
							SELECT JSON_ARRAYAGG(
								JSON_OBJECT(
									'ID', 							ID, 
									'COMP_NAME', 					COMP_NAME, 
									'REP_NAME', 					REP_NAME, 
									'KIKCD_B_CODE', 				KIKCD_B_CODE, 
									'ADDR', 						ADDR, 
									'CONTACT', 						CONTACT, 
									'TRMT_BIZ_CODE', 				TRMT_BIZ_CODE, 
									'LAT', 							LAT, 
									'LNG', 							LNG,
									'BIZ_REG_CODE', 				BIZ_REG_CODE,
									'PERMIT_REG_CODE', 				PERMIT_REG_CODE,
									'P_COMP_ID', 					P_COMP_ID,
									'BIZ_REG_IMG_PATH', 			BIZ_REG_IMG_PATH,
									'PERMIT_REG_IMG_PATH', 			PERMIT_REG_IMG_PATH,
									'CS_MANAGER_ID', 				CS_MANAGER_ID,
									'CONFIRMED', 					CONFIRMED,
									'CONFIRMED_AT', 				CONFIRMED_AT,
									'CREATED_AT', 					CREATED_AT,
									'UPDATED_AT', 					UPDATED_AT
								) 
							)
							INTO VAR_COMPANY_DETAILS 
							FROM COMPANY 
							WHERE ID > 0 AND ID IN (SELECT COMP_ID FROM COMP_SITE WHERE ID = IN_SITE_ID);	
							UPDATE SITE_TEMP SET COMPANY_DETAILS = VAR_COMPANY_DETAILS WHERE ID = IN_SITE_ID;
								
							SELECT JSON_ARRAYAGG(
								JSON_OBJECT(
									'ID', 						ID, 
									'COMP_ID', 					COMP_ID, 
									'KIKCD_B_CODE', 			KIKCD_B_CODE, 
									'ADDR', 					ADDR, 
									'CONTACT',					CONTACT,
									'LAT',						LAT,
									'LNG', 						LNG, 
									'SITE_NAME', 				SITE_NAME, 
									'TRMT_BIZ_CODE', 			TRMT_BIZ_CODE, 
									'CREATOR_ID', 				CREATOR_ID, 
									'HEAD_OFFICE', 				HEAD_OFFICE, 
									'PERMIT_REG_CODE', 			PERMIT_REG_CODE,
									'PERMIT_REG_IMG_PATH', 		PERMIT_REG_IMG_PATH,
									'CS_MANAGER_ID', 			CS_MANAGER_ID,
									'CONFIRMED', 				CONFIRMED,
									'CONFIRMED_AT', 			CONFIRMED_AT,
									'CREATED_AT', 				CREATED_AT,
									'UPDATED_AT', 				UPDATED_AT,
									'MANAGER_DETAILS', 			MANAGER_DETAILS,
									'COMPANY_DETAILS', 			COMPANY_DETAILS
								) 
							)
							INTO json_data 
							FROM SITE_TEMP 
							WHERE ID = IN_SITE_ID;
							
							DROP TABLE IF EXISTS SITE_TEMP;
                        ELSE
							SET rtn_val = 32604;
							SET msg_txt = 'User is not affiliated with the site';
							SIGNAL SQLSTATE '23000';
                        END IF;
                    ELSE
						IF VAR_USER_CLASS = 201 THEN
							CREATE TEMPORARY TABLE IF NOT EXISTS SITE_TEMP (
								ID								BIGINT,
								COMP_ID							BIGINT,
								KIKCD_B_CODE					VARCHAR(10),
								ADDR							VARCHAR(255),
								CONTACT							VARCHAR(100),
								LAT								DECIMAL(12,9),
								LNG								DECIMAL(12,9),
								SITE_NAME						VARCHAR(255),
								TRMT_BIZ_CODE					VARCHAR(4),
								CREATOR_ID						BIGINT,
								HEAD_OFFICE 					TINYINT,
								PERMIT_REG_CODE 				VARCHAR(100),
								PERMIT_REG_IMG_PATH				VARCHAR(200),
								CS_MANAGER_ID					BIGINT,
								CONFIRMED						TINYINT,
								CONFIRMED_AT					DATETIME,
								CREATED_AT						DATETIME,
								UPDATED_AT						DATETIME,
								MANAGER_DETAILS					JSON,
								COMPANY_DETAILS					JSON
							);   
								
							INSERT INTO 
							SITE_TEMP(
								ID, 
								COMP_ID, 
								KIKCD_B_CODE, 
								ADDR, 
								CONTACT, 
								LAT, 
								LNG,
								SITE_NAME,
								TRMT_BIZ_CODE,
								CREATOR_ID,
								HEAD_OFFICE,
								PERMIT_REG_CODE,
								PERMIT_REG_IMG_PATH,
								CS_MANAGER_ID,
								CONFIRMED,
								CONFIRMED_AT,
								CREATED_AT, 
								UPDATED_AT
							)	
							SELECT 
								ID, 
								COMP_ID, 
								KIKCD_B_CODE, 
								ADDR, 
								CONTACT, 
								LAT, 
								LNG,
								SITE_NAME,
								TRMT_BIZ_CODE,
								CREATOR_ID,
								HEAD_OFFICE,
								PERMIT_REG_CODE,
								PERMIT_REG_IMG_PATH,
								CS_MANAGER_ID,
								CONFIRMED,
								CONFIRMED_AT,
								CREATED_AT, 
								UPDATED_AT
							FROM COMP_SITE
							WHERE ID = IN_SITE_ID;	
								
							SELECT JSON_ARRAYAGG(
								JSON_OBJECT(
									'ID', 							ID, 
									'USER_ID', 						USER_ID, 
									'USER_NAME', 					USER_NAME, 
									'PHONE', 						PHONE, 
									'CLASS', 						CLASS, 
									'AVATAR_PATH', 					AVATAR_PATH
								) 
							)
							INTO VAR_MANAGER_DETAILS 
							FROM USERS 
							WHERE ID IN (SELECT ID FROM USERS WHERE AFFILIATED_SITE = IN_SITE_ID AND CLASS = 201);	
							UPDATE SITE_TEMP SET MANAGER_DETAILS = VAR_MANAGER_DETAILS WHERE ID = IN_SITE_ID;						
							
							SELECT JSON_ARRAYAGG(
								JSON_OBJECT(
									'ID', 							ID, 
									'COMP_NAME', 					COMP_NAME, 
									'REP_NAME', 					REP_NAME, 
									'KIKCD_B_CODE', 				KIKCD_B_CODE, 
									'ADDR', 						ADDR, 
									'CONTACT', 						CONTACT, 
									'TRMT_BIZ_CODE', 				TRMT_BIZ_CODE, 
									'LAT', 							LAT, 
									'LNG', 							LNG,
									'BIZ_REG_CODE', 				BIZ_REG_CODE,
									'PERMIT_REG_CODE', 				PERMIT_REG_CODE,
									'P_COMP_ID', 					P_COMP_ID,
									'BIZ_REG_IMG_PATH', 			BIZ_REG_IMG_PATH,
									'PERMIT_REG_IMG_PATH', 			PERMIT_REG_IMG_PATH,
									'CS_MANAGER_ID', 				CS_MANAGER_ID,
									'CONFIRMED', 					CONFIRMED,
									'CONFIRMED_AT', 				CONFIRMED_AT,
									'CREATED_AT', 					CREATED_AT,
									'UPDATED_AT', 					UPDATED_AT
								) 
							)
							INTO VAR_COMPANY_DETAILS 
							FROM COMPANY 
							WHERE ID > 0 AND ID IN (SELECT COMP_ID FROM COMP_SITE WHERE ID = IN_SITE_ID);	
							UPDATE SITE_TEMP SET COMPANY_DETAILS = VAR_COMPANY_DETAILS WHERE ID = IN_SITE_ID;
								
							SELECT JSON_ARRAYAGG(
								JSON_OBJECT(
									'ID', 						ID, 
									'COMP_ID', 					COMP_ID, 
									'KIKCD_B_CODE', 			KIKCD_B_CODE, 
									'ADDR', 					ADDR, 
									'CONTACT',					CONTACT,
									'LAT',						LAT,
									'LNG', 						LNG, 
									'SITE_NAME', 				SITE_NAME, 
									'TRMT_BIZ_CODE', 			TRMT_BIZ_CODE, 
									'CREATOR_ID', 				CREATOR_ID, 
									'HEAD_OFFICE', 				HEAD_OFFICE, 
									'PERMIT_REG_CODE', 			PERMIT_REG_CODE,
									'PERMIT_REG_IMG_PATH', 		PERMIT_REG_IMG_PATH,
									'CS_MANAGER_ID', 			CS_MANAGER_ID,
									'CONFIRMED', 				CONFIRMED,
									'CONFIRMED_AT', 			CONFIRMED_AT,
									'CREATED_AT', 				CREATED_AT,
									'UPDATED_AT', 				UPDATED_AT,
									'MANAGER_DETAILS', 			MANAGER_DETAILS,
									'COMPANY_DETAILS', 			COMPANY_DETAILS
								) 
							)
							INTO json_data 
							FROM SITE_TEMP 
							WHERE ID = IN_SITE_ID;
							
							DROP TABLE IF EXISTS SITE_TEMP;
                        ELSE
							SET rtn_val = 32603;
							SET msg_txt = 'User is not affiliated with the site';
							SIGNAL SQLSTATE '23000';
                        END IF;
                    END IF;
				ELSE
					SET rtn_val = 32602;
					SET msg_txt = 'User not authorized';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
				SET json_data 		= NULL;
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
			SET json_data 		= NULL;
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
		SET rtn_val = 32601;
		SET msg_txt = 'site does not exist';
		SIGNAL SQLSTATE '23000';
    END IF;
	COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_details`(
	IN IN_SITE_ID				BIGINT
)
BEGIN   

/*
Procedure Name 	: sp_req_site_details
Input param 	: 1개
Job 			: 사업자 사이트의 상세정보를 반환한다.
Update 			: 2022.02.23
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/
    
    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;  
    DECLARE CUR_SITE_ID			 				BIGINT;
    DECLARE CUR_SITE_NAME		 				VARCHAR(255);
    DECLARE CUR_SITE_SI_DO			 			VARCHAR(20);
    DECLARE CUR_SITE_SI_GUN_GU		 			VARCHAR(20);
    DECLARE CUR_SITE_EUP_MYEON_DONG				VARCHAR(20);
    DECLARE CUR_SITE_DONG_RI		 			VARCHAR(20);
    DECLARE CUR_SITE_ADDR			 			VARCHAR(255);
    DECLARE CUR_SITE_CONTACT			 		VARCHAR(255);
    DECLARE CUR_SITE_TRMT_BIZ_NM				VARCHAR(50);
	DECLARE VAR_SITE_COUNT						INT						DEFAULT NULL;
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REVIEW_LIST						JSON					DEFAULT NULL;	
	DECLARE VAR_GRADE							FLOAT					DEFAULT NULL;	
    DECLARE TEMP_CURSOR 						CURSOR FOR 
    SELECT 
		COMP_SITE_ID, 
		COMP_SITE_NAME, 
        COMP_SITE_SI_DO, 
        COMP_SITE_SI_GUN_GU, 
        COMP_SITE_EUP_MYEON_DONG, 
        COMP_SITE_DONG_RI, 
        COMP_SITE_ADDR, 
        COMP_SITE_CONTACT, 
        COMP_SITE_TRMT_BIZ_NM
	FROM V_COMP_SITE 
    WHERE COMP_SITE_ID = IN_SITE_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;       
    
	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_SITE_DETAILS (
		ID 						BIGINT, 
		NAME 					VARCHAR(255), 
		SI_DO 					VARCHAR(20), 
		SI_GUN_GU 				VARCHAR(20), 
		EUP_MYEON_DONG 			VARCHAR(20), 
		DONG_RI 				VARCHAR(20), 
		ADDR 					VARCHAR(255), 
		CONTACT 				VARCHAR(255), 
		TRMT_BIZ_NM 			VARCHAR(50), 
		GRADE					FLOAT, 
		REVIEW_LIST 			JSON
	);	
    
    SELECT COUNT(COMP_SITE_ID) INTO VAR_SITE_COUNT FROM V_COMP_SITE WHERE COMP_SITE_ID = IN_SITE_ID;
    
    IF VAR_SITE_COUNT > 0 THEN
		OPEN TEMP_CURSOR;	
		cloop: LOOP
			FETCH TEMP_CURSOR 
			INTO 
				CUR_SITE_ID,
				CUR_SITE_NAME,
				CUR_SITE_SI_DO,
				CUR_SITE_SI_GUN_GU,
				CUR_SITE_EUP_MYEON_DONG,
				CUR_SITE_DONG_RI,
				CUR_SITE_ADDR,
				CUR_SITE_CONTACT,
				CUR_SITE_TRMT_BIZ_NM;
				
			SET vRowCount = vRowCount + 1;
			IF endOfRow THEN
				LEAVE cloop;
			END IF;
					
			INSERT INTO 
			TEMP_SITE_DETAILS(
				ID, 
				NAME, 
				SI_DO, 
				SI_GUN_GU, 
				EUP_MYEON_DONG, 
				DONG_RI, 
				ADDR, 
				CONTACT, 
				TRMT_BIZ_NM
			) 
			VALUES(
				CUR_SITE_ID, 
				CUR_SITE_NAME, 
				CUR_SITE_SI_DO, 
				CUR_SITE_SI_GUN_GU, 
				CUR_SITE_EUP_MYEON_DONG, 
				CUR_SITE_DONG_RI, 
				CUR_SITE_ADDR, 
				CUR_SITE_CONTACT, 
				CUR_SITE_TRMT_BIZ_NM
			);    
			
			SELECT AVG(SCORE) INTO VAR_GRADE FROM SITE_EVALUATION WHERE SITE_ID = IN_SITE_ID;

			CALL sp_req_get_posts_without_handler(
				IN_SITE_ID,
				4,
/*				0,
				10,*/
				rtn_val,
				msg_txt,
				VAR_REVIEW_LIST
			);
		
			UPDATE TEMP_SITE_DETAILS SET REVIEW_LIST = VAR_REVIEW_LIST, GRADE = VAR_GRADE WHERE ID = IN_SITE_ID;
			
		END LOOP;   
		CLOSE TEMP_CURSOR;
    
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'ID'					, ID,
				'NAME'					, NAME,
				'SI_DO'					, SI_DO, 
				'SI_GUN_GU'				, SI_GUN_GU, 
				'EUP_MYEON_DONG'		, EUP_MYEON_DONG, 
				'DONG_RI'				, DONG_RI, 
				'ADDR'					, ADDR, 
				'CONTACT'				, CONTACT, 
				'TRMT_BIZ_NM'			, TRMT_BIZ_NM, 
				'GRADE'					, GRADE, 
				'REVIEW_LIST'			, REVIEW_LIST
			)
		) 
		INTO json_data 
		FROM TEMP_SITE_DETAILS
		WHERE ID = IN_SITE_ID;
	ELSE
		SET rtn_val = 24201;
		SET msg_txt = 'Data not found';
		SET json_data = NULL;
    END IF;
    
    DROP TABLE IF EXISTS TEMP_SITE_DETAILS;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_exists`(
	IN IN_SITE_ID			BIGINT,
    IN IN_ACTIVE			TINYINT,
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_site_exists
Input param 	: 2개
Output param 	: 1개
Job 			: 입력 param의 IN_SITE_ID를 사이트 고유등록번호로 사용하는 사이트가 존재하는지 여부 반환
Update 			: 2022.01.14
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_CHK_COUNT						INT						DEFAULT NULL;
	
    SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM COMP_SITE WHERE ID = IN_SITE_ID;
    IF VAR_CHK_COUNT = 1 THEN
		IF IN_ACTIVE IS NULL THEN
			SELECT COUNT(ID) 
			INTO VAR_CHK_COUNT 
			FROM COMP_SITE 
			WHERE ID 	= IN_SITE_ID;
            IF VAR_CHK_COUNT = 1 THEN
				SET rtn_val = 0;
				SET msg_txt = 'Success-sp_req_site_exists-1';
            ELSE
				SET rtn_val = 26101;
				SET msg_txt = 'The site does not exist';
            END IF;
		ELSE
			SELECT COUNT(ID) 
			INTO VAR_CHK_COUNT
			FROM COMP_SITE 
			WHERE 
				ID 		= IN_SITE_ID AND 
				ACTIVE 	= IN_ACTIVE;
		END IF;
            IF VAR_CHK_COUNT = 1 THEN
				SET rtn_val = 0;
				SET msg_txt = 'Success-sp_req_site_exists-2';
            ELSE
				SET rtn_val = 26102;
				SET msg_txt = 'The site does not exist';
            END IF;
    ELSE
        SET rtn_val = 26103;
        SET msg_txt = 'The site does not exist';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_id_from_transaction_report`(
	IN IN_TRANSACTION_ID			BIGINT,
    OUT OUT_DISPOER_SITE_ID			BIGINT,
    OUT OUT_COLLECTOR_SITE_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_site_id_from_transaction_report
Input param 	: 1개
Output param 	: 1개
Job 			: CIN_TRANSACTION_ID로 해당 폐기물 처리 작업중인 사이트의 고유등록번호를 반환한다.
Update 			: 2022.01.25
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT DISPOSER_SITE_ID, COLLECTOR_SITE_ID
    INTO OUT_DISPOER_SITE_ID, OUT_COLLECTOR_SITE_ID
    FROM TRANSACTION_REPORT 
    WHERE TRANSACTION_ID = IN_TRANSACTION_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_id_of_collector_bidding`(
	IN IN_COLLECTOR_BIDDING_ID		BIGINT,
    OUT OUT_DISPOER_SITE_ID			BIGINT,
    OUT OUT_COLLECTOR_SITE_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_site_id_of_collector_bidding_id
Input param 	: 1개
Output param 	: 1개
Job 			: IN_COLLECTOR_BIDDING_ID로 해당 폐기물 처리 작업중인 사이트의 고유등록번호를 반환한다.
Update 			: 2022.01.25
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT B.SITE_ID, A.COLLECTOR_ID 
    INTO OUT_DISPOER_SITE_ID, OUT_COLLECTOR_SITE_ID
    FROM COLLECTOR_BIDDING A
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
    WHERE A.ID = IN_COLLECTOR_BIDDING_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_id_of_collector_bidding_id`(
	IN IN_COLLECTOR_BIDDING_ID		BIGINT,
    OUT OUT_SITE_ID					BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_site_id_of_collector_bidding_id
Input param 	: 1개
Output param 	: 1개
Job 			: COLLECTOR_BIDDING.ID로 해당 폐기물 처리 신청을 한 사이트의 아이디를 반환한다.
Update 			: 2022.01.20
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT COLLECTOR_ID INTO OUT_SITE_ID FROM COLLECTOR_BIDDING WHERE ID = IN_COLLECTOR_BIDDING_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_id_of_disposal_order_id`(
	IN IN_DISPOSER_ORDER_ID				BIGINT,
    OUT	OUT_SITE_ID						BIGINT
)
BEGIN
	SELECT SITE_ID INTO OUT_SITE_ID FROM SITE_WSTE_DISPOSAL_ORDER WHERE ID = IN_DISPOSER_ORDER_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_id_of_transaction_id`(
	IN IN_TRANSACTION_ID			BIGINT,
    OUT OUT_DISPOER_SITE_ID			BIGINT,
    OUT OUT_COLLECTOR_SITE_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_site_id_of_transaction_id
Input param 	: 1개
Output param 	: 1개
Job 			: CIN_TRANSACTION_ID로 해당 폐기물 처리 작업중인 사이트의 고유등록번호를 반환한다.
Update 			: 2022.01.25
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_COLLECTOR_SITE_ID_IN_DIRECTLY	BIGINT					DEFAULT NULL;
	DECLARE VAR_COLLECTOR_SITE_ID_OVER_BIDDING	BIGINT					DEFAULT NULL;
/*
	SELECT DISPOSER_SITE_ID, COLLECTOR_SITE_ID, COLLECTOR_BIDDING_ID 
    INTO @DISPOER_SITE_ID, @COLLECTOR_SITE_ID, @COLLECTOR_BIDDING_ID
    FROM WSTE_CLCT_TRMT_TRANSACTION 
    WHERE TRANSACTION_ID = IN_TRANSACTION_ID;
*/
	SELECT B.SITE_ID, C.COLLECTOR_ID, D.ID 
    INTO OUT_DISPOER_SITE_ID, VAR_COLLECTOR_SITE_ID_IN_DIRECTLY, VAR_COLLECTOR_SITE_ID_OVER_BIDDING
    FROM WSTE_CLCT_TRMT_TRANSACTION A 
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
    LEFT JOIN COLLECTOR_BIDDING C ON A.COLLECTOR_BIDDING_ID = C.ID
    LEFT JOIN COMP_SITE D ON A.COLLECTOR_SITE_ID = D.ID
    WHERE A.ID = IN_TRANSACTION_ID;
    
    IF VAR_COLLECTOR_SITE_ID_IN_DIRECTLY IS NOT NULL THEN
    /*기존거래인 경우*/
		SET OUT_COLLECTOR_SITE_ID = VAR_COLLECTOR_SITE_ID_IN_DIRECTLY;
    ELSE
    /*입찰거래인 경우*/
		SET OUT_COLLECTOR_SITE_ID = VAR_COLLECTOR_SITE_ID_OVER_BIDDING;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_id_of_user`(
	IN IN_USER_REG_ID	VARCHAR(50),
    OUT OUT_SITE_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_site_id_of_user
Input param 	: 1개
Output param 	: 1개
Job 			: 사용자가 속한 사이트의 고유등록번호를 반환한다.
Update 			: 2022.01.15
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT AFFILIATED_SITE INTO OUT_SITE_ID FROM USERS WHERE USER_ID = IN_USER_REG_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_id_of_user_reg_id`(
	IN IN_USER_ID			BIGINT,
    OUT OUT_SITE_ID			INT,				/*출력값 : 사이트 고유등록번호*/
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_site_id_of_user_reg_id
Input param 	: 1개
Output param 	: 3개
Job 			: 사용자가 속한 사이트의 고유등록번호를 반환한다.
Update 			: 2022.01.28
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.2)
*/
	DECLARE VAR_SITE_ID							BIGINT					DEFAULT NULL;

	SELECT AFFILIATED_SITE INTO VAR_SITE_ID FROM USERS WHERE ID = IN_USER_ID;
    IF VAR_SITE_ID IS NULL THEN
		SET OUT_SITE_ID = NULL;
		SET rtn_val = 22901;
		SET msg_txt = 'The site to which the user belongs does not exist';
    ELSE
		IF VAR_SITE_ID = 0 THEN
			SET OUT_SITE_ID = 0;
			SET rtn_val = 22902;
			SET msg_txt = 'Individual users are not affiliated with the site';
        ELSE
			SET OUT_SITE_ID = VAR_SITE_ID;
			SET rtn_val = 0;
			SET msg_txt = 'Success';
        END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_site_sigungu_code_by_site_id`(
	IN IN_SITE_ID				BIGINT					/*사이트의 고유등록번호(COMP_SITE.ID)*/
)
BEGIN

/*
Procedure Name 	: sp_req_site_sigungu_code_by_site_id
Input param 	: 1개
Job 			: 사이트의 고유등록번호로 사이트가 소재하는 시군구의 코드(KIKCD_B_CODE) 앞 5자리를 반환함
Update 			: 2022.01.22
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT LEFT(KIKCD_B_CODE, 5) FROM BUSINESS_AREA WHERE SITE_ID = IN_SITE_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_status`(
)
BEGIN

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;       
    DECLARE CUR_DISP_ID							INT;
    DECLARE CUR_USER_TYPE						INT;
    DECLARE CUR_USER_TYPE_NM_KO					VARCHAR(20);
    DECLARE CUR_ACTIVE							TINYINT;
    DECLARE CUR_DISP_NM_KO						VARCHAR(20);
	DECLARE VAR_SUB_STATUS						JSON					DEFAULT NULL;
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		DISP_ID, 
        USER_TYPE,      
        USER_TYPE_NM_KO,
        ACTIVE,
        DISP_NM_KO
    FROM V_STATUS_GROUP
	WHERE 
		ACTIVE = TRUE;
            
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS REQ_STATUS (
		DISP_ID						INT,
		USER_TYPE					INT,
		USER_TYPE_NM_KO				VARCHAR(20),
		ACTIVE						TINYINT,
		DISP_NM_KO					VARCHAR(20),
		SUB_STATUS					JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_DISP_ID,
			CUR_USER_TYPE, 
			CUR_USER_TYPE_NM_KO,
			CUR_ACTIVE,
			CUR_DISP_NM_KO;   
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		REQ_STATUS(
			DISP_ID, 
			USER_TYPE, 
			USER_TYPE_NM_KO,
			ACTIVE,
			DISP_NM_KO
		)
		VALUES(
			CUR_DISP_ID, 
			CUR_USER_TYPE, 
			CUR_USER_TYPE_NM_KO,
			CUR_ACTIVE,
			CUR_DISP_NM_KO
		);
        
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'ID'						, ID, 
				'USER_TYPE'					, USER_TYPE, 
                'USER_TYPE_NM_KO'			, USER_TYPE_NM_KO, 
                'STATUS_NM_KO'				, STATUS_NM_KO, 
                'PID'						, PID, 
                'ACTIVE'					, ACTIVE,
				'DISP_ID'					, DISP_ID, 
                'DISP_NM_KO'				, DISP_NM_KO
			)
		) 
        INTO VAR_SUB_STATUS 
        FROM V_STATUS
        WHERE PID = CUR_DISP_ID OR ID = CUR_DISP_ID AND ACTIVE = TRUE;
		
		UPDATE REQ_STATUS 
        SET 
			SUB_STATUS 				= VAR_SUB_STATUS
		WHERE DISP_ID			 	= CUR_DISP_ID;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'						, DISP_ID, 
            'USER_TYPE'					, USER_TYPE, 
            'USER_TYPE_NM_KO'			, USER_TYPE_NM_KO, 
            'ACTIVE'					, ACTIVE, 
            'STATUS_NM_KO'				, DISP_NM_KO, 
            'SUB_STATUS'				, SUB_STATUS
		)
	) 
    INTO json_data 
    FROM REQ_STATUS;
    
	CALL sp_return_results(rtn_val, msg_txt, json_data);
	DROP TABLE IF EXISTS REQ_STATUS;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_status_group`(
	IN IN_USER_TYPE_CODE			INT
)
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'					, DISP_ID, 
			'USER_TYPE'				, USER_TYPE, 
			'USER_TYPE_NM_EN'		, USER_TYPE_NM_EN, 
			'USER_TYPE_NM_KO'		, USER_TYPE_NM_KO, 
			'ACTIVE'				, ACTIVE, 
			'DISP_NM_KO'			, DISP_NM_KO, 
			'DISP_NM_EN'			, DISP_NM_EN
		)
	) 
	INTO json_data 
	FROM V_STATUS_GROUP
	WHERE 
		USER_TYPE = IN_USER_TYPE_CODE;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_super_permission`(
	IN IN_USER_REG_ID		VARCHAR(50),	/*사업자의 super user(member.admin:201)인지 체크가 필요한 사용자 아이디*/
    IN IN_SITE_ID			BIGINT,			/*사업자의 고유 등록번호*/
    OUT OUT_PERMISSION		INT
)
BEGIN

/*
Procedure Name 	: sp_req_super_permission
Input param 	: 2개
Output param 	: 1개(1:sys.admin / 2:모회사관리자 / 3:사업자관리자)
Job 			: 사용자가 사업자 단위를 대상으로 관리자로서의 권한(member.admin:201)을 가지고 있는지 여부를 반환함. 관리자 권한 아래의 3가지임
				: 1. sys.admin(101/102/199)인 경우
				: 2. 모회사의 관리자인 경우
				: 3. 사업자의 관리자인 경우
				: 권한분기 오류 일부 수정
Update 			: 2022.01.14
Version			: 0.0.4
AUTHOR 			: Leo Nam
*/

	DECLARE VAR_CHK_COUNT 							INT						DEFAULT 0;
    DECLARE VAR_CREATOR_BELONG_TO 					BIGINT					DEFAULT NULL;
    
    SET OUT_PERMISSION = 0;
    
    SET VAR_CHK_COUNT = 0;
	SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM USERS WHERE USER_ID = IN_USER_REG_ID AND ACTIVE = TRUE AND CLASS = 101;
    /*IN_USER_REG_ID가 변경하려는 사업자의 활성화된 관리자(manager.admin:201)이거나 sys.admin인 경우에는 VAR_CHK_COUNT=1, 그렇지 않으면 VAR_CHK_COUNT=0이 됨*/
    IF VAR_CHK_COUNT > 0 THEN
		SET OUT_PERMISSION = 1;
	ELSE
		SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM USERS WHERE USER_ID = IN_USER_REG_ID AND ACTIVE = TRUE AND CLASS = 102;
		/*IN_USER_REG_ID가 변경하려는 사업자의 활성화된 관리자(manager.admin:201)이거나 sys.admin인 경우에는 VAR_CHK_COUNT=1, 그렇지 않으면 VAR_CHK_COUNT=0이 됨*/
		IF VAR_CHK_COUNT > 0 THEN
			SET OUT_PERMISSION = 2;
		ELSE
			SELECT BELONG_TO INTO VAR_CREATOR_BELONG_TO FROM USERS WHERE USER_ID = IN_USER_REG_ID AND CLASS = 201;
			IF VAR_CREATOR_BELONG_TO = IN_SITE_ID THEN
				SET OUT_PERMISSION = 3;
			ELSE
				SELECT BELONG_TO INTO VAR_CREATOR_BELONG_TO FROM USERS WHERE USER_ID = IN_USER_REG_ID AND CLASS = 202;
				/*IN_USER_REG_ID가 변경하려는 사업자의 모회사 관리자(manager.admin:201)인 경우 @IS_SUBSIDIARY=1, 그렇지 않으면 @IS_SUBSIDIARY=0이 됨*/
				IF VAR_CREATOR_BELONG_TO = IN_SITE_ID THEN
					SET OUT_PERMISSION = 4;
				ELSE
					SELECT BELONG_TO INTO VAR_CREATOR_BELONG_TO FROM USERS WHERE USER_ID = IN_USER_REG_ID AND CLASS = 201;
					SELECT IN_SITE_ID IN (SELECT CHILD.ID FROM COMPANY CHILD LEFT JOIN COMPANY PARENT ON CHILD.P_COMP_ID = PARENT.ID WHERE PARENT.ID = VAR_CREATOR_BELONG_TO) INTO @IS_SUBSIDIARY;
					/*IN_USER_REG_ID가 변경하려는 사업자의 활성화된 관리자(manager.admin:201)이거나 sys.admin인 경우에는 VAR_CHK_COUNT=1, 그렇지 않으면 VAR_CHK_COUNT=0이 됨*/
					IF @IS_SUBSIDIARY = 1 THEN
						SET OUT_PERMISSION = 5;
					ELSE
						SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM USERS WHERE USER_ID = IN_USER_REG_ID AND BELONG_TO = IN_SITE_ID AND ACTIVE = TRUE AND CLASS = 202;
						/*IN_USER_REG_ID가 변경하려는 사업자의 활성화된 관리자(manager.admin:201)이거나 sys.admin인 경우에는 VAR_CHK_COUNT=1, 그렇지 않으면 VAR_CHK_COUNT=0이 됨*/
						IF VAR_CHK_COUNT > 0 THEN
							SET OUT_PERMISSION = 6;
						ELSE
							SET OUT_PERMISSION = 0;
						END IF;
					END IF;
                END IF;
			END IF;
        END IF;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_super_permission_by_userid`(
	IN IN_USER_ID				BIGINT,				/*사업자의 super user(member.admin:201)인지 체크가 필요한 사용자 고유등록번호*/
    IN IN_COMP_ID				BIGINT,				/*사업자의 고유 등록번호*/
    OUT OUT_PERMISSION			INT,				/*사용자의 권한*/
    OUT OUT_HEAD_OFFICE			TINYINT,			/*사용자가 속한 사이트가 HEAD OFFICE이면 TRUE, 그렇지 않으면 FALSE 반환*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_super_permission_by_userid
Input param 	: 2개
Output param 	: 2개(1:sys.admin / 2:모회사관리자 / 3:사업자관리자)
Job 			: 사용자가 사업자 단위를 대상으로 관리자로서의 권한(member.admin:201)을 가지고 있는지 여부를 반환함. 관리자 권한 아래의 3가지임
				: 1. sys.admin(101/102/199)인 경우
				: 2. 모회사의 관리자인 경우
				: 3. 사업자의 관리자인 경우
				: 사용자가 속한 사이트가 HEAD OFFICE인지 여부도 함께 반환함
				: 권한분기 오류 일부 수정
Update 			: 2022.01.14
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_IS_USER_SITE_HEAD_OFFICE		TINYINT					DEFAULT FALSE;
	DECLARE VAR_USER_COMP_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;
    
    SET OUT_PERMISSION = 0;
    
    CALL sp_req_site_id_of_user_reg_id(
		IN_USER_ID,
        VAR_USER_SITE_ID,
        rtn_val,
        msg_txt
    );
    
    CALL sp_req_is_site_head_office(
		VAR_USER_SITE_ID,
        VAR_IS_USER_SITE_HEAD_OFFICE
    );
    
    SET OUT_HEAD_OFFICE = VAR_IS_USER_SITE_HEAD_OFFICE;
    
    CALL sp_req_comp_id_of_user_by_id(
		IN_USER_ID,
        VAR_USER_COMP_ID
    );
    
    /*SELECT B.HEAD_OFFICE INTO OUT_HEAD_OFFICE FROM USERS A LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID WHERE A.ID = IN_USER_ID; */
    /*사용자가 속한 사이트가 HEAD OFFICE인 경우 TRUE, 그렇지 않은 경우 FALSE를 OUT_HEAD_OFFICE를 통하여 반환함*/
    
    SET VAR_CHK_COUNT = 0;
	SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM USERS WHERE ID = IN_USER_ID AND ACTIVE = TRUE AND CLASS = 101;
    /*IN_USER_ID가 변경하려는 사업자의 활성화된 관리자(manager.admin:201)이거나 sys.admin인 경우에는 VAR_CHK_COUNT=1, 그렇지 않으면 VAR_CHK_COUNT=0이 됨*/
    IF VAR_CHK_COUNT > 0 THEN
		SET OUT_PERMISSION = 1;
	ELSE
		SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM USERS WHERE ID = IN_USER_ID AND ACTIVE = TRUE AND CLASS = 102;
		/*IN_USER_ID가 변경하려는 사업자의 활성화된 관리자(manager.admin:201)이거나 sys.admin인 경우에는 VAR_CHK_COUNT=1, 그렇지 않으면 VAR_CHK_COUNT=0이 됨*/
		IF VAR_CHK_COUNT > 0 THEN
			SET OUT_PERMISSION = 2;
		ELSE
			SELECT BELONG_TO INTO @CREATOR_BELONG_TO FROM USERS WHERE ID = IN_USER_ID AND CLASS = 201;
			/*IN_USER_ID가 변경하려는 사업자의 모회사 관리자(manager.admin:201)인 경우 @IS_SUBSIDIARY=1, 그렇지 않으면 @IS_SUBSIDIARY=0이 됨*/
			IF @CREATOR_BELONG_TO = IN_COMP_ID THEN
				SET OUT_PERMISSION = 3;
			ELSE
				SELECT BELONG_TO INTO @CREATOR_BELONG_TO FROM USERS WHERE ID = IN_USER_ID AND CLASS = 202;
				/*IN_USER_ID가 변경하려는 사업자의 모회사 관리자(manager.admin:201)인 경우 @IS_SUBSIDIARY=1, 그렇지 않으면 @IS_SUBSIDIARY=0이 됨*/
				IF @CREATOR_BELONG_TO = IN_COMP_ID THEN
					SET OUT_PERMISSION = 4;
				ELSE
					SELECT BELONG_TO INTO @CREATOR_BELONG_TO FROM USERS WHERE USER_ID = IN_USER_ID AND CLASS = 201;
					SELECT IN_COMP_ID IN (SELECT CHILD.ID FROM COMPANY CHILD LEFT JOIN COMPANY PARENT ON CHILD.P_COMP_ID = PARENT.ID WHERE PARENT.ID = @CREATOR_BELONG_TO) INTO @IS_SUBSIDIARY;
					/*IN_USER_ID가 변경하려는 사업자의 활성화된 관리자(manager.admin:201)이거나 sys.admin인 경우에는 VAR_CHK_COUNT=1, 그렇지 않으면 VAR_CHK_COUNT=0이 됨*/
					IF @IS_SUBSIDIARY = 1 THEN
						SET OUT_PERMISSION = 5;
					ELSE
						SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM USERS WHERE ID = IN_USER_ID AND BELONG_TO = IN_COMP_ID AND ACTIVE = TRUE AND CLASS = 202;
						/*IN_USER_ID가 변경하려는 사업자의 활성화된 관리자(manager.admin:201)이거나 sys.admin인 경우에는 VAR_CHK_COUNT=1, 그렇지 않으면 VAR_CHK_COUNT=0이 됨*/
						IF VAR_CHK_COUNT > 0 THEN
							SET OUT_PERMISSION = 6;
						ELSE
							SET OUT_PERMISSION = 0;
						END IF;
					END IF;
                END IF;
			END IF;
        END IF;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_switch_user_current_type`(
	IN IN_USER_ID			BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_switch_user_current_type
Input param 	: 1개
Job 			: 사용자의 현재상태를 변경함
Update 			: 2022.02.19
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_USER_TYPE						VARCHAR(20)				DEFAULT NULL;	
	DECLARE VAR_USER_CURRENT_TYPE_NM			VARCHAR(20)				DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;
	START TRANSACTION;
    /*트랜잭션 시작*/

	SELECT USER_TYPE, USER_CURRENT_TYPE_NM INTO VAR_USER_TYPE, VAR_USER_CURRENT_TYPE_NM FROM V_USERS WHERE ID = IN_USER_ID;
	IF VAR_USER_TYPE = 'collector' THEN
		IF VAR_USER_CURRENT_TYPE_NM = 'collector' OR VAR_USER_CURRENT_TYPE_NM IS NULL THEN
			UPDATE USERS SET USER_CURRENT_TYPE = 2 WHERE ID = IN_USER_ID;
        ELSE
			UPDATE USERS SET USER_CURRENT_TYPE = 3 WHERE ID = IN_USER_ID;
        END IF;
        IF ROW_COUNT() = 1 THEN            
			SELECT JSON_OBJECT(
				'USER_ID', 						ID, 
				'USER_PREVIOUS_TYPE', 			VAR_USER_CURRENT_TYPE_NM,
				'USER_CURRENT_TYPE', 			USER_CURRENT_TYPE_NM
			) 
			INTO json_data 
			FROM V_USERS 
			WHERE 
				ID 		= IN_USER_ID;
        ELSE
			SET json_data 		= NULL;
			SET rtn_val = 31001;
			SET msg_txt = 'Failed to change user current type';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
		SET json_data 		= NULL;
		SET rtn_val = 31002;
		SET msg_txt = 'Cannot change user current type';
		SIGNAL SQLSTATE '23000';
    END IF;
	COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_transaction_completed`(
	IN IN_TRANSACTION_ID			BIGINT,					/*입력값 : 찾고자 하는 트랜잭션(폐기물처리작업) 고유등록번호*/
    OUT OUT_TRANSACTION_COMPLETED	TINYINT					/*출력값 : 트랜잭션이 완료되었으며 TRUE, 그렇지 않으면 FALSE 반환*/
)
BEGIN

/*
Procedure Name 		: sp_req_transaction_completed
Input param 		: 1개
Output param 		: 1개
Job 				: 트랜잭션이 완료된 트랜잭션이면 TRUE, 진행중이면 FALSE반환
Update 				: 2022.01.25
Version				: 0.0.1
AUTHOR 				: Leo Nam
*/
	DECLARE VAR_CONFIRMED_AT					DATETIME				DEFAULT NULL;
	
    SELECT CONFIRMED_AT INTO VAR_CONFIRMED_AT FROM WSTE_CLCT_TRMT_TRANSACTION WHERE ID = IN_TRANSACTION_ID;
    /*트랜잭션이 존재하는지 검사한다.*/
    IF VAR_CONFIRMED_AT IS NULL THEN
    /*트랜잭션이 진행중인 경우*/
		SET OUT_TRANSACTION_COMPLETED = FALSE;
    ELSE
    /*트랜잭션이 완료된 경우*/
		SET OUT_TRANSACTION_COMPLETED = TRUE;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_transaction_details`(
	IN IN_ORDER_ID				BIGINT,
    OUT OUT_DETAILS				JSON
)
BEGIN
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();
	DECLARE VAR_DISPOSER_WSTE_LIST				JSON					DEFAULT NULL;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS TRANSACTION_DETAILS_TEMP (
		ORDER_ID							BIGINT,
		ORDER_CODE							VARCHAR(10),
        COLLECTOR_SITE_ID					BIGINT,
        COLLECTOR_SITE_NAME					VARCHAR(255),
		COLLECTOR_TRMT_BIZ_CODE				VARCHAR(4),    
		COLLECTOR_TRMT_BIZ_NAME				VARCHAR(255),  
        AVATAR_PATH							VARCHAR(255),
		DISPOSER_WSTE_LIST					JSON,
        STATE_CODE							INT,
        STATE								VARCHAR(20),
        STATE_CATEGORY_ID					INT,
        STATE_CATEGORY						VARCHAR(20),
        REJECT_REASON						VARCHAR(255)
        
	);        
    
    CALL sp_req_current_time(VAR_REG_DT);
    
    INSERT INTO TRANSACTION_DETAILS_TEMP(
		ORDER_ID, 
        ORDER_CODE, 
        COLLECTOR_SITE_ID, 
        COLLECTOR_SITE_NAME, 
        COLLECTOR_TRMT_BIZ_CODE, 
        COLLECTOR_TRMT_BIZ_NAME, 
        AVATAR_PATH,
        STATE_CODE,
        STATE,
        STATE_CATEGORY_ID,
        STATE_CATEGORY,
        REJECT_REASON
    )
    SELECT 
		A.ID,
        A.ORDER_CODE,
        A.COLLECTOR_ID,
        B.SITE_NAME,
        B.TRMT_BIZ_CODE,
        C.NAME,
        D.AVATAR_PATH,
        E.STATE_CODE,
        E.STATE,
        E.STATE_CATEGORY_ID,
        E.STATE_CATEGORY,
        F.REJECT_REASON
    FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN COMP_SITE B ON A.COLLECTOR_ID = B.ID
    LEFT JOIN WSTE_TRMT_BIZ C ON B.TRMT_BIZ_CODE = C.CODE
    LEFT JOIN USERS D ON B.ID = D.AFFILIATED_SITE
    LEFT JOIN V_TRANSACTION_STATE_NAME E ON A.ID = E.DISPOSAL_ORDER_ID
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION F ON F.DISPOSAL_ORDER_ID = A.ID
    WHERE 
		A.ID = IN_ORDER_ID AND
        D.CLASS = 201 AND
        D.ACTIVE = TRUE;  
    	
    CALL sp_get_disposal_wste_lists(
		IN_ORDER_ID,
        VAR_DISPOSER_WSTE_LIST
    );
    
    UPDATE TRANSACTION_DETAILS_TEMP 
    SET DISPOSER_WSTE_LIST 			= VAR_DISPOSER_WSTE_LIST 
    WHERE ORDER_ID = IN_ORDER_ID;
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'ORDER_ID'					, ORDER_ID, 
        'ORDER_CODE'				, ORDER_CODE, 
        'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
        'COLLECTOR_SITE_NAME'		, COLLECTOR_SITE_NAME, 
        'COLLECTOR_TRMT_BIZ_CODE'	, COLLECTOR_TRMT_BIZ_CODE, 
        'COLLECTOR_TRMT_BIZ_NAME'	, COLLECTOR_TRMT_BIZ_NAME, 
        'AVATAR_PATH'				, AVATAR_PATH, 
        'DISPOSER_WSTE_LIST'		, DISPOSER_WSTE_LIST, 
		'STATE'						, STATE, 
		'STATE_CODE'				, STATE_CODE, 
		'STATE_CATEGORY_ID'			, STATE_CATEGORY_ID, 
		'STATE_CATEGORY'			, STATE_CATEGORY,
		'REJECT_REASON'				, REJECT_REASON
	)) 
    INTO OUT_DETAILS 
    FROM TRANSACTION_DETAILS_TEMP;
	DROP TABLE IF EXISTS TRANSACTION_DETAILS_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_transaction_exists`(
	IN IN_TRANSACTION_ID		BIGINT,					/*입력값 : 찾고자 하는 트랜잭션(폐기물처리작업) 고유등록번호*/
    OUT OUT_TRANSACTION_EXIST	TINYINT					/*출력값 : 트랜잭션이 유효하면 TRUE, 그렇지 않으면 FALSE 반환*/
)
BEGIN

/*
Procedure Name 		: sp_req_transaction_exists
Input param 		: 1개
Output param 		: 1개
Job 				: 현재 트랜잭션(폐기물배출작업)이 존재하면 TRUE, 그렇지 않으면 FALSE 반환
Update 				: 2022.01.25
Version				: 0.0.1
AUTHOR 				: Leo Nam
*/
	DECLARE VAR_CHK_COUNT						INT						DEFAULT NULL;
	
    SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM WSTE_CLCT_TRMT_TRANSACTION WHERE ID = IN_TRANSACTION_ID;
    /*트랜잭션이 존재하는지 검사한다.*/
    IF VAR_CHK_COUNT = 1 THEN
    /*트랜잭션이 존재하는 경우*/
		SET OUT_TRANSACTION_EXIST = TRUE;
    ELSE
    /*트랜잭션이 존재하지 않는 경우*/
		SET OUT_TRANSACTION_EXIST = FALSE;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_transaction_report`(
	IN IN_USER_ID					BIGINT,						/*입렦값 : 폐기물 처리보고서 작성자(USERS.ID)*/
	IN IN_TRANSACTION_ID			BIGINT						/*입렦값 : 폐기물 처리작업 코드(WSTE_CLCT_TRMT_TRANSACTION.ID)*/
)
BEGIN

/*
Procedure Name 	: sp_req_transaction_report
Input param 	: 8개
Job 			: 폐기물처리보고서를 열람한다
Update 			: 2022.03.24
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_TRANSACTION_EXISTS				TINYINT					DEFAULT NULL;	
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;	
	DECLARE VAR_COLLECTOR_SITE_ID				BIGINT					DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;	
	DECLARE VAR_TRANSACTION_DISPOSER_ORDER_ID	BIGINT					DEFAULT NULL;	
	DECLARE VAR_DISPOSER_ID						BIGINT					DEFAULT NULL;	
	DECLARE VAR_TRANSACTION_REPORT_ID			BIGINT					DEFAULT NULL;	
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	CALL sp_req_user_exists_by_id(
	/*생성자가 존재하는지 체크한다.*/
		IN_USER_ID, 
		TRUE, 
		rtn_val,
		msg_txt
	);
	/*등록을 요청하는 사용자의 USER_ID가 이미 등록되어 있는 경우에는 @USER_EXISTS = 1, 그렇지 않은 경우에는 @USER_EXISTS = 0이 됨*/ 		
	IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우*/
		CALL sp_req_transaction_exists(
        /*트랜잭션이 존재하는지 검사한다.*/
			IN_TRANSACTION_ID,
            VAR_TRANSACTION_EXISTS
        );
        IF VAR_TRANSACTION_EXISTS = TRUE THEN
        /*트랜잭션이 존재하는 경우*/
			CALL sp_req_site_id_from_transaction_report(
            /*트랜잭션의 양 당사자(배출자와 수거자)의 사이트 등록번호를 반환한다.*/
				IN_TRANSACTION_ID,
                VAR_DISPOSER_SITE_ID,
                VAR_COLLECTOR_SITE_ID
            );
            SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID FROM USERS WHERE ID = IN_USER_ID;
			SELECT DISPOSAL_ORDER_ID INTO VAR_TRANSACTION_DISPOSER_ORDER_ID FROM WSTE_CLCT_TRMT_TRANSACTION WHERE ID = IN_TRANSACTION_ID;
            IF VAR_USER_SITE_ID = 0 THEN
            /*개인배출자인 경우*/
				SELECT DISPOSER_ID INTO VAR_DISPOSER_ID FROM SITE_WSTE_DISPOSAL_ORDER WHERE ID = VAR_TRANSACTION_DISPOSER_ORDER_ID;
                IF VAR_DISPOSER_ID = IN_USER_ID THEN
                /*사용자에게 권한이 있는 경우 정상처리한다.*/
					SELECT ID INTO VAR_TRANSACTION_REPORT_ID FROM TRANSACTION_REPORT WHERE TRANSACTION_ID = IN_TRANSACTION_ID;
					CALL sp_req_transaction_report_without_handler(
						VAR_TRANSACTION_REPORT_ID,
                        rtn_val,
                        msg_txt,
                        json_data
                    );
                    IF rtn_val > 0 THEN
						SIGNAL SQLSTATE '23000';
                    END IF;
                ELSE
                /*사용자에게 권한이 없는 경우 예외처리한다.*/
					SET rtn_val = 35001;
					SET msg_txt = 'User not authorized';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사업자배출자인 경우*/
				IF VAR_DISPOSER_SITE_ID = VAR_USER_SITE_ID THEN
                /*사용자가 배출자 사이트의 관리자인 경우 정상처리한다.*/
					SELECT CLASS INTO VAR_USER_CLASS FROM USERS WHERE ID = IN_USER_ID;
                    IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
                    /*사용자에게 권한이 있는 경우 정상처리한다.*/
						SELECT ID INTO VAR_TRANSACTION_REPORT_ID FROM TRANSACTION_REPORT WHERE TRANSACTION_ID = IN_TRANSACTION_ID;
						CALL sp_req_transaction_report_without_handler(
							VAR_TRANSACTION_REPORT_ID,
							rtn_val,
							msg_txt,
							json_data
						);
						IF rtn_val > 0 THEN
							SIGNAL SQLSTATE '23000';
						END IF;
                    ELSE
					/*사용자에게 권한이 없는 경우 예외처리한다.*/
						SET rtn_val = 35002;
						SET msg_txt = 'User not authorized';
						SIGNAL SQLSTATE '23000';
                    END IF;
                ELSE
                /*사용자가 배출자 사이트의 관리자가 아닌 경우*/
					IF VAR_COLLECTOR_SITE_ID = VAR_USER_SITE_ID THEN
					/*사용자가 수거자 사이트의 관리자인 경우 정상처리한다.*/
						SELECT CLASS INTO VAR_USER_CLASS FROM USERS WHERE ID = IN_USER_ID;
						IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
						/*사용자에게 권한이 있는 경우 정상처리한다.*/
							SELECT ID INTO VAR_TRANSACTION_REPORT_ID FROM TRANSACTION_REPORT WHERE TRANSACTION_ID = IN_TRANSACTION_ID;
							CALL sp_req_transaction_report_without_handler(
								VAR_TRANSACTION_REPORT_ID,
								rtn_val,
								msg_txt,
								json_data
							);
							IF rtn_val > 0 THEN
								SIGNAL SQLSTATE '23000';
							END IF;
						ELSE
						/*사용자에게 권한이 없는 경우 예외처리한다.*/
							SET rtn_val = 35003;
							SET msg_txt = 'User not authorized';
							SIGNAL SQLSTATE '23000';
						END IF;
					ELSE
					/*사용자가 수거자 사이트의 관리자가 아닌 경우 예외처리한다.*/
						SET rtn_val = 35004;
						SET msg_txt = 'User does not belong to the emitter or collector1';
						SIGNAL SQLSTATE '23000';
					END IF;
                END IF;
            END IF;            
        ELSE
        /*트랜잭션이 존재하지 않는 경우 예외처리한다.*/
			SET rtn_val = 35005;
			SET msg_txt = 'Transaction is not found or invalid';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_transaction_report_without_handler`(
	IN IN_TRANSACTION_REPORT_ID		BIGINT,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200),
    OUT json_data					JSON
)
BEGIN

/*
Procedure Name 	: sp_req_transaction_report_without_handler
Input param 	: 1개
Job 			: 트랜잭션 리포트를 반환한다1
Update 			: 2022.03.25
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/   
	DECLARE VAR_IMG_LIST						JSON					DEFAULT NULL;	
	DECLARE VAR_TRANSACTION_ID					BIGINT					DEFAULT NULL;	
	DECLARE VAR_TRANSACTION_INFO				JSON					DEFAULT NULL;	
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;	
	DECLARE VAR_REVIEW_COUNT					INT						DEFAULT 0;	
	DECLARE VAR_REVIEW_EXISTS					TINYINT					DEFAULT FALSE;	
    
	CREATE TEMPORARY TABLE IF NOT EXISTS TRANSACTION_REPORT_TEMP (
		ID									BIGINT,
		TRANSACTION_ID						BIGINT,
		COLLECTOR_SITE_ID					BIGINT,    
		COLLECTOR_MANAGER_ID				BIGINT,
		DISPOSER_SITE_ID					BIGINT,
		AVATAR_PATH							VARCHAR(255),
		SITE_NAME							VARCHAR(255),
		QUANTITY							FLOAT,
		UNIT								VARCHAR(20),
		PRICE								INT,
		TRMT_METHOD							VARCHAR(4),
		TRMT_METHOD_NM						VARCHAR(30),
		DISPOSER_ORDER_ID					BIGINT,
        B_CODE								VARCHAR(10),
		SI_DO								VARCHAR(20),
		SI_GUN_GU							VARCHAR(20),
		EUP_MYEON_DONG						VARCHAR(20),
		DONG_RI								VARCHAR(20),
        ADDR								VARCHAR(200),
        LAT									DECIMAL(12,9),
        LNG									DECIMAL(12,9),
        ASK_END_AT							DATETIME,
		WSTE_CODE							VARCHAR(8),
		WSTE_NAME							VARCHAR(255),
		TRANSACTION_COMPLETED_AT			DATETIME,
        REVIEW_EXISTS						TINYINT,
		WSTE_LIST							JSON,
		IMG_LIST							JSON,
		TRANSACTION_INFO					JSON
	);        
	
	
	INSERT INTO 
	TRANSACTION_REPORT_TEMP(
		ID,
		TRANSACTION_ID,
		COLLECTOR_SITE_ID,
		COLLECTOR_MANAGER_ID,
		DISPOSER_SITE_ID,
		AVATAR_PATH,
		SITE_NAME,
		QUANTITY,
		UNIT,
		PRICE,
		TRMT_METHOD,
		TRMT_METHOD_NM,
		DISPOSER_ORDER_ID,
        B_CODE,
        SI_DO,
        SI_GUN_GU,
        EUP_MYEON_DONG,
        DONG_RI,
        ADDR,
        LAT,
        LNG,
        ASK_END_AT,
        WSTE_CODE,
        WSTE_NAME,
        TRANSACTION_COMPLETED_AT
	)
	SELECT 
		A.ID, 
        A.TRANSACTION_ID, 
        A.COLLECTOR_SITE_ID,         
        A.COLLECTOR_MANAGER_ID,
        A.DISPOSER_SITE_ID,  
        C.AVATAR_PATH,
        B.SITE_NAME,  
        A.QUANTITY,    
        A.UNIT,    
        A.PRICE,    
        A.TRMT_METHOD,    
        E.NAME,  
        D.DISPOSAL_ORDER_ID,  
        F.KIKCD_B_CODE,  
        G.SI_DO,   
        G.SI_GUN_GU,   
        G.EUP_MYEON_DONG,   
        G.DONG_RI,  
        F.ADDR,  
        F.LAT,  
        F.LNG,  
        D.COLLECT_ASK_END_AT,  
        A.WSTE_CODE,  
        H.NAME,
        A.TRANSACTION_COMPLETED_AT
    FROM TRANSACTION_REPORT A 
    LEFT JOIN COMP_SITE B ON A.COLLECTOR_SITE_ID = B.ID
    LEFT JOIN V_USERS C ON A.COLLECTOR_SITE_ID = C.AFFILIATED_SITE
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION D ON A.TRANSACTION_ID = D.ID
    LEFT JOIN WSTE_TRMT_METHOD E ON A.TRMT_METHOD = E.CODE
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER F ON A.DISPOSER_ORDER_ID = F.ID
    LEFT JOIN KIKCD_B G ON F.KIKCD_B_CODE = G.B_CODE
    LEFT JOIN WSTE_CODE H ON A.WSTE_CODE = H.CODE
	WHERE A.ID = IN_TRANSACTION_REPORT_ID AND C.CLASS = 201;
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'					, B.ID, 
			'DISPOSAL_ORDER_ID'		, B.DISPOSAL_ORDER_ID, 
			'FILE_NAME'				, B.FILE_NAME, 
			'IMG_PATH'				, B.IMG_PATH, 
			'FILE_SIZE'				, B.FILE_SIZE, 
			'ACTIVE'				, B.ACTIVE,
			'CLASS_CODE'			, B.CLASS_CODE,
			'CREATED_AT'			, B.CREATED_AT,
			'UPDATED_AT'			, B.UPDATED_AT,
			'TRANSACTION_ID'		, B.TRANSACTION_ID
		)
	) 
	INTO VAR_IMG_LIST 
	FROM TRANSACTION_REPORT A 
    LEFT JOIN WSTE_REGISTRATION_PHOTO B ON A.TRANSACTION_ID = B.TRANSACTION_ID
	WHERE A.ID = IN_TRANSACTION_REPORT_ID;    
	
    SELECT TRANSACTION_ID INTO VAR_TRANSACTION_ID
    FROM TRANSACTION_REPORT
    WHERE ID = IN_TRANSACTION_REPORT_ID;
    
    CALL sp_get_transaction_info_2(
		VAR_TRANSACTION_ID,
        VAR_TRANSACTION_INFO
    );
    
    SELECT DISPOSER_SITE_ID INTO VAR_DISPOSER_SITE_ID
    FROM TRANSACTION_REPORT
    WHERE ID = IN_TRANSACTION_REPORT_ID;
    
    SELECT COUNT(A.ID) INTO VAR_REVIEW_COUNT
    FROM POSTS A
    LEFT JOIN USERS B ON A.CREATOR_ID = B.ID
    WHERE 
		B.AFFILIATED_SITE = VAR_DISPOSER_SITE_ID AND
        A.ACTIVE = TRUE AND
        A.DELETED = FALSE AND
        A.CATEGORY = 4;	/*리뷰의 카테고리는 4번임 => POST_CATEGORY 참조*/
    
    IF VAR_REVIEW_COUNT > 0 THEN
		SET VAR_REVIEW_EXISTS = TRUE;
    ELSE
		SET VAR_REVIEW_EXISTS = FALSE;
    END IF;
	UPDATE TRANSACTION_REPORT_TEMP 
	SET 
		IMG_LIST 			= VAR_IMG_LIST,
		TRANSACTION_INFO 	= VAR_TRANSACTION_INFO,
		REVIEW_EXISTS 		= VAR_REVIEW_EXISTS
	WHERE ID 				= IN_TRANSACTION_REPORT_ID;
	/*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'REPORT_ID'							, ID, 
			'TRANSACTION_ID'					, TRANSACTION_ID, 
			'COLLECTOR_SITE_ID'					, COLLECTOR_SITE_ID, 
			'COLLECTOR_MANAGER_ID'				, COLLECTOR_MANAGER_ID, 
			'DISPOSER_SITE_ID'					, DISPOSER_SITE_ID, 
			'AVATAR_PATH'						, AVATAR_PATH, 
			'SITE_NAME'							, SITE_NAME, 
			'QUANTITY'							, QUANTITY, 
			'UNIT'								, UNIT, 
			'PRICE'								, PRICE, 
			'TRMT_METHOD'						, TRMT_METHOD, 
			'TRMT_METHOD_NM'					, TRMT_METHOD_NM, 
			'DISPOSER_ORDER_ID'					, DISPOSER_ORDER_ID, 
			'B_CODE'							, B_CODE, 
			'SI_DO'								, SI_DO, 
			'SI_GUN_GU'							, SI_GUN_GU, 
			'EUP_MYEON_DONG'					, EUP_MYEON_DONG, 
			'DONG_RI'							, DONG_RI, 
			'ADDR'								, ADDR, 
			'LAT'								, LAT, 
			'LNG'								, LNG, 
			'ASK_END_AT'						, ASK_END_AT, 
			'WSTE_CODE'							, WSTE_CODE, 
			'WSTE_NAME'							, WSTE_NAME, 
			'TRANSACTION_COMPLETED_AT'			, TRANSACTION_COMPLETED_AT, 
            'REVIEW_EXISTS'						, REVIEW_EXISTS,
			'IMG_LIST'							, IMG_LIST, 
			'TRANSACTION_INFO'					, TRANSACTION_INFO
		)
	) 
    INTO json_data 
    FROM TRANSACTION_REPORT_TEMP;
    SET rtn_val = 0;
    SET msg_txt = 'success1';
	DROP TABLE IF EXISTS TRANSACTION_REPORT_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_trmt_biz_info`()
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
    
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'CODE'						, CODE, 
			'NAME'						, NAME, 
			'NOTE'						, NOTE, 
			'USER_TYPE'					, USER_TYPE, 
			'USER_TYPE_EN_NM'			, USER_TYPE_EN_NM, 
			'USER_TYPE_KO_NM'			, USER_TYPE_KO_NM
		)
	) 
	INTO json_data 
	FROM V_WSTE_TRMT_BIZ 
	ORDER BY CODE;
	CALL sp_return_results(rtn_val, msg_txt, json_data);    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_use_same_company_permit_code`(
	IN IN_PERMIT_REG_CODE	VARCHAR(100),		/*입력값: 체크할 수거자 업체등의 허가 또는 신고번호*/
    OUT OUT_PARAM			TINYINT				/*출력값: 동일한 등록번호가 존재한다면 1, 그렇지 않으면 0을 반환함*/
)
BEGIN

/*
Procedure Name 	: sp_req_use_same_company_permit_code
Input param 	: 1개
Output param 	: 1개
Job 			: 체크할 허가 또는 신고번호로 등록된 사업자가 존재하는지 체크한 후 존재한다면 1, 그렇지 않으면 0을 반환하게 됨
Update 			: 2022.01.10
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT COUNT(ID) INTO OUT_PARAM FROM COMPANY WHERE PERMIT_REG_CODE = IN_PERMIT_REG_CODE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_use_same_company_reg_id`(
	IN IN_BIZ_REG_CODE		VARCHAR(12),		/*입력값: 체크할 사업자 등록번호*/
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_use_same_company_reg_id
Input param 	: 1개
Output param 	: 2개
Job 			: 체크할 사업자등록번호로 등록된 사업자가 존재하는지 체크한 후 존재하지 않는다면 0, 그렇지 않으면 예외처리코드를 반환하게 됨
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_CHK_COUNT						INT						DEFAULT NULL;

	SELECT COUNT(ID) 
    INTO VAR_CHK_COUNT 
    FROM COMPANY 
    WHERE BIZ_REG_CODE = IN_BIZ_REG_CODE;
    
    IF VAR_CHK_COUNT = 0 THEN
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
		SET rtn_val = 27501;
		SET msg_txt = 'The same business registration number already exists';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_use_same_phone`(
	IN IN_PHONE			VARCHAR(20),			/*입력값: 체크할 전화번호*/
    IN IN_SITE_ID		BIGINT,					/*입력값: 사용자가 소속될 사업자 고유번호로서 개인회원인 경우에는 0임*/
    IN IN_ACTIVE		TINYINT,				/*입력값: 사용자 활성화된 조건이면 TRUE, 그렇지 않으면 FALSE를 입력한다.*/
    OUT rtn_val 		INT,					/*출력값 : 처리결과 반환값*/
    OUT msg_txt 		VARCHAR(100)			/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_use_same_phone
Input param 	: 3개
Output param 	: 1개
Job 			: 등록하고자 하는 휴대폰번호와 동일한 사용자가 이미 등록되어 있는지 검사
Update 			: 2022.01.15
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: 핸드폰 다중 등록정책의 변경에 대응하도록 수정함(기본 정책 : 다중등록 불가)
*/
	DECLARE ALLOW_PHONE_MULTIPLE_REGISTRATION	VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_CHK_COUNT						INT						DEFAULT NULL;
    
    CALL sp_req_policy_direction(
		'allow_phone_multiple_registration', 
        ALLOW_PHONE_MULTIPLE_REGISTRATION
	);

	IF ALLOW_PHONE_MULTIPLE_REGISTRATION = '1' THEN
    /*핸드폰 번호의 다중 등록을 허용하는 경우*/
		IF IN_SITE_ID = 0 THEN
		/*개인회원으로 등록하고자 하는 경우에는 기존에 등록된 사업자회원정보에 동일한 핸드폰 번호가 등록되어 있다 하더라도 개인회원으로 핸드폰이 등록되어 있지 않다면 등록이 가능하도록 한다.*/
			SELECT COUNT(ID) INTO VAR_CHK_COUNT 
			FROM USERS 
			WHERE 
				PHONE = IN_PHONE AND 
				ACTIVE = IN_ACTIVE AND 
				BELONG_TO = IN_SITE_ID;
		ELSE
		/*사업자회원으로 등록하고자 하는 경우에는 기존에 등록된 개인회원정보에 동일한 핸드폰 번호가 등록되어 있다 하더라도 사업자회원으로 핸드폰이 등록되어 있지 않다면 등록이 가능하도록 한다.*/
			SELECT COUNT(ID) INTO VAR_CHK_COUNT 
			FROM USERS 
			WHERE 
				PHONE = IN_PHONE AND 
				ACTIVE = IN_ACTIVE AND 
				BELONG_TO > 0;
		END IF;
    ELSE
    /*핸드폰 번호의 다중 등록을 허용하지 않는 경우*/
		SELECT COUNT(ID) INTO VAR_CHK_COUNT 
		FROM USERS 
		WHERE 
			PHONE = IN_PHONE AND
			ACTIVE = IN_ACTIVE;
    END IF;
    
    IF VAR_CHK_COUNT = 0 THEN
    /*핸드폰 이중등록이 아닌 경우*/
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
    /*핸드폰 이중등록인 경우 예외처리한다.*/   
		SET rtn_val = 25001;
		SET msg_txt = 'Phone number is already registered';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_affiliation`(
	IN IN_USER_REG_ID		VARCHAR(50),		/* user id who wants to know where it belongs */
    OUT OUT_BELONG_TO		BIGINT				/* return value : where the user belongs */
)
BEGIN

/*
Procedure Name 	: sp_req_user_affiliation
Input param 	: 1개
Output param 	: 1개(0 - 개인 사용자, 0 이외의 값 - 소속된 사업자 고유등록번호)
Job 			: 사용자의 소속을 리턴함
Update 			: 2022.01.07
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT BELONG_TO INTO OUT_BELONG_TO FROM USERS WHERE USER_ID = IN_USER_REG_ID;	
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_affiliation_by_user_id`(
	IN IN_USER_ID		BIGINT,				/* user id who wants to know where it belongs */
    OUT OUT_SITE_ID		BIGINT				/* return value : where the user belongs */
)
BEGIN

/*
Procedure Name 	: sp_req_user_affiliation_by_user_id
Input param 	: 1개
Output param 	: 1개(0 - 개인 사용자, 0 이외의 값 - 소속된 사업자 고유등록번호)
Job 			: 사용자의 소속을 리턴함
Update 			: 2022.02.17
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/

	SELECT AFFILIATED_SITE INTO OUT_SITE_ID FROM USERS WHERE ID = IN_USER_ID;	
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_can_be_added`(
	IN IN_SITE_ID		BIGINT,			/*사이트 고유등록번호*/
    OUT OUT_RES			TINYINT			/*사용자 추가가 가능한 경우 TRUE, 그렇지 않은 경우 FALSE 반환*/
)
BEGIN

/*
Procedure Name 		: sp_req_user_can_be_added
Input param 		: 1개
Output param 		: 1개
Job 				: 사이트의 관리자가 사이트 운영을 위한 사용자를 추가하는 경우 가능한지 여부를 반환함
Update 				: 2022.01.14
Version				: 0.0.1
AUTHOR 				: Leo Nam
*/
	DECLARE VAR_NUMBER_OF_USERS					INT						DEFAULT 0;
	DECLARE MAX_NUMBER_OF_USERS					VARCHAR(255)			DEFAULT NULL;
	
	CALL sp_req_count_of_users(
		IN_SITE_ID,
        TRUE,
        VAR_NUMBER_OF_USERS
    );
    
    CALL sp_req_policy_direction(
		'user_registration_limit_per_site', 
        MAX_NUMBER_OF_USERS
	);
    
    SELECT CAST(MAX_NUMBER_OF_USERS AS UNSIGNED) > VAR_NUMBER_OF_USERS INTO OUT_RES;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_class`(
	IN IN_USER_REG_ID		VARCHAR(50),
    OUT OUT_USER_CLASS	INT
)
BEGIN
	SELECT CLASS INTO OUT_USER_CLASS FROM USERS WHERE USER_ID = IN_USER_REG_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_class_by_user_reg_id`(
	IN IN_USER_ID		BIGINT,
    OUT OUT_USER_CLASS	INT
)
BEGIN
	SELECT CLASS INTO OUT_USER_CLASS FROM USERS WHERE ID = IN_USER_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_detail`(
	IN IN_USER_ID				BIGINT				/*입력값 : USERS.ID*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_detail
Input param 	: 1개
Job 			: 사용자에 대한 정보를 반환한다
Update 			: 2022.03.12
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_USER_COMP_ID					BIGINT					DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;	
	DECLARE VAR_COMPANY_DETAIL					JSON					DEFAULT NULL;	
	DECLARE VAR_SITE_DETAIL						JSON					DEFAULT NULL;	
	DECLARE VAR_AVG_RATING						FLOAT					DEFAULT NULL;	
	DECLARE VAR_REVIEWS							JSON					DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS USER_TEMP;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;
	START TRANSACTION;
    /*트랜잭션 시작*/
    
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    
    IF rtn_val = 0 THEN
		CREATE TEMPORARY TABLE IF NOT EXISTS USER_TEMP (
			ID								BIGINT,
			USER_ID							VARCHAR(50),
			USER_NAME						VARCHAR(20),
			PHONE							VARCHAR(20),
			AVATAR_PATH						VARCHAR(255),
			PUSH_ENABLED					TINYINT,
			NOTICE_ENABLED					TINYINT,
			COMPANY_ID						BIGINT,
			COMPANY_DETAIL					JSON,
			SITE_ID							BIGINT,
			SITE_DETAIL						JSON,
			CLASS 							INT,
			DEPARTMENT 						VARCHAR(20),
			CS_MANAGER_ID					BIGINT,
			CONFIRMED						TINYINT,
			AGREEMENT_TERMS					TINYINT,
			CONFIRMED_AT					DATETIME,
			CREATED_AT						DATETIME,
			UPDATED_AT						DATETIME,
			USER_CURRENT_TYPE				INT,
			USER_CURRENT_TYPE_NM			VARCHAR(20),
            REVIEWS							JSON,
            AVG_RATING						FLOAT
		);   
			
		INSERT INTO 
		USER_TEMP(
			ID, 
			USER_ID, 
			USER_NAME, 
			PHONE, 
            AVATAR_PATH,
            PUSH_ENABLED,
            NOTICE_ENABLED,
			COMPANY_ID, 
			SITE_ID, 
			CLASS,
			DEPARTMENT,
			CS_MANAGER_ID,
			CONFIRMED,
			AGREEMENT_TERMS,
			CONFIRMED_AT,
			CREATED_AT, 
			UPDATED_AT,
            USER_CURRENT_TYPE,
            USER_CURRENT_TYPE_NM
		)	
		SELECT 
			A.ID,
			A.USER_ID, 
			A.USER_NAME, 
			A.PHONE, 
            A.AVATAR_PATH,
            A.PUSH_ENABLED,
            A.NOTICE_ENABLED,
			A.BELONG_TO, 
			A.AFFILIATED_SITE, 
			A.CLASS, 
			A.DEPARTMENT, 
			A.CS_MANAGER_ID, 
			A.CONFIRMED, 
			A.AGREEMENT_TERMS, 
			A.CONFIRMED_AT,
			A.CREATED_AT,
			A.UPDATED_AT,
            A.USER_CURRENT_TYPE,
            B.TYPE_EN
		FROM USERS A LEFT JOIN USER_TYPE B ON A.USER_CURRENT_TYPE = B.ID
		WHERE A.ID = IN_USER_ID;
		
        SELECT BELONG_TO, AFFILIATED_SITE INTO VAR_USER_COMP_ID, VAR_USER_SITE_ID FROM USERS WHERE ID = IN_USER_ID;
        IF VAR_USER_COMP_ID > 0 THEN
			CALL sp_get_company_info(
				VAR_USER_COMP_ID,
                VAR_COMPANY_DETAIL
            );
        ELSE
			SET VAR_COMPANY_DETAIL = NULL;
        END IF;
		UPDATE USER_TEMP SET COMPANY_DETAIL = VAR_COMPANY_DETAIL WHERE ID = IN_USER_ID;
		
        IF VAR_USER_COMP_ID > 0 THEN
			CALL sp_get_site_info(
				VAR_USER_SITE_ID,
                VAR_SITE_DETAIL
            );
        ELSE
			SET VAR_SITE_DETAIL = NULL;
        END IF;
        
        CALL sp_req_get_site_reviews_without_handler(
			VAR_USER_SITE_ID,
            rtn_val,
            msg_txt,
            VAR_AVG_RATING,
            VAR_REVIEWS
        );
        IF rtn_val = 0 THEN
			UPDATE USER_TEMP 
            SET 
				SITE_DETAIL = VAR_SITE_DETAIL,
                REVIEWS = VAR_REVIEWS
            WHERE ID = IN_USER_ID;				
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'ID', 							ID, 
					'USER_REG_ID', 					USER_ID, 
					'USER_NAME', 					USER_NAME, 
					'PHONE', 						PHONE, 
					'AVATAR_PATH',					AVATAR_PATH,
					'PUSH_ENABLED',					PUSH_ENABLED,
					'NOTICE_ENABLED',				NOTICE_ENABLED,
					'COMPANY_ID', 					COMPANY_ID, 
					'COMPANY_DETAIL', 				COMPANY_DETAIL, 
					'SITE_ID', 						SITE_ID, 
					'SITE_DETAIL', 					SITE_DETAIL, 
					'CLASS', 						CLASS, 
					'DEPARTMENT', 					DEPARTMENT,
					'CS_MANAGER_ID', 				CS_MANAGER_ID,
					'CONFIRMED', 					CONFIRMED,
					'AGREEMENT_TERMS', 				AGREEMENT_TERMS,
					'CONFIRMED_AT', 				CONFIRMED_AT,
					'CREATED_AT', 					CREATED_AT,
					'UPDATED_AT', 					UPDATED_AT,
					'REVIEWS', 						REVIEWS,
					'AVG_RATING', 					VAR_AVG_RATING
				) 
			)
			INTO json_data 
			FROM USER_TEMP 
			WHERE ID = IN_USER_ID;			
			DROP TABLE IF EXISTS USER_TEMP;
        ELSE
			SET rtn_val = 32602;
			SET msg_txt = 'Failed to get review list';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
		SET rtn_val = 32601;
		SET msg_txt = 'User does not exists';
		SIGNAL SQLSTATE '23000';
    END IF;
	COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
    
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_exists`(
	IN IN_USER_REG_ID			VARCHAR(50),
    IN IN_ACTIVE			TINYINT,
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_exists
Input param 	: 2개
Output param 	: 2개
Job 			: 입력 param의 IN_USER_REG_ID를 사용자 아이디로 사용하는 사용자가 존재하는지 여부 반환
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;

	IF IN_ACTIVE IS NULL THEN
		SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM USERS WHERE USER_ID = IN_USER_REG_ID;
    ELSE
		SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM USERS WHERE USER_ID = IN_USER_REG_ID AND ACTIVE = IN_ACTIVE;
    END IF;
    
    IF VAR_CHK_COUNT = 1 THEN
    /*사용자가 존재하는 경우*/
		SET rtn_val = 0;
		SET msg_txt = 'Success9';
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SET rtn_val = 27601;
		SET msg_txt = 'user does not exist';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_exists_by_id`(
	IN IN_USER_ID			BIGINT,
    IN IN_ACTIVE			TINYINT,
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_exists
Input param 	: 2개
Output param 	: 2개
Job 			: 입력 param의 IN_USER_ID를 사용자 고유등록번호로 사용하는 사용자가 존재하는지 여부 반환
Update 			: 2022.01.28
Version			: 0.0.2
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.2)
*/
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;

	IF IN_ACTIVE IS NULL THEN
		SELECT COUNT(ID) INTO VAR_CHK_COUNT 
        FROM USERS 
        WHERE 
			ID = IN_USER_ID;
            
		IF VAR_CHK_COUNT = 0 THEN
			SET rtn_val = 26201;
			SET msg_txt = 'user not fouund';
        ELSE
			SET rtn_val = 0;
			SET msg_txt = 'Success7777';
        END IF;
    ELSE
		SELECT COUNT(ID) INTO VAR_CHK_COUNT 
        FROM USERS 
        WHERE 
			ID = IN_USER_ID 
            AND ACTIVE = IN_ACTIVE;
            
		IF VAR_CHK_COUNT = 0 THEN
			SET rtn_val = 26202;
			SET msg_txt = 'user not found1';
        ELSE
			SET rtn_val = 0;
			SET msg_txt = 'Success6666';
        END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_exists_with_user_name_and_phone`(
	IN IN_USER_NAME			VARCHAR(50),		/*입력값 : 사용자 이름*/
	IN IN_PHONE				VARCHAR(20),		/*입력값 : 사용자 등록 전화번호*/
	IN IN_ACTIVE			TINYINT,			/*입력값 : 사용자 뢀성화상태*/
	OUT OUT_PARAM 			INT					/*출력값 : 처리결과 반환값*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_exists_with_user_name_and_phone
Input param 	: 3개
Output param 	: 1개
Job 			: 사용자 이름과 전화번호로 사용자가 존재하는 여부 반환
Update 			: 2022.01.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	IF IN_ACTIVE IS NULL THEN
		SELECT COUNT(ID) 
        INTO OUT_PARAM 
        FROM USERS 
        WHERE 
			USER_NAME	 = IN_USER_NAME AND 
            PHONE		 = IN_PHONE;
    ELSE
		SELECT COUNT(ID) 
        INTO OUT_PARAM 
        FROM USERS 
        WHERE 
			USER_NAME	 = IN_USER_NAME AND 
            PHONE		 = IN_PHONE AND 
            ACTIVE		 = IN_ACTIVE;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_id`(
	IN IN_USER_NAME				VARCHAR(50),							/*입력값 : 사용자 이름*/
	IN IN_PHONE					VARCHAR(20),							/*입력값 : 사용자 등록 전화번호*/
    IN IN_ACTIVE				TINYINT,								/*입력값 : 사용자 활성화 상태*/
	IN IN_USER_TYPE				ENUM('person','company','system'),		/*입력값 : 사용자 타입*/
    OUT OUT_USER_REG_ID			VARCHAR(50),							/*입력값 : 사용자 아이디*/
    OUT rtn_val 				INT,									/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200)							/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_id
Input param 	: 4개
Output param 	: 3개
Job 			: 입력 param의 IN_USER_NAME의 이름과 IN_PHONE의 전화번호를 사용하는 사용자의 USER_ID를 OUT_USER_REG_ID를 통하여 반환함
Update 			: 2022.01.12
Version			: 0.0.1
AUTHOR 			: Leo Nam

처리결과 / 메시지	: 0 - User ID Found
				: 21201 - User ID does not exist
				: 21202 - No user ID as a business administrator
				: 21203 - User ID as system administrator does not exist
				: 21204 - User type exception error
*/
	
	SET rtn_val = 0;
	SET msg_txt = 'User ID Found';
    
    IF IN_USER_TYPE = 'person' THEN
		IF IN_ACTIVE IS NULL THEN
			SELECT USER_ID INTO OUT_USER_REG_ID FROM USERS WHERE USER_NAME = IN_USER_NAME AND PHONE = IN_PHONE AND BELONG_TO = 0 AND CLASS >= 200;
		ELSE
			SELECT USER_ID INTO OUT_USER_REG_ID FROM USERS WHERE USER_NAME = IN_USER_NAME AND PHONE = IN_PHONE AND BELONG_TO = 0 AND CLASS >= 200 AND ACTIVE = IN_ACTIVE;
		END IF;
		
		IF USER_ID IS NULL THEN
			SET OUT_USER_REG_ID = NULL;
			SET rtn_val = 21201;
			SET msg_txt = 'Personal user ID does not exist';
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
		IF IN_USER_TYPE = 'company' THEN
			IF IN_ACTIVE IS NULL THEN
				SELECT USER_ID INTO OUT_USER_REG_ID FROM USERS WHERE USER_NAME = IN_USER_NAME AND PHONE = IN_PHONE AND BELONG_TO > 0 AND CLASS >= 200;
			ELSE
				SELECT USER_ID INTO OUT_USER_REG_ID FROM USERS WHERE USER_NAME = IN_USER_NAME AND PHONE = IN_PHONE AND BELONG_TO > 0 AND CLASS >= 200 AND ACTIVE = IN_ACTIVE;
			END IF;
			
			IF USER_ID IS NULL THEN
				SET OUT_USER_REG_ID = NULL;
				SET rtn_val = 21202;
				SET msg_txt = 'No user ID as a business administrator';
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
			IF IN_USER_TYPE = 'system' THEN
				IF IN_ACTIVE IS NULL THEN
					SELECT USER_ID INTO OUT_USER_REG_ID FROM USERS WHERE USER_NAME = IN_USER_NAME AND PHONE = IN_PHONE AND BELONG_TO = 0 AND CLASS < 200;
				ELSE
					SELECT USER_ID INTO OUT_USER_REG_ID FROM USERS WHERE USER_NAME = IN_USER_NAME AND PHONE = IN_PHONE AND BELONG_TO = 0 AND CLASS < 200 AND ACTIVE = IN_ACTIVE;
				END IF;
				
				IF USER_ID IS NULL THEN
					SET OUT_USER_REG_ID = NULL;
					SET rtn_val = 21203;
					SET msg_txt = 'User ID as system administrator does not exist';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
				SET rtn_val = 21204;
				SET msg_txt = 'User type exception error';
				SIGNAL SQLSTATE '23000';
			END IF;
		END IF;		
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_id_with_user_name_and_phone`(
	IN IN_USER_NAME						VARCHAR(50),		/*입력값 : 사용자 이름*/
	IN IN_PHONE							VARCHAR(20),		/*입력값 : 사용자 등록 전화번호*/
	IN IN_ACTIVE						TINYINT,			/*입력값 : 사용자 뢀성화상태*/
	OUT OUT_USER_REG_ID					VARCHAR(50)			/*출력값 : 사용자 아이디*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_id_with_user_name_and_phone
Input param 	: 3개
Output param 	: 1개
Job 			: 사용자 이름과 전화번호로 사용자가 아이디를 반환
Update 			: 2022.01.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT USER_ID
    INTO OUT_USER_REG_ID
	FROM USERS 
	WHERE 
		USER_NAME 	= IN_USER_NAME AND 
		PHONE 		= IN_PHONE AND 
		ACTIVE 		= IN_ACTIVE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_list`(
	IN IN_USER_ID							BIGINT,			/*입력값 : 사용자 고유등록번호*/
    IN IN_PERIOD							INT,			/*입력값 : 검색 기간(DAY)*/
    IN IN_OFFSET							INT,			/*입력값 : 스킵할 아이템의 갯수*/
    IN IN_ITEMS								INT				/*입력값 : 폐이지당 반환할 리스트의 개수*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_list
Input param 	: 1개
Job 			: 등록회원리스트를 반환한다.
Update 			: 2022.02.12
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/		

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;      
    DECLARE CUR_USER_REG_ID		 				BIGINT;
    DECLARE CUR_USER_NAME			 			VARCHAR(20);
    DECLARE CUR_PHONE				 			VARCHAR(20);
    DECLARE CUR_SITE_ID				 			BIGINT;
    DECLARE CUR_SITE_NM				 			VARCHAR(255);
    DECLARE CUR_TRMT_BIZ_CODE		 			INT;
    DECLARE CUR_TRMT_BIZ_NM			 			VARCHAR(255);
    DECLARE CUR_USER_CLASS			 			INT;
    DECLARE CUR_USER_CLASS_NM		 			VARCHAR(50);
    DECLARE CUR_ACTIVE				 			TINYINT;
    DECLARE CUR_CREATED_AT						DATETIME;	
    DECLARE CUR_UPDATED_AT						DATETIME;	
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;	
    DECLARE TEMP_CURSOR 						CURSOR FOR 
    
	SELECT 
		ID, 
        USER_NAME, 
        PHONE, 
        AFFILIATED_SITE, 
        SITE_NAME, 
        TRMT_BIZ_CODE, 
        TRMT_BIZ_NM, 
        CLASS, 
        CLASS_NM, 
        ACTIVE, 
        CREATED_AT, 
        UPDATED_AT
    FROM V_USERS
    WHERE 
		/*CURRENT_TIMESTAMP <= ADDTIME(CREATED_AT, CONCAT(IN_PERIOD, ' 00:00:00'))*/
		CURRENT_TIMESTAMP <= DATE_ADD(CREATED_AT, INTERVAL IN_PERIOD DAY)
	ORDER BY CREATED_AT DESC
    LIMIT IN_OFFSET, IN_ITEMS;   
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;     		
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  
    
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
		CALL sp_req_user_class_by_user_reg_id(
			IN_USER_ID,
			VAR_USER_CLASS
		);
		IF VAR_USER_CLASS = 101 OR VAR_USER_CLASS = 102 THEN
			CREATE TEMPORARY TABLE IF NOT EXISTS USER_LIST_TABLE (
				USER_REG_ID				BIGINT,
				USER_NAME				VARCHAR(20),
				PHONE					VARCHAR(20),
				SITE_ID					BIGINT,
				SITE_NAME				VARCHAR(255),
				TRMT_BIZ_CODE			INT,
				TRMT_BIZ_NM				VARCHAR(255),
				USER_CLASS				INT,
				USER_CLASS_NM			VARCHAR(50),
				ACTIVE					TINYINT,
				CREATED_AT				DATETIME,
				UPDATED_AT				DATETIME
			);
			
			OPEN TEMP_CURSOR;	
			cloop: LOOP
				FETCH TEMP_CURSOR 
				INTO 
					CUR_USER_REG_ID,
					CUR_USER_NAME,
					CUR_PHONE,
					CUR_SITE_ID,
					CUR_SITE_NM,
					CUR_TRMT_BIZ_CODE,
					CUR_TRMT_BIZ_NM,
					CUR_USER_CLASS,
					CUR_USER_CLASS_NM,
					CUR_ACTIVE,
					CUR_CREATED_AT,
					CUR_UPDATED_AT;   
				
				SET vRowCount = vRowCount + 1;
				IF endOfRow THEN
					LEAVE cloop;
				END IF;
				
				INSERT INTO 
				USER_LIST_TABLE(
					USER_REG_ID, 
					USER_NAME, 
					PHONE, 
					SITE_ID, 
					SITE_NAME, 
					TRMT_BIZ_CODE, 
					TRMT_BIZ_NM, 
					USER_CLASS, 
					USER_CLASS_NM, 
					ACTIVE, 
					CREATED_AT, 
					UPDATED_AT
				)
				VALUES(
					CUR_USER_REG_ID, 
					CUR_USER_NAME,
					CUR_PHONE,
					CUR_SITE_ID,
					CUR_SITE_NM,
					CUR_TRMT_BIZ_CODE,
					CUR_TRMT_BIZ_NM,
					CUR_USER_CLASS,
					CUR_USER_CLASS_NM,
					CUR_ACTIVE,
					CUR_CREATED_AT,
					CUR_UPDATED_AT
				);
				
			END LOOP;   
			CLOSE TEMP_CURSOR;
			
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'USER_REG_ID'		, USER_REG_ID, 
					'USER_NAME'			, USER_NAME, 
					'PHONE'				, PHONE, 
					'SITE_ID'			, SITE_ID, 
					'SITE_NAME'			, SITE_NAME, 
					'TRMT_BIZ_CODE'		, TRMT_BIZ_CODE, 
					'TRMT_BIZ_NM'		, TRMT_BIZ_NM, 
					'USER_CLASS'		, USER_CLASS, 
					'USER_CLASS_NM'		, USER_CLASS_NM, 
					'ACTIVE'			, ACTIVE, 
					'CREATED_AT'		, CREATED_AT, 
					'UPDATED_AT'		, UPDATED_AT
				)
			) 
			INTO json_data 
			FROM USER_LIST_TABLE;
        ELSE
			SET json_data = NULL;
			SET rtn_val 		= 30102;
			SET msg_txt 		= 'User not authorized';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
		SET json_data = NULL;
		SET rtn_val 		= 30101;
		SET msg_txt 		= 'User not found';
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
    DROP TABLE IF EXISTS USER_LIST_TABLE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_login`(
	IN IN_USER_REG_ID		VARCHAR(50),		/*입력값 : 사용자 아이디*/
	IN IN_PWD				VARCHAR(200),		/*입력값 : 사용자 등록 전화번호*/
	IN IN_FCM				VARCHAR(200)		/*입력값 : FCM*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_login
Input param 	: 2개
Job 			: 사용자 로그인기능으로서 사용자의 아이디와 암호로 해당사용자가 존재하는지 여부를 반환
Update 			: 2022.02.19
Version			: 0.0.6
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_USER_LOGIN_SUCCESS				INT						DEFAULT 0;
	DECLARE VAR_PWD_MATCH						INT						DEFAULT 0;
	DECLARE VAR_USER_EXISTS						INT						DEFAULT 0;
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;
	DECLARE VAR_USER_TYPE_CODE					INT						DEFAULT NULL;
	DECLARE VAR_USER_TYPE						VARCHAR(20)				DEFAULT NULL;
	DECLARE VAR_ID								BIGINT					DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;
	START TRANSACTION;
    /*트랜잭션 시작*/
    
	CALL sp_req_user_exists(
		IN_USER_REG_ID,
		TRUE,
		rtn_val, 
		msg_txt
	);
	
	IF rtn_val = 0 THEN
		SELECT COUNT(ID) 
		INTO VAR_USER_LOGIN_SUCCESS 
		FROM USERS 
		WHERE 
			USER_ID = IN_USER_REG_ID AND 
			ACTIVE = TRUE;	
								
		IF VAR_USER_LOGIN_SUCCESS = 1 THEN
			SELECT COUNT(ID) 
			INTO VAR_PWD_MATCH
			FROM USERS 
			WHERE 
				USER_ID = IN_USER_REG_ID AND 
				ACTIVE = TRUE AND 
				PWD = IN_PWD;	
			SELECT COUNT(ID) INTO VAR_USER_EXISTS FROM USERS WHERE USER_ID = IN_USER_REG_ID;
			IF VAR_USER_EXISTS = 1 THEN
			/*로그인 정보와 일치하는 사용자가 존재하는 경우 정상처리한다.*/
				SELECT AFFILIATED_SITE, ID
                INTO VAR_USER_SITE_ID, VAR_ID
                FROM USERS 
                WHERE USER_ID = IN_USER_REG_ID;
                IF VAR_USER_SITE_ID = 0 THEN
                /*사용자가 개인회원인 경우*/
					CALL sp_req_user_class(
						IN_USER_REG_ID,
                        VAR_USER_CLASS
                    );
                    IF VAR_USER_CLASS < 200 THEN
						SET VAR_USER_TYPE_CODE = 1; 
                    ELSE
						SET VAR_USER_TYPE_CODE = 2; 
                    END IF;
                ELSE
                /*사용자가 사업자 소속의 관리자인 경우*/
					SELECT USER_TYPE INTO VAR_USER_TYPE FROM V_USERS WHERE USER_ID = IN_USER_REG_ID;
					IF VAR_USER_TYPE IS NOT NULL THEN
					/*소속한 사이트(개인인경우는 0)가 정상적으로 분류된 경우*/
						IF VAR_USER_TYPE = 'collector' THEN
							SET VAR_USER_TYPE_CODE = 3;
						ELSE
							SET VAR_USER_TYPE_CODE = 2;
						END IF;
					ELSE
					/*소속한 사이트(개인인경우는 0)가 분류되지 않은 경우*/
						SET rtn_val = 22102;
						SET msg_txt = 'Affiliation site industry classification error';
						SIGNAL SQLSTATE '23000';
					END IF;
                END IF;
                
				UPDATE USERS SET USER_CURRENT_TYPE = VAR_USER_TYPE_CODE WHERE USER_ID = IN_USER_REG_ID;
                
                IF ROW_COUNT() = 1 THEN
                /*사용자 정보가 성공적으로 변경된 경우 정상처리한다.*/       
					SELECT JSON_OBJECT(
						'ID', 							ID, 
						'USER_ID', 						USER_ID, 
						'PWD', 							PWD, 
						'USER_NAME', 					USER_NAME, 
						'TRMT_BIZ_CODE', 				TRMT_BIZ_CODE, 
						'SITE_ID', 						AFFILIATED_SITE, 
						'COMP_ID', 						BELONG_TO, 
						'FCM', 							FCM, 
						'CLASS', 						CLASS, 
						'PHONE', 						PHONE,			/*0.0.4에서 추가 PHONE추가*/
						'USER_TYPE', 					USER_TYPE,
						'USER_CURRENT_TYPE', 			USER_CURRENT_TYPE_NM,
						'PUSH_ENABLED', 				PUSH_ENABLED,
						'NOTICE_ENABLED', 				NOTICE_ENABLED,
						'AVATAR_PATH', 					AVATAR_PATH,
						'COMP_SITE_CONFIRMED', 			COMP_SITE_CONFIRMED,
						'PWD_MATCH', 					VAR_PWD_MATCH
					) 
					INTO json_data 
					FROM V_USERS 
					WHERE 
						USER_ID 		= IN_USER_REG_ID AND 
						ACTIVE 			= TRUE;
                    
                    UPDATE USERS
                    SET 
						UPDATER_ID 			= VAR_ID,
						UPDATER_CATEGORY 	= 'member',
						FCM 				= IN_FCM,
                        UPDATED_AT 			= NOW()
                    WHERE USER_ID 			= IN_USER_REG_ID;
                    
                    IF ROW_COUNT() = 1 THEN
						SET rtn_val = 0;
						SET msg_txt = 'success';
                    ELSE
						SET rtn_val = 22104;
						SET msg_txt = 'Failed to change fcm imformation';
						SIGNAL SQLSTATE '23000';
                    END IF;
                    
                ELSE
                /*사용자 정보변경에 실패한 경우 예외처리한다.*/
					SET rtn_val = 22104;
					SET msg_txt = 'Failed to change users current status';
					SIGNAL SQLSTATE '23000';
                END IF;
			ELSE
			/*로그인 정보와 일치하는 사용자가 존재하지 않는 경우 예외처리한다.*/
				SET rtn_val = 22103;
				SET msg_txt = 'user not found';
				SIGNAL SQLSTATE '23000';
			END IF;
					
		ELSE
			SET json_data 		= NULL;
			SET rtn_val = 22101;
			SET msg_txt = 'Login ID do not match';
			SIGNAL SQLSTATE '23000';
		END IF;
	ELSE
		SET json_data 		= NULL;
		SIGNAL SQLSTATE '23000';
	END IF;  
	COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_management_rights`(
	IN IN_USER_REG_ID			VARCHAR(100),									/*관리자 권한을 요구하는 사용자 아이디*/
    IN IN_TARGET_USER_REG_ID	VARCHAR(100),									/*관리자가 변경 또는 삭제 등의 정보 처리작업을 해야 하는 대상이 되는 사용자 아이디*/
    IN IN_JOB					ENUM('CREATE', 'READ', 'UPDATE', 'DELETE'),		/*관리자가 수행하고자 하는 작업*/
    OUT OUT_RIGHTS				TINYINT											/*권한이 있는 경우 TRUE, 그렇지 않은 경우 FALSE 반환*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_management_rights
Input param 	: 3개
Output param 	: 1개
Job 			: admin의 자격을 요구하는 사용자에게 실행하고자 하는 작업에 대한 권한이 있는지를 체크한 후 boolean으로 값을 반환함
				: 1. TRUE : 자격 있음
				: 2. FALSE : 자격 없음
Update 			: 2022.01.07
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_ADMIN_BELONG_TO					BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_BELONG_TO					BIGINT					DEFAULT NULL;
	DECLARE VAR_ADMIN_CLASS						INT						DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;
	DECLARE VAR_IS_SUBSIDIARY					TINYINT					DEFAULT NULL;

	CALL sp_req_user_affiliation(IN_USER_REG_ID, VAR_ADMIN_BELONG_TO);
    /*IN_USER_REG_ID가 어디에 소속되어 있는지를 확인하고 그 값을 반환한다.*/
    /*0 : 개인회원 또는 sys.admin, 1이상인 경우 : 사업자에 소속된 회원*/

	CALL sp_req_user_affiliation(IN_TARGET_USER_REG_ID, VAR_USER_BELONG_TO);
    /*IN_TARGET_USER_REG_ID가 어디에 소속되어 있는지를 확인하고 그 값을 반환한다.*/
    /*0 : 개인회원 또는 sys.admin, 1이상인 경우 : 사업자에 소속된 회원*/
    
	CALL sp_req_user_class(IN_USER_REG_ID, VAR_ADMIN_CLASS);
	/*정보를 처리를 요청하는 사용자의 CLASS를 구하여 VAR_ADMIN_CLASS에 저장한다.*/
    
	CALL sp_req_user_class(IN_TARGET_USER_REG_ID, VAR_USER_CLASS);
	/*정보를 처리할 대상 사용자의 CLASS를 구하여 VAR_USER_CLASS에 저장한다.*/
    
    IF VAR_ADMIN_BELONG_TO = 0 THEN
    /*ADMIN이 개인회원이거나 sys.admin인 경우*/
    /*ADMIN이 개인회원인 경우에는 자신의 정보에 대하여 UPDATE, DELETE의 모든 권한을 가지게 됨*/
    /*ADMIN이 sys.admin인 경우에는 ADMIN의 CLASS에 따라서 아래의 몇가지 경우로 분기가 되어야 한다.
    /*ADMIN.CLASS = 101인 경우 : 자신을 제외한 모든 사용자에 대하여 모든 권한을 가지게 된다. 본인에 대해서는 UPDATE만 가능하다.*/
    /*ADMIN.CLASS = 102인 경우 : ADMIN.CLASS=101의 사용자를 제외한 모든 사용자에 대하여 모든 권한을 가지게 된다. 자신에 대해서는 삭제를 제외한 모든 권한을 가지게 되고 다른 사용자에 대해서는 모든 권한을 가지게 된다.*/
    /*ADMIN.CLASS = 199인 경우 : ADMIN.CLASS=101, 102의 사용자를 제외한 모든 사용자에 대하여 모든 권한을 가지게 된다. 자신에 대해서는 삭제를 제외한 모든 권한을 가지게 되고 다른 사용자에 대해서는 모든 권한을 가지게 된다.*/
        IF VAR_ADMIN_CLASS < 200 THEN
        /*ADMIN이 sys.admin인 경우*/
			IF VAR_ADMIN_CLASS = 101 THEN
				IF IN_USER_REG_ID = IN_TARGET_USER_REG_ID THEN
                /*ADMIN이 sys.admin:101인 경우에 처리할 정보가 본인인 경우*/
					IF IN_JOB = 'DELETE' THEN
						/*정보를 삭제하는 경우에는 권한이 부여되지 않는다.*/
						SET OUT_RIGHTS = FALSE;
					ELSE
						/*정보를 삭제하는 경우를 제외한 경우에는 모든 권한이 부여된다.*/
						SET OUT_RIGHTS = TRUE;
                    END IF;
				ELSE
                /*ADMIN이 처리할 정보가 본인이 아닌 경우에는 모든 권한이 부여된다.*/
					SET OUT_RIGHTS = TRUE;
                END IF;
            ELSE
				IF VAR_USER_CLASS < VAR_ADMIN_CLASS THEN
				/*정보변경 대상자의 VAR_USER_CLASS가 정보처리를 요청하는 사용자보다 상위 레벨(VAR_USER_CLASS < VAR_ADMIN_CLASS)인 경우에는 권한이 부여되지 않도록 한다.*/
					SET OUT_RIGHTS = FALSE;
				ELSE
					IF VAR_USER_CLASS = VAR_ADMIN_CLASS THEN
					/*정보변경 대상자의 VAR_USER_CLASS가 정보처리를 요청하는 사용자와 동일한 레벨인 경우에는 본인의 정보 이외에는 권한이 부여되지 않도록 한다.*/
						IF IN_USER_REG_ID <> IN_TARGET_USER_REG_ID THEN
						/*정보처리요청자(ADMIN)과 정보처리대상자(USER)가 동일인이 아닌 경우에는 권한이 부여되지 않도록 한다.*/
							SET OUT_RIGHTS = FALSE;
						ELSE
						/*정보처리요청자(ADMIN)과 정보처리대상자(USER)가 동일인인 경우에는 권한이 DELETE권한을 제외한 모든 권한이 부여되지 않도록 한다.*/
							IF IN_JOB = 'DELETE' THEN
								/*정보를 삭제하는 경우에는 권한이 부여되지 않는다.*/
								SET OUT_RIGHTS = FALSE;
							ELSE
								/*정보를 삭제하는 경우를 제외한 경우에는 모든 권한이 부여된다.*/
								SET OUT_RIGHTS = TRUE;
							END IF;
						END IF;
					ELSE
					/*정보변경 대상자의 VAR_USER_CLASS가 정보처리를 요청하는 사용자와 하위 레벨인 경우에는 모든 권한이 부여되도록 한다.*/
						SET OUT_RIGHTS = TRUE;
					END IF;
				END IF;
            END IF;
        ELSE
        /*ADMIN이 개인회원인 경우*/
			IF IN_USER_REG_ID = IN_TARGET_USER_REG_ID THEN
            /*ADMIN과 USER가 동일한 사용자인 경우*/
				SET OUT_RIGHTS = TRUE;
            ELSE
            /*ADMIN과 USER가 동일한 사용자가 아닌 경우*/
				SET OUT_RIGHTS = FALSE;
            END IF;
        END IF;
    ELSE
    /*ADMIN이 사업자 회원인 경우*/
		IF VAR_ADMIN_BELONG_TO = VAR_USER_BELONG_TO THEN
        /*정보변경 대상자가 정보처리를 요청하는 사용자의 소속 사업자가 동일한 경우 */
			IF VAR_USER_CLASS < VAR_ADMIN_CLASS THEN
			/*정보변경 대상자의 VAR_USER_CLASS가 정보처리를 요청하는 사용자보다 상위 레벨(VAR_USER_CLASS < VAR_ADMIN_CLASS)인 경우에는 권한이 부여되지 않도록 한다.*/
				SET OUT_RIGHTS = FALSE;
			ELSE
				IF VAR_USER_CLASS = VAR_ADMIN_CLASS THEN
				/*정보변경 대상자의 VAR_USER_CLASS가 정보처리를 요청하는 사용자와 동일한 레벨인 경우에는 본인의 정보 이외에는 권한이 부여되지 않도록 한다.*/
					IF IN_USER_REG_ID <> IN_TARGET_USER_REG_ID THEN
					/*정보처리요청자(ADMIN)과 정보처리대상자(USER)가 동일인이 아닌 경우에는 권한이 부여되지 않도록 한다.*/
						SET OUT_RIGHTS = FALSE;
					ELSE
					/*정보처리요청자(ADMIN)과 정보처리대상자(USER)가 동일인인 경우에는 권한이 DELETE권한을 제외한 모든 권한이 부여되지 않도록 한다.*/
						IF IN_JOB = 'DELETE' THEN
							/*정보를 삭제하는 경우에는 권한이 부여되지 않는다.*/
							SET OUT_RIGHTS = FALSE;
						ELSE
							/*정보를 삭제하는 경우를 제외한 경우에는 모든 권한이 부여된다.*/
							SET OUT_RIGHTS = TRUE;
						END IF;
					END IF;
				ELSE
				/*정보변경 대상자의 VAR_USER_CLASS가 정보처리를 요청하는 사용자와 하위 레벨인 경우에는 모든 권한이 부여되도록 한다.*/
					SET OUT_RIGHTS = TRUE;
				END IF;
			END IF;
        ELSE
        /*정보변경 대상자가 정보처리를 요청하는 사용자의 소속 사업자가 다른 경우 */
			IF VAR_ADMIN_CLASS = 201 THEN
            /*정보수정을 요청하는 사용자의 CLASS가 201(사업자 회원에 속한 최고 관리자)인 경우에는 자회사 사용자에 대한 모든 권한이 부여된다.*/
				SELECT VAR_USER_BELONG_TO IN (SELECT CHILD.ID FROM COMPANY CHILD LEFT JOIN COMPANY PARENT ON CHILD.P_COMP_ID = PARENT.ID WHERE PARENT.ID = VAR_ADMIN_BELONG_TO) INTO VAR_IS_SUBSIDIARY;
				/*ADMIN이 변경하려는 사용자가 소속한 사업자의 모회사 관리자인 경우 VAR_IS_SUBSIDIARY=1, 그렇지 않으면 VAR_IS_SUBSIDIARY=0이 됨*/
				IF VAR_IS_SUBSIDIARY = 1 THEN
					SET OUT_RIGHTS = TRUE;
				ELSE
					SET OUT_RIGHTS = FALSE;
				END IF;
            ELSE
            /*정보수정을 요청하는 사용자의 CLASS가 201(사업자 회원에 속한 최고 관리자)이 아닌 경우에는 자회사에 대한 권한이 없다.*/
				SET OUT_RIGHTS = FALSE;
            END IF;
        END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_management_rights_by_user_id`(
	IN IN_USER_ID				BIGINT,											/*관리자 권한을 요구하는 사용자 아이디*/
    IN IN_TARGET_USER_ID		BIGINT,											/*관리자가 변경 또는 삭제 등의 정보 처리작업을 해야 하는 대상이 되는 사용자 아이디*/
    OUT rtn_val 				INT,											/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200)									/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_management_rights_by_user_id
Input param 	: 3개
Output param 	: 1개
Job 			: admin의 자격을 요구하는 사용자에게 실행하고자 하는 작업에 대한 권한이 있는지를 체크한 후 boolean으로 값을 반환함
				: 1. TRUE : 자격 있음
				: 2. FALSE : 자격 없음
Update 			: 2022.01.17
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	CALL sp_req_user_affiliation_by_user_id(IN_USER_ID, @ADMIN_BELONG_TO);
    /*IN_USER_ID가 어디에 소속되어 있는지를 확인하고 그 값을 반환한다.*/
    /*0 : 개인회원 또는 sys.admin, 1이상인 경우 : 사업자에 소속된 회원*/

	CALL sp_req_user_affiliation_by_user_id(IN_TARGET_USER_ID, @USER_BELONG_TO);
    /*IN_TARGET_USER_ID가 어디에 소속되어 있는지를 확인하고 그 값을 반환한다.*/
    /*0 : 개인회원 또는 sys.admin, 1이상인 경우 : 사업자에 소속된 회원*/
    
	CALL sp_req_user_class_by_user_reg_id(IN_USER_ID, @ADMIN_CLASS);
	/*정보를 처리를 요청하는 사용자의 CLASS를 구하여 @ADMIN_CLASS에 저장한다.*/
    
	CALL sp_req_user_class_by_user_reg_id(IN_TARGET_USER_ID, @USER_CLASS);
	/*정보를 처리할 대상 사용자의 CLASS를 구하여 @USER_CLASS에 저장한다.*/
    
    IF @ADMIN_BELONG_TO = 0 THEN
    /*ADMIN이 개인회원이거나 sys.admin인 경우*/
    /*ADMIN이 개인회원인 경우에는 자신의 정보에 대하여 UPDATE, DELETE의 모든 권한을 가지게 됨*/
    /*ADMIN이 sys.admin인 경우에는 ADMIN의 CLASS에 따라서 아래의 몇가지 경우로 분기가 되어야 한다.
    /*ADMIN.CLASS = 101인 경우 : 자신을 제외한 모든 사용자에 대하여 모든 권한을 가지게 된다. 본인에 대해서는 UPDATE만 가능하다.*/
    /*ADMIN.CLASS = 102인 경우 : ADMIN.CLASS=101의 사용자를 제외한 모든 사용자에 대하여 모든 권한을 가지게 된다. 자신에 대해서는 삭제를 제외한 모든 권한을 가지게 되고 다른 사용자에 대해서는 모든 권한을 가지게 된다.*/
    /*ADMIN.CLASS = 199인 경우 : ADMIN.CLASS=101, 102의 사용자를 제외한 모든 사용자에 대하여 모든 권한을 가지게 된다. 자신에 대해서는 삭제를 제외한 모든 권한을 가지게 되고 다른 사용자에 대해서는 모든 권한을 가지게 된다.*/
        IF @ADMIN_CLASS < 200 THEN
        /*ADMIN이 sys.admin인 경우*/
			IF @ADMIN_CLASS = 101 THEN
            /*ADMIN이 sys.admin:101인 경우*/
				IF IN_USER_ID = IN_TARGET_USER_ID THEN
                /*ADMIN이 sys.admin:101인 경우에 처리할 정보가 본인인 경우*/
					SET rtn_val = 33101;
					SET msg_txt = 'The highest authority in Chium cannot delete his or her account';
				ELSE
                /*ADMIN이 처리할 정보가 본인이 아닌 경우에는 모든 권한이 부여된다.*/
					SET rtn_val = 0;
					SET msg_txt = 'success';
                END IF;
            ELSE
            /*ADMIN이 sys.admin:101이 아닌 경우*/
				IF @USER_CLASS <= @ADMIN_CLASS THEN
				/*정보변경 대상자의 @USER_CLASS가 정보처리를 요청하는 사용자보다 상위 레벨(@USER_CLASS <= @ADMIN_CLASS)인 경우에는 권한이 부여되지 않도록 한다.*/
					SET rtn_val = 33102;
					SET msg_txt = 'Chium administrators cannot delete same or upper-level authorities';
				ELSE
				/*정보변경 대상자의 @USER_CLASS가 정보처리를 요청하는 사용자보다 하위 레벨(@USER_CLASS > @ADMIN_CLASS)인 경우에는 권한이 정상처리한다.*/
					IF @ADMIN_CLASS = 102 THEN
					/*삭제권자가 치움의 관리자인 경우*/
						IF @USER_CLASS >= 200 THEN
                        /*삭제대상자가 개인이거나 사업자의 관리자인 경우에는 정상처리한다.*/
							SET rtn_val = 0;
							SET msg_txt = 'success';
                        ELSE
                        /*삭제대상자가 치움관리자인 경우에는 예외처리한다.*/
							SET rtn_val = 33103;
							SET msg_txt = 'Chium administrators cannot delete Chium internal users';
                        END IF;
					ELSE
					/*삭제권자가 치움의 일반 사용자인 경우*/
						IF IN_USER_ID = IN_TARGET_USER_ID THEN
                        /*삭제권자가 자신의 계정을 삭제시도하는 경우 정상처리한다.*/
							SET rtn_val = 0;
							SET msg_txt = 'success';
                        ELSE
                        /*삭제권자가 타인의 계정을 삭제시도하는 경우 예외처리한다.*/
							SET rtn_val = 33104;
							SET msg_txt = 'The highest authority in Chium cannot delete his or her account';
                        END IF;
					END IF;
				END IF;
            END IF;
        ELSE
        /*ADMIN이 개인회원인 경우*/
			IF IN_USER_ID = IN_TARGET_USER_ID THEN
            /*ADMIN과 USER가 동일한 사용자인 경우*/
				SET rtn_val = 0;
				SET msg_txt = 'success';
            ELSE
            /*ADMIN과 USER가 동일한 사용자가 아닌 경우*/
				SET rtn_val = 33105;
				SET msg_txt = 'Individual users can only delete their own account';
            END IF;
        END IF;
    ELSE
    /*ADMIN이 사업자 회원인 경우*/
		IF @ADMIN_BELONG_TO = @USER_BELONG_TO THEN
        /*정보변경 대상자가 정보처리를 요청하는 사용자의 소속 사업자가 동일한 경우 */
			SELECT AFFILIATED_SITE INTO @ADMIN_SITE FROM USERS WHERE ID = IN_USER_ID;
			SELECT AFFILIATED_SITE INTO @TARGET_SITE FROM USERS WHERE ID = IN_TARGET_USER_ID;
            IF @ADMIN_SITE = @TARGET_SITE THEN
            /*삭제권자와 삭제대상자의 소속이 같은 사이트인 경우*/
				IF @ADMIN_CLASS = 201 THEN
                /*삭제권자가 사이트의 최고권한자인 경우*/
					SET rtn_val = 0;
					SET msg_txt = 'success';
                ELSE
                /*삭제권자가 사이트의 최고권한자가 아닌 경우*/
					SET rtn_val = 33106;
					SET msg_txt = 'Normal users of the site do not have the right to delete users';
                END IF;
            ELSE
            /*삭제권자와 삭제대상자의 소속이 다른 사이트인 경우*/
				SELECT B.HEAD_OFFICE INTO @ADMIN_HEAD_OFFICE FROM USERS A LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID WHERE A.ID = IN_USER_ID;
                IF @ADMIN_HEAD_OFFICE = 1 THEN
                /*삭제권자가 소속한 사이트가 HEAD OFFICE인 경우*/
					SET rtn_val = 0;
					SET msg_txt = 'success';
                ELSE
                /*삭제권자가 소속한 사이트가 HEAD OFFICE가 아닌 경우*/
					SET rtn_val = 33107;
					SET msg_txt = 'Administrators of sites other than the Head Office cannot delete users belonging to other sites';
                END IF;
            END IF;
        ELSE
        /*정보변경 대상자가 정보처리를 요청하는 사용자의 소속 사업자가 다른 경우 */
			SELECT BELONG_TO INTO @ADMIN_COMP FROM USERS WHERE ID = IN_USER_ID;
			SELECT B.P_COMP_ID INTO @TARGET_PARENT_COMP FROM USERS A LEFT JOIN COMPANY B ON A.BELONG_TO = B.ID WHERE A.ID = IN_TARGET_USER_ID;
            IF @ADMIN_COMP = @TARGET_PARENT_COMP THEN
            /*삭제권자가 소속하고 있는 삭제대상자가 소속한 사이트의 모회사인 경우*/
				IF @ADMIN_CLASS = 201 THEN
                /*삭제권자의 권한이 201인 경우*/
					SELECT B.HEAD_OFFICE INTO @ADMIN_HEAD_OFFICE FROM USERS A LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID WHERE A.ID = IN_USER_ID;
					IF @ADMIN_HEAD_OFFICE = 1 THEN
					/*삭제권자가 소속한 사이트가 HEAD OFFICE인 경우*/
						SET rtn_val = 0;
						SET msg_txt = 'success';
					ELSE
					/*삭제권자가 소속한 사이트가 HEAD OFFICE가 아닌 경우*/
						SET rtn_val = 33108;
						SET msg_txt = 'Administrators of sites other than the Head Office cannot delete users belonging to other sites';
					END IF;
                ELSE
                /*삭제권자의 권한이 201이 아닌 경우*/
					SET rtn_val = 33109;
					SET msg_txt = 'In case the deletion requester belonging to the parent company does not have the right to delete the user';
                END IF;
            ELSE
            /*삭제권자가 소속하고 있는 삭제대상자가 소속한 사이트의 모회사가 아닌 경우*/
				SET rtn_val = 33110;
				SET msg_txt = 'When a parent company administrator deletes a user in a subsidiary company, the parent company administrator must belong to the Head Office';
            END IF;
        END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_max_id`(
	OUT OUT_USER_MAX_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_user_max_id
Output param 	: 1개
Job 			: 등록된 사용자 중에서 가장 큰 고유번호(ID) + 1을 반환한다.
Update 			: 2022.01.05
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT max(ID) into OUT_USER_MAX_ID FROM USERS;			
	/*현재 테이블에서 가장 큰 사용자 고유번호를 구한 후 USER_MAX_ID에 저장한다.*/
	
	IF (OUT_USER_MAX_ID IS NULL) THEN
		SET OUT_USER_MAX_ID = 1;
		/*사용자 테이블의 저장된 고유번호가 하나도 없는 경우에는 NULL이 반환되므로 MAX_ID를 1로 저장한다.*/
	ELSE
		SET OUT_USER_MAX_ID = OUT_USER_MAX_ID + 1;
		/*최대값을 구하였다면 그 값에 1을 더하여 등록할 사용자의 고유번호로 정한다.*/
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_own_post`(
	IN IN_USER_ID 				BIGINT,				/*입력값 : 관리자아이디(USERS.ID)*/
    IN IN_POST_ID 				BIGINT,				/*입력값 : 글 등록번호*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(100)		/*출력값 : 처리결과 문자열*/
    )
BEGIN

/*
Procedure Name 	: sp_req_user_own_post
Input param 	: 2개
Job 			: 사용자가 POST의 소유자인지 검사한다.
Update 			: 2022.03.13
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_CHK_COUNT						INT						DEFAULT 0;

	SELECT COUNT(ID) INTO VAR_CHK_COUNT FROM POSTS WHERE ID = IN_POST_ID AND CREATOR_ID = IN_USER_ID;
    IF VAR_CHK_COUNT = 1 THEN
		SET rtn_val = 0;
        SET msg_txt = 'success';
    ELSE
		SET rtn_val = 32701;
        SET msg_txt = 'user does not own the post';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_regid_by_user_id`(
	IN IN_USER_REG_ID		VARCHAR(50),
    OUT OUT_PARAM			BIGINT
)
BEGIN

/*
Procedure Name 	: sp_req_user_regid_by_user_id
Input param 	: 개
Output param 	: 1개
Job 			: 사용자 아이디로 사용자 고유등록번호를 반환한다
Update 			: 2022.01.15
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	SELECT ID INTO OUT_PARAM 
	FROM USERS 
	WHERE 
		USER_ID = IN_USER_REG_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_type`(
	IN IN_USER_ID				BIGINT,
    OUT OUT_USER_TYPE			VARCHAR(20)
)
BEGIN
	SELECT USER_TYPE INTO OUT_USER_TYPE FROM V_USERS WHERE ID = IN_USER_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_validation`(
    IN IN_USER_REG_ID		VARCHAR(50),		/*입력값 : 사용자 아이디*/
    OUT STATE_CODE 			INT,				/*출력값 : 처리결과 반환값*/
    OUT MSG_TXT 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_validation
Input param 	: 1개
Output param 	: 2개
Job 			: COMPANY테이블과 USERS테이블에 각각 입력 PARAM값을 분리하여 INSERT 하는 작업을 수행(COMMIT)하며 중도에 에러발생시 ROLLBACK처리함
Update 			: 2022.01.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	DECLARE REG_ID			BIGINT;				/*사용자의 고유등록번호를 저장할 변수 선언*/
	DECLARE ACTIVE_STAT		TINYINT;			/*사용자계정의 활성화 상태를 저장할 변수 선언*/
    
    /*트랜잭션 이상으로 ROLLBACK을 해야하는 경우 되돌릴 위치(SAVEPOINT)를 정한다.*/
    /*SAVEPOINT는 여러군데 정할 수 있다.*/
    
    SELECT COUNT(ID) INTO @USER_EXISTS FROM USERS WHERE USER_ID = IN_USER_REG_ID;
	/*USER 정보에 대한 수정요청을 한 USER_ID가 존재하는지 체크한다.*/
	/*만일 조건에 맞는 사용자가 존재한다면 @USER_EXISTS값이 1의 값을 가지게 되며 그렇지 않은 경우에는 0의 값을 가지게 된다.*/ 
    
	IF @USER_EXISTS = 0 THEN
	/*USER 정보에 대한 수정요청을 한 USER_ID가 존재하지 않는 경우 예외처리한다.*/
		SET STATE_CODE = 20301;
		SET MSG_TXT = 'user account is not existed';
		/*사용자 레코드 생성이 비정상적인 경우에는 POINT_1로 이동시켜 작업을 ROLLBACK 처리한다.*/
	ELSE  
	/*USER 정보에 대한 수정요청을 한 USER_ID가 존재하는 경우에는 정상처리 진행한다.*/
		SELECT ID, ACTIVE INTO REG_ID, ACTIVE_STAT FROM USERS WHERE USER_ID = IN_USER_REG_ID;
		/*사용자 아이디로 검색된 사용자의 고유등록번호와 계정활성화상태를 REG_ID, VALID_STAT에 각각 저정한다.*/
		
		IF ACTIVE_STAT = FALSE THEN
		/*계정이 비활성화된 상태인 경우에는 예외처리한다.*/
			SET STATE_CODE = 20302;
			SET MSG_TXT = 'user account is not activated';
		ELSE
		/*계정이 활성화된 상태인 경우에는 정상처리한다.*/
			SET STATE_CODE = 0;
			SET MSG_TXT = 'user account is valid';
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_user_validation_by_user_id`(
    IN IN_USER_ID			BIGINT,				/*입력값 : 사용자 고유등록번호*/
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_user_validation_by_user_id
Input param 	: 1개
Output param 	: 2개
Job 			: 사용자가 유효한지 검사한다.
Update 			: 2022.01.17
Version			: 0.0.2
AUTHOR 			: Leo Nam
*/
    
    SELECT COUNT(ID) INTO @USER_EXISTS FROM USERS WHERE ID = IN_USER_ID;
	/*USER 정보에 대한 수정요청을 한 USER_ID가 존재하는지 체크한다.*/
	/*만일 조건에 맞는 사용자가 존재한다면 @USER_EXISTS값이 1의 값을 가지게 되며 그렇지 않은 경우에는 0의 값을 가지게 된다.*/ 
    
	IF @USER_EXISTS = 0 THEN
	/*USER 정보에 대한 수정요청을 한 USER_ID가 존재하지 않는 경우 예외처리한다.*/
		SET rtn_val = 20301;
		SET msg_txt = 'user account is not existed';
		/*사용자 레코드 생성이 비정상적인 경우에는 POINT_1로 이동시켜 작업을 ROLLBACK 처리한다.*/
	ELSE  
	/*USER 정보에 대한 수정요청을 한 USER_ID가 존재하는 경우에는 정상처리 진행한다.*/
		SELECT ACTIVE INTO @ACTIVE_STAT FROM USERS WHERE ID = IN_USER_ID;
		/*사용자 아이디로 검색된 사용자의 고유등록번호와 계정활성화상태를 REG_ID, VALID_STAT에 각각 저정한다.*/
		
		IF @ACTIVE_STAT = FALSE THEN
		/*계정이 비활성화된 상태인 경우에는 예외처리한다.*/
			SET rtn_val = 20302;
			SET msg_txt = 'user account is not activated';
		ELSE
		/*계정이 활성화된 상태인 경우에는 정상처리한다.*/
			SET rtn_val = 0;
			SET msg_txt = 'user account is valid';
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_userid_by_user_reg_id`(
	IN IN_USER_ID			BIGINT,
	OUT OUT_USER_ID				VARCHAR(50)
)
BEGIN

/*
Procedure Name 	: sp_req_userid_by_user_reg_id
Input param 	: 1개
Output param 	: 1개
Job 			: 사용자의 고유등록번호로 사용자의 아이디를 반환함
				: 조건에 맞는 사용자가 없는 경우 NULL값 반환
Update 			: 2022.01.17
Version			: 0.0.1
AUTHOR 			: Leo Nam
CHANGE			: 
*/
	
	SELECT USER_ID INTO OUT_USER_ID FROM USERS WHERE ID = IN_USER_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_usr_validation`(
    IN IN_USER_REG_ID		VARCHAR(50),		/*입력값 : 사용자 아이디*/
    OUT rtn_val 			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_usr_validation
Input param 	: 1개
Output param 	: 2개
Job 			: COMPANY테이블과 USERS테이블에 각각 입력 PARAM값을 분리하여 INSERT 하는 작업을 수행(COMMIT)하며 중도에 에러발생시 ROLLBACK처리함
Update 			: 2022.01.03
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

	DECLARE VAR_REG_ID							BIGINT					DEFAULT NULL;				/*사용자의 고유등록번호를 저장할 변수 선언*/
	DECLARE VAR_ACTIVE_STAT						TINYINT					DEFAULT TRUE;			/*사용자계정의 활성화 상태를 저장할 변수 선언*/
	DECLARE VAR_USER_EXISTS						TINYINT					DEFAULT 0;
    
    /*트랜잭션 이상으로 ROLLBACK을 해야하는 경우 되돌릴 위치(SAVEPOINT)를 정한다.*/
    /*SAVEPOINT는 여러군데 정할 수 있다.*/
    
    SELECT COUNT(ID) INTO VAR_USER_EXISTS FROM USERS WHERE USER_ID = IN_USER_REG_ID;
	/*USER 정보에 대한 수정요청을 한 USER_ID가 존재하는지 체크한다.*/
	/*만일 조건에 맞는 사용자가 존재한다면 VAR_USER_EXISTS값이 1의 값을 가지게 되며 그렇지 않은 경우에는 0의 값을 가지게 된다.*/ 
    
	IF VAR_USER_EXISTS = 0 THEN
	/*USER 정보에 대한 수정요청을 한 USER_ID가 존재하지 않는 경우 예외처리한다.*/
		SET rtn_val = 20301;
		SET msg_txt = 'user account is not existed';
		/*사용자 레코드 생성이 비정상적인 경우에는 POINT_1로 이동시켜 작업을 ROLLBACK 처리한다.*/
	ELSE  
	/*USER 정보에 대한 수정요청을 한 USER_ID가 존재하는 경우에는 정상처리 진행한다.*/
		SELECT ID, ACTIVE INTO VAR_REG_ID, VAR_ACTIVE_STAT FROM USERS WHERE USER_ID = IN_USER_REG_ID;
		/*사용자 아이디로 검색된 사용자의 고유등록번호와 계정활성화상태를 VAR_REG_ID, VALID_STAT에 각각 저정한다.*/
		
		IF VAR_ACTIVE_STAT = FALSE THEN
		/*계정이 비활성화된 상태인 경우에는 예외처리한다.*/
			SET rtn_val = 20302;
			SET msg_txt = 'user account is not activated';
		ELSE
		/*계정이 활성화된 상태인 경우에는 정상처리한다.*/
			SET rtn_val = 0;
			SET msg_txt = 'user account is valid';
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_visit_date_expired`(
	IN IN_DISPOSER_ORDER_ID					BIGINT,
    OUT rtn_val 							INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 							VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_req_visit_date_expired
Input param 	: 1개
Output param 	: 2개
Job 			: 폐기물배출신청건에 대한 방문예정마감일이 종료되었으며 0, 그렇지 않으면 예외처리코드를 반환함
Update 			: 2022.01.29
Version			: 0.0.3
AUTHOR 			: Leo Nam
Change			: OUT 데이타를 반환코드와 결과문자열로 나누는 방식으로 변경(0.0.3)
*/
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NOW();	
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;	
	DECLARE VAR_VISIT_END_AT					DATETIME				DEFAULT NULL;	

    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	SELECT VISIT_END_AT
    INTO VAR_VISIT_END_AT
    FROM SITE_WSTE_DISPOSAL_ORDER 
    WHERE 
		ID = IN_DISPOSER_ORDER_ID AND 
        ACTIVE = TRUE;
        
	IF VAR_VISIT_END_AT IS NOT NULL THEN
		IF VAR_REG_DT >= VAR_VISIT_END_AT THEN
			SET rtn_val = 0;
			SET msg_txt = 'Success';
		ELSE
			SET rtn_val = 26601;
			SET msg_txt = 'The expected date of visit has not yet come';
		END IF;
    ELSE
		SET rtn_val = 26602;
		SET msg_txt = 'No scheduled visit date';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_visit_date_on_disposal_order`(
	IN IN_DISPOSER_ORDER_ID					BIGINT,
	OUT OUT_VISIT_START_AT					DATETIME,
	OUT OUT_VISIT_END_AT					DATETIME
)
BEGIN

/*
Procedure Name 	: sp_req_visit_date_on_disposal_order
Input param 	: 1개
Output param 	: 4개
Job 			: 배출자가 지정한 방문일정을 반환한다.
Update 			: 2022.02.22
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
    
	SELECT VISIT_START_AT, VISIT_END_AT
    INTO OUT_VISIT_START_AT, OUT_VISIT_END_AT
    FROM SITE_WSTE_DISPOSAL_ORDER 
    WHERE 
		ID = IN_DISPOSER_ORDER_ID AND 
        ACTIVE = TRUE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_whether_site_is_open`(
	IN IN_COMP_ID				BIGINT,				/*사이트를 개설하고자 하는 사업자*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 		: whether_site_is_open
Input param 		: 1개
Output param 		: 2개
Job 				: 사업자가 치움서비스의 정책제한에 불구하고 추가 사이트를 개설할 수 있는지 여부를 반환함
Update 				: 2022.01.29
Version				: 0.0.2
AUTHOR 				: Leo Nam
*/
	DECLARE VAR_NUMBER_OF_SITES					INT						DEFAULT 0;
	DECLARE MAX_NUMBER_OF_SITES					VARCHAR(255)			DEFAULT NULL;
	
	CALL sp_req_count_of_sites(
		IN_COMP_ID,
        TRUE,
        VAR_NUMBER_OF_SITES
    );
    
    CALL sp_req_policy_direction(
		'max_number_of_sites', 
        MAX_NUMBER_OF_SITES
	);
    
    IF CAST(MAX_NUMBER_OF_SITES AS UNSIGNED) > VAR_NUMBER_OF_SITES THEN
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
		SET rtn_val = 27801;
		SET msg_txt = 'Cannot open additional sites';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_whether_user_can_be_added`(
	IN IN_SITE_ID				BIGINT,				/*사이트를 개설하고자 하는 사업자*/
	IN IN_ACTIVE				TINYINT,			/*사이트의 활성화 상태*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(200)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 		: sp_req_whether_user_can_be_added
Input param 		: 2개
Output param 		: 2개
Job 				: 사업자가 치움서비스의 정책제한에 불구하고 사이트가 사용자를 추가할 수 있는지 여부를 반환함
Update 				: 2022.01.29
Version				: 0.0.2
AUTHOR 				: Leo Nam
*/
	DECLARE VAR_NUMBER_OF_USERS					INT						DEFAULT 0;
	DECLARE MAX_NUMBER_OF_USERS					VARCHAR(255)			DEFAULT NULL;
	
	CALL sp_req_count_of_users(
		IN_SITE_ID,
        IN_ACTIVE,
        VAR_NUMBER_OF_USERS
    );
    
    CALL sp_req_policy_direction(
		'user_registration_limit_per_site', 
        MAX_NUMBER_OF_USERS
	);
    IF IN_SITE_ID = 0 THEN
		SET rtn_val = 0;
		SET msg_txt = 'Success';
    ELSE
		IF CAST(MAX_NUMBER_OF_USERS AS UNSIGNED) > VAR_NUMBER_OF_USERS THEN
			SET rtn_val = 0;
			SET msg_txt = 'Success';
		ELSE
			SET rtn_val = 28101;
			SET msg_txt = 'Cannot add additional users';
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_wste_class`()
BEGIN

/*
Procedure Name 	: sp_req_wste_class
Input param 	: 0개
Output param 	: 0개
Job 			: 폐기물의 대분류를 레코드로 반환함
Update 			: 2022.01.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    SELECT ID, CLASS_NAME FROM WSTE_CLS_1 WHERE ACTIVE = TRUE ORDER BY ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_wste_list_by_wste_class`(
	IN IN_WSTE_CLS		VARCHAR(8)
)
BEGIN  
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
    
	IF IN_WSTE_CLS = '01' THEN
		SELECT JSON_ARRAYAGG(JSON_OBJECT('WSTE_CODE', CODE, 'WSTE_NM', NAME)) INTO json_data FROM WSTE_CODE WHERE LEFT(CODE, 2) = '91';
    ELSE
		IF IN_WSTE_CLS = '01-01' THEN
            SELECT JSON_ARRAYAGG(JSON_OBJECT('WSTE_CODE', CODE, 'WSTE_NM', NAME)) INTO json_data FROM WSTE_CODE WHERE LEFT(CODE, 2) = '91' AND CODE <> '91-02-00';
		ELSE
			IF IN_WSTE_CLS = '01-02' THEN
				SELECT JSON_ARRAYAGG(JSON_OBJECT('WSTE_CODE', CODE, 'WSTE_NM', NAME)) INTO json_data FROM WSTE_CODE WHERE CODE = '91-02-00';
			ELSE
				IF IN_WSTE_CLS = '02' OR IN_WSTE_CLS = '02-01' OR IN_WSTE_CLS = '02-01-01' OR IN_WSTE_CLS = '02-01-02' THEN
					SELECT JSON_ARRAYAGG(JSON_OBJECT('WSTE_CODE', CODE, 'WSTE_NM', NAME)) INTO json_data FROM WSTE_CODE WHERE LEFT(CODE, 2) = '51';
				ELSE
					IF IN_WSTE_CLS = '02-02' THEN
						SELECT JSON_ARRAYAGG(JSON_OBJECT('WSTE_CODE', CODE, 'WSTE_NM', NAME)) INTO json_data FROM WSTE_CODE WHERE LEFT(CODE, 2) = '40';
					ELSE
						IF IN_WSTE_CLS = '02-03' THEN
							SELECT JSON_ARRAYAGG(JSON_OBJECT('WSTE_CODE', CODE, 'WSTE_NM', NAME)) INTO json_data FROM WSTE_CODE WHERE CAST(LEFT(CODE, 2) AS UNSIGNED) <= 30 AND CAST(LEFT(CODE, 2) AS UNSIGNED) <> 10;
						ELSE
							IF IN_WSTE_CLS = '02-03-01' THEN
								SELECT JSON_ARRAYAGG(JSON_OBJECT('WSTE_CODE', CODE, 'WSTE_NM', NAME)) INTO json_data FROM WSTE_CODE WHERE CAST(LEFT(CODE, 2) AS UNSIGNED) <= 30 AND CAST(LEFT(CODE, 2) AS UNSIGNED) <> 10;
							ELSE
								IF IN_WSTE_CLS = '02-03-02' THEN
									SELECT JSON_ARRAYAGG(JSON_OBJECT('WSTE_CODE', CODE, 'WSTE_NM', NAME)) INTO json_data FROM WSTE_CODE WHERE CAST(LEFT(CODE, 2) AS UNSIGNED) <= 30 AND CAST(LEFT(CODE, 2) AS UNSIGNED) <> 10;
								ELSE
									IF IN_WSTE_CLS = '02-03-03' THEN
                                        SELECT JSON_ARRAYAGG(JSON_OBJECT('WSTE_CODE', CODE, 'WSTE_NM', NAME)) INTO json_data FROM WSTE_CODE WHERE CAST(LEFT(CODE, 2) AS UNSIGNED) = 10;
									ELSE
										SET rtn_val = 29201;
										SET msg_txt = 'Invalid waste code';
										SET json_data = NULL;
									END IF;
								END IF;
							END IF;
						END IF;
					END IF;
				END IF;
			END IF;
		END IF;
    END IF;
	
	CALL sp_return_results(rtn_val, msg_txt, json_data);
	DROP TABLE IF EXISTS CURRENT_STATE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_wste_record`(
	IN IN_WSTE_CLS		VARCHAR(8)
)
BEGIN
	IF IN_WSTE_CLS = '01' THEN
		SELECT * FROM WSTE_CODE WHERE LEFT(CODE, 2) = '91';
    ELSE
		IF IN_WSTE_CLS = '01-01' THEN
			SELECT * FROM WSTE_CODE WHERE LEFT(CODE, 2) = '91' AND CODE <> '91-02-00';
		ELSE
			IF IN_WSTE_CLS = '01-02' THEN
				SELECT * FROM WSTE_CODE WHERE CODE = '91-02-00';
			ELSE
				IF IN_WSTE_CLS = '02' OR IN_WSTE_CLS = '02-01' OR IN_WSTE_CLS = '02-01-01' OR IN_WSTE_CLS = '02-01-02' THEN
					SELECT * FROM WSTE_CODE WHERE LEFT(CODE, 2) = '51';
				ELSE
					IF IN_WSTE_CLS = '02-02' THEN
						SELECT * FROM WSTE_CODE WHERE LEFT(CODE, 2) = '40';
					ELSE
						IF IN_WSTE_CLS = '02-03' THEN
							SELECT * FROM WSTE_CODE WHERE CAST(LEFT(CODE, 2) AS UNSIGNED) <= 30 AND CAST(LEFT(CODE, 2) AS UNSIGNED) <> 10;
						ELSE
							IF IN_WSTE_CLS = '02-03-01' THEN
								SELECT * FROM WSTE_CODE WHERE CAST(LEFT(CODE, 2) AS UNSIGNED) <= 30 AND CAST(LEFT(CODE, 2) AS UNSIGNED) <> 10;
							ELSE
								IF IN_WSTE_CLS = '02-03-02' THEN
									SELECT * FROM WSTE_CODE WHERE CAST(LEFT(CODE, 2) AS UNSIGNED) <= 30 AND CAST(LEFT(CODE, 2) AS UNSIGNED) <> 10;
								ELSE
									IF IN_WSTE_CLS = '02-03-03' THEN
										SELECT * FROM WSTE_CODE WHERE CAST(LEFT(CODE, 2) AS UNSIGNED) = 10;
									ELSE
										SELECT @rtn_val = 20000;
									END IF;
								END IF;
							END IF;
						END IF;
					END IF;
				END IF;
			END IF;
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_collection_request`(
	IN IN_USER_ID							BIGINT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_collection_request
Input param 	: 1개
Job 			: 수거자가 배출자의 수거요청목록을 열람한다
Update 			: 2022.04.12
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_TRANSACTION_ID					BIGINT; 
    DECLARE CUR_USER_ID							BIGINT;
    DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;
    DECLARE CUR_DISPOSER_USER_ID				BIGINT;
    DECLARE CUR_DISPOSER_SITE_ID				BIGINT;
    DECLARE CUR_STATE							VARCHAR(20);
    DECLARE CUR_STATE_CODE						INT;
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_IMG_PATH						JSON					DEFAULT NULL;	
	DECLARE VAR_WSTE_LIST						JSON					DEFAULT NULL;	
	DECLARE VAR_DISPOSER_ORDER_INFO				JSON					DEFAULT NULL;	
	DECLARE VAR_DISPLAY_DATE					DATETIME				DEFAULT NULL;	
	DECLARE VAR_TRANSACTION_INFO				JSON					DEFAULT NULL;	
	DECLARE VAR_WSTE_GEO_INFO					JSON					DEFAULT NULL;	
	DECLARE VAR_TRANSACTION_STATE_CODE			INT						DEFAULT NULL;	
	DECLARE VAR_RECORD_COUNT					INT						DEFAULT 0;	
	DECLARE VAR_TRANSACTION_STATE				INT						DEFAULT NULL;	
	DECLARE VAR_CHECK_STATE						TINYINT					DEFAULT NULL;	
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
        B.ID, 
        A.COLLECTOR_SITE_ID, 
        A.DISPOSAL_ORDER_ID, 
        E.ID, 
        E.AFFILIATED_SITE,
        C.STATE,
        C.STATE_CODE
    FROM WSTE_CLCT_TRMT_TRANSACTION A
    LEFT JOIN USERS B ON A.COLLECTOR_SITE_ID = B.AFFILIATED_SITE
    LEFT JOIN V_TRANSACTION_STATE_NAME C ON A.ID = C.TRANSACTION_ID
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER D ON A.DISPOSAL_ORDER_ID = D.ID
    LEFT JOIN USERS E ON D.DISPOSER_ID = E.ID
	WHERE 
		D.CS_CONFIRMED = TRUE AND
        A.IN_PROGRESS = TRUE AND
        (B.CLASS = 201 OR B.CLASS = 202) AND
        B.ACTIVE = TRUE AND
        C.STATE_CODE NOT IN (246, 250, 251) AND
        B.ID = IN_USER_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
            
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS RETRIEVE_COLLECTION_REQUEST_TEMP;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;	   
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS RETRIEVE_COLLECTION_REQUEST_TEMP (
		TRANSACTION_ID							BIGINT,
		USER_ID									BIGINT,
		COLLECTOR_SITE_ID						BIGINT,
        DISPOSER_ORDER_ID						BIGINT,
        DISPOSER_USER_ID						BIGINT,
        DISPOSER_SITE_ID						BIGINT,
        STATE									VARCHAR(20),
        STATE_CODE								BIGINT,
        IMG_PATH								JSON,
        WSTE_LIST								JSON,
        DISPOSER_ORDER_INFO						JSON,
        TRANSACTION_INFO						JSON,
        /*WSTE_GEO_INFO							JSON,*/
        DISPLAY_DATE							DATETIME,
        CHECK_STATE								TINYINT
        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_TRANSACTION_ID,
			CUR_USER_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_USER_ID,
			CUR_DISPOSER_SITE_ID,
            CUR_STATE,
            CUR_STATE_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		RETRIEVE_COLLECTION_REQUEST_TEMP(
			TRANSACTION_ID, 
			USER_ID, 
			COLLECTOR_SITE_ID,
			DISPOSER_ORDER_ID,
			DISPOSER_USER_ID,
			DISPOSER_SITE_ID,
            STATE,
            STATE_CODE
		)
		VALUES(
			CUR_TRANSACTION_ID,
			CUR_USER_ID,
			CUR_COLLECTOR_SITE_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_USER_ID,
			CUR_DISPOSER_SITE_ID,
            CUR_STATE,
            CUR_STATE_CODE
		);
        
        CALL sp_get_disposal_img_lists(
			CUR_DISPOSER_ORDER_ID,
            '입찰',
            VAR_IMG_PATH
        );
        
        CALL sp_get_disposal_wste_lists(
			CUR_DISPOSER_ORDER_ID,
            VAR_WSTE_LIST
        );
        
        CALL sp_get_disposal_order_info(
			CUR_DISPOSER_ORDER_ID,
            VAR_DISPOSER_ORDER_INFO
        );
            
		CALL sp_set_display_time_for_transaction(
			CUR_TRANSACTION_ID,
            CUR_STATE_CODE,
			VAR_DISPLAY_DATE
		);
        
        CALL sp_get_transaction_info_2(
			CUR_TRANSACTION_ID,
			VAR_TRANSACTION_INFO
        );
        
        CALL sp_get_disposer_wste_geo_info(
			CUR_DISPOSER_ORDER_ID,
            VAR_WSTE_GEO_INFO
        );
        
        SELECT TRANSACTION_STATE_CODE INTO VAR_TRANSACTION_STATE_CODE
        FROM V_TRANSACTION_STATE
        WHERE DISPOSAL_ORDER_ID = CUR_DISPOSER_ORDER_ID;
        
        SELECT COUNT(ID) INTO VAR_RECORD_COUNT
        FROM STATE_CONTROLLER
        WHERE 
			ORDER_ID = CUR_DISPOSER_ORDER_ID AND
            USER_TYPE = 3 AND
            SITE_ID = CUR_COLLECTOR_SITE_ID;
		
        IF VAR_RECORD_COUNT > 0 THEN
			SELECT TRANSACTION_STATE INTO VAR_TRANSACTION_STATE
			FROM STATE_CONTROLLER
			WHERE 
				ORDER_ID = CUR_DISPOSER_ORDER_ID AND
				USER_TYPE = 3 AND
				SITE_ID = CUR_COLLECTOR_SITE_ID AND 
                TRANSACTION_STATE IS NOT NULL
				ORDER BY ID DESC 
				LIMIT 0, 1;
			
			IF VAR_TRANSACTION_STATE_CODE = VAR_TRANSACTION_STATE THEN
				SET VAR_CHECK_STATE = TRUE;
			ELSE
				SET VAR_CHECK_STATE = FALSE;
			END IF;
        ELSE
			SET VAR_CHECK_STATE = FALSE;
        END IF;
        
        UPDATE RETRIEVE_COLLECTION_REQUEST_TEMP
        SET 
			IMG_PATH 					= VAR_IMG_PATH,
			WSTE_LIST					= VAR_WSTE_LIST,
			DISPOSER_ORDER_INFO			= VAR_DISPOSER_ORDER_INFO,
			TRANSACTION_INFO 			= VAR_TRANSACTION_INFO,
			DISPLAY_DATE 				= VAR_DISPLAY_DATE,
            CHECK_STATE					= VAR_CHECK_STATE/*,
            WSTE_GEO_INFO				= VAR_WSTE_GEO_INFO */
        WHERE TRANSACTION_ID 			= CUR_TRANSACTION_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'TRANSACTION_ID'				, TRANSACTION_ID, 
        'USER_ID'						, USER_ID, 
        'COLLECTOR_SITE_ID'				, COLLECTOR_SITE_ID, 
        'DISPOSER_ORDER_ID'				, DISPOSER_ORDER_ID, 
        'DISPOSER_USER_ID'				, DISPOSER_USER_ID, 
        'DISPOSER_SITE_ID'				, DISPOSER_SITE_ID, 
        'STATE'							, STATE, 
        'STATE_CODE'					, STATE_CODE, 
        'IMG_PATH'						, IMG_PATH, 
        'WSTE_LIST'						, WSTE_LIST, 
        'DISPOSER_ORDER_INFO'			, DISPOSER_ORDER_INFO, 
        'TRANSACTION_INFO'				, TRANSACTION_INFO, 
        'DISPLAY_DATE'					, DISPLAY_DATE, 
        'CHECK_STATE'					, CHECK_STATE/*, 
        'WSTE_GEO_INFO'					, WSTE_GEO_INFO*/
	)) 
    INTO json_data FROM RETRIEVE_COLLECTION_REQUEST_TEMP;
    
    IF vRowCount = 0 THEN
		SET rtn_val = 37401;
		SET msg_txt = 'No data found';
		SIGNAL SQLSTATE '23000';
    END IF;
	DROP TABLE IF EXISTS RETRIEVE_COLLECTION_REQUEST_TEMP;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_current_state`(
	IN IN_USER_ID							BIGINT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_current_state
Input param 	: 1개
Job 			: 수거자 메인 페이지 로딩시 필요한 자료 반환.
Update 			: 2022.01.23
Version			: 0.0.3
AUTHOR 			: Leo Nam
Change			: 폐기물 리스트와 폐기물 사진에 대한 정보는 JSON 타입으로 전달하는 방식 사용(0.0.3)
*/

    DECLARE vRowCount 										INT 					DEFAULT 0;
    DECLARE endOfRow 										TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_COLLECTOR_SITE_ID							BIGINT; 
    DECLARE CUR_COLLECTOR_BIDDING_ID						BIGINT;
    DECLARE CUR_DISPOSER_ORDER_ID							BIGINT;
    DECLARE CUR_STATE_CODE									INT;
    DECLARE CUR_STATE										VARCHAR(20);
    DECLARE CUR_STATE_PID									INT;
    DECLARE CUR_COLLECTOR_CATEGORY_ID						INT;
    DECLARE CUR_COLLECTOR_CATEGORY							VARCHAR(20);
    DECLARE CUR_BIDDING_RANK								INT;
    DECLARE CUR_TRANSACTION_STATE_CODE						INT;
    DECLARE CUR_TRANSACTION_ID								BIGINT;
	DECLARE VAR_RETRIEVE_CURRENT_STATE_IMG_PATH				JSON					DEFAULT NULL;	
	DECLARE VAR_RETRIEVE_CURRENT_STATE_WSTE_LIST			JSON					DEFAULT NULL;	
	DECLARE VAR_RETRIEVE_CURRENT_STATE_WSTE_GEO_INFO		JSON					DEFAULT NULL;	
	DECLARE VAR_RETRIEVE_CURRENT_STATE_DISPOSER_SITE_INFO	JSON					DEFAULT NULL;	
	DECLARE VAR_RETRIEVE_CURRENT_STATE_DISPLAY_DATE			DATETIME				DEFAULT NULL;	
	DECLARE VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_INFO		JSON					DEFAULT NULL;	
	DECLARE VAR_SECOND_PLACE_ON								TINYINT					DEFAULT NULL;	
	DECLARE VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_ID		BIGINT					DEFAULT NULL;		
	DECLARE VAR_RETRIEVE_CURRENT_STATE_DISPOSER_ORDER_INFO	JSON					DEFAULT NULL;	
	DECLARE VAR_RECORD_COUNT								INT						DEFAULT 0;	
	DECLARE VAR_CHECK_STATE									TINYINT					DEFAULT NULL;	
	DECLARE rtn_val											INT						DEFAULT 0;
	DECLARE msg_txt											VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data										JSON					DEFAULT NULL;	
    DECLARE TEMP_CURSOR		 								CURSOR FOR 
	SELECT 
		A.COLLECTOR_ID, 
        A.ID, 
        A.DISPOSAL_ORDER_ID,
        B.STATE_CODE,
        B.STATE,
        B.STATE_PID,
        B.COLLECTOR_CATEGORY_ID,
        B.COLLECTOR_CATEGORY,
        A.BIDDING_RANK,
        G.TRANSACTION_ID,
        G.TRANSACTION_STATE_CODE
    FROM COLLECTOR_BIDDING A
    LEFT JOIN V_BIDDING_STATE_NAME B ON A.ID = B.COLLECTOR_BIDDING_ID
    LEFT JOIN USERS C ON A.COLLECTOR_ID = C.AFFILIATED_SITE
    LEFT JOIN COMP_SITE D ON A.COLLECTOR_ID = D.ID
    LEFT JOIN COMPANY E ON D.COMP_ID = E.ID
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER F ON A.DISPOSAL_ORDER_ID = F.ID
    LEFT JOIN V_TRANSACTION_STATE G ON G.COLLECTOR_BIDDING_ID = A.ID
	WHERE 
		F.CS_CONFIRMED = TRUE AND
        C.ID = IN_USER_ID AND
        (C.CLASS = 201 OR C.CLASS = 202) AND
        A.ORDER_VISIBLE = TRUE AND
        C.ACTIVE = TRUE AND
        D.ACTIVE = TRUE AND
        E.ACTIVE = TRUE AND
        B.STATE_CODE NOT IN (202, 207, 211, 230, 238, 239, 241, 244, 246, 249) AND 
        IF(F.IS_DELETED = TRUE, B.STATE_CODE NOT IN (202, 207, 210, 229, 239, 244), B.STATE_CODE NOT IN (0)) AND
        (G.TRANSACTION_STATE_CODE NOT IN (211) OR G.TRANSACTION_STATE_CODE IS NULL);
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
            
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS RETRIEVE_CURRENT_STATE_TEMP;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;	
   
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS RETRIEVE_CURRENT_STATE_TEMP (
		COLLECTOR_SITE_ID				BIGINT,
		COLLECTOR_BIDDING_ID			BIGINT,
		DISPOSER_ORDER_ID				BIGINT,
        STATE_CODE						INT,
        STATE							VARCHAR(20),
        STATE_PID						INT,
        COLLECTOR_CATEGORY_ID			INT,
        COLLECTOR_CATEGORY				VARCHAR(20),
        BIDDING_RANK					INT,
		DISPLAY_DATE					DATETIME,
        WSTE_LIST						JSON,
        IMG_PATH						JSON,
        WSTE_GEO_INFO					JSON,
        DISPOSER_ORDER_INFO				JSON,
        TRANSACTION_INFO				JSON,
        SECOND_PLACE_ON					TINYINT,
        CHECK_STATE						TINYINT
        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		SET VAR_RETRIEVE_CURRENT_STATE_IMG_PATH = NULL;	
		SET VAR_RETRIEVE_CURRENT_STATE_WSTE_LIST = NULL;	
		SET VAR_RETRIEVE_CURRENT_STATE_WSTE_GEO_INFO = NULL;	
		SET VAR_RETRIEVE_CURRENT_STATE_DISPOSER_SITE_INFO = NULL;	
		SET VAR_RETRIEVE_CURRENT_STATE_DISPLAY_DATE = NULL;	
		SET VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_INFO = NULL;	
		SET VAR_SECOND_PLACE_ON = NULL;	
		SET VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_ID = NULL;		
		SET VAR_RETRIEVE_CURRENT_STATE_DISPOSER_ORDER_INFO = NULL;	
		SET VAR_RECORD_COUNT = 0;	
		SET VAR_CHECK_STATE = NULL;	
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_COLLECTOR_SITE_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_STATE_CODE,
			CUR_STATE,
			CUR_STATE_PID,
			CUR_COLLECTOR_CATEGORY_ID,
			CUR_COLLECTOR_CATEGORY,
			CUR_BIDDING_RANK,
			CUR_TRANSACTION_ID,
			CUR_TRANSACTION_STATE_CODE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		RETRIEVE_CURRENT_STATE_TEMP(
			COLLECTOR_SITE_ID, 
			COLLECTOR_BIDDING_ID, 
			DISPOSER_ORDER_ID,
			STATE_CODE,
			STATE,
			STATE_PID,
			COLLECTOR_CATEGORY_ID,
			COLLECTOR_CATEGORY,
			BIDDING_RANK
		)
		VALUES(
			CUR_COLLECTOR_SITE_ID,
			CUR_COLLECTOR_BIDDING_ID, 
			CUR_DISPOSER_ORDER_ID,
			CUR_STATE_CODE,
			CUR_STATE,
			CUR_STATE_PID,
			CUR_COLLECTOR_CATEGORY_ID,
			CUR_COLLECTOR_CATEGORY,
			CUR_BIDDING_RANK
		);
            
		CALL sp_get_disposal_wste_lists(
			CUR_DISPOSER_ORDER_ID,
			VAR_RETRIEVE_CURRENT_STATE_WSTE_LIST
		);
		            
		CALL sp_get_disposal_img_lists(
			CUR_DISPOSER_ORDER_ID,
			'입찰',
			VAR_RETRIEVE_CURRENT_STATE_IMG_PATH
		);
		            
		CALL sp_get_disposer_wste_geo_info(
			CUR_DISPOSER_ORDER_ID,
			VAR_RETRIEVE_CURRENT_STATE_WSTE_GEO_INFO
		);
            
		CALL sp_get_transaction_info_2(
			CUR_TRANSACTION_ID,
			VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_INFO
		);
        
        CALL sp_check_if_second_place_on(
			CUR_DISPOSER_ORDER_ID,
            CUR_COLLECTOR_BIDDING_ID,
            VAR_SECOND_PLACE_ON
        );
            
		CALL sp_set_display_time_for_collector(
			CUR_DISPOSER_ORDER_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_COLLECTOR_CATEGORY_ID,
			VAR_RETRIEVE_CURRENT_STATE_DISPLAY_DATE
		);
        
        SELECT B.ID INTO VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_ID
        FROM SITE_WSTE_DISPOSAL_ORDER A 
        LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION B ON A.ID = B.DISPOSAL_ORDER_ID
        WHERE 
			A.ID = CUR_DISPOSER_ORDER_ID;
            
		CALL sp_get_disposal_order_info(
			CUR_DISPOSER_ORDER_ID,
			VAR_RETRIEVE_CURRENT_STATE_DISPOSER_ORDER_INFO
		);
        
        SELECT COUNT(ID) INTO VAR_RECORD_COUNT
        FROM STATE_CONTROLLER
        WHERE 
			ORDER_ID = CUR_DISPOSER_ORDER_ID AND
            USER_TYPE = 3 AND
            SITE_ID = CUR_COLLECTOR_SITE_ID AND
            BIDDING_STATE = CUR_STATE_CODE;
        IF VAR_RECORD_COUNT > 0 THEN
			SET VAR_CHECK_STATE = TRUE;
        ELSE
			SET VAR_CHECK_STATE = FALSE;
        END IF;
        
		UPDATE RETRIEVE_CURRENT_STATE_TEMP 
        SET 
			IMG_PATH 			= VAR_RETRIEVE_CURRENT_STATE_IMG_PATH, 
            WSTE_LIST 			= VAR_RETRIEVE_CURRENT_STATE_WSTE_LIST, 
            WSTE_GEO_INFO 		= VAR_RETRIEVE_CURRENT_STATE_WSTE_GEO_INFO, 
            DISPOSER_ORDER_INFO	= VAR_RETRIEVE_CURRENT_STATE_DISPOSER_ORDER_INFO,
            DISPLAY_DATE 		= VAR_RETRIEVE_CURRENT_STATE_DISPLAY_DATE,
            TRANSACTION_INFO	= VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_INFO,
            SECOND_PLACE_ON		= VAR_SECOND_PLACE_ON,
            CHECK_STATE			= VAR_CHECK_STATE
        WHERE COLLECTOR_BIDDING_ID = CUR_COLLECTOR_BIDDING_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
        'COLLECTOR_BIDDING_ID'		, COLLECTOR_BIDDING_ID, 
        'DISPOSER_ORDER_ID'			, DISPOSER_ORDER_ID, 
        'STATE_CODE'				, STATE_CODE, 
        'STATE'						, STATE, 
        'STATE_PID'					, STATE_PID, 
        'COLLECTOR_CATEGORY_ID'		, COLLECTOR_CATEGORY_ID, 
        'COLLECTOR_CATEGORY'		, COLLECTOR_CATEGORY, 
        'BIDDING_RANK'				, BIDDING_RANK, 
        'DISPLAY_DATE'				, DISPLAY_DATE, 
        'IMG_PATH'					, IMG_PATH, 
        'WSTE_LIST'					, WSTE_LIST, 
        'WSTE_GEO_INFO'				, WSTE_GEO_INFO, 
        'DISPOSER_ORDER_INFO'		, DISPOSER_ORDER_INFO, 
        'TRANSACTION_INFO'			, TRANSACTION_INFO, 
        'SECOND_PLACE_ON'			, SECOND_PLACE_ON, 
        'CHECK_STATE'				, CHECK_STATE
	)) 
    INTO json_data FROM RETRIEVE_CURRENT_STATE_TEMP;
	DROP TABLE IF EXISTS RETRIEVE_CURRENT_STATE_TEMP;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_current_state_by_option`(
	IN IN_USER_ID							BIGINT,
	IN IN_STATE_CODE						INT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_current_state
Input param 	: 2개
Job 			: 전체 이외의 개별 상태에서의 리스트 반환
Update 			: 2022.01.25
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 										INT 					DEFAULT 0;
    DECLARE endOfRow 										TINYINT 				DEFAULT FALSE;      
    DECLARE CUR_COLLECTOR_SITE_ID							BIGINT; 
    DECLARE CUR_COLLECTOR_BIDDING_ID						BIGINT;
    DECLARE CUR_DISPOSER_ORDER_ID							BIGINT;
    DECLARE CUR_STATE_CODE									INT;
    DECLARE CUR_STATE										VARCHAR(20);
    DECLARE CUR_STATE_PID									INT;
    DECLARE CUR_COLLECTOR_CATEGORY_ID						INT;
    DECLARE CUR_COLLECTOR_CATEGORY							VARCHAR(20);
    DECLARE CUR_BIDDING_RANK								INT;
    DECLARE CUR_TRANSACTION_ID								BIGINT;
	DECLARE VAR_RETRIEVE_CURRENT_STATE_IMG_PATH				JSON					DEFAULT NULL;	
	DECLARE VAR_RETRIEVE_CURRENT_STATE_WSTE_LIST			JSON					DEFAULT NULL;	
	DECLARE VAR_RETRIEVE_CURRENT_STATE_WSTE_GEO_INFO		JSON					DEFAULT NULL;	
	DECLARE VAR_RETRIEVE_CURRENT_STATE_DISPOSER_SITE_INFO	JSON					DEFAULT NULL;	
	DECLARE VAR_RETRIEVE_CURRENT_STATE_DISPLAY_DATE			DATETIME				DEFAULT NULL;	
	DECLARE VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_INFO		JSON					DEFAULT NULL;	
	DECLARE VAR_SECOND_PLACE_ON								TINYINT					DEFAULT NULL;	
	DECLARE VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_ID		BIGINT					DEFAULT NULL;		
	DECLARE VAR_RETRIEVE_CURRENT_STATE_DISPOSER_ORDER_INFO	JSON					DEFAULT NULL;	
	DECLARE VAR_RECORD_COUNT								INT						DEFAULT 0;	
	DECLARE VAR_CHECK_STATE									TINYINT					DEFAULT NULL;	
	DECLARE rtn_val											INT						DEFAULT 0;
	DECLARE msg_txt											VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data										JSON					DEFAULT NULL;	
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.COLLECTOR_ID, 
        A.ID, 
        A.DISPOSAL_ORDER_ID,
        B.STATE_CODE,
        B.STATE,
        B.STATE_PID,
        B.COLLECTOR_CATEGORY_ID,
        B.COLLECTOR_CATEGORY,
        A.BIDDING_RANK,
        G.ID
    FROM COLLECTOR_BIDDING A
    LEFT JOIN V_BIDDING_STATE_NAME B ON A.ID = B.COLLECTOR_BIDDING_ID
    LEFT JOIN USERS C ON A.COLLECTOR_ID = C.AFFILIATED_SITE
    LEFT JOIN COMP_SITE D ON A.COLLECTOR_ID = D.ID
    LEFT JOIN COMPANY E ON D.COMP_ID = E.ID
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER F ON A.DISPOSAL_ORDER_ID = F.ID
    LEFT JOIN WSTE_CLCT_TRMT_TRANSACTOIN G ON A.ID = G.COLLECTOR_BIDDING_ID
	WHERE 
		B.COLLECTOR_CATEGORY_ID = IN_STATE_CODE AND 
        C.ID = IN_USER_ID AND
        (C.CLASS = 201 OR C.CLASS = 202) AND
        C.ACTIVE = TRUE AND
        D.ACTIVE = TRUE AND
        E.ACTIVE = TRUE;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS CURRENT_STATE_BY_OPTION (
		COLLECTOR_SITE_ID				BIGINT,
		COLLECTOR_BIDDING_ID			BIGINT,
		DISPOSER_ORDER_ID				BIGINT,
        STATE_CODE						INT,
        STATE							VARCHAR(20),
        STATE_PID						INT,
        COLLECTOR_CATEGORY_ID			INT,
        COLLECTOR_CATEGORY				VARCHAR(20),
        BIDDING_RANK					INT,
		DISPLAY_DATE					DATETIME,
        WSTE_LIST						JSON,
        IMG_PATH						JSON,
        WSTE_GEO_INFO					JSON,
        DISPOSER_ORDER_INFO				JSON,
        SECOND_PLACE_ON					TINYINT
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		SET VAR_RETRIEVE_CURRENT_STATE_IMG_PATH = NULL;
		SET VAR_RETRIEVE_CURRENT_STATE_WSTE_LIST = NULL; 
		SET VAR_RETRIEVE_CURRENT_STATE_WSTE_GEO_INFO = NULL; 
		SET VAR_RETRIEVE_CURRENT_STATE_DISPOSER_SITE_INFO = NULL; 
		SET VAR_RETRIEVE_CURRENT_STATE_DISPLAY_DATE = NULL;
		SET VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_INFO = NULL;
        
		FETCH TEMP_CURSOR 
		INTO 
			CUR_COLLECTOR_SITE_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_STATE_CODE,
			CUR_STATE,
			CUR_STATE_PID,
			CUR_COLLECTOR_CATEGORY_ID,
			CUR_COLLECTOR_CATEGORY,
			CUR_BIDDING_RANK,
			CUR_TRANSACTION_ID;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		CURRENT_STATE_BY_OPTION(
			COLLECTOR_SITE_ID, 
			COLLECTOR_BIDDING_ID, 
			DISPOSER_ORDER_ID,
			STATE_CODE,
			STATE,
			STATE_PID,
			COLLECTOR_CATEGORY_ID,
			COLLECTOR_CATEGORY,
			BIDDING_RANK
		)
		VALUES(
			CUR_COLLECTOR_SITE_ID,
			CUR_COLLECTOR_BIDDING_ID, 
			CUR_DISPOSER_ORDER_ID,
			CUR_STATE_CODE,
			CUR_STATE,
			CUR_STATE_PID,
			CUR_COLLECTOR_CATEGORY_ID,
			CUR_COLLECTOR_CATEGORY,
			CUR_BIDDING_RANK
		);
            
		CALL sp_get_disposal_wste_lists(
			CUR_DISPOSER_ORDER_ID,
			VAR_RETRIEVE_CURRENT_STATE_WSTE_LIST
		);
		            
		CALL sp_get_disposal_img_lists(
			CUR_DISPOSER_ORDER_ID,
			'입찰',
			VAR_RETRIEVE_CURRENT_STATE_IMG_PATH
		);
		            
		CALL sp_get_disposer_wste_geo_info(
			CUR_DISPOSER_ORDER_ID,
			VAR_RETRIEVE_CURRENT_STATE_WSTE_GEO_INFO
		);
            
		CALL sp_get_transaction_info_2(
			CUR_TRANSACTION_ID,
			VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_INFO
		);
        
        CALL sp_check_if_second_place_on(
			CUR_DISPOSER_ORDER_ID,
            CUR_COLLECTOR_BIDDING_ID,
            VAR_SECOND_PLACE_ON
        );
            
		CALL sp_set_display_time_for_collector(
			CUR_DISPOSER_ORDER_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_COLLECTOR_CATEGORY_ID,
			VAR_RETRIEVE_CURRENT_STATE_DISPLAY_DATE
		);
        
        SELECT B.ID INTO VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_ID
        FROM SITE_WSTE_DISPOSAL_ORDER A 
        LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION B ON A.ID = B.DISPOSAL_ORDER_ID
        WHERE 
			A.ID = CUR_DISPOSER_ORDER_ID;
            
		CALL sp_get_disposal_order_info(
			CUR_DISPOSER_ORDER_ID,
			VAR_RETRIEVE_CURRENT_STATE_DISPOSER_ORDER_INFO
		);
		
		UPDATE CURRENT_STATE_BY_OPTION 
        SET 
			IMG_PATH 			= VAR_RETRIEVE_CURRENT_STATE_IMG_PATH, 
            WSTE_LIST 			= VAR_RETRIEVE_CURRENT_STATE_WSTE_LIST, 
            WSTE_GEO_INFO 		= VAR_RETRIEVE_CURRENT_STATE_WSTE_GEO_INFO, 
            DISPOSER_ORDER_INFO	= VAR_RETRIEVE_CURRENT_STATE_DISPOSER_ORDER_INFO , 
            DISPLAY_DATE 		= VAR_RETRIEVE_CURRENT_STATE_DISPLAY_DATE ,
            TRANSACTION_INFO	= VAR_RETRIEVE_CURRENT_STATE_TRANSACTION_INFO ,
            SECOND_PLACE_ON		= VAR_SECOND_PLACE_ON 
        WHERE COLLECTOR_BIDDING_ID = CUR_COLLECTOR_BIDDING_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'COLLECTOR_SITE_ID'			, COLLECTOR_SITE_ID, 
        'COLLECTOR_BIDDING_ID'		, COLLECTOR_BIDDING_ID, 
        'DISPOSER_ORDER_ID'			, DISPOSER_ORDER_ID, 
        'STATE_CODE'				, STATE_CODE, 
        'STATE'						, STATE, 
        'STATE_PID'					, STATE_PID, 
        'COLLECTOR_CATEGORY_ID'		, COLLECTOR_CATEGORY_ID, 
        'COLLECTOR_CATEGORY'		, COLLECTOR_CATEGORY, 
        'BIDDING_RANK'				, BIDDING_RANK, 
        'DISPLAY_DATE'				, DISPLAY_DATE, 
        'IMG_PATH'					, IMG_PATH, 
        'WSTE_LIST'					, WSTE_LIST, 
        'WSTE_GEO_INFO'				, WSTE_GEO_INFO, 
        'DISPOSER_ORDER_INFO'		, DISPOSER_ORDER_INFO, 
        'TRANSACTION_INFO'			, TRANSACTION_INFO, 
        'SECOND_PLACE_ON'			, SECOND_PLACE_ON
	)) 
    INTO json_data FROM CURRENT_STATE_BY_OPTION;
    
	DROP TABLE IF EXISTS CURRENT_STATE_BY_OPTION;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_existing_transactions`(
	IN IN_USER_ID							BIGINT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_existing_transactions
Input param 	: 2개
Job 			: 현재 처리중인 업체(거래내역)를 리스트한다.
Update 			: 2022.01.25
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 				DEFAULT 0;
    DECLARE endOfRow 							TINYINT 			DEFAULT FALSE;    
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT; 
    DECLARE CUR_DISPOSER_ORDER_CODE				VARCHAR(10);
    DECLARE CUR_DISPOSER_ID						BIGINT;
    DECLARE CUR_COLLECTOR_ID					BIGINT;
    DECLARE CUR_COLLECTOR_BIDDING_ID			BIGINT;
    DECLARE CUR_OPEN_AT							DATETIME;
    DECLARE CUR_CLOSE_AT						DATETIME;
    DECLARE CUR_DISPOSER_SITE_ID				BIGINT;	
    DECLARE CUR_AVATAR_PATH						VARCHAR(255);
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_TRANSACTION_INFO				JSON					DEFAULT NULL;	
	DECLARE VAR_DISPOSER_WSTE_INFO				JSON					DEFAULT NULL;	
	DECLARE VAR_COLLECTOR_SITE_NAME				VARCHAR(255)			DEFAULT NULL;	
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
    
	SELECT 
		A.ID, 
		A.ORDER_CODE, 
		A.DISPOSER_ID, 
		A.COLLECTOR_ID, 
		A.COLLECTOR_BIDDING_ID, 
        A.OPEN_AT, 
        A.CLOSE_AT, 
        A.SITE_ID, 
        IF(A.COLLECTOR_ID IS NULL, F.AVATAR_PATH, G.AVATAR_PATH)
    FROM SITE_WSTE_DISPOSAL_ORDER A
	LEFT JOIN USERS B ON IF(B.AFFILIATED_SITE = 0, A.DISPOSER_ID = B.ID, A.SITE_ID = B.AFFILIATED_SITE)
	LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION C ON A.ID = C.DISPOSAL_ORDER_ID
	LEFT JOIN V_ORDER_STATE_NAME D ON A.ID = D.DISPOSER_ORDER_ID
    LEFT JOIN COLLECTOR_BIDDING E ON A.COLLECTOR_BIDDING_ID = E.ID
    LEFT JOIN USERS F ON E.COLLECTOR_ID = F.AFFILIATED_SITE
    LEFT JOIN USERS G ON A.COLLECTOR_ID = G.AFFILIATED_SITE
	WHERE 
		B.ID = IN_USER_ID AND
        B.ACTIVE = TRUE AND
        A.CLOSE_AT > NOW() AND
        D.STATE_CATEGORY_ID = 6;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		DROP TABLE IF EXISTS EXISTING_TRANSACTION_TEMP;
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS EXISTING_TRANSACTION_TEMP (
		DISPOSER_ORDER_ID		BIGINT,
		DISPOSER_ORDER_CODE		VARCHAR(10),
		DISPOSER_ID				BIGINT,
		COLLECTOR_ID			BIGINT,
		COLLECTOR_BIDDING_ID	BIGINT,
		OPEN_AT					DATETIME,
		CLOSE_AT				DATETIME,
		DISPOSER_SITE_ID		BIGINT,
		AVATAR_PATH				VARCHAR(255),
		COLLECTOR_SITE_NAME		VARCHAR(255),
		TRANSACTION_TYPE		VARCHAR(20),
        TRANSACTION_INFO		JSON,
        WSTE_INFO				JSON,
        COLLECTOR_INFO			JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_ID,
			CUR_COLLECTOR_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_OPEN_AT,
			CUR_CLOSE_AT,
			CUR_DISPOSER_SITE_ID,
			CUR_AVATAR_PATH;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		EXISTING_TRANSACTION_TEMP(
			DISPOSER_ORDER_ID,
			DISPOSER_ORDER_CODE,
			DISPOSER_ID,
			COLLECTOR_ID,
			COLLECTOR_BIDDING_ID,
			OPEN_AT,
			CLOSE_AT,
			DISPOSER_SITE_ID,
			AVATAR_PATH,
            TRANSACTION_TYPE
		)
		VALUES(
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_ID,
			CUR_COLLECTOR_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_OPEN_AT,
			CUR_CLOSE_AT,
			CUR_DISPOSER_SITE_ID,
			CUR_AVATAR_PATH,
			IF(CUR_COLLECTOR_ID IS NULL OR CUR_COLLECTOR_ID = 0, '입찰거래', '기존거래')
		);
        
		CALL sp_get_transaction_info(
			CUR_DISPOSER_ORDER_ID,
            VAR_TRANSACTION_INFO
        );
        
        CALL sp_get_disposal_wste_lists(
			CUR_DISPOSER_ORDER_ID,
            VAR_DISPOSER_WSTE_INFO
        ); 
        
        IF CUR_COLLECTOR_ID IS NULL OR CUR_COLLECTOR_ID = 0 THEN
			SELECT B.SITE_NAME INTO VAR_COLLECTOR_SITE_NAME
			FROM COLLECTOR_BIDDING A
			LEFT JOIN COMP_SITE B ON A.COLLECTOR_ID = B.ID
			WHERE A.ID = CUR_COLLECTOR_BIDDING_ID;
        ELSE
			SELECT SITE_NAME INTO VAR_COLLECTOR_SITE_NAME
			FROM COMP_SITE
			WHERE ID = CUR_COLLECTOR_ID;
        END IF;
		
        
		UPDATE EXISTING_TRANSACTION_TEMP 
        SET 
			COLLECTOR_SITE_NAME	= VAR_COLLECTOR_SITE_NAME,
			TRANSACTION_INFO 	= VAR_TRANSACTION_INFO,
			WSTE_INFO 			= VAR_DISPOSER_WSTE_INFO 
        WHERE DISPOSER_ORDER_ID = CUR_DISPOSER_ORDER_ID;
	
		/*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'DISPOSER_ORDER_ID'		, DISPOSER_ORDER_ID, 
		'DISPOSER_ORDER_CODE'	, DISPOSER_ORDER_CODE, 
		'DISPOSER_ID'			, DISPOSER_ID, 
		'COLLECTOR_BIDDING_ID'	, COLLECTOR_BIDDING_ID, 
		'OPEN_AT'				, OPEN_AT, 
		'CLOSE_AT'				, CLOSE_AT, 
		'DISPOSER_SITE_ID'		, DISPOSER_SITE_ID, 
		'AVATAR_PATH'			, AVATAR_PATH, 
		'COLLECTOR_SITE_NAME'	, COLLECTOR_SITE_NAME, 
		'TRANSACTION_TYPE'		, TRANSACTION_TYPE, 
        'TRANSACTION_INFO'		, TRANSACTION_INFO, 
        'WSTE_INFO'				, WSTE_INFO
	)) 
    INTO json_data 
    FROM EXISTING_TRANSACTION_TEMP;
	DROP TABLE IF EXISTS EXISTING_TRANSACTION_TEMP;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_existing_transactions_20220523`(
	IN IN_USER_ID							BIGINT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_existing_transactions_20220523
Input param 	: 2개
Job 			: 현재 처리중인 업체(거래내역)를 리스트한다.
Update 			: 2022.01.25
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT; 
    DECLARE CUR_DISPOSER_ORDER_CODE				VARCHAR(10);
    DECLARE CUR_DISPOSER_ID						BIGINT;
    DECLARE CUR_COLLECTOR_ID					BIGINT;
    DECLARE CUR_COLLECTOR_BIDDING_ID			BIGINT;
    DECLARE CUR_OPEN_AT							DATETIME;
    DECLARE CUR_CLOSE_AT						DATETIME;
    DECLARE CUR_DISPOSER_SITE_ID				BIGINT;	
    DECLARE CUR_AVATAR_PATH						VARCHAR(255);
    DECLARE CUR_MAX_DECISION_AT					DATETIME;			/*기존거래 업체와의 거래시 배출자가 기존거래 업체에게 수거요청일을 보낸 후 수거업체가 이에 대하여 승낙 또는 거절의사를 표시해야하는 DEADLINE으로서 WSTE_CLCT_TRMT_TRANSACTION.MAX_DECISION_AT*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_TRANSACTION_INFO				JSON					DEFAULT NULL;	
	DECLARE VAR_DISPOSER_WSTE_INFO				JSON					DEFAULT NULL;	
	DECLARE VAR_COLLECTOR_SITE_NAME				VARCHAR(255)			DEFAULT NULL;	
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
    
	SELECT 
		A.ID, 
		A.ORDER_CODE, 
		A.DISPOSER_ID, 
		A.COLLECTOR_ID, 
		A.COLLECTOR_BIDDING_ID, 
        A.OPEN_AT, 
        A.CLOSE_AT, 
        A.SITE_ID, 
        E.AVATAR_PATH, 
        C.MAX_DECISION_AT,
        D.STATE_CATEGORY_ID
    FROM SITE_WSTE_DISPOSAL_ORDER 			A
	LEFT JOIN USERS 						B ON IF(A.SITE_ID = 0, A.DISPOSER_ID = B.ID, A.SITE_ID = B.AFFILIATED_SITE)
	LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION 	C ON A.ID = C.DISPOSAL_ORDER_ID
	LEFT JOIN V_ORDER_STATE_NAME 			D ON A.ID = D.DISPOSER_ORDER_ID
    LEFT JOIN USERS 						E ON A.COLLECTOR_ID = E.AFFILIATED_SITE
	WHERE 
		B.ID 								= IN_USER_ID AND
        B.ACTIVE 							= TRUE AND
        A.CLOSE_AT 							> NOW() AND
        D.STATE_CATEGORY_ID 				= 6 AND
        C.COLLECTOR_BIDDING_ID 				IS NULL;      
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		DROP TABLE IF EXISTS EXISTING_TRANSACTION_TEMP;
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS EXISTING_TRANSACTION_TEMP (
		DISPOSER_ORDER_ID		BIGINT,
		DISPOSER_ORDER_CODE		VARCHAR(10),
		DISPOSER_ID				BIGINT,
		COLLECTOR_ID			BIGINT,
		COLLECTOR_BIDDING_ID	BIGINT,
		OPEN_AT					DATETIME,
		CLOSE_AT				DATETIME,
		DISPOSER_SITE_ID		BIGINT,
		AVATAR_PATH				VARCHAR(255),
		MAX_DECISION_AT			DATETIME,
		COLLECTOR_SITE_NAME		VARCHAR(255),
		TRANSACTION_TYPE		VARCHAR(20),
        TRANSACTION_INFO		JSON,
        WSTE_INFO				JSON,
        COLLECTOR_INFO			JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_ID,
			CUR_COLLECTOR_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_OPEN_AT,
			CUR_CLOSE_AT,
			CUR_DISPOSER_SITE_ID,
			CUR_AVATAR_PATH,
			CUR_MAX_DECISION_AT;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		EXISTING_TRANSACTION_TEMP(
			DISPOSER_ORDER_ID,
			DISPOSER_ORDER_CODE,
			DISPOSER_ID,
			COLLECTOR_ID,
			COLLECTOR_BIDDING_ID,
			OPEN_AT,
			CLOSE_AT,
			DISPOSER_SITE_ID,
			AVATAR_PATH,
			MAX_DECISION_AT,
            TRANSACTION_TYPE
		)
		VALUES(
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_ID,
			CUR_COLLECTOR_ID,
			CUR_COLLECTOR_BIDDING_ID,
			CUR_OPEN_AT,
			CUR_CLOSE_AT,
			CUR_DISPOSER_SITE_ID,
			CUR_AVATAR_PATH,
			CUR_MAX_DECISION_AT,
			IF(CUR_COLLECTOR_ID IS NULL OR CUR_COLLECTOR_ID = 0, '입찰거래', '기존거래')
		);
        
		CALL sp_get_transaction_info(
			CUR_DISPOSER_ORDER_ID,
            VAR_TRANSACTION_INFO
        );
        
        CALL sp_get_disposal_wste_lists(
			CUR_DISPOSER_ORDER_ID,
            VAR_DISPOSER_WSTE_INFO
        ); 
        
        IF CUR_COLLECTOR_ID IS NULL OR CUR_COLLECTOR_ID = 0 THEN
			SELECT B.SITE_NAME INTO VAR_COLLECTOR_SITE_NAME
			FROM COLLECTOR_BIDDING A
			LEFT JOIN COMP_SITE B ON A.COLLECTOR_ID = B.ID
			WHERE A.ID = CUR_COLLECTOR_BIDDING_ID;
        ELSE
			SELECT SITE_NAME INTO VAR_COLLECTOR_SITE_NAME
			FROM COMP_SITE
			WHERE ID = CUR_COLLECTOR_ID;
        END IF;
		
        
		UPDATE EXISTING_TRANSACTION_TEMP 
        SET 
			COLLECTOR_SITE_NAME	= VAR_COLLECTOR_SITE_NAME,
			TRANSACTION_INFO 	= VAR_TRANSACTION_INFO,
			WSTE_INFO 			= VAR_DISPOSER_WSTE_INFO 
        WHERE DISPOSER_ORDER_ID = CUR_DISPOSER_ORDER_ID;
	
		/*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'DISPOSER_ORDER_ID'		, DISPOSER_ORDER_ID, 
		'DISPOSER_ORDER_CODE'	, DISPOSER_ORDER_CODE, 
		'DISPOSER_ID'			, DISPOSER_ID, 
		'COLLECTOR_BIDDING_ID'	, COLLECTOR_BIDDING_ID, 
		'OPEN_AT'				, OPEN_AT, 
		'CLOSE_AT'				, CLOSE_AT, 
		'DISPOSER_SITE_ID'		, DISPOSER_SITE_ID, 
		'AVATAR_PATH'			, AVATAR_PATH, 
		'AVATAR_PATH'			, AVATAR_PATH, 
		'COLLECTOR_SITE_NAME'	, COLLECTOR_SITE_NAME, 
		'TRANSACTION_TYPE'		, TRANSACTION_TYPE, 
        'MAX_DECISION_AT'		, MAX_DECISION_AT, 
        'WSTE_INFO'				, WSTE_INFO
	)) 
    INTO json_data 
    FROM EXISTING_TRANSACTION_TEMP;
	DROP TABLE IF EXISTS EXISTING_TRANSACTION_TEMP;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_history_of_transaction_done`(
	IN IN_USER_ID							BIGINT,
    IN IN_COLLECTOR_SITE_ID					BIGINT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_history_of_transaction_done
Input param 	: 1개
Job 			: 배출자가 이전거래(트랜잭션 리포트가 최종적으로 확정된 거래)를 불러온다
Update 			: 2022.04.05
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_TRANSACTION_REPORT_ID			BIGINT; 
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;
    DECLARE CUR_ORDER_CODE						VARCHAR(10);
    DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
    DECLARE CUR_TRANSACTION_ID					BIGINT;
    DECLARE CUR_WSTE_CODE						VARCHAR(8);
    DECLARE CUR_WSTE_NAME						VARCHAR(255);
    DECLARE CUR_TRMT_METHOD_CODE				VARCHAR(4);
    DECLARE CUR_TRMT_METHOD_NM					VARCHAR(255);
    DECLARE CUR_WSTE_APPEARANCE					INT;
    DECLARE CUR_WSTE_APPEARANCE_NM				VARCHAR(10);
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_DISPOSER_WSTE_IMG				JSON					DEFAULT NULL;	
	DECLARE VAR_REPORT_WSTE_IMG					JSON					DEFAULT NULL;	
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
        B.ID, 
        B.ORDER_CODE, 
        A.COLLECTOR_SITE_ID, 
        A.TRANSACTION_ID, 
        A.WSTE_CODE, 
        C.NAME, 
        A.TRMT_METHOD, 
        E.NAME,
        A.WSTE_APPEARANCE,
        F.KOREAN
    FROM TRANSACTION_REPORT A
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSER_ORDER_ID = B.ID
    LEFT JOIN WSTE_CODE C ON A.WSTE_CODE = C.CODE
    LEFT JOIN USERS D ON IF(B.SITE_ID = 0, B.DISPOSER_ID = D.ID, B.SITE_ID = D.AFFILIATED_SITE)
    LEFT JOIN WSTE_TRMT_METHOD E ON A.TRMT_METHOD = E.CODE
    LEFT JOIN WSTE_APPEARANCE F ON A.WSTE_APPEARANCE = F.ID
	WHERE 
        D.ID = IN_USER_ID AND
        (D.CLASS = 201 OR D.CLASS = 202) AND
        D.ACTIVE = TRUE AND
        A.CONFIRMED = TRUE AND
        A.COLLECTOR_SITE_ID = IN_COLLECTOR_SITE_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
            
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS RETRIEVE_HISTORY_OF_TRANSACTION_DONE_TEMP;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;	   
    /*트랜잭션 시작*/  
    
	CREATE TEMPORARY TABLE IF NOT EXISTS RETRIEVE_HISTORY_OF_TRANSACTION_DONE_TEMP (
		TRANSACTION_REPORT_ID			BIGINT,
		DISPOSER_ORDER_ID				BIGINT,
		ORDER_CODE						VARCHAR(10),
        COLLECTOR_SITE_ID				BIGINT,
        TRANSACTION_ID					BIGINT,
        WSTE_CODE						VARCHAR(8),
        WSTE_NAME						VARCHAR(255),
        TRMT_METHOD_CODE				VARCHAR(4),
        TRMT_METHOD_NM					VARCHAR(255),
        WSTE_APPEARANCE					INT,
        WSTE_APPEARANCE_NM				VARCHAR(10),
        DISPOSER_WSTE_IMG				JSON,
        REPORT_WSTE_IMG					JSON
        
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO 
			CUR_TRANSACTION_REPORT_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_COLLECTOR_SITE_ID,
			CUR_TRANSACTION_ID,
			CUR_WSTE_CODE,
			CUR_WSTE_NAME,
			CUR_TRMT_METHOD_CODE,
			CUR_TRMT_METHOD_NM,
			CUR_WSTE_APPEARANCE,
			CUR_WSTE_APPEARANCE_NM;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		RETRIEVE_HISTORY_OF_TRANSACTION_DONE_TEMP(
			TRANSACTION_REPORT_ID, 
			DISPOSER_ORDER_ID, 
			ORDER_CODE,
			COLLECTOR_SITE_ID,
			TRANSACTION_ID,
			WSTE_CODE,
			WSTE_NAME,
			TRMT_METHOD_CODE,
			TRMT_METHOD_NM,
			WSTE_APPEARANCE,
			WSTE_APPEARANCE_NM
		)
		VALUES(
			CUR_TRANSACTION_REPORT_ID,
			CUR_DISPOSER_ORDER_ID,
			CUR_ORDER_CODE,
			CUR_COLLECTOR_SITE_ID,
			CUR_TRANSACTION_ID,
			CUR_WSTE_CODE,
			CUR_WSTE_NAME,
			CUR_TRMT_METHOD_CODE,
			CUR_TRMT_METHOD_NM,
			CUR_WSTE_APPEARANCE,
			CUR_WSTE_APPEARANCE_NM
		);
        
        CALL sp_get_disposal_img_lists(
			CUR_DISPOSER_ORDER_ID,
            '입찰',
            VAR_DISPOSER_WSTE_IMG
		);
        
        CALL sp_get_disposal_img_lists(
			CUR_DISPOSER_ORDER_ID,
            '처리',
            VAR_REPORT_WSTE_IMG
		);
        
        UPDATE RETRIEVE_HISTORY_OF_TRANSACTION_DONE_TEMP
        SET
			DISPOSER_WSTE_IMG = VAR_DISPOSER_WSTE_IMG,
			REPORT_WSTE_IMG = VAR_REPORT_WSTE_IMG
        WHERE TRANSACTION_REPORT_ID = CUR_TRANSACTION_REPORT_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'TRANSACTION_REPORT_ID'			, TRANSACTION_REPORT_ID, 
        'DISPOSER_ORDER_ID'				, DISPOSER_ORDER_ID, 
        'ORDER_CODE'					, ORDER_CODE, 
        'COLLECTOR_SITE_ID'				, COLLECTOR_SITE_ID, 
        'TRANSACTION_ID'				, TRANSACTION_ID, 
        'WSTE_CODE'						, WSTE_CODE, 
        'WSTE_NAME'						, WSTE_NAME, 
        'TRMT_METHOD_CODE'				, TRMT_METHOD_CODE, 
        'TRMT_METHOD_NM'				, TRMT_METHOD_NM, 
        'DISPOSER_WSTE_IMG'				, DISPOSER_WSTE_IMG, 
        'REPORT_WSTE_IMG'				, REPORT_WSTE_IMG, 
        'WSTE_APPEARANCE'				, WSTE_APPEARANCE, 
        'WSTE_APPEARANCE_NM'			, WSTE_APPEARANCE_NM
	)) 
    INTO json_data FROM RETRIEVE_HISTORY_OF_TRANSACTION_DONE_TEMP;
    
	DROP TABLE IF EXISTS RETRIEVE_HISTORY_OF_TRANSACTION_DONE_TEMP;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_latest_push_history`(
	IN IN_USER_ID							BIGINT,
    IN IN_PAGE_SIZE							INT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_latest_push_history
Input param 	: 2개
Job 			: 최근 푸시 히스토리에서 사용자가 읽지 않은 푸시가 있는 경우 TRUE, 그렇지 않은 경우 FALSE를 반환한다
Update 			: 2022.04.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ID	 							BIGINT;  
    DECLARE CUR_TITLE 							VARCHAR(255);
    DECLARE CUR_BODY							VARCHAR(255);	
    DECLARE CUR_CATEGORY_ID						INT;	
    DECLARE CUR_IS_READ							TINYINT;	
    DECLARE CUR_DELETED							TINYINT;	
    DECLARE CUR_AVATAR_PATH						VARCHAR(255);	
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_COUNT_OF_UNREAD_HISTORY			INT						DEFAULT 0;	
	DECLARE VAR_FLAG							TINYINT					DEFAULT NULL;	
    DECLARE PUSH_HISTORY_CURSOR 				CURSOR FOR 
	SELECT 
        ID,
        TITLE,
        BODY,
        CATEGORY_ID,
        IS_READ,
        DELETED
    FROM PUSH_HISTORY
    WHERE USER_ID = IN_USER_ID
    ORDER BY CREATED_AT DESC
    LIMIT 0, IN_PAGE_SIZE;  
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
        
	CREATE TEMPORARY TABLE IF NOT EXISTS LATEST_PUSH_HISTORY_TEMP (
		HISTORY_ID	 					BIGINT,
		TITLE 							VARCHAR(255),
		BODY							VARCHAR(255),
		TARGET_URL						VARCHAR(255),
		CATEGORY_ID						INT,
		IS_READ							TINYINT,
		DELETED							TINYINT
	);
    
	OPEN PUSH_HISTORY_CURSOR;	
	cloop: LOOP
		FETCH PUSH_HISTORY_CURSOR 
        INTO  
			CUR_ID,
			CUR_TITLE,
			CUR_BODY,
			CUR_CATEGORY_ID,
			CUR_IS_READ,
			CUR_DELETED;
        
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
        LATEST_PUSH_HISTORY_TEMP(
			HISTORY_ID,
			TITLE,
			BODY,
			CATEGORY_ID,
			IS_READ,
			DELETED
		)
        VALUES(
			CUR_ID,
			CUR_TITLE,
			CUR_BODY,
			CUR_CATEGORY_ID,
			CUR_IS_READ,
			CUR_DELETED
		);
        
	END LOOP;   
	CLOSE PUSH_HISTORY_CURSOR;
	SELECT COUNT(HISTORY_ID) INTO VAR_COUNT_OF_UNREAD_HISTORY
    FROM LATEST_PUSH_HISTORY_TEMP
    WHERE 
        IS_READ = FALSE AND
        DELETED = FALSE;
    DROP TABLE IF EXISTS LATEST_PUSH_HISTORY_TEMP;
	
	IF VAR_COUNT_OF_UNREAD_HISTORY > 0 THEN
		SET VAR_FLAG = TRUE;
    ELSE
		SET VAR_FLAG = FALSE;
    END IF;
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'USER_ID'			, IN_USER_ID, 
			'UNREAD_COUNT'		, VAR_COUNT_OF_UNREAD_HISTORY, 
			'FALG'				, VAR_FLAG
		)
	) 
	INTO json_data;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_my_disposal_details_20220523`(
	IN IN_ORDER_ID					BIGINT,
	IN IN_ORDER_STATE_CODE			INT,
	IN IN_TRANSACTION_STATE_CODE	INT,
	IN IN_EXISTING_TRANSACTION		TINYINT,
    OUT OUT_DETAILS					JSON
)
BEGIN
    
    IF FOUND_ROWS() > 0 THEN
		IF IN_EXISTING_TRANSACTION = 0 THEN
			IF IN_ORDER_STATE_CODE IS NOT NULL THEN
				IF IN_ORDER_STATE_CODE = 101 THEN		/*방문대기중 => NULL 반환*/
					SET OUT_DETAILS = NULL;
				END IF;
				IF IN_ORDER_STATE_CODE = 102 THEN		/*방문중*/
					CALL sp_req_order_details_102(
						IN_ORDER_ID,
						OUT_DETAILS
					);
				END IF;
				IF IN_ORDER_STATE_CODE = 103 THEN		/*입찰중 => 117 사용*/
				/*상태 117과 동일하게 처리함*/
					CALL sp_req_order_details_117(
						IN_ORDER_ID,
						OUT_DETAILS
					);
				END IF;
				IF IN_ORDER_STATE_CODE = 104 THEN		/*기존거래 => NULL 반환*/
				/*
					CALL sp_req_order_details_104(
						IN_ORDER_ID,
						OUT_DETAILS
					);
				*/
					SET OUT_DETAILS = NULL;
				END IF;
				IF IN_ORDER_STATE_CODE = 105 THEN		/*거래종료 => NULL 반환*/
					SET OUT_DETAILS = NULL;
				END IF;
				IF IN_ORDER_STATE_CODE = 106 THEN		/*삭제 => NULL 반환*/
					SET OUT_DETAILS = NULL;
				END IF;
				IF IN_ORDER_STATE_CODE = 110 THEN		/*선정중*/
					CALL sp_req_order_details_110(
						IN_ORDER_ID,
						OUT_DETAILS
					);
				END IF;
				IF IN_ORDER_STATE_CODE = 115 THEN		/*승인포기종료 => NULL 반환*/
					SET OUT_DETAILS = NULL;
				END IF;
				IF IN_ORDER_STATE_CODE = 116 THEN		/*무방문신청종료 => NULL 반환*/
					SET OUT_DETAILS = NULL;
				END IF;
				IF IN_ORDER_STATE_CODE = 117 THEN		/*무입찰종료*/
				/*방문자수와 입찰자수를 반환한다.*/
					CALL sp_req_order_details_117(
						IN_ORDER_ID,
						OUT_DETAILS
					);
				END IF;
				IF IN_ORDER_STATE_CODE = 118 THEN		/*처리중 => NULL 반환*/
					CALL sp_req_order_details_118(
						IN_ORDER_ID,
						OUT_DETAILS
					);
				END IF;
				IF IN_ORDER_STATE_CODE = 119 THEN		/*확인중(선정수락대기중[new plan])*/
					CALL sp_req_order_details_119(
						IN_ORDER_ID,
						OUT_DETAILS
					);
				END IF;
				IF IN_ORDER_STATE_CODE = 121 THEN		/*확인포기종료 => NULL 반환*/
					SET OUT_DETAILS = NULL;
				END IF;
				IF IN_ORDER_STATE_CODE = 122 THEN		/*기존거래거절종료 => NULL 반환*/
					CALL sp_req_order_details_122(
						IN_ORDER_ID,
						OUT_DETAILS
					);
				END IF;
			ELSE
				SET OUT_DETAILS = NULL;
			END IF;
		ELSE
			IF IN_TRANSACTION_STATE_CODE NOT IN (211) THEN
				CALL sp_req_transaction_details(
					IN_ORDER_ID,
					OUT_DETAILS
				);
            ELSE
				IF IN_ORDER_STATE_CODE = 122 THEN		/*기존거래거절종료 => NULL 반환*/
					CALL sp_req_order_details_122(
						IN_ORDER_ID,
						OUT_DETAILS
					);
				ELSE
					SET OUT_DETAILS = NULL;
				END IF;
            END IF;
		END IF;
    ELSE
		SET OUT_DETAILS = NULL;
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_my_disposal_lists`(
	IN IN_USER_ID							BIGINT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_my_disposal_lists
Input param 	: 1개
Job 			: 배출자 메인 페이지 로딩시 필요한 자료 반환.
Update 			: 2022.02.17
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/

	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_USER_TYPE						VARCHAR(20)				DEFAULT NULL;	
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  

	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다.*/
		CALL sp_req_user_type(
			IN_USER_ID,
            VAR_USER_TYPE
        );
		CALL sp_retrieve_my_disposal_lists_with_json(
			IN_USER_ID,
			VAR_USER_TYPE,
			rtn_val,
			msg_txt,
			json_data
		);
        IF rtn_val > 0 THEN
			SET json_data 		= NULL;
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SET json_data 		= NULL;
		SET rtn_val 		= 28801;
		SET msg_txt 		= 'user not found';
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;   
    
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_my_disposal_lists_20220523`(
	IN IN_USER_ID							BIGINT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_my_disposal_lists_20220523
Input param 	: 1개
Job 			: 배출자 메인 페이지 로딩시 필요한 자료 반환.
Update 			: 2022.02.17
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/

	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;
	DECLARE VAR_USER_TYPE						VARCHAR(20)				DEFAULT NULL;	
    DECLARE VAR_USER_EXITS						INT 					DEFAULT 0;

	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다.*/
		CALL sp_req_user_type(
			IN_USER_ID,
            VAR_USER_TYPE
        );
		CALL sp_retrieve_my_disposal_lists_with_json_20220523(
			IN_USER_ID,
			VAR_USER_TYPE,
			rtn_val,
			msg_txt,
			json_data
		);
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SET json_data 		= NULL;
		SET rtn_val 		= 40201;
		SET msg_txt 		= 'user not found';
    END IF;
    
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_my_disposal_lists_by_option`(
	IN IN_USER_ID							BIGINT,
	IN IN_STATE_CODE						INT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_my_disposal_lists_by_option
Input param 	: 2개
Job 			: 배출자의 현재 배출중인 작업의 상태별로 리스트 반환
Update 			: 2022.01.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_USER_TYPE						VARCHAR(20)				DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  

	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다.*/
		CALL sp_req_user_type(
			IN_USER_ID,
            VAR_USER_TYPE
        );
		CALL sp_retrieve_my_disposal_lists_by_option_with_json(
			IN_USER_ID,
			IN_STATE_CODE,
			VAR_USER_TYPE,
			rtn_val,
			msg_txt,
			json_data
		);
        IF rtn_val > 0 THEN
			SET json_data 		= NULL;
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SET json_data 		= NULL;
		SET rtn_val 		= 28701;
		SET msg_txt 		= 'user not found';
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;   
    
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_my_disposal_lists_by_option_with_json`(
	IN IN_USER_ID							BIGINT,
	IN IN_STATE_CODE						INT,
	IN IN_USER_TYPE							VARCHAR(20),
    OUT rtn_val								INT,
    OUT msg_txt								VARCHAR(200),
    OUT json_data							JSON
)
BEGIN

/*
Procedure Name 	: sp_retrieve_my_disposal_lists_by_option_with_json
Input param 	: 3개
Output param 	: 3개
Job 			: 배출자의 현재 배출중인 작업의 상태별로 리스트 반환
Update 			: 2022.02.17
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 								INT DEFAULT 0;
    DECLARE endOfRow 								TINYINT DEFAULT FALSE;    
    DECLARE CUR_DISPOSER_ORDER_ID					BIGINT;
    DECLARE CUR_DISPOSER_ORDER_CODE					VARCHAR(10);
    DECLARE CUR_DISPOSER_SITE_ID					BIGINT;    
    DECLARE CUR_DISPOSER_VISIT_START_AT				DATETIME;
    DECLARE CUR_DISPOSER_VISIT_END_AT				DATETIME;
    DECLARE CUR_DISPOSER_BIDDING_END_AT				DATETIME;
    DECLARE CUR_DISPOSER_OPEN_AT					DATETIME;
    DECLARE CUR_DISPOSER_CLOSE_AT					DATETIME;
    DECLARE CUR_DISPOSER_SERVICE_INSTRUCTION_ID		BIGINT;
    DECLARE CUR_DISPOSER_VISIT_EARLY_CLOSING		TINYINT;
    DECLARE CUR_DISPOSER_VISIT_EARLY_CLOSED_AT		DATETIME;
    DECLARE CUR_DISPOSER_BIDDING_EARLY_CLOSING		TINYINT;
    DECLARE CUR_DISPOSER_BIDDING_EARLY_CLOSED_AT	DATETIME;
    DECLARE CUR_DISPOSER_CREATED_AT					DATETIME;
    DECLARE CUR_DISPOSER_UPDATED_AT					DATETIME;    
    DECLARE CUR_STATE								VARCHAR(20);
    DECLARE CUR_STATE_CODE							INT;
    DECLARE CUR_STATE_CATEGORY_ID					INT;
    DECLARE CUR_STATE_CATEGORY						VARCHAR(45);
    DECLARE CUR_PROSPECTIVE_VISITORS				INT;
    DECLARE CUR_BIDDERS								INT;
    DECLARE CUR_NOTE								VARCHAR(255);
	DECLARE VAR_WSTE_LIST							JSON					DEFAULT NULL;	
	DECLARE VAR_IMG_PATH							JSON					DEFAULT NULL;	
	DECLARE VAR_BIDDING_LIST						JSON					DEFAULT NULL;	
	DECLARE VAR_DISPLAY_DATE						DATETIME				DEFAULT NULL;
	DECLARE MIN_DISPOSAL_DURATION					VARCHAR(255)			DEFAULT NULL;		
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
	SELECT 
		A.ID, 
        A.ORDER_CODE, 
        A.SITE_ID,        
        A.VISIT_START_AT,
        A.VISIT_END_AT,
        A.BIDDING_END_AT,
        A.OPEN_AT,
        A.CLOSE_AT,
        A.SERVICE_INSTRUCTION_ID,
        A.VISIT_EARLY_CLOSING,
        A.VISIT_EARLY_CLOSED_AT,
        A.BIDDING_EARLY_CLOSING,
        A.BIDDING_EARLY_CLOSED_AT,
        A.CREATED_AT,
        A.UPDATED_AT,
        B.STATE, 
        B.STATE_CODE, 
        B.STATE_CATEGORY_ID, 
        B.STATE_CATEGORY, 
        A.PROSPECTIVE_VISITORS, 
        A.BIDDERS, 
        A.NOTE
    FROM SITE_WSTE_DISPOSAL_ORDER A 
    LEFT JOIN V_ORDER_STATE_NAME B 	ON A.ID 		= B.DISPOSER_ORDER_ID
    LEFT JOIN COMP_SITE C 			ON A.SITE_ID 	= C.ID
    LEFT JOIN COMPANY D 			ON C.COMP_ID 	= D.ID
	WHERE 
		B.STATE_CODE 		= IN_STATE_CODE AND 
        A.IS_DELETED 		= FALSE AND
        B.STATE_CODE 		<> 105 AND
        IF (IN_USER_TYPE	= 'Person', 
            A.DISPOSER_ID 	= IN_USER_ID, 
            C.ACTIVE 		= TRUE AND 
            D.ACTIVE 		= TRUE AND 
            A.SITE_ID 		IS NOT NULL AND 
            A.SITE_ID 		IN (
				SELECT AFFILIATED_SITE 
                FROM USERS 
                WHERE 
					ID 		= IN_USER_ID AND 
                    ACTIVE 	= TRUE
			)
		);
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS MY_DISPOSAL_LISTS_BY_OPTION_TEMP (
		DISPOSER_ORDER_ID					BIGINT,
		DISPOSER_ORDER_CODE					VARCHAR(10),
		DISPOSER_SITE_ID					BIGINT,    
		DISPOSER_VISIT_START_AT				DATETIME,
		DISPOSER_VISIT_END_AT				DATETIME,
		DISPOSER_BIDDING_END_AT				DATETIME,
		DISPOSER_OPEN_AT					DATETIME,
		DISPOSER_CLOSE_AT					DATETIME,
		DISPOSER_SERVICE_INSTRUCTION_ID		BIGINT,
		DISPOSER_VISIT_EARLY_CLOSING		TINYINT,
		DISPOSER_VISIT_EARLY_CLOSED_AT		DATETIME,
		DISPOSER_BIDDING_EARLY_CLOSING		TINYINT,
		DISPOSER_BIDDING_EARLY_CLOSED_AT	DATETIME,
		DISPOSER_CREATED_AT					DATETIME,
		DISPOSER_UPDATED_AT					DATETIME,    
		STATE								VARCHAR(20),
		STATE_CODE							INT,
		STATE_CATEGORY_ID					INT,
		STATE_CATEGORY						VARCHAR(45),
		PROSPECTIVE_VISITORS				INT,
		BIDDERS								INT,
		NOTE								VARCHAR(255),
        DISPLAY_DATE						DATETIME,
        MIN_DISPOSAL_DURATION				INT,
		IMG_PATH							JSON,
		WSTE_LIST							JSON,
		BIDDING_LIST						JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_SITE_ID,    
			CUR_DISPOSER_VISIT_START_AT,
			CUR_DISPOSER_VISIT_END_AT,
			CUR_DISPOSER_BIDDING_END_AT,
			CUR_DISPOSER_OPEN_AT,
			CUR_DISPOSER_CLOSE_AT,
			CUR_DISPOSER_SERVICE_INSTRUCTION_ID,
			CUR_DISPOSER_VISIT_EARLY_CLOSING,
			CUR_DISPOSER_VISIT_EARLY_CLOSED_AT,
			CUR_DISPOSER_BIDDING_EARLY_CLOSING,
			CUR_DISPOSER_BIDDING_EARLY_CLOSED_AT,
			CUR_DISPOSER_CREATED_AT,
			CUR_DISPOSER_UPDATED_AT,    
			CUR_STATE,
			CUR_STATE_CODE,   
			CUR_STATE_CATEGORY_ID,
			CUR_STATE_CATEGORY,
			CUR_PROSPECTIVE_VISITORS,
			CUR_BIDDERS,
			CUR_NOTE;  
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		MY_DISPOSAL_LISTS_BY_OPTION_TEMP(
			DISPOSER_ORDER_ID, 
			DISPOSER_ORDER_CODE, 
			DISPOSER_SITE_ID,     
			DISPOSER_VISIT_START_AT,
			DISPOSER_VISIT_END_AT,
			DISPOSER_BIDDING_END_AT,
			DISPOSER_OPEN_AT,
			DISPOSER_CLOSE_AT,
			DISPOSER_SERVICE_INSTRUCTION_ID,
			DISPOSER_VISIT_EARLY_CLOSING,
			DISPOSER_VISIT_EARLY_CLOSED_AT,
			DISPOSER_BIDDING_EARLY_CLOSING,
			DISPOSER_BIDDING_EARLY_CLOSED_AT,
			DISPOSER_CREATED_AT,
			DISPOSER_UPDATED_AT,        
			STATE, 
			STATE_CODE, 
			STATE_CATEGORY_ID, 
			STATE_CATEGORY, 
			PROSPECTIVE_VISITORS, 
			BIDDERS, 
			NOTE
		)
		VALUES(
			CUR_DISPOSER_ORDER_ID, 
			CUR_DISPOSER_ORDER_CODE, 
			CUR_DISPOSER_SITE_ID,     
			CUR_DISPOSER_VISIT_START_AT,
			CUR_DISPOSER_VISIT_END_AT,
			CUR_DISPOSER_BIDDING_END_AT,
			CUR_DISPOSER_OPEN_AT,
			CUR_DISPOSER_CLOSE_AT,
			CUR_DISPOSER_SERVICE_INSTRUCTION_ID,
			CUR_DISPOSER_VISIT_EARLY_CLOSING,
			CUR_DISPOSER_VISIT_EARLY_CLOSED_AT,
			CUR_DISPOSER_BIDDING_EARLY_CLOSING,
			CUR_DISPOSER_BIDDING_EARLY_CLOSED_AT,
			CUR_DISPOSER_CREATED_AT,
			CUR_DISPOSER_UPDATED_AT,        
			CUR_STATE, 
			CUR_STATE_CODE, 
			CUR_STATE_CATEGORY_ID, 
			CUR_STATE_CATEGORY, 
			CUR_PROSPECTIVE_VISITORS, 
			CUR_BIDDERS, 
			CUR_NOTE
		);
        
        CALL sp_get_disposal_wste_lists_2(
			CUR_DISPOSER_ORDER_ID,
            VAR_WSTE_LIST
        );
		
        CALL sp_get_disposal_img_lists_2(
			CUR_DISPOSER_ORDER_ID,
            '입찰',
            VAR_IMG_PATH
        );
        
        CALL sp_get_bidding_lists(
			CUR_DISPOSER_ORDER_ID,
            CUR_STATE_CATEGORY_ID,
            VAR_BIDDING_LIST
        );
		
        CALL sp_set_display_time(
			CUR_DISPOSER_ORDER_ID,
			CUR_STATE_CATEGORY_ID,
            VAR_DISPLAY_DATE
        );
        
		CALL sp_req_policy_direction(
		/*수거자가 배출자의 최종입찰선정에 응답을 할 수 있는 최대의 시간으로서 배출자의 최종낙찰자선정일로부터의 기간을 반환받는다(단위:시간)*/
			'min_disposal_duration',
			MIN_DISPOSAL_DURATION
		);        
		
		UPDATE MY_DISPOSAL_LISTS_BY_OPTION_TEMP 
        SET 
			IMG_PATH 				= VAR_IMG_PATH, 
            WSTE_LIST 				= VAR_WSTE_LIST, 
            BIDDING_LIST 			= VAR_BIDDING_LIST,
            DISPLAY_DATE			= VAR_DISPLAY_DATE,
            MIN_DISPOSAL_DURATION	= MIN_DISPOSAL_DURATION
        WHERE DISPOSER_ORDER_ID 	= CUR_DISPOSER_ORDER_ID;
		/*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/
        
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'DISPOSER_ORDER_ID'					, DISPOSER_ORDER_ID, 
            'DISPOSER_ORDER_CODE'				, DISPOSER_ORDER_CODE, 
            'DISPOSER_SITE_ID'					, DISPOSER_SITE_ID,             
            'DISPOSER_VISIT_START_AT'			, DISPOSER_VISIT_START_AT, 
            'DISPOSER_VISIT_END_AT'				, DISPOSER_VISIT_END_AT, 
            'DISPOSER_BIDDING_END_AT'			, DISPOSER_BIDDING_END_AT, 
            'DISPOSER_OPEN_AT'					, DISPOSER_OPEN_AT, 
            'DISPOSER_CLOSE_AT'					, DISPOSER_CLOSE_AT, 
            'DISPOSER_SERVICE_INSTRUCTION_ID'	, DISPOSER_SERVICE_INSTRUCTION_ID, 
            'DISPOSER_VISIT_EARLY_CLOSING'		, DISPOSER_VISIT_EARLY_CLOSING, 
            'DISPOSER_VISIT_EARLY_CLOSED_AT'	, DISPOSER_VISIT_EARLY_CLOSED_AT, 
            'DISPOSER_BIDDING_EARLY_CLOSING'	, DISPOSER_BIDDING_EARLY_CLOSING, 
            'DISPOSER_BIDDING_EARLY_CLOSED_AT'	, DISPOSER_BIDDING_EARLY_CLOSED_AT, 
            'DISPOSER_CREATED_AT'				, DISPOSER_CREATED_AT, 
            'DISPOSER_UPDATED_AT'				, DISPOSER_UPDATED_AT,             
            'STATE'								, STATE, 
            'STATE_CODE'						, STATE_CODE, 
            'STATE_CATEGORY_ID'					, STATE_CATEGORY_ID, 
            'STATE_CATEGORY'					, STATE_CATEGORY, 
            'PROSPECTIVE_VISITORS'				, PROSPECTIVE_VISITORS, 
            'BIDDERS'							, BIDDERS, 
            'NOTE'								, NOTE, 
            'DISPLAY_DATE'						, DISPLAY_DATE, 
            'MIN_DISPOSAL_DURATION'				, MIN_DISPOSAL_DURATION, 
            'IMG_PATH'							, IMG_PATH, 
            'WSTE_LIST'							, WSTE_LIST, 
            'BIDDING_LIST'						, BIDDING_LIST
		)
	) 
    INTO json_data 
    FROM MY_DISPOSAL_LISTS_BY_OPTION_TEMP;
    
	SET rtn_val 				= 0;
	SET msg_txt 				= 'Success';
	DROP TABLE IF EXISTS MY_DISPOSAL_LISTS_BY_OPTION_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_my_disposal_lists_with_json`(
	IN IN_USER_ID							BIGINT,
    IN IN_USER_TYPE							VARCHAR(20),
    OUT rtn_val								INT,
    OUT msg_txt								VARCHAR(200),
    OUT json_data							JSON
)
BEGIN

/*
Procedure Name 	: sp_retrieve_my_disposal_lists_with_json
Input param 	: 2개
Output param 	: 3개
Job 			: 배출자 메인 페이지 로딩시 필요한 자료 반환.
Update 			: 2022.02.17
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 								INT DEFAULT 0;
    DECLARE endOfRow 								TINYINT DEFAULT FALSE;    
    DECLARE CUR_DISPOSER_ORDER_ID					BIGINT;
    DECLARE CUR_DISPOSER_ORDER_CODE					VARCHAR(10);  
    DECLARE CUR_DISPOSER_SITE_ID					BIGINT;    
    DECLARE CUR_DISPOSER_VISIT_START_AT				DATETIME;
    DECLARE CUR_DISPOSER_VISIT_END_AT				DATETIME;
    DECLARE CUR_DISPOSER_BIDDING_END_AT				DATETIME;
    DECLARE CUR_DISPOSER_OPEN_AT					DATETIME;
    DECLARE CUR_DISPOSER_CLOSE_AT					DATETIME;
    DECLARE CUR_DISPOSER_SERVICE_INSTRUCTION_ID		BIGINT;
    DECLARE CUR_DISPOSER_VISIT_EARLY_CLOSING		TINYINT;
    DECLARE CUR_DISPOSER_VISIT_EARLY_CLOSED_AT		DATETIME;
    DECLARE CUR_DISPOSER_BIDDING_EARLY_CLOSING		TINYINT;
    DECLARE CUR_DISPOSER_BIDDING_EARLY_CLOSED_AT	DATETIME;
    DECLARE CUR_DISPOSER_CREATED_AT					DATETIME;
    DECLARE CUR_DISPOSER_UPDATED_AT					DATETIME;    
    DECLARE CUR_STATE								VARCHAR(20);
    DECLARE CUR_STATE_CODE							INT;
    DECLARE CUR_STATE_CATEGORY_ID					INT;
    DECLARE CUR_STATE_CATEGORY						VARCHAR(45);
    DECLARE CUR_PROSPECTIVE_VISITORS				INT;
    DECLARE CUR_BIDDERS								INT;
    DECLARE CUR_COLLECTOR_ID						BIGINT;
    DECLARE CUR_NOTE								VARCHAR(255);
	DECLARE VAR_WSTE_LIST 							JSON DEFAULT NULL;
	DECLARE VAR_IMG_PATH 							JSON DEFAULT NULL;
	DECLARE VAR_BIDDING_LIST 						JSON DEFAULT NULL;
	DECLARE VAR_COLLECTOR_INFO 						JSON DEFAULT NULL;
	DECLARE VAR_DISPLAY_DATE 						DATETIME DEFAULT NULL;
	DECLARE MIN_DISPOSAL_DURATION 					VARCHAR(255) DEFAULT NULL;
	DECLARE VAR_CHECK_STATE			 				TINYINT DEFAULT FALSE;
	DECLARE VAR_RECORD_COUNT		 				INT DEFAULT 0;
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
	SELECT 
		A.ID, 
        A.ORDER_CODE, 
        A.SITE_ID,        
        A.VISIT_START_AT,
        A.VISIT_END_AT,
        A.BIDDING_END_AT,
        A.OPEN_AT,
        A.CLOSE_AT,
        A.SERVICE_INSTRUCTION_ID,
        A.VISIT_EARLY_CLOSING,
        A.VISIT_EARLY_CLOSED_AT,
        A.BIDDING_EARLY_CLOSING,
        A.BIDDING_EARLY_CLOSED_AT,
        A.CREATED_AT,
        A.UPDATED_AT,
        B.STATE, 
        B.STATE_CODE, 
        B.STATE_CATEGORY_ID, 
        B.STATE_CATEGORY, 
        A.PROSPECTIVE_VISITORS, 
        A.BIDDERS, 
        A.COLLECTOR_ID, 
        A.NOTE
    FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN V_ORDER_STATE_NAME B 	ON A.ID 		= B.DISPOSER_ORDER_ID
    LEFT JOIN COMP_SITE C 			ON A.SITE_ID 	= C.ID
    LEFT JOIN COMPANY D 			ON C.COMP_ID 	= D.ID
	WHERE 
		B.STATE 			IS NOT NULL AND 
        A.IS_DELETED 		= FALSE AND
		B.STATE_CODE 		<> 105 AND 
        IF (IN_USER_TYPE	= 'Person', 
            A.DISPOSER_ID 	= IN_USER_ID, 
            C.ACTIVE 		= TRUE AND 
            D.ACTIVE 		= TRUE AND 
            A.SITE_ID 		IS NOT NULL AND 
            A.SITE_ID 		IN (
				SELECT AFFILIATED_SITE 
                FROM USERS 
                WHERE 
					ID 		= IN_USER_ID AND 
                    ACTIVE 	= TRUE
			)
		);
            
            
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS DISPOSAL_ORDER_LIST (
		DISPOSER_ORDER_ID					BIGINT,
		DISPOSER_ORDER_CODE					VARCHAR(10),
		DISPOSER_SITE_ID					BIGINT,    
		DISPOSER_VISIT_START_AT				DATETIME,
		DISPOSER_VISIT_END_AT				DATETIME,
		DISPOSER_BIDDING_END_AT				DATETIME,
		DISPOSER_OPEN_AT					DATETIME,
		DISPOSER_CLOSE_AT					DATETIME,
		DISPOSER_SERVICE_INSTRUCTION_ID		BIGINT,
		DISPOSER_VISIT_EARLY_CLOSING		TINYINT,
		DISPOSER_VISIT_EARLY_CLOSED_AT		DATETIME,
		DISPOSER_BIDDING_EARLY_CLOSING		TINYINT,
		DISPOSER_BIDDING_EARLY_CLOSED_AT	DATETIME,
		DISPOSER_CREATED_AT					DATETIME,
		DISPOSER_UPDATED_AT					DATETIME,    
		STATE								VARCHAR(20),
		STATE_CODE							INT,
		STATE_CATEGORY_ID					INT,
		STATE_CATEGORY						VARCHAR(45),
		PROSPECTIVE_VISITORS				INT,
		BIDDERS								INT,
		NOTE								VARCHAR(255),
		COLLECTOR_ID						BIGINT,
        DISPLAY_DATE						DATETIME,
        MIN_DISPOSAL_DURATION				INT,
		IMG_PATH							JSON,
		WSTE_LIST							JSON,
		BIDDING_LIST						JSON,
		COLLECTOR_INFO						JSON,
        CHECK_STATE							TINYINT
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP        
		FETCH TEMP_CURSOR 
		INTO 
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_SITE_ID,    
			CUR_DISPOSER_VISIT_START_AT,
			CUR_DISPOSER_VISIT_END_AT,
			CUR_DISPOSER_BIDDING_END_AT,
			CUR_DISPOSER_OPEN_AT,
			CUR_DISPOSER_CLOSE_AT,
			CUR_DISPOSER_SERVICE_INSTRUCTION_ID,
			CUR_DISPOSER_VISIT_EARLY_CLOSING,
			CUR_DISPOSER_VISIT_EARLY_CLOSED_AT,
			CUR_DISPOSER_BIDDING_EARLY_CLOSING,
			CUR_DISPOSER_BIDDING_EARLY_CLOSED_AT,
			CUR_DISPOSER_CREATED_AT,
			CUR_DISPOSER_UPDATED_AT,    
			CUR_STATE,
			CUR_STATE_CODE,   
			CUR_STATE_CATEGORY_ID,
			CUR_STATE_CATEGORY,
			CUR_PROSPECTIVE_VISITORS,
			CUR_BIDDERS,
			CUR_COLLECTOR_ID,
			CUR_NOTE;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		DISPOSAL_ORDER_LIST(
			DISPOSER_ORDER_ID, 
			DISPOSER_ORDER_CODE, 
			DISPOSER_SITE_ID,     
			DISPOSER_VISIT_START_AT,
			DISPOSER_VISIT_END_AT,
			DISPOSER_BIDDING_END_AT,
			DISPOSER_OPEN_AT,
			DISPOSER_CLOSE_AT,
			DISPOSER_SERVICE_INSTRUCTION_ID,
			DISPOSER_VISIT_EARLY_CLOSING,
			DISPOSER_VISIT_EARLY_CLOSED_AT,
			DISPOSER_BIDDING_EARLY_CLOSING,
			DISPOSER_BIDDING_EARLY_CLOSED_AT,
			DISPOSER_CREATED_AT,
			DISPOSER_UPDATED_AT,        
			STATE, 
			STATE_CODE, 
			STATE_CATEGORY_ID, 
			STATE_CATEGORY, 
			PROSPECTIVE_VISITORS, 
			BIDDERS, 
			COLLECTOR_ID, 
			NOTE
		)
		VALUES(
			CUR_DISPOSER_ORDER_ID, 
			CUR_DISPOSER_ORDER_CODE, 
			CUR_DISPOSER_SITE_ID,     
			CUR_DISPOSER_VISIT_START_AT,
			CUR_DISPOSER_VISIT_END_AT,
			CUR_DISPOSER_BIDDING_END_AT,
			CUR_DISPOSER_OPEN_AT,
			CUR_DISPOSER_CLOSE_AT,
			CUR_DISPOSER_SERVICE_INSTRUCTION_ID,
			CUR_DISPOSER_VISIT_EARLY_CLOSING,
			CUR_DISPOSER_VISIT_EARLY_CLOSED_AT,
			CUR_DISPOSER_BIDDING_EARLY_CLOSING,
			CUR_DISPOSER_BIDDING_EARLY_CLOSED_AT,
			CUR_DISPOSER_CREATED_AT,
			CUR_DISPOSER_UPDATED_AT,            
			CUR_STATE, 
			CUR_STATE_CODE, 
			CUR_STATE_CATEGORY_ID, 
			CUR_STATE_CATEGORY, 
			CUR_PROSPECTIVE_VISITORS, 
			CUR_BIDDERS, 
			CUR_COLLECTOR_ID, 
			CUR_NOTE
		);        
			
		CALL sp_get_disposal_wste_lists_2(
			CUR_DISPOSER_ORDER_ID,
			VAR_WSTE_LIST 
		);
        
		CALL sp_get_disposal_img_lists_2(
			CUR_DISPOSER_ORDER_ID,
			'입찰',
			VAR_IMG_PATH
		);
        
		CALL sp_get_collector_lists_2(
			CUR_DISPOSER_ORDER_ID,
			CUR_STATE_CATEGORY_ID,
			VAR_BIDDING_LIST
		);
        
		CALL sp_get_site_info_simple(
			CUR_COLLECTOR_ID,
			VAR_COLLECTOR_INFO
		);
        
		CALL sp_set_display_time(
			CUR_DISPOSER_ORDER_ID,
			CUR_STATE_CATEGORY_ID,
			VAR_DISPLAY_DATE
		);
        
		CALL sp_req_policy_direction(
		/*수거자가 배출자의 최종입찰선정에 응답을 할 수 있는 최대의 시간으로서 배출자의 최종낙찰자선정일로부터의 기간을 반환받는다(단위:시간)*/
			'min_disposal_duration',
			MIN_DISPOSAL_DURATION
		);      
        
        SELECT COUNT(ID) INTO VAR_RECORD_COUNT
        FROM STATE_CONTROLLER
        WHERE 
			ORDER_ID = CUR_DISPOSER_ORDER_ID AND
            USER_TYPE = 2 AND
            IF(SITE_ID = 0, 
				USER_ID = CUR_DISPOSER_SITE_ID,
                SITE_ID = CUR_DISPOSER_SITE_ID
			) AND
            ORDER_STATE = CUR_STATE_CODE;
        IF VAR_RECORD_COUNT > 0 THEN
			SET VAR_CHECK_STATE = TRUE;
        ELSE
			SET VAR_CHECK_STATE = FALSE;
        END IF;  
        
		UPDATE DISPOSAL_ORDER_LIST 
        SET 
			IMG_PATH 				= VAR_IMG_PATH, 
            WSTE_LIST 				= VAR_WSTE_LIST, 
            BIDDING_LIST 			= VAR_BIDDING_LIST,
            DISPLAY_DATE			= VAR_DISPLAY_DATE,
            MIN_DISPOSAL_DURATION	= MIN_DISPOSAL_DURATION,
            COLLECTOR_INFO			= VAR_COLLECTOR_INFO,
            CHECK_STATE				= VAR_CHECK_STATE
		WHERE DISPOSER_ORDER_ID 	= CUR_DISPOSER_ORDER_ID;
		/*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/
		
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'DISPOSER_ORDER_ID'					, DISPOSER_ORDER_ID, 
            'DISPOSER_ORDER_CODE'				, DISPOSER_ORDER_CODE, 
            'DISPOSER_SITE_ID'					, DISPOSER_SITE_ID,             
            'DISPOSER_VISIT_START_AT'			, DISPOSER_VISIT_START_AT, 
            'DISPOSER_VISIT_END_AT'				, DISPOSER_VISIT_END_AT, 
            'DISPOSER_BIDDING_END_AT'			, DISPOSER_BIDDING_END_AT, 
            'DISPOSER_OPEN_AT'					, DISPOSER_OPEN_AT, 
            'DISPOSER_CLOSE_AT'					, DISPOSER_CLOSE_AT, 
            'DISPOSER_SERVICE_INSTRUCTION_ID'	, DISPOSER_SERVICE_INSTRUCTION_ID, 
            'DISPOSER_VISIT_EARLY_CLOSING'		, DISPOSER_VISIT_EARLY_CLOSING, 
            'DISPOSER_VISIT_EARLY_CLOSED_AT'	, DISPOSER_VISIT_EARLY_CLOSED_AT, 
            'DISPOSER_BIDDING_EARLY_CLOSING'	, DISPOSER_BIDDING_EARLY_CLOSING, 
            'DISPOSER_BIDDING_EARLY_CLOSED_AT'	, DISPOSER_BIDDING_EARLY_CLOSED_AT, 
            'DISPOSER_CREATED_AT'				, DISPOSER_CREATED_AT, 
            'DISPOSER_UPDATED_AT'				, DISPOSER_UPDATED_AT,             
            'STATE'								, STATE, 
            'STATE_CODE'						, STATE_CODE, 
            'STATE_CATEGORY_ID'					, STATE_CATEGORY_ID, 
            'STATE_CATEGORY'					, STATE_CATEGORY, 
            'PROSPECTIVE_VISITORS'				, PROSPECTIVE_VISITORS, 
            'BIDDERS'							, BIDDERS, 
            'NOTE'								, NOTE, 
            'DISPLAY_DATE'						, DISPLAY_DATE, 
            'MIN_DISPOSAL_DURATION'				, MIN_DISPOSAL_DURATION, 
            'IMG_PATH'							, IMG_PATH, 
            'WSTE_LIST'							, WSTE_LIST, 
            'BIDDING_LIST'						, BIDDING_LIST, 
            'COLLECTOR_INFO'					, COLLECTOR_INFO, 
            'CHECK_STATE'						, CHECK_STATE
		)
	) 
    INTO json_data 
    FROM DISPOSAL_ORDER_LIST;
        
	SET rtn_val 				= 0;
	SET msg_txt 				= 'Success';
	DROP TABLE IF EXISTS DISPOSAL_ORDER_LIST;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_my_disposal_lists_with_json_20220523`(
	IN IN_USER_ID							BIGINT,
    IN IN_USER_TYPE							VARCHAR(20),
    OUT rtn_val								INT,
    OUT msg_txt								VARCHAR(200),
    OUT json_data							JSON
)
BEGIN

/*
Procedure Name 	: sp_retrieve_my_disposal_lists_with_json_20220523
Input param 	: 2개
Output param 	: 3개
Job 			: 배출자 메인 페이지 로딩시 필요한 자료 반환.
Update 			: 2022.02.17
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 								INT DEFAULT 0;
    DECLARE endOfRow 								TINYINT DEFAULT FALSE;    
    DECLARE CUR_DISPOSER_ORDER_ID					BIGINT;
    DECLARE CUR_DISPOSER_ORDER_CODE					VARCHAR(10);  
    DECLARE CUR_DISPOSER_SITE_ID					BIGINT;    
    DECLARE CUR_DISPOSER_ID							BIGINT;    
    DECLARE CUR_DISPOSER_VISIT_START_AT				DATETIME;
    DECLARE CUR_DISPOSER_VISIT_END_AT				DATETIME;
    DECLARE CUR_DISPOSER_BIDDING_END_AT				DATETIME;
    DECLARE CUR_DISPOSER_OPEN_AT					DATETIME;
    DECLARE CUR_DISPOSER_CLOSE_AT					DATETIME;
    DECLARE CUR_DISPOSER_VISIT_EARLY_CLOSING		TINYINT;
    DECLARE CUR_DISPOSER_VISIT_EARLY_CLOSED_AT		DATETIME;
    DECLARE CUR_DISPOSER_BIDDING_EARLY_CLOSING		TINYINT;
    DECLARE CUR_DISPOSER_BIDDING_EARLY_CLOSED_AT	DATETIME;
    DECLARE CUR_DISPOSER_CREATED_AT					DATETIME;
    DECLARE CUR_DISPOSER_UPDATED_AT					DATETIME;    
    DECLARE CUR_STATE								VARCHAR(20);
    DECLARE CUR_STATE_CODE							INT;
    DECLARE CUR_STATE_CATEGORY_ID					INT;
    DECLARE CUR_STATE_CATEGORY						VARCHAR(45);
    DECLARE CUR_PROSPECTIVE_VISITORS				INT;
    DECLARE CUR_BIDDERS								INT;
    DECLARE CUR_TRANSACTION_ID						BIGINT;
    DECLARE CUR_TRANSACTION_STATE_CODE				INT;
    DECLARE CUR_EXISTING_TRANSACTION				TINYINT;
	DECLARE VAR_IMG_PATH 							VARCHAR(45) DEFAULT NULL;
	DECLARE VAR_WSTE_LIST 							JSON DEFAULT NULL;
	DECLARE VAR_DISPLAY_DATE 						DATETIME DEFAULT NULL;
	DECLARE VAR_CHECK_STATE			 				TINYINT DEFAULT FALSE;
	DECLARE VAR_EXISTING_TRANSACTION 				TINYINT DEFAULT FALSE;
	DECLARE VAR_DETAILS		 						JSON DEFAULT NULL;
	DECLARE VAR_STATE_CODE			 				INT DEFAULT FALSE;
	DECLARE VAR_MIN_DISPOSAL_DURATION 				INT DEFAULT FALSE;
    DECLARE TEMP_CURSOR		 						CURSOR FOR 
	SELECT 
		A.ID, 
        A.ORDER_CODE, 
        A.SITE_ID,      
        A.DISPOSER_ID,        
        A.VISIT_START_AT,
        A.VISIT_END_AT,
        A.BIDDING_END_AT,
        A.OPEN_AT,
        A.CLOSE_AT,
        A.VISIT_EARLY_CLOSING,
        A.VISIT_EARLY_CLOSED_AT,
        A.BIDDING_EARLY_CLOSING,
        A.BIDDING_EARLY_CLOSED_AT,
        A.CREATED_AT,
        A.UPDATED_AT,
        B.STATE, 
        B.STATE_CODE, 
        B.STATE_CATEGORY_ID, 
        B.STATE_CATEGORY, 
        A.PROSPECTIVE_VISITORS, 
        A.BIDDERS, 
        A.TRANSACTION_ID, 
        E.TRANSACTION_STATE_CODE,
        IF(E.DISPOSAL_ORDER_ID = A.ID AND 
            A.COLLECTOR_ID IS NOT NULL,
            1,
            0
		)
    FROM SITE_WSTE_DISPOSAL_ORDER A
    LEFT JOIN V_ORDER_STATE_NAME B 	ON A.ID 		= B.DISPOSER_ORDER_ID
    LEFT JOIN COMP_SITE C 			ON A.SITE_ID 	= C.ID
    LEFT JOIN COMPANY D 			ON C.COMP_ID 	= D.ID
    LEFT JOIN V_TRANSACTION_STATE E ON A.ID = E.DISPOSAL_ORDER_ID
	WHERE 
		A.CS_CONFIRMED 		= TRUE AND
		B.STATE 			IS NOT NULL AND 
        A.IS_DELETED 		= FALSE AND
		B.STATE_CODE 		<> 105 AND 
        IF (IN_USER_TYPE	= 'Person', 
            A.DISPOSER_ID 	= IN_USER_ID, 
            C.ACTIVE 		= TRUE AND 
            D.ACTIVE 		= TRUE AND 
            A.SITE_ID 		IS NOT NULL AND 
            A.SITE_ID 		IN (
				SELECT AFFILIATED_SITE 
                FROM USERS 
                WHERE 
					ID 		= IN_USER_ID AND 
                    ACTIVE 	= TRUE
			)
		)/* AND
		(
			(
				B.DISPOSER_ORDER_ID = A.ID AND
				A.COLLECTOR_ID IS NULL 
			) OR
			(
				E.DISPOSAL_ORDER_ID = A.ID AND 
				E.TRANSACTION_STATE_CODE IN (250, 251, 252) AND
				A.COLLECTOR_ID IS NOT NULL
			)
		)*/; 
            
            
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	CREATE TEMPORARY TABLE IF NOT EXISTS RETRIEVE_MY_DISPOSAL_LISTS_WITH_JSON_20220523 (
		DISPOSER_ORDER_ID					BIGINT,
		DISPOSER_ORDER_CODE					VARCHAR(10),
		DISPOSER_SITE_ID					BIGINT,    
		DISPOSER_ID							BIGINT,    
		DISPOSER_VISIT_START_AT				DATETIME,
		DISPOSER_VISIT_END_AT				DATETIME,
		DISPOSER_BIDDING_END_AT				DATETIME,
		DISPOSER_OPEN_AT					DATETIME,
		DISPOSER_CLOSE_AT					DATETIME,
		DISPOSER_VISIT_EARLY_CLOSING		TINYINT,
		DISPOSER_VISIT_EARLY_CLOSED_AT		DATETIME,
		DISPOSER_BIDDING_EARLY_CLOSING		TINYINT,
		DISPOSER_BIDDING_EARLY_CLOSED_AT	DATETIME,
		DISPOSER_CREATED_AT					DATETIME,
		DISPOSER_UPDATED_AT					DATETIME,    
		STATE								VARCHAR(20),
		STATE_CODE							INT,
		STATE_CATEGORY_ID					INT,
		STATE_CATEGORY						VARCHAR(45),
		PROSPECTIVE_VISITORS				INT,
		BIDDERS								INT,
		TRANSACTION_ID						BIGINT,
		TRANSACTION_STATE_CODE				INT,
		EXISTING_TRANSACTION				TINYINT,
        DISPLAY_DATE						DATETIME,
        MIN_DISPOSAL_DURATION				INT,
		IMG_PATH							JSON,
		WSTE_LIST							JSON,
        CHECK_STATE							TINYINT,
        TRANSACTION_TYPE					VARCHAR(20),
        DETAILS								JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP        
		FETCH TEMP_CURSOR 
		INTO 
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_SITE_ID,    
			CUR_DISPOSER_ID,    
			CUR_DISPOSER_VISIT_START_AT,
			CUR_DISPOSER_VISIT_END_AT,
			CUR_DISPOSER_BIDDING_END_AT,
			CUR_DISPOSER_OPEN_AT,
			CUR_DISPOSER_CLOSE_AT,
			CUR_DISPOSER_VISIT_EARLY_CLOSING,
			CUR_DISPOSER_VISIT_EARLY_CLOSED_AT,
			CUR_DISPOSER_BIDDING_EARLY_CLOSING,
			CUR_DISPOSER_BIDDING_EARLY_CLOSED_AT,
			CUR_DISPOSER_CREATED_AT,
			CUR_DISPOSER_UPDATED_AT,    
			CUR_STATE,
			CUR_STATE_CODE,   
			CUR_STATE_CATEGORY_ID,
			CUR_STATE_CATEGORY,
			CUR_PROSPECTIVE_VISITORS,
			CUR_BIDDERS,
			CUR_TRANSACTION_ID,
			CUR_TRANSACTION_STATE_CODE,
			CUR_EXISTING_TRANSACTION;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		RETRIEVE_MY_DISPOSAL_LISTS_WITH_JSON_20220523(
			DISPOSER_ORDER_ID, 
			DISPOSER_ORDER_CODE, 
			DISPOSER_SITE_ID,     
			DISPOSER_ID,     
			DISPOSER_VISIT_START_AT,
			DISPOSER_VISIT_END_AT,
			DISPOSER_BIDDING_END_AT,
			DISPOSER_OPEN_AT,
			DISPOSER_CLOSE_AT,
			DISPOSER_VISIT_EARLY_CLOSING,
			DISPOSER_VISIT_EARLY_CLOSED_AT,
			DISPOSER_BIDDING_EARLY_CLOSING,
			DISPOSER_BIDDING_EARLY_CLOSED_AT,
			DISPOSER_CREATED_AT,
			DISPOSER_UPDATED_AT,        
			STATE, 
			STATE_CODE, 
			STATE_CATEGORY_ID, 
			STATE_CATEGORY, 
			PROSPECTIVE_VISITORS, 
			BIDDERS, 
			TRANSACTION_ID, 
			TRANSACTION_STATE_CODE, 
			EXISTING_TRANSACTION
		)
		VALUES(
			CUR_DISPOSER_ORDER_ID, 
			CUR_DISPOSER_ORDER_CODE, 
			CUR_DISPOSER_SITE_ID,     
			CUR_DISPOSER_ID,     
			CUR_DISPOSER_VISIT_START_AT,
			CUR_DISPOSER_VISIT_END_AT,
			CUR_DISPOSER_BIDDING_END_AT,
			CUR_DISPOSER_OPEN_AT,
			CUR_DISPOSER_CLOSE_AT,
			CUR_DISPOSER_VISIT_EARLY_CLOSING,
			CUR_DISPOSER_VISIT_EARLY_CLOSED_AT,
			CUR_DISPOSER_BIDDING_EARLY_CLOSING,
			CUR_DISPOSER_BIDDING_EARLY_CLOSED_AT,
			CUR_DISPOSER_CREATED_AT,
			CUR_DISPOSER_UPDATED_AT,            
			CUR_STATE, 
			CUR_STATE_CODE, 
			CUR_STATE_CATEGORY_ID, 
			CUR_STATE_CATEGORY, 
			CUR_PROSPECTIVE_VISITORS, 
			CUR_BIDDERS, 
			CUR_TRANSACTION_ID, 
			CUR_TRANSACTION_STATE_CODE, 
			CUR_EXISTING_TRANSACTION
		); 
		CALL sp_get_disposal_wste_lists_2(
			CUR_DISPOSER_ORDER_ID,
			VAR_WSTE_LIST 
		);
           
        CALL sp_retrieve_my_disposal_details_20220523(
			CUR_DISPOSER_ORDER_ID,
			CUR_STATE_CODE,
			CUR_TRANSACTION_STATE_CODE,
			CUR_EXISTING_TRANSACTION,
            VAR_DETAILS
        );
        SET VAR_EXISTING_TRANSACTION = CUR_EXISTING_TRANSACTION;
        SET VAR_STATE_CODE = IF(CUR_EXISTING_TRANSACTION = 0, CUR_STATE_CODE, CUR_TRANSACTION_STATE_CODE);
        
		CALL sp_req_policy_direction(
			'min_disposal_duration',
			VAR_MIN_DISPOSAL_DURATION
		);      
        
        IF VAR_EXISTING_TRANSACTION = 1 THEN
			CALL sp_set_display_time_for_transaction(
				CUR_TRANSACTION_ID,
				VAR_STATE_CODE,
				VAR_DISPLAY_DATE
			);
        ELSE
			CALL sp_set_display_time(
				CUR_DISPOSER_ORDER_ID,
				CUR_STATE_CATEGORY_ID,
				VAR_DISPLAY_DATE
			);
        END IF;
        
        CALL sp_get_order_bell_state(
			CUR_DISPOSER_ORDER_ID,
			VAR_CHECK_STATE
		);
        
		UPDATE RETRIEVE_MY_DISPOSAL_LISTS_WITH_JSON_20220523 
        SET 
			IMG_PATH 				= VAR_IMG_PATH, 
            WSTE_LIST 				= VAR_WSTE_LIST, 
            DISPLAY_DATE			= VAR_DISPLAY_DATE,
            CHECK_STATE				= VAR_CHECK_STATE,
            TRANSACTION_TYPE		= IF(VAR_EXISTING_TRANSACTION = 1, '기존거래', '입찰거래'),
            MIN_DISPOSAL_DURATION	= VAR_MIN_DISPOSAL_DURATION,
            DETAILS					= VAR_DETAILS
		WHERE DISPOSER_ORDER_ID 	= CUR_DISPOSER_ORDER_ID;		
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'DISPOSER_ORDER_ID'					, DISPOSER_ORDER_ID, 
            'DISPOSER_ORDER_CODE'				, DISPOSER_ORDER_CODE, 
            'DISPOSER_SITE_ID'					, DISPOSER_SITE_ID,       
            'DISPOSER_ID'						, DISPOSER_ID,             
            'DISPOSER_VISIT_START_AT'			, DISPOSER_VISIT_START_AT, 
            'DISPOSER_VISIT_END_AT'				, DISPOSER_VISIT_END_AT, 
            'DISPOSER_BIDDING_END_AT'			, DISPOSER_BIDDING_END_AT, 
            'DISPOSER_OPEN_AT'					, DISPOSER_OPEN_AT, 
            'DISPOSER_CLOSE_AT'					, DISPOSER_CLOSE_AT, 
            'DISPOSER_VISIT_EARLY_CLOSING'		, DISPOSER_VISIT_EARLY_CLOSING, 
            'DISPOSER_VISIT_EARLY_CLOSED_AT'	, DISPOSER_VISIT_EARLY_CLOSED_AT, 
            'DISPOSER_BIDDING_EARLY_CLOSING'	, DISPOSER_BIDDING_EARLY_CLOSING, 
            'DISPOSER_BIDDING_EARLY_CLOSED_AT'	, DISPOSER_BIDDING_EARLY_CLOSED_AT, 
            'DISPOSER_CREATED_AT'				, DISPOSER_CREATED_AT, 
            'DISPOSER_UPDATED_AT'				, DISPOSER_UPDATED_AT,             
            'STATE'								, STATE, 
            'STATE_CODE'						, STATE_CODE, 
            'STATE_CATEGORY_ID'					, STATE_CATEGORY_ID, 
            'STATE_CATEGORY'					, STATE_CATEGORY, 
            'PROSPECTIVE_VISITORS'				, PROSPECTIVE_VISITORS, 
            'BIDDERS'							, BIDDERS, 
            'TRANSACTION_ID'					, TRANSACTION_ID, 
            'TRANSACTION_STATE_CODE'			, TRANSACTION_STATE_CODE, 
            'EXISTING_TRANSACTION'				, EXISTING_TRANSACTION,  
            'DISPLAY_DATE'						, DISPLAY_DATE, 
            'MIN_DISPOSAL_DURATION'				, MIN_DISPOSAL_DURATION, 
            'WSTE_LIST'							, WSTE_LIST, 
            'CHECK_STATE'						, CHECK_STATE, 
            'TRANSACTION_TYPE'					, TRANSACTION_TYPE,
            'DETAILS'							, DETAILS
		)
	) 
    INTO json_data 
    FROM RETRIEVE_MY_DISPOSAL_LISTS_WITH_JSON_20220523;
        
	SET rtn_val 				= 0;
	SET msg_txt 				= 'Success';
	DROP TABLE IF EXISTS RETRIEVE_MY_DISPOSAL_LISTS_WITH_JSON_20220523;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_my_registered_site_lists`(
	IN IN_USER_ID							BIGINT,
	IN IN_USER_TYPE							INT,
    IN IN_OFFSET_SIZE						INT,
    IN IN_PAGE_SIZE							INT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_my_registered_site_lists
Input param 	: 1개
Job 			: 배출자가 등록한 사이트 및 수거자를 등록한 배출자 사이트의 리스트를 반환한다.
Update 			: 2022.05.13
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_retrieve_my_registered_site_lists_without_handler(
		IN_USER_ID,
		IN_USER_TYPE,
        IN_OFFSET_SIZE,
        IN_PAGE_SIZE,
        rtn_val,
        msg_txt,
        json_data
    );
    IF rtn_val > 0 THEN
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_my_registered_site_lists_without_handler`(
	IN IN_USER_ID							BIGINT,
	IN IN_USER_TYPE							INT,
    IN IN_OFFSET_SIZE						INT,
    IN IN_PAGE_SIZE							INT,
    OUT rtn_val								INT,
    OUT msg_txt								VARCHAR(200),
    OUT OUT_LISTS							JSON
)
BEGIN

/*
Procedure Name 	: sp_retrieve_my_registered_site_lists_without_handler
Input param 	: 1개
Job 			: 배출자가 등록한 사이트 및 수거자를 등록한 배출자 사이트의 리스트를 반환한다.
Update 			: 2022.05.13
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_USER_ID 						BIGINT;
    DECLARE CUR_SITE_ID 						BIGINT;
    DECLARE CUR_OPPONENT_ID 					BIGINT;
    DECLARE CUR_CREATED_AT 						DATETIME;
    DECLARE CUR_UPDATED_AT 						DATETIME;
    DECLARE CUR_DELETED_AT 						DATETIME;
    DECLARE CUR_ACTIVE 							TINYINT;
    DECLARE CUR_CONFIRMED 						TINYINT;
    DECLARE CUR_CONFIRMED_AT					DATETIME;
    DECLARE CUR_DELETED2_AT						DATETIME;
	DECLARE VAR_OPPONENT_SITE_NAME				VARCHAR(200)			DEFAULT 'success';
    DECLARE REGISTERED_SITE_CURSOR 				CURSOR FOR 
	SELECT 
		A.USER_ID,
		IF(IN_USER_TYPE = 2, A.SITE_ID, A.TARGET_ID),
		IF(IN_USER_TYPE = 2, A.TARGET_ID, IF(A.SITE_ID = 0, A.USER_ID, A.SITE_ID)),
		A.CREATED_AT,
		A.UPDATED_AT,
		A.DELETED_AT,
		A.ACTIVE,
		A.DELETED2_AT 
    FROM REGISTERED_SITE A 
    LEFT JOIN COMP_SITE B ON IF(IN_USER_TYPE = 2, A.SITE_ID = B.ID, A.TARGET_ID = B.ID)
    LEFT JOIN USERS C ON B.ID = C.AFFILIATED_SITE
    WHERE C.ID = IN_USER_ID
	LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;  
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
        
	CREATE TEMPORARY TABLE IF NOT EXISTS MY_REGISTERED_SITE_LISTS_TEMP (
		SITE_ID							BIGINT,
		OPPONENT_ID						BIGINT,
		OPPONENT_SITE_NAME				VARCHAR(255),
		CREATED_AT						DATETIME,
		UPDATED_AT						DATETIME,
		DELETED_AT						DATETIME,
		ACTIVE							TINYINT,
		DELETED2_AT						DATETIME
	);
    
	OPEN REGISTERED_SITE_CURSOR;	
	cloop: LOOP
		FETCH REGISTERED_SITE_CURSOR 
        INTO 
			CUR_USER_ID,
			CUR_SITE_ID,
			CUR_OPPONENT_ID,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_DELETED_AT,
			CUR_ACTIVE,
			CUR_DELETED2_AT;
        
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
        MY_REGISTERED_SITE_LISTS_TEMP(
			SITE_ID,
			OPPONENT_ID,
			CREATED_AT,
			UPDATED_AT,
			DELETED_AT,
			ACTIVE,
			DELETED2_AT
		)
        VALUES(
			CUR_SITE_ID,
			CUR_OPPONENT_ID,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_DELETED_AT,
			CUR_ACTIVE,
			CUR_DELETED2_AT
		);
        
        IF IN_USER_TYPE = 2 THEN
        /*자료를 요청하는 자가 배출자인 경우*/
			SELECT SITE_NAME INTO VAR_OPPONENT_SITE_NAME
            FROM COMP_SITE
            WHERE ID = CUR_OPPONENT_ID;
        ELSE
        /*자료를 요청하는 자가 배출자가 아닌 경우*/
			IF CUR_OPPONENT_ID = 0 THEN
			/*자료를 요청하는 자가 배출자인 경우*/
				SELECT USER_NAME INTO VAR_OPPONENT_SITE_NAME
				FROM USERS
				WHERE ID = CUR_USER_ID;
			ELSE
			/*자료를 요청하는 자가 배출자가 아닌 경우*/
				SELECT SITE_NAME INTO VAR_OPPONENT_SITE_NAME
				FROM COMP_SITE
				WHERE ID = CUR_OPPONENT_ID;
			END IF;
        END IF;
        
		UPDATE MY_REGISTERED_SITE_LISTS_TEMP 
        SET 
			OPPONENT_SITE_NAME 		= VAR_OPPONENT_SITE_NAME
		WHERE SITE_ID = CUR_SITE_ID AND USER_ID = CUR_USER_ID AND OPPONENT_ID = CUR_OPPONENT_ID;
        /*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/        
        
	END LOOP;   
	CLOSE REGISTERED_SITE_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
            'SITE_ID'				, SITE_ID, 
            'OPPONENT_ID'			, OPPONENT_ID, 
            'OPPONENT_SITE_NAME'	, OPPONENT_SITE_NAME,
            'CREATED_AT'			, CREATED_AT, 
            'UPDATED_AT'			, UPDATED_AT, 
            'DELETED_AT'			, DELETED_AT, 
            'ACTIVE'				, ACTIVE, 
            'DELETED2_AT'			, DELETED2_AT
		)
	) 
    INTO OUT_LISTS 
    FROM MY_REGISTERED_SITE_LISTS_TEMP;
    
	SET rtn_val = 0;
	SET msg_txt = 'Success11';
    DROP TABLE IF EXISTS MY_REGISTERED_SITE_LISTS_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_new_coming`(
	IN IN_USER_ID							BIGINT,
    IN IN_OFFSET_SIZE						INT,
    IN IN_PAGE_SIZE							INT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_new_coming
Input param 	: 1개
Job 			: 수거자의 사업지역의 신규입찰건에 대한 리스트를 반환한다.
Update 			: 2022.02.10
Version			: 0.0.3
AUTHOR 			: Leo Nam
Change			: 기존거래를 위한 칼럼(SITE_WSTE_DISPOSAL_ORDER.COLLECTOR_ID)을 추가함으로써 이 칼럼의 값이 NULL인 경우에만 신규입찰이 되며 NULL이 아닌것은 기존거래로서 기존 업체의 나의 활동에 자동으로 등록됨(0.0.2)
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE INCLUDE_WSTE_CONDITION				VARCHAR(255)			DEFAULT NULL;	
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	CALL sp_req_policy_direction(
		'include_wste_condition',
		INCLUDE_WSTE_CONDITION
	);
    CALL sp_retrieve_new_coming_without_handler(
		IN_USER_ID,
        IN_OFFSET_SIZE,
        IN_PAGE_SIZE,
        INCLUDE_WSTE_CONDITION,
        rtn_val,
        msg_txt,
        json_data
    );
    IF rtn_val > 0 THEN
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_new_coming_by_region`(
	IN IN_USER_ID							BIGINT,
	IN IN_BCODE								VARCHAR(10),
    IN IN_OFFSET_SIZE						INT,
    IN IN_PAGE_SIZE							INT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_new_coming_by_region
Input param 	: 1개
Job 			: 수거자의 사업지역의 신규입찰건에 대한 리스트를 반환한다.
Update 			: 2022.02.10
Version			: 0.0.3매립배출계수
AUTHOR 			: Leo Nam
Change			: 기존거래를 위한 칼럼(SITE_WSTE_DISPOSAL_ORDER.COLLECTOR_ID)을 추가함으로써 이 칼럼의 값이 NULL인 경우에만 신규입찰이 되며 NULL이 아닌것은 기존거래로서 기존 업체의 나의 활동에 자동으로 등록됨(0.0.2)
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE INCLUDE_WSTE_CONDITION				VARCHAR(255)			DEFAULT NULL;	
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	CALL sp_req_policy_direction(
		'include_wste_condition',
		INCLUDE_WSTE_CONDITION
	);
    CALL sp_retrieve_new_coming_by_region_without_handler(
		IN_USER_ID,
		IN_BCODE,
        IN_OFFSET_SIZE,
        IN_PAGE_SIZE,
        INCLUDE_WSTE_CONDITION,
        rtn_val,
        msg_txt,
        json_data
    );
    IF rtn_val > 0 THEN
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_new_coming_by_region_without_handler`(
	IN IN_USER_ID							BIGINT,
	IN IN_BCODE								VARCHAR(10),
    IN IN_OFFSET_SIZE						INT,
    IN IN_PAGE_SIZE							INT,
    IN IN_INCLUDE_WSTE_CONDITION			VARCHAR(10),
    OUT rtn_val								INT,
    OUT msg_txt								VARCHAR(200),
    OUT OUT_LISTS							JSON
)
BEGIN

/*
Procedure Name 	: sp_retrieve_new_coming_by_region_without_handler
Input param 	: 2개
Job 			: 수거자의 사업지역의 신규입찰건에 대한 리스트를 반환한다.
Update 			: 2022.05.01
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_DISPOSER_ORDER_ID 				BIGINT;
    DECLARE CUR_DISPOSER_ORDER_CODE 			VARCHAR(10);
    DECLARE CUR_DISPOSER_VISIT_START_AT			DATETIME;	
    DECLARE CUR_DISPOSER_VISIT_END_AT			DATETIME;	
    DECLARE CUR_DISPOSER_BIDDING_END_AT			DATETIME;	
    DECLARE CUR_WSTE_DISPOSED_KIKCD_B_CODE		VARCHAR(10);	
    DECLARE CUR_WSTE_DISPOSED_ADDR				VARCHAR(255);	
    DECLARE CUR_DISPOSER_CREATED_AT				DATETIME;	
    DECLARE CUR_WSTE_DISPOSED_SI_DO				VARCHAR(20);	
    DECLARE CUR_WSTE_DISPOSED_SI_GUN_GU			VARCHAR(20);	
    DECLARE CUR_WSTE_DISPOSED_EUP_MYEON_DONG	VARCHAR(20);	
    DECLARE CUR_WSTE_DISPOSED_DONG_RI			VARCHAR(20);	
    DECLARE CUR_STATE							VARCHAR(20);	
    DECLARE CUR_STATE_CODE						INT;		
    DECLARE CUR_STATE_CATEGORY					VARCHAR(20);	
    DECLARE CUR_STATE_CATEGORY_ID				INT;	
    DECLARE CUR_STATE_PID						INT;	
	DECLARE VAR_WSTE_LIST						JSON					DEFAULT NULL;	
	DECLARE VAR_IMG_LIST						JSON					DEFAULT NULL;	
    DECLARE WSTE_CODE_CURSOR 					CURSOR FOR 
	SELECT 
		A.ID, 
        A.ORDER_CODE, 
        A.VISIT_START_AT,
        A.VISIT_END_AT,
        A.BIDDING_END_AT,
        A.KIKCD_B_CODE,
        A.ADDR,
        A.CREATED_AT,
        B.SI_DO,
        B.SI_GUN_GU,
        B.EUP_MYEON_DONG,
        B.DONG_RI,
        C.STATE,
        C.STATE_CODE,
        C.STATE_CATEGORY,
        C.STATE_CATEGORY_ID,
        C.PID
    FROM SITE_WSTE_DISPOSAL_ORDER A 
    LEFT JOIN KIKCD_B B ON A.KIKCD_B_CODE = B.B_CODE
    LEFT JOIN V_ORDER_STATE_NAME C ON A.ID = C.DISPOSER_ORDER_ID
    LEFT JOIN COMP_SITE D ON A.SITE_ID = D.ID
    LEFT JOIN COMPANY E ON D.COMP_ID = E.ID
    LEFT JOIN USERS F ON A.DISPOSER_ID = F.ID
    LEFT JOIN WSTE_DISCHARGED_FROM_SITE G ON A.ID = G.DISPOSAL_ORDER_ID
    WHERE 
		A.CS_CONFIRMED = TRUE AND
		LEFT(A.KIKCD_B_CODE, 5) = LEFT(IN_BCODE, 5) AND
		(A.COLLECTOR_ID IS NULL OR A.COLLECTOR_ID = 0) AND 				/*0.0.2에서 새롭게 추가한 부분*/
        IF(A.SITE_ID = 0, F.ACTIVE = TRUE, D.ACTIVE = TRUE AND E.ACTIVE = TRUE) AND
        IF(A.VISIT_END_AT IS NOT NULL, 
			A.VISIT_END_AT >= NOW(), 
            A.BIDDING_END_AT >= NOW()
        ) AND 
        (
			A.VISIT_END_AT IS NOT NULL AND A.ID NOT IN (
				SELECT DISPOSAL_ORDER_ID 
				FROM COLLECTOR_BIDDING SUB1_A
				LEFT JOIN COMP_SITE SUB1_B ON SUB1_A.COLLECTOR_ID = SUB1_B.ID
				LEFT JOIN USERS SUB1_C ON SUB1_B.ID = SUB1_C.AFFILIATED_SITE
				WHERE 
					SUB1_A.DATE_OF_VISIT IS NOT NULL AND
					SUB1_C.ID = IN_USER_ID
			) OR
			A.VISIT_END_AT IS NULL AND A.ID NOT IN (
				SELECT DISPOSAL_ORDER_ID 
				FROM COLLECTOR_BIDDING SUB1_A
				LEFT JOIN COMP_SITE SUB1_B ON SUB1_A.COLLECTOR_ID = SUB1_B.ID
				LEFT JOIN USERS SUB1_C ON SUB1_B.ID = SUB1_C.AFFILIATED_SITE
				WHERE 
					SUB1_A.DATE_OF_BIDDING IS NOT NULL AND
					SUB1_C.ID = IN_USER_ID
			)
        ) AND
		LEFT(A.KIKCD_B_CODE, 5) IN (
			SELECT LEFT(SUB2_A.KIKCD_B_CODE, 5) 
			FROM BUSINESS_AREA SUB2_A 
			LEFT JOIN USERS SUB2_B ON SUB2_A.SITE_ID = SUB2_B.AFFILIATED_SITE 
			WHERE 
				SUB2_B.ID = IN_USER_ID AND
                SUB2_A.ACTIVE = TRUE
		) AND 
        IF(IN_INCLUDE_WSTE_CONDITION = '1',
			C.STATE_CODE = 102 AND 
			G.WSTE_CLASS IN (
				SELECT B1.WSTE_CLASS
				FROM WSTE_SITE_MATCH A1
				LEFT JOIN WSTE_CODE B1 ON A1.WSTE_CODE = B1.CODE
				LEFT JOIN USERS C1 ON A1.SITE_ID = C1.AFFILIATED_SITE
				WHERE 
					C1.ID = IN_USER_ID AND
					A1.ACTIVE = TRUE AND
					B1.DISPLAY = TRUE
			),
			C.STATE_CODE = 102
        ) 
		LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;  
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
        
	CREATE TEMPORARY TABLE IF NOT EXISTS NEW_COMING (
		DISPOSER_ORDER_ID				BIGINT,
		DISPOSER_ORDER_CODE				VARCHAR(10),
        VISIT_START_AT					DATETIME,
        VISIT_END_AT					DATETIME,
        BIDDING_END_AT					DATETIME,
        WSTE_B_CODE						VARCHAR(10),
        WSTE_ADDR						VARCHAR(255),
        CREATED_AT						DATETIME,
        WSTE_SI_DO						VARCHAR(20),
        WSTE_SI_GUN_GU					VARCHAR(20),
        WSTE_EUP_MYEON_DONG				VARCHAR(20),
        WSTE_DONG_RI					VARCHAR(20),
		STATE							VARCHAR(20),	
		STATE_CODE						INT,		
		STATE_CATEGORY					VARCHAR(20),
		STATE_CATEGORY_ID				INT,
		STATE_PID						INT,	
		IMG_LIST						JSON,
		WSTE_LIST						JSON
	);
    
	OPEN WSTE_CODE_CURSOR;	
	cloop: LOOP
		FETCH WSTE_CODE_CURSOR 
        INTO  
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_VISIT_START_AT,
			CUR_DISPOSER_VISIT_END_AT,
			CUR_DISPOSER_BIDDING_END_AT,
			CUR_WSTE_DISPOSED_KIKCD_B_CODE,
			CUR_WSTE_DISPOSED_ADDR,
			CUR_DISPOSER_CREATED_AT,
			CUR_WSTE_DISPOSED_SI_DO,
			CUR_WSTE_DISPOSED_SI_GUN_GU,
			CUR_WSTE_DISPOSED_EUP_MYEON_DONG,
			CUR_WSTE_DISPOSED_DONG_RI,
			CUR_STATE,
			CUR_STATE_CODE,
			CUR_STATE_CATEGORY,
			CUR_STATE_CATEGORY_ID,
			CUR_STATE_PID;
        
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
        NEW_COMING(
			DISPOSER_ORDER_ID, 
            DISPOSER_ORDER_CODE, 
            VISIT_START_AT, 
            VISIT_END_AT, 
            BIDDING_END_AT, 
            WSTE_B_CODE, 
            WSTE_ADDR, 
            CREATED_AT, 
            WSTE_SI_DO, 
            WSTE_SI_GUN_GU, 
            WSTE_EUP_MYEON_DONG, 
            WSTE_DONG_RI,
			STATE,
			STATE_CODE,
			STATE_CATEGORY,
			STATE_CATEGORY_ID,
			STATE_PID
		)
        VALUES(
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_VISIT_START_AT,
			CUR_DISPOSER_VISIT_END_AT,
			CUR_DISPOSER_BIDDING_END_AT,
			CUR_WSTE_DISPOSED_KIKCD_B_CODE,
			CUR_WSTE_DISPOSED_ADDR,
			CUR_DISPOSER_CREATED_AT,
			CUR_WSTE_DISPOSED_SI_DO,
			CUR_WSTE_DISPOSED_SI_GUN_GU,
			CUR_WSTE_DISPOSED_EUP_MYEON_DONG,
			CUR_WSTE_DISPOSED_DONG_RI,
			CUR_STATE,
			CUR_STATE_CODE,
			CUR_STATE_CATEGORY,
			CUR_STATE_CATEGORY_ID,
			CUR_STATE_PID
		);
        
        CALL sp_get_disposal_wste_lists(
			CUR_DISPOSER_ORDER_ID,
            VAR_WSTE_LIST
        );
        
        CALL sp_get_disposal_img_lists(
			CUR_DISPOSER_ORDER_ID,
            '입찰',
            VAR_IMG_LIST
        );
        
		UPDATE NEW_COMING 
        SET 
			IMG_LIST 			= VAR_IMG_LIST, 
            WSTE_LIST 			= VAR_WSTE_LIST 
		WHERE DISPOSER_ORDER_ID = CUR_DISPOSER_ORDER_ID;
        /*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/        
        
	END LOOP;   
	CLOSE WSTE_CODE_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'DISPOSER_ORDER_ID'			, DISPOSER_ORDER_ID, 
            'DISPOSER_ORDER_CODE'		, DISPOSER_ORDER_CODE, 
            'VISIT_START_AT'			, VISIT_START_AT, 
            'VISIT_END_AT'				, VISIT_END_AT, 
            'BIDDING_END_AT'			, BIDDING_END_AT, 
            'WSTE_B_CODE'				, WSTE_B_CODE, 
            'WSTE_ADDR'					, WSTE_ADDR, 
            'CREATED_AT'				, CREATED_AT, 
            'WSTE_SI_DO'				, WSTE_SI_DO, 
            'WSTE_SI_GUN_GU'			, WSTE_SI_GUN_GU, 
            'WSTE_EUP_MYEON_DONG'		, WSTE_EUP_MYEON_DONG, 
            'WSTE_DONG_RI'				, WSTE_DONG_RI, 
            'STATE'						, STATE, 
            'STATE_CODE'				, STATE_CODE, 
            'STATE_CATEGORY'			, STATE_CATEGORY, 
            'STATE_CATEGORY_ID'			, STATE_CATEGORY_ID, 
            'STATE_PID'					, STATE_PID, 
            'IMG_LIST'					, IMG_LIST, 
            'WSTE_LIST'					, WSTE_LIST
		)
	) 
    INTO OUT_LISTS 
    FROM NEW_COMING;
    
	SET rtn_val = 0;
	SET msg_txt = 'Success11';
    DROP TABLE IF EXISTS NEW_COMING;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_new_coming_without_handler`(
	IN IN_USER_ID							BIGINT,
    IN IN_OFFSET_SIZE						INT,
    IN IN_PAGE_SIZE							INT,
    IN IN_INCLUDE_WSTE_CONDITION			VARCHAR(10),
    OUT rtn_val								INT,
    OUT msg_txt								VARCHAR(200),
    OUT OUT_LISTS							JSON
)
BEGIN

/*
Procedure Name 	: sp_retrieve_new_coming_without_handler
Input param 	: 2개
Job 			: 수거자의 사업지역의 신규입찰건에 대한 리스트를 반환한다.
Update 			: 2022.05.01
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_DISPOSER_ORDER_ID 				BIGINT;
    DECLARE CUR_DISPOSER_ORDER_CODE 			VARCHAR(10);
    DECLARE CUR_DISPOSER_VISIT_START_AT			DATETIME;	
    DECLARE CUR_DISPOSER_VISIT_END_AT			DATETIME;	
    DECLARE CUR_DISPOSER_BIDDING_END_AT			DATETIME;	
    DECLARE CUR_WSTE_DISPOSED_KIKCD_B_CODE		VARCHAR(10);	
    DECLARE CUR_WSTE_DISPOSED_ADDR				VARCHAR(255);	
    DECLARE CUR_DISPOSER_CREATED_AT				DATETIME;	
    DECLARE CUR_WSTE_DISPOSED_SI_DO				VARCHAR(20);	
    DECLARE CUR_WSTE_DISPOSED_SI_GUN_GU			VARCHAR(20);	
    DECLARE CUR_WSTE_DISPOSED_EUP_MYEON_DONG	VARCHAR(20);	
    DECLARE CUR_WSTE_DISPOSED_DONG_RI			VARCHAR(20);	
    DECLARE CUR_STATE							VARCHAR(20);	
    DECLARE CUR_STATE_CODE						INT;		
    DECLARE CUR_STATE_CATEGORY					VARCHAR(20);	
    DECLARE CUR_STATE_CATEGORY_ID				INT;	
    DECLARE CUR_STATE_PID						INT;	
	DECLARE VAR_WSTE_LIST						JSON					DEFAULT NULL;	
	DECLARE VAR_IMG_LIST						JSON					DEFAULT NULL;	
    DECLARE WSTE_CODE_CURSOR 					CURSOR FOR 
	SELECT 
		A.ID, 
        A.ORDER_CODE, 
        A.VISIT_START_AT,
        A.VISIT_END_AT,
        A.BIDDING_END_AT,
        A.KIKCD_B_CODE,
        A.ADDR,
        A.CREATED_AT,
        B.SI_DO,
        B.SI_GUN_GU,
        B.EUP_MYEON_DONG,
        B.DONG_RI,
        C.STATE,
        C.STATE_CODE,
        C.STATE_CATEGORY,
        C.STATE_CATEGORY_ID,
        C.PID
    FROM SITE_WSTE_DISPOSAL_ORDER A 
    LEFT JOIN KIKCD_B B ON A.KIKCD_B_CODE = B.B_CODE
    LEFT JOIN V_ORDER_STATE_NAME C ON A.ID = C.DISPOSER_ORDER_ID
    LEFT JOIN COMP_SITE D ON A.SITE_ID = D.ID
    LEFT JOIN COMPANY E ON D.COMP_ID = E.ID
    LEFT JOIN USERS F ON A.DISPOSER_ID = F.ID
    LEFT JOIN WSTE_DISCHARGED_FROM_SITE G ON A.ID = G.DISPOSAL_ORDER_ID
    WHERE 
		A.CS_CONFIRMED = TRUE AND
		(A.COLLECTOR_ID IS NULL OR A.COLLECTOR_ID = 0) AND 				/*0.0.2에서 새롭게 추가한 부분*/
        IF(A.SITE_ID = 0, F.ACTIVE = TRUE, D.ACTIVE = TRUE AND E.ACTIVE = TRUE) AND
        IF(A.VISIT_END_AT IS NOT NULL, 
			A.VISIT_END_AT >= NOW(), 
            A.BIDDING_END_AT >= NOW()
        ) AND 
        (
			A.VISIT_END_AT IS NOT NULL AND A.ID NOT IN (
				SELECT DISPOSAL_ORDER_ID 
				FROM COLLECTOR_BIDDING SUB1_A
				LEFT JOIN COMP_SITE SUB1_B ON SUB1_A.COLLECTOR_ID = SUB1_B.ID
				LEFT JOIN USERS SUB1_C ON SUB1_B.ID = SUB1_C.AFFILIATED_SITE
				WHERE 
					SUB1_A.DATE_OF_VISIT IS NOT NULL AND
					SUB1_C.ID = IN_USER_ID
			) OR
			A.VISIT_END_AT IS NULL AND A.ID NOT IN (
				SELECT DISPOSAL_ORDER_ID 
				FROM COLLECTOR_BIDDING SUB1_A
				LEFT JOIN COMP_SITE SUB1_B ON SUB1_A.COLLECTOR_ID = SUB1_B.ID
				LEFT JOIN USERS SUB1_C ON SUB1_B.ID = SUB1_C.AFFILIATED_SITE
				WHERE 
					SUB1_A.DATE_OF_BIDDING IS NOT NULL AND
					SUB1_C.ID = IN_USER_ID
			)
        ) AND
		LEFT(A.KIKCD_B_CODE, 5) IN (
			SELECT LEFT(SUB2_A.KIKCD_B_CODE, 5) 
			FROM BUSINESS_AREA SUB2_A 
			LEFT JOIN USERS SUB2_B ON SUB2_A.SITE_ID = SUB2_B.AFFILIATED_SITE 
			WHERE 
				SUB2_B.ID = IN_USER_ID AND
                SUB2_A.ACTIVE = TRUE
		) AND 
        IF(IN_INCLUDE_WSTE_CONDITION = '1',
			C.STATE_CODE = 102 AND 
			G.WSTE_CLASS IN (
				SELECT B1.WSTE_CLASS
				FROM WSTE_SITE_MATCH A1
				LEFT JOIN WSTE_CODE B1 ON A1.WSTE_CODE = B1.CODE
				LEFT JOIN USERS C1 ON A1.SITE_ID = C1.AFFILIATED_SITE
				WHERE 
					C1.ID = IN_USER_ID AND
					A1.ACTIVE = TRUE AND
					B1.DISPLAY = TRUE
			),
			C.STATE_CODE = 102
        ) 
		LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;  
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
        
	CREATE TEMPORARY TABLE IF NOT EXISTS NEW_COMING (
		DISPOSER_ORDER_ID				BIGINT,
		DISPOSER_ORDER_CODE				VARCHAR(10),
        VISIT_START_AT					DATETIME,
        VISIT_END_AT					DATETIME,
        BIDDING_END_AT					DATETIME,
        WSTE_B_CODE						VARCHAR(10),
        WSTE_ADDR						VARCHAR(255),
        CREATED_AT						DATETIME,
        WSTE_SI_DO						VARCHAR(20),
        WSTE_SI_GUN_GU					VARCHAR(20),
        WSTE_EUP_MYEON_DONG				VARCHAR(20),
        WSTE_DONG_RI					VARCHAR(20),
		STATE							VARCHAR(20),	
		STATE_CODE						INT,		
		STATE_CATEGORY					VARCHAR(20),
		STATE_CATEGORY_ID				INT,
		STATE_PID						INT,	
		IMG_LIST						JSON,
		WSTE_LIST						JSON
	);
    
	OPEN WSTE_CODE_CURSOR;	
	cloop: LOOP
		FETCH WSTE_CODE_CURSOR 
        INTO  
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_VISIT_START_AT,
			CUR_DISPOSER_VISIT_END_AT,
			CUR_DISPOSER_BIDDING_END_AT,
			CUR_WSTE_DISPOSED_KIKCD_B_CODE,
			CUR_WSTE_DISPOSED_ADDR,
			CUR_DISPOSER_CREATED_AT,
			CUR_WSTE_DISPOSED_SI_DO,
			CUR_WSTE_DISPOSED_SI_GUN_GU,
			CUR_WSTE_DISPOSED_EUP_MYEON_DONG,
			CUR_WSTE_DISPOSED_DONG_RI,
			CUR_STATE,
			CUR_STATE_CODE,
			CUR_STATE_CATEGORY,
			CUR_STATE_CATEGORY_ID,
			CUR_STATE_PID;
        
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
        NEW_COMING(
			DISPOSER_ORDER_ID, 
            DISPOSER_ORDER_CODE, 
            VISIT_START_AT, 
            VISIT_END_AT, 
            BIDDING_END_AT, 
            WSTE_B_CODE, 
            WSTE_ADDR, 
            CREATED_AT, 
            WSTE_SI_DO, 
            WSTE_SI_GUN_GU, 
            WSTE_EUP_MYEON_DONG, 
            WSTE_DONG_RI,
			STATE,
			STATE_CODE,
			STATE_CATEGORY,
			STATE_CATEGORY_ID,
			STATE_PID
		)
        VALUES(
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_DISPOSER_VISIT_START_AT,
			CUR_DISPOSER_VISIT_END_AT,
			CUR_DISPOSER_BIDDING_END_AT,
			CUR_WSTE_DISPOSED_KIKCD_B_CODE,
			CUR_WSTE_DISPOSED_ADDR,
			CUR_DISPOSER_CREATED_AT,
			CUR_WSTE_DISPOSED_SI_DO,
			CUR_WSTE_DISPOSED_SI_GUN_GU,
			CUR_WSTE_DISPOSED_EUP_MYEON_DONG,
			CUR_WSTE_DISPOSED_DONG_RI,
			CUR_STATE,
			CUR_STATE_CODE,
			CUR_STATE_CATEGORY,
			CUR_STATE_CATEGORY_ID,
			CUR_STATE_PID
		);
        
        CALL sp_get_disposal_wste_lists(
			CUR_DISPOSER_ORDER_ID,
            VAR_WSTE_LIST
        );
        
        CALL sp_get_disposal_img_lists(
			CUR_DISPOSER_ORDER_ID,
            '입찰',
            VAR_IMG_LIST
        );
        
		UPDATE NEW_COMING 
        SET 
			IMG_LIST 			= VAR_IMG_LIST, 
            WSTE_LIST 			= VAR_WSTE_LIST 
		WHERE DISPOSER_ORDER_ID = CUR_DISPOSER_ORDER_ID;
        /*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 NEW_COMING 테이블에 반영한다.*/        
        
	END LOOP;   
	CLOSE WSTE_CODE_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'DISPOSER_ORDER_ID'			, DISPOSER_ORDER_ID, 
            'DISPOSER_ORDER_CODE'		, DISPOSER_ORDER_CODE, 
            'VISIT_START_AT'			, VISIT_START_AT, 
            'VISIT_END_AT'				, VISIT_END_AT, 
            'BIDDING_END_AT'			, BIDDING_END_AT, 
            'WSTE_B_CODE'				, WSTE_B_CODE, 
            'WSTE_ADDR'					, WSTE_ADDR, 
            'CREATED_AT'				, CREATED_AT, 
            'WSTE_SI_DO'				, WSTE_SI_DO, 
            'WSTE_SI_GUN_GU'			, WSTE_SI_GUN_GU, 
            'WSTE_EUP_MYEON_DONG'		, WSTE_EUP_MYEON_DONG, 
            'WSTE_DONG_RI'				, WSTE_DONG_RI, 
            'STATE'						, STATE, 
            'STATE_CODE'				, STATE_CODE, 
            'STATE_CATEGORY'			, STATE_CATEGORY, 
            'STATE_CATEGORY_ID'			, STATE_CATEGORY_ID, 
            'STATE_PID'					, STATE_PID, 
            'IMG_LIST'					, IMG_LIST, 
            'WSTE_LIST'					, WSTE_LIST
		)
	) 
    INTO OUT_LISTS 
    FROM NEW_COMING;
    
	SET rtn_val = 0;
	SET msg_txt = 'Success11';
    DROP TABLE IF EXISTS NEW_COMING;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_past_transactions`(
	IN IN_USER_ID							BIGINT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_past_transactions
Input param 	: 1개
Job 			: 과거 처리업체(거래내역)를 리스트한다.
Update 			: 2022.02.10
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;   
    DECLARE CUR_REPORT_ID						BIGINT;   			/*수거자가 제출한 보고서 등록번호*/
    DECLARE CUR_TRANSACTION_ID					BIGINT;   			/*트랜잭션 아이디*/
    DECLARE CUR_WSTE_CODE						VARCHAR(8);			/*수거자가 처리완료한 폐기물 코드*/
    DECLARE CUR_WSTE_NAME						VARCHAR(255);		/*수거자가 처리완료한 폐기물 이름*/
    DECLARE CUR_WSTE_TRMT_METHOD				VARCHAR(30);   		/*폐기물 처리방법 이름*/
    DECLARE CUR_WSTE_APPEARANCE					VARCHAR(20);   		/*폐기물 성상*/
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;				/*폐기물 배출 입찰등록번호*/
    DECLARE CUR_DISPOSER_ORDER_CODE				VARCHAR(10);    	/*폐기물 배출 입찰등록코드*/
    DECLARE CUR_CREATED_AT						DATETIME;    		/*수거자가 보고서를 제출한 일자*/
    DECLARE CUR_CONFIRMED_AT					DATETIME;    		/*수거자가 제출한 보고서를 배출자가 확정한 일자*/
    DECLARE CUR_STATE							VARCHAR(20);    	/*오더 상태*/
    DECLARE CUR_STATE_CODE						INT;   				/*오더 상태 코드*/
    DECLARE CUR_STATE_CATEGORY					VARCHAR(20);   		/*오더 대구분 상태*/
    DECLARE CUR_STATE_CATEGORY_ID				INT;    			/*오더 대구분 상태 코드*/
    DECLARE CUR_AVATAR_PATH						VARCHAR(255); 		/*수거자 아바타 경로*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
		A.TRANSACTION_ID, 
		A.WSTE_CODE, 
        B.NAME, 
        C.NAME,
        G.KOREAN,
        D.ID,
        D.ORDER_CODE,
        A.CREATED_AT,
        A.CONFIRMED_AT,
        E.STATE,
        E.STATE_CODE,
        E.STATE_CATEGORY,
        E.STATE_CATEGORY_ID,
        H.AVATAR_PATH
    FROM TRANSACTION_REPORT A
    LEFT JOIN WSTE_CODE B ON A.WSTE_CODE = B.CODE
    LEFT JOIN WSTE_TRMT_METHOD C ON A.TRMT_METHOD = C.CODE
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER D ON A.DISPOSER_ORDER_ID = D.ID
    LEFT JOIN V_ORDER_STATE_NAME E ON A.DISPOSER_ORDER_ID = E.DISPOSER_ORDER_ID
    LEFT JOIN USERS F ON IF(D.SITE_ID = 0, D.DISPOSER_ID = F.ID, D.SITE_ID = F.AFFILIATED_SITE)
    LEFT JOIN WSTE_APPEARANCE G ON A.WSTE_APPEARANCE = G.ID
    LEFT JOIN USERS H ON A.COLLECTOR_SITE_ID = H.AFFILIATED_SITE
	WHERE 
        A.CONFIRMED_AT <= NOW() AND
        F.CLASS = 201 AND
        F.ID = IN_USER_ID AND
        F.ACTIVE = TRUE AND
        H.CLASS = 201;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;   
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS PAST_TRANSACTIONS;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  
     
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PAST_TRANSACTIONS (
		REPORT_ID							BIGINT,   			/*수거자가 제출한 보고서 등록번호*/
		TRANSACTION_ID						BIGINT,   			/*트랜잭션 아이디*/
		WSTE_CODE							VARCHAR(8),			/*수거자가 처리완료한 폐기물 코드*/
		WSTE_NAME							VARCHAR(255),		/*수거자가 처리완료한 폐기물 이름*/
		WSTE_TRMT_METHOD					VARCHAR(30),   		/*폐기물 처리방법 이름*/
		WSTE_APPEARANCE						VARCHAR(20),   		/*폐기물 성상*/
		DISPOSER_ORDER_ID					BIGINT,				/*폐기물 배출 입찰등록번호*/
		DISPOSER_ORDER_CODE					VARCHAR(10),    	/*폐기물 배출 입찰등록코드*/
		CREATED_AT							DATETIME,    		/*수거자가 보고서를 제출한 일자*/
		CONFIRMED_AT						DATETIME,    		/*수거자가 제출한 보고서를 배출자가 확정한 일자*/
		STATE								VARCHAR(20),    	/*오더 상태*/
		STATE_CODE							INT,   				/*오더 상태 코드*/
		STATE_CATEGORY						VARCHAR(20),   		/*오더 대구분 상태*/
		STATE_CATEGORY_ID					INT,    			/*오더 대구분 상태 코드*/
		AVATAR_PATH							VARCHAR(255)		/*수거자 아바타 경로*/
	);         
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_REPORT_ID,
			CUR_TRANSACTION_ID,
			CUR_WSTE_CODE,
			CUR_WSTE_NAME,
			CUR_WSTE_TRMT_METHOD,
			CUR_WSTE_APPEARANCE,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_CREATED_AT,
			CUR_CONFIRMED_AT,
			CUR_STATE,
			CUR_STATE_CODE,
			CUR_STATE_CATEGORY,
			CUR_STATE_CATEGORY_ID,
			CUR_AVATAR_PATH;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PAST_TRANSACTIONS(
			REPORT_ID,
			TRANSACTION_ID,
			WSTE_CODE,
			WSTE_NAME,
			WSTE_TRMT_METHOD,
			WSTE_APPEARANCE,
			DISPOSER_ORDER_ID,
			DISPOSER_ORDER_CODE,
			CREATED_AT,
			CONFIRMED_AT,
			STATE,
			STATE_CODE,
			STATE_CATEGORY,
			STATE_CATEGORY_ID,
			AVATAR_PATH
		)
		VALUES(
			CUR_REPORT_ID,
			CUR_TRANSACTION_ID,
			CUR_WSTE_CODE,
			CUR_WSTE_NAME,
			CUR_WSTE_TRMT_METHOD,
			CUR_WSTE_APPEARANCE,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_CREATED_AT,
			CUR_CONFIRMED_AT,
			CUR_STATE,
			CUR_STATE_CODE,
			CUR_STATE_CATEGORY,
			CUR_STATE_CATEGORY_ID,
			CUR_AVATAR_PATH
		);
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'REPORT_ID'						, REPORT_ID, 
			'TRANSACTION_ID'				, TRANSACTION_ID, 
			'WSTE_CODE'						, WSTE_CODE, 				
			'WSTE_NAME'						, WSTE_NAME, 
			'WSTE_TRMT_METHOD'				, WSTE_TRMT_METHOD, 
			'WSTE_APPEARANCE'				, WSTE_APPEARANCE, 
			'DISPOSER_ORDER_ID'				, DISPOSER_ORDER_ID, 				
			'DISPOSER_ORDER_CODE'			, DISPOSER_ORDER_CODE, 
			'CREATED_AT'					, CREATED_AT, 
			'CONFIRMED_AT'					, CONFIRMED_AT, 
			'STATE'							, STATE, 
			'STATE_CODE'					, STATE_CODE, 
			'STATE_CATEGORY'				, STATE_CATEGORY, 
			'STATE_CATEGORY_ID'				, STATE_CATEGORY_ID, 
			'AVATAR_PATH'					, AVATAR_PATH
		)
	) 
	INTO json_data 
	FROM PAST_TRANSACTIONS;
    DROP TABLE IF EXISTS PAST_TRANSACTIONS;
	COMMIT;     
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_past_transactions_2`(
	IN IN_USER_ID							BIGINT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_past_transactions_2
Input param 	: 1개
Job 			: 수거자의 과거 처리업체(거래내역)를 리스트한다.
Update 			: 2022.02.10
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;   
    DECLARE CUR_REPORT_ID						BIGINT;   			/*수거자가 제출한 보고서 등록번호*/
    DECLARE CUR_TRANSACTION_ID					BIGINT;   			/*트랜잭션 아이디*/
    DECLARE CUR_WSTE_CODE						VARCHAR(8);			/*수거자가 처리완료한 폐기물 코드*/
    DECLARE CUR_WSTE_NAME						VARCHAR(255);		/*수거자가 처리완료한 폐기물 이름*/
    DECLARE CUR_WSTE_TRMT_METHOD				VARCHAR(30);   		/*폐기물 처리방법 이름*/
    DECLARE CUR_WSTE_APPEARANCE					VARCHAR(20);   		/*폐기물 성상*/
    DECLARE CUR_DISPOSER_ORDER_ID				BIGINT;				/*폐기물 배출 입찰등록번호*/
    DECLARE CUR_DISPOSER_ORDER_CODE				VARCHAR(10);    	/*폐기물 배출 입찰등록코드*/
    DECLARE CUR_CREATED_AT						DATETIME;    		/*수거자가 보고서를 제출한 일자*/
    DECLARE CUR_CONFIRMED_AT					DATETIME;    		/*수거자가 제출한 보고서를 배출자가 확정한 일자*/
    DECLARE CUR_STATE							VARCHAR(20);    	/*오더 상태*/
    DECLARE CUR_STATE_CODE						INT;   				/*오더 상태 코드*/
    DECLARE CUR_STATE_CATEGORY					VARCHAR(20);   		/*오더 대구분 상태*/
    DECLARE CUR_STATE_CATEGORY_ID				INT;    			/*오더 대구분 상태 코드*/
    DECLARE CUR_AVATAR_PATH						VARCHAR(255); 		/*수거자 아바타 경로*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_SITE_ID							BIGINT					DEFAULT NULL;	
	DECLARE VAR_SITE_INFO						JSON					DEFAULT NULL;	
	DECLARE VAR_DISPOSER_ORDER_INFO				JSON					DEFAULT NULL;	
	DECLARE VAR_REPORT_INFO						JSON					DEFAULT NULL;	
	DECLARE VAR_IMG_PATH						JSON					DEFAULT NULL;	
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
		A.TRANSACTION_ID, 
		A.WSTE_CODE, 
        B.NAME, 
        C.NAME,
        G.KOREAN,
        D.ID,
        D.ORDER_CODE,
        A.CREATED_AT,
        A.CONFIRMED_AT,
        E.STATE,
        E.STATE_CODE,
        E.STATE_CATEGORY,
        E.STATE_CATEGORY_ID,
        H.AVATAR_PATH
    FROM TRANSACTION_REPORT A
    LEFT JOIN WSTE_CODE B ON A.WSTE_CODE = B.CODE
    LEFT JOIN WSTE_TRMT_METHOD C ON A.TRMT_METHOD = C.CODE
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER D ON A.DISPOSER_ORDER_ID = D.ID
    LEFT JOIN V_TRANSACTION_STATE_NAME E ON A.TRANSACTION_ID = E.TRANSACTION_ID
    LEFT JOIN USERS F ON A.COLLECTOR_SITE_ID = F.AFFILIATED_SITE
    LEFT JOIN WSTE_APPEARANCE G ON A.WSTE_APPEARANCE = G.ID
    LEFT JOIN USERS H ON IF(D.SITE_ID = 0, D.DISPOSER_ID = H.ID, A.DISPOSER_SITE_ID = H.AFFILIATED_SITE)
	WHERE 
        A.CONFIRMED_AT <= NOW() AND
        F.CLASS = 201 AND
        F.ID = IN_USER_ID AND
        F.ACTIVE = TRUE;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;   
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		DROP TABLE IF EXISTS PAST_TRANSACTIONS;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;				
    /*트랜잭션 시작*/  
     
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PAST_TRANSACTIONS (
		REPORT_ID							BIGINT,   			/*수거자가 제출한 보고서 등록번호*/
		TRANSACTION_ID						BIGINT,   			/*트랜잭션 아이디*/
		WSTE_CODE							VARCHAR(8),			/*수거자가 처리완료한 폐기물 코드*/
		WSTE_NAME							VARCHAR(255),		/*수거자가 처리완료한 폐기물 이름*/
		WSTE_TRMT_METHOD					VARCHAR(30),   		/*폐기물 처리방법 이름*/
		WSTE_APPEARANCE						VARCHAR(20),   		/*폐기물 성상*/
		DISPOSER_ORDER_ID					BIGINT,				/*폐기물 배출 입찰등록번호*/
		DISPOSER_ORDER_CODE					VARCHAR(10),    	/*폐기물 배출 입찰등록코드*/
		CREATED_AT							DATETIME,    		/*수거자가 보고서를 제출한 일자*/
		CONFIRMED_AT						DATETIME,    		/*수거자가 제출한 보고서를 배출자가 확정한 일자*/
		STATE								VARCHAR(20),    	/*오더 상태*/
		STATE_CODE							INT,   				/*오더 상태 코드*/
		STATE_CATEGORY						VARCHAR(20),   		/*오더 대구분 상태*/
		STATE_CATEGORY_ID					INT,    			/*오더 대구분 상태 코드*/
		AVATAR_PATH							VARCHAR(255),		/*수거자 아바타 경로*/
        SITE_INFO							JSON,
        REPORT_INFO							JSON,
        IMG_PATH							JSON,
        DISPOSER_ORDER_INFO					JSON
        
	);         
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_REPORT_ID,
			CUR_TRANSACTION_ID,
			CUR_WSTE_CODE,
			CUR_WSTE_NAME,
			CUR_WSTE_TRMT_METHOD,
			CUR_WSTE_APPEARANCE,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_CREATED_AT,
			CUR_CONFIRMED_AT,
			CUR_STATE,
			CUR_STATE_CODE,
			CUR_STATE_CATEGORY,
			CUR_STATE_CATEGORY_ID,
			CUR_AVATAR_PATH;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PAST_TRANSACTIONS(
			REPORT_ID,
			TRANSACTION_ID,
			WSTE_CODE,
			WSTE_NAME,
			WSTE_TRMT_METHOD,
			WSTE_APPEARANCE,
			DISPOSER_ORDER_ID,
			DISPOSER_ORDER_CODE,
			CREATED_AT,
			CONFIRMED_AT,
			STATE,
			STATE_CODE,
			STATE_CATEGORY,
			STATE_CATEGORY_ID,
			AVATAR_PATH
		)
		VALUES(
			CUR_REPORT_ID,
			CUR_TRANSACTION_ID,
			CUR_WSTE_CODE,
			CUR_WSTE_NAME,
			CUR_WSTE_TRMT_METHOD,
			CUR_WSTE_APPEARANCE,
			CUR_DISPOSER_ORDER_ID,
			CUR_DISPOSER_ORDER_CODE,
			CUR_CREATED_AT,
			CUR_CONFIRMED_AT,
			CUR_STATE,
			CUR_STATE_CODE,
			CUR_STATE_CATEGORY,
			CUR_STATE_CATEGORY_ID,
			CUR_AVATAR_PATH
		);
		
		SELECT SITE_ID INTO VAR_SITE_ID
		FROM SITE_WSTE_DISPOSAL_ORDER
		WHERE ID = CUR_DISPOSER_ORDER_ID;
		
		IF VAR_SITE_ID = 0 THEN
			CALL sp_get_disposer_name_from_report(
				CUR_REPORT_ID,
                rtn_val,
                msg_txt,
				VAR_SITE_INFO
			);
		ELSE
			CALL sp_get_site_info_simple(
				VAR_SITE_ID,
				VAR_SITE_INFO
			);
		END IF;
        
        CALL sp_get_disposal_order_info(
			CUR_DISPOSER_ORDER_ID,
            VAR_DISPOSER_ORDER_INFO
        );
		
        CALL sp_get_transaction_report(
			CUR_REPORT_ID,
            VAR_REPORT_INFO
        );
		            
		CALL sp_get_disposal_img_lists(
			CUR_DISPOSER_ORDER_ID,
			'처리',
			VAR_IMG_PATH
		);
        
		UPDATE PAST_TRANSACTIONS
		SET 
			SITE_INFO 	= VAR_SITE_INFO,
			REPORT_INFO = VAR_REPORT_INFO,
			IMG_PATH = VAR_IMG_PATH,
			DISPOSER_ORDER_INFO = VAR_DISPOSER_ORDER_INFO
		WHERE REPORT_ID = CUR_REPORT_ID;
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'REPORT_ID'						, REPORT_ID, 
			'TRANSACTION_ID'				, TRANSACTION_ID, 
			'WSTE_CODE'						, WSTE_CODE, 				
			'WSTE_NAME'						, WSTE_NAME, 
			'WSTE_TRMT_METHOD'				, WSTE_TRMT_METHOD, 
			'WSTE_APPEARANCE'				, WSTE_APPEARANCE, 
			'DISPOSER_ORDER_ID'				, DISPOSER_ORDER_ID, 				
			'DISPOSER_ORDER_CODE'			, DISPOSER_ORDER_CODE, 
			'CREATED_AT'					, CREATED_AT, 
			'CONFIRMED_AT'					, CONFIRMED_AT, 
			'STATE'							, STATE, 
			'STATE_CODE'					, STATE_CODE, 
			'STATE_CATEGORY'				, STATE_CATEGORY, 
			'STATE_CATEGORY_ID'				, STATE_CATEGORY_ID, 
			'AVATAR_PATH'					, AVATAR_PATH, 
			'SITE_INFO'						, SITE_INFO, 
			'REPORT_INFO'					, REPORT_INFO, 
			'IMG_PATH'						, IMG_PATH, 
			'DISPOSER_ORDER_INFO'			, DISPOSER_ORDER_INFO
		)
	) 
	INTO json_data 
	FROM PAST_TRANSACTIONS;
    DROP TABLE IF EXISTS PAST_TRANSACTIONS;
	COMMIT;     
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_push_history`(
	IN IN_USER_ID							BIGINT,
    IN IN_OFFSET_SIZE						INT,
    IN IN_PAGE_SIZE							INT
)
BEGIN

/*
Procedure Name 	: sp_retrieve_push_history
Input param 	: 3개
Job 			: 푸시 히스토리를 반환한다
Update 			: 2022.04.16
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ID	 							BIGINT;  
    DECLARE CUR_TITLE 							VARCHAR(255);
    DECLARE CUR_BODY							VARCHAR(255);	
    DECLARE CUR_CATEGORY_ID						INT;	
    DECLARE CUR_AVATAR_PATH						VARCHAR(255);	
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_PAYLOAD							JSON					DEFAULT NULL;	
    DECLARE PUSH_HISTORY_CURSOR 				CURSOR FOR 
	SELECT 
        A.ID,
        A.TITLE,
        A.BODY,
        A.CATEGORY_ID,
        B.AVATAR_PATH
    FROM PUSH_HISTORY A
    LEFT JOIN USERS B ON A.SENDER_ID = B.ID
    WHERE A.USER_ID = IN_USER_ID
    ORDER BY A.CREATED_AT DESC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;  
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
        
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_HISTORY_TEMP (
		HISTORY_ID	 					BIGINT,
		TITLE 							VARCHAR(255),
		BODY							VARCHAR(255),
		TARGET_URL						VARCHAR(255),
		CATEGORY_ID						INT,
		AVATAR_PATH						VARCHAR(255),
        PAYLOAD							JSON
	);
    
	OPEN PUSH_HISTORY_CURSOR;	
	cloop: LOOP
		FETCH PUSH_HISTORY_CURSOR 
        INTO  
			CUR_ID,
			CUR_TITLE,
			CUR_BODY,
			CUR_CATEGORY_ID,
			CUR_AVATAR_PATH;
        
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
        PUSH_HISTORY_TEMP(
			HISTORY_ID,
			TITLE,
			BODY,
			CATEGORY_ID,
			AVATAR_PATH
		)
        VALUES(
			CUR_ID,
			CUR_TITLE,
			CUR_BODY,
			CUR_CATEGORY_ID,
			CUR_AVATAR_PATH
		);
        
        CALL sp_retrieve_push_history_payload(
			CUR_ID,
            VAR_PAYLOAD
        );
        
		UPDATE PUSH_HISTORY_TEMP 
        SET PAYLOAD = VAR_PAYLOAD
		WHERE HISTORY_ID = CUR_ID;
        /*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 PUSH_HISTORY_TEMP 테이블에 반영한다.*/        
        
	END LOOP;   
	CLOSE PUSH_HISTORY_CURSOR;
		
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'HISTORY_ID'		, HISTORY_ID, 
			'TITLE'				, TITLE, 
			'BODY'				, BODY, 
			'CATEGORY_ID'		, CATEGORY_ID,
			'AVATAR_PATH'		, AVATAR_PATH,
			'PAYLOAD'			, PAYLOAD
		)
	) 
	INTO json_data
    FROM PUSH_HISTORY_TEMP;  
    DROP TABLE IF EXISTS PUSH_HISTORY_TEMP;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_push_history_payload`(
	IN IN_HISTORY_ID						BIGINT,
    OUT OUT_PUSH_HISTORY					JSON
)
BEGIN

/*
Procedure Name 	: sp_retrieve_push_history
Input param 	: 3개
Job 			: 푸시 히스토리를 반환한다
Update 			: 2022.04.16
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_ID 								BIGINT; 
    DECLARE CUR_USER_ID 						BIGINT;
    DECLARE CUR_CREATED_AT						DATETIME;	
    DECLARE CUR_IS_READ							TINYINT;	
    DECLARE CUR_IS_READ_AT						DATETIME;	
    DECLARE CUR_DELETED							TINYINT;	
    DECLARE CUR_DELETED_AT						DATETIME;	
    DECLARE CUR_SENDER_ID						BIGINT;	
    DECLARE CUR_ORDER_ID						BIGINT;	
    DECLARE CUR_BIDDING_ID						BIGINT;	
    DECLARE CUR_TRANSACTION_ID					BIGINT;	
    DECLARE CUR_REPORT_ID						BIGINT;	
	DECLARE VAR_ORDER_INFO						JSON					DEFAULT NULL;	
	DECLARE VAR_BIDDING_INFO					JSON					DEFAULT NULL;	
	DECLARE VAR_TRANSACTION_INFO				JSON					DEFAULT NULL;	
	DECLARE VAR_REPORT_INFO						JSON					DEFAULT NULL;	
	DECLARE VAR_USER_TYPE						VARCHAR(20)				DEFAULT NULL;	
	DECLARE VAR_ORDER_STATE_CODE				INT						DEFAULT NULL;		
	DECLARE VAR_CANCEL_VISIT					TINYINT					DEFAULT NULL;
    DECLARE PUSH_HISTORY_PAYLOAD_CURSOR			CURSOR FOR 
	SELECT 
		A.ID, 
        A.USER_ID, 
        A.CREATED_AT,
        A.IS_READ,
        A.IS_READ_AT,
        A.DELETED,
        A.DELETED_AT,
        A.SENDER_ID,
        A.ORDER_ID,
        A.BIDDING_ID,
        A.TRANSACTION_ID,
        A.REPORT_ID
    FROM PUSH_HISTORY A
    LEFT JOIN USERS B ON A.USER_ID = B.ID
    WHERE A.ID = IN_HISTORY_ID;  
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
        
	CREATE TEMPORARY TABLE IF NOT EXISTS PUSH_HISTORY_PAYLOAD_TEMP (
		ID 								BIGINT,
		USER_ID 						BIGINT,
		CREATED_AT						DATETIME,
		IS_READ							TINYINT,
		IS_READ_AT						DATETIME,
		DELETED							TINYINT,
		DELETED_AT						DATETIME,
		SENDER_ID						BIGINT,
		ORDER_ID						BIGINT,
		BIDDING_ID						BIGINT,
		TRANSACTION_ID					BIGINT,
		REPORT_ID						BIGINT,
        ORDER_INFO						JSON,
        BIDDING_INFO					JSON,
        TRANSACTION_INFO				JSON,
        REPORT_INFO						JSON,
        DROP_VISIT_STATE				TINYINT
	);
    
	OPEN PUSH_HISTORY_PAYLOAD_CURSOR;	
	cloop: LOOP
		FETCH PUSH_HISTORY_PAYLOAD_CURSOR 
        INTO  
			CUR_ID,
			CUR_USER_ID,
			CUR_CREATED_AT,
			CUR_IS_READ,
			CUR_IS_READ_AT,
			CUR_DELETED,
			CUR_DELETED_AT,
			CUR_SENDER_ID,
			CUR_ORDER_ID,
			CUR_BIDDING_ID,
			CUR_TRANSACTION_ID,
			CUR_REPORT_ID;
        
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
		INSERT INTO 
        PUSH_HISTORY_PAYLOAD_TEMP(
			ID,
			USER_ID,
			CREATED_AT,
			IS_READ,
			IS_READ_AT,
			DELETED,
			DELETED_AT,
			SENDER_ID,
			ORDER_ID,
			BIDDING_ID,
			TRANSACTION_ID,
			REPORT_ID
		)
        VALUES(
			CUR_ID,
			CUR_USER_ID,
			CUR_CREATED_AT,
			CUR_IS_READ,
			CUR_IS_READ_AT,
			CUR_DELETED,
			CUR_DELETED_AT,
			CUR_SENDER_ID,
			CUR_ORDER_ID,
			CUR_BIDDING_ID,
			CUR_TRANSACTION_ID,
			CUR_REPORT_ID
		);
        
        IF CUR_ORDER_ID IS NOT NULL THEN
			CALL sp_get_disposal_order_info(
				CUR_ORDER_ID,
				VAR_ORDER_INFO
			);
        ELSE
			SET VAR_ORDER_INFO = NULL;
        END IF;
        
        IF CUR_BIDDING_ID IS NOT NULL THEN
			CALL sp_get_bidding_info(
				CUR_BIDDING_ID,
				VAR_BIDDING_INFO
			);
        ELSE
			SET VAR_BIDDING_INFO = NULL;
        END IF;
        
        IF CUR_TRANSACTION_ID IS NOT NULL THEN
			CALL sp_get_transaction_info_2(
				CUR_TRANSACTION_ID,
				VAR_TRANSACTION_INFO
			);
        ELSE
			SET VAR_TRANSACTION_INFO = NULL;
        END IF;
        
        IF CUR_REPORT_ID IS NOT NULL THEN
			CALL sp_get_transaction_report(
				CUR_REPORT_ID,
				VAR_REPORT_INFO
			);
        ELSE
			SET VAR_REPORT_INFO = NULL;
        END IF;
        
        SELECT USER_CURRENT_TYPE INTO VAR_USER_TYPE
        FROM USERS
        WHERE ID = CUR_USER_ID;
        
        IF VAR_USER_TYPE = 2 THEN
        /*사용자 타입이 수거자인 경우 정상처리한다.*/
			SELECT STATE_CODE INTO VAR_ORDER_STATE_CODE
            FROM V_ORDER_STATE
            WHERE DISPOSER_ORDER_ID = CUR_ORDER_ID;
            
            IF VAR_ORDER_STATE_CODE = 102 THEN
            /*배출자의 상태가 방문중(102)인 경우*/
				SELECT CANCEL_VISIT INTO VAR_CANCEL_VISIT
                FROM COLLECTOR_BIDDING
                WHERE ID = CUR_BIDDING_ID;	
            ELSE
            /*배출자의 상태가 방문중(102)이 아닌 경우*/
				SET VAR_CANCEL_VISIT = NULL;
            END IF;
        ELSE
        /*사용자 타입이 수거자가 아닌 경우 DROP_VISIT_STATE를 NULL처리한다.*/
			SET VAR_CANCEL_VISIT = NULL;
        END IF;
        
		UPDATE PUSH_HISTORY_PAYLOAD_TEMP 
        SET 
			ORDER_INFO 			= VAR_ORDER_INFO, 
			BIDDING_INFO 		= VAR_BIDDING_INFO, 
			TRANSACTION_INFO 	= VAR_TRANSACTION_INFO, 
            REPORT_INFO 		= VAR_REPORT_INFO , 
            DROP_VISIT_STATE 	= VAR_CANCEL_VISIT 
		WHERE ID = CUR_ID;
        /*위에서 받아온 JSON 타입 데이타를 비롯한 몇가지의 데이타를 PUSH_HISTORY_TEMP 테이블에 반영한다.*/      
        
	END LOOP;   
	CLOSE PUSH_HISTORY_PAYLOAD_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'ID'				, ID, 
			'USER_ID'			, USER_ID, 
			'CREATED_AT'		, CREATED_AT, 
			'IS_READ'			, IS_READ, 
			'IS_READ_AT'		, IS_READ_AT, 
			'DELETED'			, DELETED, 
			'DELETED_AT'		, DELETED_AT, 
			'SENDER_ID'			, SENDER_ID, 
			'ORDER_ID'			, ORDER_ID, 
			'BIDDING_ID'		, BIDDING_ID, 
			'TRANSACTION_ID'	, TRANSACTION_ID, 
			'REPORT_ID'			, REPORT_ID, 
			'ORDER_INFO'		, ORDER_INFO, 
			'BIDDING_INFO'		, BIDDING_INFO, 
			'TRANSACTION_INFO'	, TRANSACTION_INFO, 
			'REPORT_INFO'		, REPORT_INFO, 
			'DROP_VISIT_STATE'	, DROP_VISIT_STATE
		)
	) 
	INTO OUT_PUSH_HISTORY
    FROM PUSH_HISTORY_PAYLOAD_TEMP;
    
    DROP TABLE IF EXISTS PUSH_HISTORY_PAYLOAD_TEMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_site_registered_lists`(
    IN IN_USER_ID						BIGINT,
    IN IN_SEARCH						VARCHAR(255),
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT
)
BEGIN
	DECLARE VAR_USER_ID							BIGINT					DEFAULT NULL;	
	DECLARE VAR_SEARCH							VARCHAR(255)			DEFAULT NULL;	
	DECLARE VAR_OFFSET_SIZE						INT						DEFAULT NULL;	
	DECLARE VAR_PAGE_SIZE						INT						DEFAULT NULL;	 
	DECLARE VAR_LAT								DECIMAL(12,9)			DEFAULT NULL;	 
	DECLARE VAR_LNG								DECIMAL(12,9)			DEFAULT NULL;	
	DECLARE VAR_USER_TYPE						INT						DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;	
	DECLARE VAR_SITE_LISTS						JSON					DEFAULT NULL;	
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	  
	
	SET VAR_USER_ID 		= IN_USER_ID;
	SET VAR_SEARCH 			= IN_SEARCH;
	SET VAR_OFFSET_SIZE 	= IN_OFFSET_SIZE;
	SET VAR_PAGE_SIZE 		= IN_PAGE_SIZE;
    
    SELECT A.LAT, A.LNG, C.USER_TYPE, A.ID
    INTO VAR_LAT, VAR_LNG, VAR_USER_TYPE, VAR_USER_SITE_ID
    FROM COMP_SITE A
    LEFT JOIN USERS B ON A.ID = B.AFFILIATED_SITE 
    LEFT JOIN WSTE_TRMT_BIZ C ON A.TRMT_BIZ_CODE = C.CODE
    WHERE B.ID = VAR_USER_ID;
    
    CALL sp_retrieve_site_registered_lists_without_handler(
		IN_USER_ID,
		VAR_USER_SITE_ID,
		VAR_SEARCH,
		VAR_LAT,
		VAR_LNG,
		VAR_OFFSET_SIZE,
		VAR_PAGE_SIZE,
		VAR_SITE_LISTS
    );
    
	DROP TABLE IF EXISTS RETRIEVE_SITE_REGISTERED_LISTS_TEMP;
	CALL sp_return_results(rtn_val, msg_txt, VAR_SITE_LISTS);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_site_registered_lists_without_handler`(
	IN IN_USER_ID						BIGINT,
	IN IN_USER_SITE_ID					BIGINT,
	IN IN_SEARCH						VARCHAR(255),
	IN IN_LAT							DECIMAL(12,9),
	IN IN_LNG							DECIMAL(12,9),
    IN IN_OFFSET_SIZE					INT,
    IN IN_PAGE_SIZE						INT,
    OUT OUT_SITE_LIST					JSON
)
BEGIN

/*
Procedure Name 	: sp_admin_retrieve_site_registered_lists_without_handler
Input param 	: 4개
Job 			: 사이트의 리스트를 반환한다.
Update 			: 2022.05.09
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_SITE_ID							BIGINT;   
    DECLARE CUR_COMP_ID							BIGINT;   
    DECLARE CUR_CREATED_AT						DATETIME;  
    DECLARE CUR_UPDATED_AT						DATETIME;  
    DECLARE CUR_SITE_NAME						VARCHAR(255);   
    DECLARE CUR_PERMIT_REG_CODE					VARCHAR(12);  
    DECLARE CUR_B_CODE							VARCHAR(10); 
    DECLARE CUR_ADDR							VARCHAR(255);
    DECLARE CUR_PERMIT_REG_IMG_PATH				VARCHAR(255);
    DECLARE CUR_USER_TYPE						INT;
    DECLARE CUR_LAT								DECIMAL(12,9);
    DECLARE CUR_LNG								DECIMAL(12,9);
    DECLARE CUR_DIST							FLOAT;	
    DECLARE CUR_TRAVEL_TIME						FLOAT;		
	DECLARE VAR_ADDRESS_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_COMPANY_INFO					JSON					DEFAULT NULL;
	DECLARE VAR_WSTE_INFO						JSON					DEFAULT NULL;
	DECLARE VAR_SITE_INFO						JSON					DEFAULT NULL;
	DECLARE VAR_RECORD_COUNT					INT						DEFAULT NULL;
	DECLARE VAR_LAST_PAGE						INT						DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.ID, 
		A.COMP_ID, 
        A.CREATED_AT,
        A.UPDATED_AT,
        A.SITE_NAME,
        A.PERMIT_REG_CODE,
        A.KIKCD_B_CODE,
        A.ADDR,
        A.PERMIT_REG_IMG_PATH,
        E.USER_TYPE,
        A.LAT,
        A.LNG,
        6378.137 * ACOS(COS(IN_LAT * PI() / 180)*COS(A.LAT * PI() / 180)*COS((A.LNG * PI() / 180) - (IN_LNG * PI() / 180)) + SIN(IN_LAT * PI() / 180) * SIN(A.LAT * PI() / 180)),
        (6378.137 * ACOS(COS(IN_LAT * PI() / 180)*COS(A.LAT * PI() / 180)*COS((A.LNG * PI() / 180) - (IN_LNG * PI() / 180)) + SIN(IN_LAT * PI() / 180) * SIN(A.LAT * PI() / 180))) / 0.6
    FROM COMP_SITE A
    LEFT JOIN COMPANY B ON A.COMP_ID = B.ID
    LEFT JOIN KIKCD_B C ON A.KIKCD_B_CODE = C.B_CODE
    LEFT JOIN KIKCD_B D ON B.KIKCD_B_CODE = D.B_CODE
    LEFT JOIN WSTE_TRMT_BIZ E ON A.TRMT_BIZ_CODE = E.CODE
    WHERE 
		IF(IN_SEARCH IS NULL,
			A.ID > 0 AND
            E.USER_TYPE = 3,
			(
				A.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				D.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
				D.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				D.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				D.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				D.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE USER_NAME LIKE CONCAT('%', IN_SEARCH, '%')) OR
				E.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				REPLACE(B.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
				REPLACE(A.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
			) AND
            E.USER_TYPE = 3
		)
    ORDER BY A.SITE_NAME ASC
    LIMIT IN_OFFSET_SIZE, IN_PAGE_SIZE;   
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
	SELECT COUNT(A.ID) INTO VAR_RECORD_COUNT
	FROM COMP_SITE A
	LEFT JOIN COMPANY B ON A.COMP_ID = B.ID
	LEFT JOIN KIKCD_B C ON A.KIKCD_B_CODE = C.B_CODE
	LEFT JOIN KIKCD_B D ON B.KIKCD_B_CODE = D.B_CODE
	LEFT JOIN WSTE_TRMT_BIZ E ON A.TRMT_BIZ_CODE = E.CODE
	WHERE 
		IF(IN_SEARCH IS NULL,
			A.ID > 0 AND
            E.USER_TYPE = 3,
			(
				A.SITE_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.REP_NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				B.ADDR LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				C.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				D.B_CODE LIKE CONCAT('%', IN_SEARCH, '%') OR
				D.SI_DO LIKE CONCAT('%', IN_SEARCH, '%') OR
				D.SI_GUN_GU LIKE CONCAT('%', IN_SEARCH, '%') OR
				D.EUP_MYEON_DONG LIKE CONCAT('%', IN_SEARCH, '%') OR
				D.DONG_RI LIKE CONCAT('%', IN_SEARCH, '%') OR
				A.ID IN (SELECT AFFILIATED_SITE FROM USERS WHERE USER_NAME LIKE CONCAT('%', IN_SEARCH, '%')) OR
				E.NAME LIKE CONCAT('%', IN_SEARCH, '%') OR
				REPLACE(B.BIZ_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%') OR
				REPLACE(A.PERMIT_REG_CODE, '-', '') LIKE CONCAT('%', IN_SEARCH, '%')
			) AND
            E.USER_TYPE = 3
		);
    
    SET OUT_SITE_LIST = NULL;
	CREATE TEMPORARY TABLE IF NOT EXISTS ADMIN_RETRIEVE_SITE_REGISTERED_LISTS_TEMP_2 (
		SITE_ID							BIGINT,
		COMP_ID							BIGINT,
		CREATED_AT						DATETIME,
		UPDATED_AT						DATETIME,
		SITE_NAME						VARCHAR(255),
		PERMIT_REG_CODE					VARCHAR(12),
		B_CODE							VARCHAR(10),
		ADDR							VARCHAR(255),
		PERMIT_REG_IMG_PATH				VARCHAR(255),
		LAST_PAGE						INT,
        ADDRESS_INFO					JSON,
        COMPANY_INFO					JSON,
        WSTE_INFO						JSON,
        SITE_INFO						JSON,
        USER_TYPE						INT,
        LAT								DECIMAL(12,9),
        LNG								DECIMAL(12,9),
        DIST							FLOAT,
        TRAVEL_TIME						FLOAT
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		
		FETCH TEMP_CURSOR 
		INTO  
			CUR_SITE_ID,
			CUR_COMP_ID,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_SITE_NAME,
			CUR_PERMIT_REG_CODE,
			CUR_B_CODE,
			CUR_ADDR,
			CUR_PERMIT_REG_IMG_PATH,
			CUR_USER_TYPE,
			CUR_LAT,
			CUR_LNG,
			CUR_DIST,
			CUR_TRAVEL_TIME;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		ADMIN_RETRIEVE_SITE_REGISTERED_LISTS_TEMP_2(
			SITE_ID,
			COMP_ID,
			CREATED_AT,
			UPDATED_AT,
			SITE_NAME,
			PERMIT_REG_CODE,
			B_CODE,
			ADDR,
			PERMIT_REG_IMG_PATH,
			USER_TYPE,
			LAT,
			LNG, 
            DIST, 
            TRAVEL_TIME
		)
		VALUES(
			CUR_SITE_ID,
			CUR_COMP_ID,
			CUR_CREATED_AT,
			CUR_UPDATED_AT,
			CUR_SITE_NAME,
			CUR_PERMIT_REG_CODE,
			CUR_B_CODE,
			CUR_ADDR,
			CUR_PERMIT_REG_IMG_PATH,
			CUR_USER_TYPE,
			CUR_LAT,
			CUR_LNG,
			CUR_DIST,
			CUR_TRAVEL_TIME
		);
        
        CALL sp_get_address_with_bcode(
			CUR_B_CODE,
            VAR_ADDRESS_INFO
        );
        
        CALL sp_get_company_info(
			CUR_COMP_ID,
            VAR_COMPANY_INFO
        );
        
        CALL sp_get_site_wste_info(
			CUR_SITE_ID,
            VAR_WSTE_INFO
        );
        
        CALL sp_get_site_info_simple(
			CUR_SITE_ID,
            VAR_SITE_INFO
        );
        
		SET VAR_LAST_PAGE = CEILING(VAR_RECORD_COUNT / IN_PAGE_SIZE);
        
        UPDATE ADMIN_RETRIEVE_SITE_REGISTERED_LISTS_TEMP_2
        SET 
			ADDRESS_INFO = VAR_ADDRESS_INFO,
			COMPANY_INFO = VAR_COMPANY_INFO,
			WSTE_INFO = VAR_WSTE_INFO,
			SITE_INFO = VAR_SITE_INFO,
			LAST_PAGE = VAR_LAST_PAGE
        WHERE SITE_ID = CUR_SITE_ID;
        
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(JSON_OBJECT(
		'SITE_ID'					, SITE_ID, 
        'CREATED_AT'				, CREATED_AT, 
        'UPDATED_AT'				, UPDATED_AT, 
        'SITE_NAME'					, SITE_NAME, 
        'PERMIT_REG_CODE'			, PERMIT_REG_CODE, 
        'B_CODE'					, B_CODE, 
        'ADDR'						, ADDR, 
        'PERMIT_REG_IMG_PATH'		, PERMIT_REG_IMG_PATH, 
        'LAST_PAGE'					, LAST_PAGE, 
        'ADDRESS_INFO'				, ADDRESS_INFO, 
        'COMPANY_INFO'				, COMPANY_INFO, 
        'WSTE_INFO'					, WSTE_INFO, 
        'SITE_INFO'					, SITE_INFO, 
        'LAT'						, LAT, 
        'LNG'						, LNG, 
        'DIST'						, DIST, 
        'TRAVEL_TIME'				, TRAVEL_TIME
	)) 
    INTO OUT_SITE_LIST FROM ADMIN_RETRIEVE_SITE_REGISTERED_LISTS_TEMP_2;
    
	DROP TABLE IF EXISTS ADMIN_RETRIEVE_SITE_REGISTERED_LISTS_TEMP_2;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_sites_that_can_bid`(
	IN IN_DISPOSER_ORDER_ID					BIGINT,
    OUT rtn_val								INT,
    OUT msg_txt								VARCHAR(200),
    OUT json_data							JSON
)
BEGIN

/*
Procedure Name 	: sp_retrieve_sites_that_can_bid
Input param 	: 1개
Output param 	: 3개
Job 			: 투찰가능 수거업체 리스트 반환
Update 			: 2022.03.17
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT 					DEFAULT 0;
    DECLARE endOfRow 							TINYINT 				DEFAULT FALSE;    
    DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
    DECLARE CUR_COLLECTOR_SITE_NAME				VARCHAR(255);
    DECLARE CUR_COLLECTOR_BIDDING_ID			BIGINT;
    DECLARE CUR_TRMT_BIZ_NM						VARCHAR(50);
	DECLARE VAR_COLLECTOR_AVATAR_PATH			VARCHAR(255)			DEFAULT NULL;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.COLLECTOR_ID, 
        B.SITE_NAME, 
        A.ID,
        C.NAME
    FROM COLLECTOR_BIDDING A 
    LEFT JOIN COMP_SITE B ON A.COLLECTOR_ID = B.ID
    LEFT JOIN WSTE_TRMT_BIZ C ON B.TRMT_BIZ_CODE = C.CODE
    LEFT JOIN V_BIDDING_STATE_NAME D ON A.ID = D.COLLECTOR_BIDDING_ID
	WHERE 
		A.DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND
        (D.STATE_PID <> 211 AND D.STATE_CODE <> 211);
            
            
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_BIDDING_ABLED_SITE_LISTS (
		COLLECTOR_SITE_ID					BIGINT,
		COLLECTOR_SITE_NAME					VARCHAR(255),
		COLLECTOR_BIDDING_ID				BIGINT,
		COLLECTOR_TRMT_BIZ_NM				VARCHAR(50),
        COLLECTOR_AVATAR_PATH				VARCHAR(255)
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_COLLECTOR_SITE_ID,
			CUR_COLLECTOR_SITE_NAME,
			CUR_COLLECTOR_BIDDING_ID,    
			CUR_TRMT_BIZ_NM;   
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		TEMP_BIDDING_ABLED_SITE_LISTS(
			COLLECTOR_SITE_ID, 
			COLLECTOR_SITE_NAME, 
			COLLECTOR_BIDDING_ID,     
			COLLECTOR_TRMT_BIZ_NM
		)
		VALUES(
			CUR_COLLECTOR_SITE_ID, 
			CUR_COLLECTOR_SITE_NAME, 
			CUR_COLLECTOR_BIDDING_ID,     
			CUR_TRMT_BIZ_NM
		);
        
        SELECT A.AVATAR_PATH INTO VAR_COLLECTOR_AVATAR_PATH 
        FROM USERS A 
        LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID 
        WHERE 
			B.ID = CUR_COLLECTOR_SITE_ID AND 
            A.CLASS = 201;	
            
		UPDATE TEMP_BIDDING_ABLED_SITE_LISTS 
        SET COLLECTOR_AVATAR_PATH = VAR_COLLECTOR_AVATAR_PATH 
        WHERE COLLECTOR_SITE_ID = CUR_COLLECTOR_SITE_ID;        
		
	END LOOP;   
	CLOSE TEMP_CURSOR;
	
	SELECT JSON_ARRAYAGG(
		JSON_OBJECT(
			'COLLECTOR_SITE_ID'					, COLLECTOR_SITE_ID, 
            'COLLECTOR_SITE_NAME'				, COLLECTOR_SITE_NAME, 
            'COLLECTOR_BIDDING_ID'				, COLLECTOR_BIDDING_ID, 
            'COLLECTOR_TRMT_BIZ_NM'				, COLLECTOR_TRMT_BIZ_NM, 
            'COLLECTOR_AVATAR_PATH'				, COLLECTOR_AVATAR_PATH
		)
	) 
    INTO json_data 
    FROM TEMP_BIDDING_ABLED_SITE_LISTS;
    
    IF vRowCount = 0 THEN
		SET json_data 				= NULL;
		SET rtn_val 				= 34001;
		SET msg_txt 				= 'No data found';
    ELSE
		SET rtn_val 				= 0;
		SET msg_txt 				= 'Success';
    END IF;
	DROP TABLE IF EXISTS TEMP_BIDDING_ABLED_SITE_LISTS;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_retrieve_users`()
BEGIN

/*
Procedure Name 	: sp_retrieve_users
Job 			: 회원리스트 반환
Update 			: 2022.02.01
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/	  
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	  
    
	SELECT JSON_ARRAYAGG(JSON_OBJECT('ID', ID, 'USER_ID', USER_ID, 'USER_NAME', USER_NAME, 'PHONE', PHONE, 'ACTIVE', ACTIVE)) INTO json_data FROM USERS;    
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_return_results`(
	IN IN_RETURN_VALUE			INT,
    IN IN_TXT_MSG				VARCHAR(200),
    IN JSON_DATA				JSON
)
BEGIN
	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_TABLE (
		rtn_val				INT,
		msg_txt				VARCHAR(200),
		json_data			JSON
	);
	INSERT INTO TEMP_TABLE (rtn_val, msg_txt, json_data)
	VALUES (IN_RETURN_VALUE, IN_TXT_MSG, JSON_DATA);
	SELECT rtn_val, msg_txt, json_data FROM TEMP_TABLE;
	DROP TABLE IF EXISTS TEMP_TABLE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_return_results2`(
	IN IN_RETURN_VALUE			INT,
    IN IN_TXT_MSG				VARCHAR(200),
    IN JSON_DATA				JSON,
    IN JSON_DATA2				JSON
)
BEGIN
	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_TABLE2 (
		rtn_val				INT,
		msg_txt				VARCHAR(200),
		json_data			JSON,
		json_data2			JSON
	);
	INSERT INTO TEMP_TABLE2 (rtn_val, msg_txt, json_data, json_data2)
	VALUES (IN_RETURN_VALUE, IN_TXT_MSG, JSON_DATA, JSON_DATA2);
	SELECT rtn_val, msg_txt, json_data, json_data2 FROM TEMP_TABLE2;
	DROP TABLE IF EXISTS TEMP_TABLE2;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_return_results_test`(
	IN IN_RETURN_VALUE			INT,
    IN IN_TXT_MSG				VARCHAR(200),
    IN JSON_DATA				JSON
)
BEGIN
	DROP TABLE IF EXISTS TEMP_TABLE;
	CREATE TEMPORARY TABLE IF NOT EXISTS TEMP_TABLE (
		rtn_val				INT,
		msg_txt				VARCHAR(200),
		json_data			JSON
	);
	INSERT INTO TEMP_TABLE (rtn_val, msg_txt, json_data)
	VALUES (IN_RETURN_VALUE, IN_TXT_MSG, JSON_DATA);
	SELECT rtn_val, msg_txt, json_data FROM TEMP_TABLE;
	DROP TABLE IF EXISTS TEMP_TABLE;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_search_some_text_in_all_procedures`(
	IN IN_TEXT_TO_SEARCH	VARCHAR(100)
)
BEGIN
	SELECT
		  *
	FROM
		  INFORMATION_SCHEMA.ROUTINES
	WHERE
		  ROUTINE_DEFINITION LIKE CONCAT('%', IN_TEXT_TO_SEARCH,'%')
	ORDER BY ROUTINE_NAME;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_set_bidding_end_at`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
    IN IN_COLLECTOR_BIDDING_ID		BIGINT,
    IN IN_REG_DT					DATETIME,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN
	DECLARE VAR_PROSPECTIVE_BIDDERS				INT						DEFAULT 0;
	DECLARE VAR_BIDDING_ORDER_ID				BIGINT					DEFAULT NULL;
    
	SELECT PROSPECTIVE_BIDDERS INTO VAR_PROSPECTIVE_BIDDERS
	FROM SITE_WSTE_DISPOSAL_ORDER
	WHERE ID = IN_DISPOSER_ORDER_ID;
	IF VAR_PROSPECTIVE_BIDDERS = 1 THEN
		SELECT DISPOSAL_ORDER_ID INTO VAR_BIDDING_ORDER_ID
		FROM COLLECTOR_BIDDING
		WHERE ID = IN_COLLECTOR_BIDDING_ID;
		IF VAR_BIDDING_ORDER_ID = IN_DISPOSER_ORDER_ID THEN                
			UPDATE SITE_WSTE_DISPOSAL_ORDER
			SET 
				BIDDING_END_AT = IN_REG_DT,
                UPDATED_AT = IN_REG_DT
			WHERE ID = IN_DISPOSER_ORDER_ID;
			IF ROW_COUNT() = 1 THEN
				SET rtn_val = 0;
				SET msg_txt = 'success888';
			ELSE
				SET rtn_val = 39002;
				SET msg_txt = 'bidding failed to set bidding end date now';
			END IF;
		ELSE
			SET rtn_val = 39001;
			SET msg_txt = 'bidding does not belong to the order';
		END IF;
	ELSE
		SET rtn_val = 0;
		SET msg_txt = 'success999';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_set_bidding_schedule`(
	IN IN_REF_DATE					DATETIME,			/*입력값 : 입찰 스케줄을 계산할 기준날짜*/
	IN IN_BIDDING_END_AT			DATETIME,			/*입력값 : 입찰종료일자*/
	IN IN_MAX_BIDDING_DURATION		INT,				/*입력값 : 입찰최대기간*/
	IN IN_OPEN_AT					DATETIME,			/*입력값 : 배출시작일자*/
	IN IN_CLOSE_AT					DATETIME,			/*입력값 : 배출종료일자*/
    OUT OUT_OPEN_AT					DATETIME,			/*출력값 : 변경배출시작일*/
    OUT OUT_CLOSE_AT				DATETIME,			/*출력값 : 변경배출종료일*/
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_set_bidding_schedule
Input param 	: 5개
Output param 	: 4개
Job 			: 입찰에 필요한 일정을 조정 또는 변경한다.
Update 			: 2022.02.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_MAX_BIDDING_END_TARGET_DATE		DATETIME				DEFAULT NULL;
	DECLARE MAX_DURATION_TO_DISPOSAL_OPEN_AT	VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_MAX_OPEN_AT						DATETIME				DEFAULT NULL;
	DECLARE MAX_DURATION_TO_DISPOSAL_CLOSE_AT	VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_MAX_CLOSE_AT					DATETIME				DEFAULT NULL;
    
	SET VAR_MAX_BIDDING_END_TARGET_DATE = DATE_ADD(IN_REF_DATE, INTERVAL IN_MAX_BIDDING_DURATION DAY);
	IF IN_BIDDING_END_AT <= VAR_MAX_BIDDING_END_TARGET_DATE THEN
	/*입찰종료일이 정책적으로 결정된 기간 이내인 경우에는 정상처리한다.*/
		IF IN_CLOSE_AT IS NOT NULL THEN
		/*배출종료일이 결정된 경우*/
			IF IN_CLOSE_AT >= IN_BIDDING_END_AT THEN
			/*배출종료일이 정책적으로 결정된 기간 이후인 경우 정상처리한다.*/
				IF IN_OPEN_AT < IN_BIDDING_END_AT THEN
				/*폐기물 배출시작일이 입찰마감일 이전인 경우에는 입찰마감일을 배출시작일로 한다.*/
					SET OUT_OPEN_AT = IN_BIDDING_END_AT;
				ELSE
					CALL sp_req_policy_direction(
						'max_duration_to_disposal_open_at',
						MAX_DURATION_TO_DISPOSAL_OPEN_AT
					);
					SET VAR_MAX_OPEN_AT = DATE_ADD(IN_BIDDING_END_AT, INTERVAL CAST(MAX_DURATION_TO_DISPOSAL_OPEN_AT AS UNSIGNED) DAY);
					IF IN_OPEN_AT >= VAR_MAX_OPEN_AT THEN
					/*정책이 정하는 기간 이후을 폐기물 배출 시작일로 정한 경우에는 정책최대일로 변경한다.*/
						SET OUT_OPEN_AT = VAR_MAX_OPEN_AT;
					ELSE
						SET OUT_OPEN_AT = IN_OPEN_AT;
					END IF;
				END IF;
				
				CALL sp_req_policy_direction(
					'max_duration_to_disposal_close_at',
					MAX_DURATION_TO_DISPOSAL_CLOSE_AT
				);
				SET VAR_MAX_CLOSE_AT = DATE_ADD(OUT_OPEN_AT, INTERVAL CAST(MAX_DURATION_TO_DISPOSAL_CLOSE_AT AS UNSIGNED) DAY);
				
				IF IN_CLOSE_AT IS NULL THEN
					SET OUT_CLOSE_AT = VAR_MAX_CLOSE_AT;
				ELSE
					IF IN_CLOSE_AT >= VAR_MAX_CLOSE_AT THEN
					/*정책이 정하는 기간 이후을 폐기물 배출 시작일로 정한 경우에는 정책최대일로 변경한다.*/
						SET OUT_CLOSE_AT = VAR_MAX_CLOSE_AT;
					ELSE
						SET OUT_CLOSE_AT = IN_CLOSE_AT;
					END IF;
				END IF;
				SET rtn_val = 0;
				SET msg_txt = 'Success';
			ELSE
			/*배출종료일이 정책적으로 결정된 기간 이내인 경우에는 예외처리한다.*/
				SET rtn_val = 30801;
				SET msg_txt = CONCAT('The emission end date cannot be earlier than the bidding deadline');
			END IF;
		ELSE
		/*배출종료일이 결정되지 않은 경우*/
			/*SET OUT_CLOSE_AT = @MIN_DISPOSAL_START_DATE;
			SET rtn_val = 0;
			SET msg_txt = 'Success';  */ 
			SET rtn_val = 30803;
			SET msg_txt = 'The discharge end date is mandatory';                                      
		END IF;
	ELSE
	/*입찰종료일이 정책적으로 결정된 기간 이후인 경우에는 예외처리한다.*/
		SET rtn_val = 30802;
		SET msg_txt = CONCAT('The bidding end date must be within ', IN_MAX_BIDDING_DURATION, ' days from the bidding start date:', IN_BIDDING_END_AT, ', ', VAR_MAX_BIDDING_END_TARGET_DATE);
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_set_check_state`(
	IN IN_ORDER_ID			BIGINT,
    IN IN_BIDDING_ID		BIGINT,
    IN IN_TRANSACTION_ID	BIGINT,
    IN IN_USER_ID			BIGINT,
    IN IN_USER_SITE_ID		BIGINT,
    IN IN_USER_TYPE			INT,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN
	DECLARE VAR_TRANSACTION_STATE				INT						DEFAULT NULL;	
	DECLARE VAR_CHECK_EXISTS					INT						DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;
	DECLARE VAR_ORDER_STATE						INT						DEFAULT NULL;	
	DECLARE VAR_BIDDING_STATE					INT						DEFAULT NULL;		
    
	SELECT TRANSACTION_STATE_CODE INTO VAR_TRANSACTION_STATE
	FROM V_TRANSACTION_STATE
	WHERE DISPOSAL_ORDER_ID = IN_ORDER_ID;   
	
    SELECT COUNT(ID) INTO VAR_CHECK_EXISTS
    FROM STATE_CONTROLLER
    WHERE
		IF(IN_USER_SITE_ID = 0,
			USER_ID = IN_USER_ID,
            SITE_ID = IN_USER_SITE_ID
        ) AND
        ORDER_ID = IN_ORDER_ID AND
        TRANSACTION_STATE = VAR_TRANSACTION_STATE AND
		USER_TYPE = IN_USER_TYPE;     
	
    IF VAR_CHECK_EXISTS = 0 THEN    
		CALL sp_req_current_time(VAR_REG_DT);
        
        SELECT STATE_CODE INTO VAR_ORDER_STATE
        FROM V_ORDER_STATE
        WHERE DISPOSER_ORDER_ID = IN_ORDER_ID;
        
        SELECT STATE_CODE INTO VAR_BIDDING_STATE
        FROM V_BIDDING_STATE
        WHERE 
			DISPOER_ORDER_ID = IN_ORDER_ID AND
            COLLECTOR_ID = IN_USER_SITE_ID;		
        
		INSERT INTO STATE_CONTROLLER(
			USER_ID,
			USER_TYPE,
			SITE_ID,
			ORDER_ID,
			ORDER_STATE,
			BIDDING_STATE,
			TRANSACTION_STATE,
			CREATED_AT
        ) VALUES(
			IN_USER_ID,
            IN_USER_TYPE,
            IN_USER_SITE_ID,
            IN_ORDER_ID,
            VAR_ORDER_STATE,
            VAR_BIDDING_STATE,
            VAR_TRANSACTION_STATE,
            VAR_REG_DT
        );
        IF ROW_COUNT() = 1 THEN
			SET rtn_val = 0;
			SET msg_txt = 'success1';
        ELSE
			SET rtn_val = 39801;
			SET msg_txt = 'failed to insert record';
        END IF;
		SET rtn_val = 0;
        SET msg_txt = 'success2';
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success3';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_set_check_state_2`(
	IN IN_ORDER_ID			BIGINT,
    IN IN_TRANSACTION_ID	BIGINT,
    IN IN_USER_ID			BIGINT,
    IN IN_USER_SITE_ID		BIGINT,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN

/*
Procedure Name 	: sp_set_check_state_2
Input param 	: 2개
Job 			: ...
Update 			: 2022.05.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_ORDER_STATE						INT						DEFAULT NULL; 
	DECLARE VAR_TRANSACTION_STATE				INT						DEFAULT NULL;	
	DECLARE VAR_CHECK_EXISTS					INT						DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	
    
	SELECT STATE_CODE INTO VAR_ORDER_STATE
	FROM V_ORDER_STATE
	WHERE DISPOSER_ORDER_ID = IN_ORDER_ID;  
    
	SELECT TRANSACTION_STATE_CODE INTO VAR_TRANSACTION_STATE
	FROM V_TRANSACTION_STATE
	WHERE DISPOSAL_ORDER_ID = IN_ORDER_ID;   
	
	SELECT COUNT(ID) INTO VAR_CHECK_EXISTS
	FROM STATE_CONTROLLER
	WHERE
		IF(IN_USER_SITE_ID = 0,
			USER_ID = IN_USER_ID,
			SITE_ID = IN_USER_SITE_ID
		) AND
		ORDER_ID = IN_ORDER_ID AND
		ORDER_STATE = VAR_ORDER_STATE;   
	
    IF VAR_CHECK_EXISTS = 0 THEN    
		CALL sp_req_current_time(VAR_REG_DT);
        
		INSERT INTO STATE_CONTROLLER(
			USER_ID,
			USER_TYPE,
			SITE_ID,
			ORDER_ID,
			ORDER_STATE,
			BIDDING_STATE,
			TRANSACTION_STATE,
			CREATED_AT
        ) VALUES(
			IN_USER_ID,
            2,
            IN_USER_SITE_ID,
            IN_ORDER_ID,
            VAR_ORDER_STATE,
            NULL,
            VAR_TRANSACTION_STATE,
            VAR_REG_DT
        );
        IF ROW_COUNT() = 1 THEN
			SET rtn_val = 0;
			SET msg_txt = 'success1';
        ELSE
			SET rtn_val = 40001;
			SET msg_txt = 'failed to insert record';
        END IF;
		SET rtn_val = 0;
        SET msg_txt = 'success2';
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success3';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_set_check_state_3`(
	IN IN_ORDER_ID			BIGINT,
    IN IN_BIDDING_ID		BIGINT,
    IN IN_TRANSACTION_ID	BIGINT,
    IN IN_USER_ID			BIGINT,
    IN IN_USER_SITE_ID		BIGINT,
    IN IN_USER_TYPE			INT,
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200)
)
BEGIN /*bidding용 상태체크*/	
	DECLARE VAR_TRANSACTION_STATE				INT						DEFAULT NULL;	
	DECLARE VAR_CHECK_EXISTS					INT						DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;
	DECLARE VAR_ORDER_STATE						INT						DEFAULT NULL;	
	DECLARE VAR_BIDDING_STATE					INT						DEFAULT NULL;		
    
	SELECT STATE_CODE INTO VAR_BIDDING_STATE
	FROM V_BIDDING_STATE
	WHERE COLLECTOR_BIDDING_ID = IN_BIDDING_ID;   
	
    SELECT COUNT(ID) INTO VAR_CHECK_EXISTS
    FROM STATE_CONTROLLER
    WHERE
		IF(IN_USER_SITE_ID = 0,
			USER_ID = IN_USER_ID,
            SITE_ID = IN_USER_SITE_ID
        ) AND
        ORDER_ID = IN_ORDER_ID AND
        BIDDING_STATE = VAR_BIDDING_STATE AND
		USER_TYPE = IN_USER_TYPE;     
	
    IF VAR_CHECK_EXISTS = 0 THEN    
		CALL sp_req_current_time(VAR_REG_DT);
        
        SELECT STATE_CODE INTO VAR_ORDER_STATE
        FROM V_ORDER_STATE
        WHERE DISPOSER_ORDER_ID = IN_ORDER_ID;
        
		INSERT INTO STATE_CONTROLLER(
			USER_ID,
			USER_TYPE,
			SITE_ID,
			ORDER_ID,
			ORDER_STATE,
			BIDDING_STATE,
			TRANSACTION_STATE,
			CREATED_AT
        ) VALUES(
			IN_USER_ID,
            IN_USER_TYPE,
            IN_USER_SITE_ID,
            IN_ORDER_ID,
            VAR_ORDER_STATE,
            VAR_BIDDING_STATE,
            VAR_TRANSACTION_STATE,
            VAR_REG_DT
        );
        IF ROW_COUNT() = 1 THEN
			SET rtn_val = 0;
			SET msg_txt = 'success1';
        ELSE
			SET rtn_val = 40401;
			SET msg_txt = 'failed to insert record';
        END IF;
		SET rtn_val = 0;
        SET msg_txt = 'success2';
    ELSE
		SET rtn_val = 0;
        SET msg_txt = 'success3';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_set_display_time`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
	IN IN_STATE_CATEGORY_ID			INT,
    OUT OUT_DISPLAY_TIME			DATETIME
)
BEGIN
	SELECT 
	CASE
		WHEN IN_STATE_CATEGORY_ID = 2
			THEN (
				SELECT 
					IF(VISIT_START_AT IS NOT NULL, 
						IF(VISIT_START_AT <= NOW(), 
							VISIT_END_AT, 
							VISIT_START_AT
						),
						VISIT_END_AT
					) 
				FROM SITE_WSTE_DISPOSAL_ORDER 
				WHERE ID = IN_DISPOSER_ORDER_ID
			)
		WHEN IN_STATE_CATEGORY_ID = 3
			THEN (
				SELECT BIDDING_END_AT
				FROM SITE_WSTE_DISPOSAL_ORDER 
				WHERE ID = IN_DISPOSER_ORDER_ID
			)
		WHEN IN_STATE_CATEGORY_ID = 4
			THEN (
				SELECT MAX_SELECT_AT FROM SITE_WSTE_DISPOSAL_ORDER 
				WHERE ID = IN_DISPOSER_ORDER_ID
			)
		WHEN IN_STATE_CATEGORY_ID = 5
			THEN (
				SELECT 
					IF(COLLECTOR_SELECTION_CONFIRMED IS NOT NULL,
						IF(COLLECTOR_SELECTION_CONFIRMED = TRUE,
							UPDATED_AT,
							IF(BIDDERS > 1,
								IF(COLLECTOR_SELECTION_CONFIRMED2 IS NOT NULL,
									UPDATED_AT,
									COLLECTOR_MAX_DECISION2_AT
								),
								UPDATED_AT
							)
						),
						IF(COLLECTOR_MAX_DECISION_AT <= NOW(),
							IF(BIDDERS > 1,
								IF(COLLECTOR_SELECTION_CONFIRMED2 IS NOT NULL,
									UPDATED_AT,
									COLLECTOR_MAX_DECISION2_AT
								),
								UPDATED_AT
							),
							COLLECTOR_MAX_DECISION_AT
						)
					)
				FROM SITE_WSTE_DISPOSAL_ORDER 
				WHERE ID = IN_DISPOSER_ORDER_ID
			)
		WHEN IN_STATE_CATEGORY_ID = 6
			THEN (
				SELECT 
					IF(A.COLLECT_ASK_END_AT <= NOW(), 
						B.CLOSE_AT,
						A.COLLECT_ASK_END_AT
					) 
				FROM WSTE_CLCT_TRMT_TRANSACTION A 
                LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
				WHERE 
					A.DISPOSAL_ORDER_ID = IN_DISPOSER_ORDER_ID AND
					A.IN_PROGRESS = TRUE
			)
		WHEN IN_STATE_CATEGORY_ID = 7
			THEN (
				SELECT CLOSE_AT
				FROM SITE_WSTE_DISPOSAL_ORDER 
				WHERE ID = IN_DISPOSER_ORDER_ID
			)
		ELSE NULL
	END INTO OUT_DISPLAY_TIME;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_set_display_time_for_collector`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
	IN IN_COLLECTOR_BIDDING_ID		BIGINT,
	IN IN_COLLECTOR_CATEGORY_ID		INT,
    OUT OUT_DISPLAY_TIME			DATETIME
)
BEGIN
	SELECT 
	CASE
		WHEN IN_COLLECTOR_CATEGORY_ID = 1
			THEN (
				SELECT A.VISIT_END_AT
				FROM SITE_WSTE_DISPOSAL_ORDER A
                LEFT JOIN COLLECTOR_BIDDING B ON A.ID = B.DISPOSAL_ORDER_ID
				WHERE 
					A.ID = IN_DISPOSER_ORDER_ID AND
                    B.ID = IN_COLLECTOR_BIDDING_ID
			)
		WHEN IN_COLLECTOR_CATEGORY_ID = 2
			THEN (
				SELECT A.VISIT_END_AT
				FROM SITE_WSTE_DISPOSAL_ORDER A
                LEFT JOIN COLLECTOR_BIDDING B ON A.ID = B.DISPOSAL_ORDER_ID
				WHERE 
					A.ID = IN_DISPOSER_ORDER_ID AND
                    B.ID = IN_COLLECTOR_BIDDING_ID
			)
		WHEN IN_COLLECTOR_CATEGORY_ID = 3
			THEN (
				SELECT A.BIDDING_END_AT
				FROM SITE_WSTE_DISPOSAL_ORDER A
                LEFT JOIN COLLECTOR_BIDDING B ON A.ID = B.DISPOSAL_ORDER_ID
				WHERE 
					A.ID = IN_DISPOSER_ORDER_ID AND
                    B.ID = IN_COLLECTOR_BIDDING_ID
			)
		WHEN IN_COLLECTOR_CATEGORY_ID = 4
			THEN (
				SELECT A.BIDDING_END_AT
				FROM SITE_WSTE_DISPOSAL_ORDER A
                LEFT JOIN COLLECTOR_BIDDING B ON A.ID = B.DISPOSAL_ORDER_ID
				WHERE 
					A.ID = IN_DISPOSER_ORDER_ID AND
                    B.ID = IN_COLLECTOR_BIDDING_ID
			)
		WHEN IN_COLLECTOR_CATEGORY_ID = 5
			THEN (
				SELECT IF(B.BIDDING_RANK = 1, 
					A.COLLECTOR_MAX_DECISION_AT,
                    IF(A.COLLECTOR_SELECTION_CONFIRMED IS NOT NULL,
						IF(A.COLLECTOR_SELECTION_CONFIRMED = TRUE,
							A.COLLECTOR_SELECTION_CONFIRMED_AT,
                            A.COLLECTOR_MAX_DECISION2_AT
                        ),
						IF(A.COLLECTOR_MAX_DECISION_AT <= NOW(),
							A.COLLECTOR_MAX_DECISION2_AT,
                            A.COLLECTOR_MAX_DECISION_AT
                        )
					)
                )
				FROM SITE_WSTE_DISPOSAL_ORDER A
                LEFT JOIN COLLECTOR_BIDDING B ON A.ID = B.DISPOSAL_ORDER_ID
				WHERE 
					A.ID = IN_DISPOSER_ORDER_ID AND
                    B.ID = IN_COLLECTOR_BIDDING_ID
			)
		WHEN IN_COLLECTOR_CATEGORY_ID = 6
			THEN (
				SELECT IF(B.BIDDING_RANK = 1, 
					A.COLLECTOR_MAX_DECISION_AT,
                    IF(A.COLLECTOR_SELECTION_CONFIRMED IS NOT NULL,
						IF(A.COLLECTOR_SELECTION_CONFIRMED = TRUE,
							A.COLLECTOR_SELECTION_CONFIRMED_AT,
                            A.COLLECTOR_MAX_DECISION2_AT
                        ),
						IF(A.COLLECTOR_MAX_DECISION_AT <= NOW(),
							A.COLLECTOR_MAX_DECISION2_AT,
                            A.COLLECTOR_MAX_DECISION_AT
                        )
					)
                )
				FROM SITE_WSTE_DISPOSAL_ORDER A
                LEFT JOIN COLLECTOR_BIDDING B ON A.ID = B.DISPOSAL_ORDER_ID
				WHERE 
					A.ID = IN_DISPOSER_ORDER_ID AND
                    B.ID = IN_COLLECTOR_BIDDING_ID
			)
		WHEN IN_COLLECTOR_CATEGORY_ID = 7
			THEN (
				SELECT 
					IF(A.COLLECTOR_ID IS NOT NULL,
                        C.COLLECT_ASK_END_AT,
						A.CLOSE_AT
                    )
				FROM SITE_WSTE_DISPOSAL_ORDER A
				LEFT JOIN COLLECTOR_BIDDING B ON A.ID = B.DISPOSAL_ORDER_ID
				LEFT JOIN WSTE_CLCT_TRMT_TRANSACTION C ON A.COLLECTOR_ID = C.COLLECTOR_SITE_ID
				WHERE 
					IF(A.COLLECTOR_ID IS NOT NULL,
						A.ID = IN_DISPOSER_ORDER_ID,
						A.ID = IN_DISPOSER_ORDER_ID AND B.ID = IN_COLLECTOR_BIDDING_ID
                    )
			)
		ELSE NULL
	END INTO OUT_DISPLAY_TIME;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_set_display_time_for_transaction`(
	IN IN_TRANSACTION_ID			BIGINT,
	IN IN_STATE_CODE				INT,
    OUT OUT_DISPLAY_TIME			DATETIME
)
BEGIN
	SELECT 
	CASE
		WHEN IN_STATE_CODE = 201
			THEN (
				SELECT VISIT_END_AT
				FROM WSTE_CLCT_TRMT_TRANSACTION
				WHERE ID = IN_TRANSACTION_ID
			)
		WHEN IN_STATE_CODE = 217
			THEN (
				SELECT VISIT_END_AT
				FROM WSTE_CLCT_TRMT_TRANSACTION
				WHERE ID = IN_TRANSACTION_ID
			)
		WHEN IN_STATE_CODE = 221
			THEN (
				SELECT COLLECT_ASK_END_AT
				FROM WSTE_CLCT_TRMT_TRANSACTION
				WHERE ID = IN_TRANSACTION_ID
			)
		WHEN IN_STATE_CODE = 247
			THEN (
				SELECT COLLECTOR_REPORTED_AT
				FROM WSTE_CLCT_TRMT_TRANSACTION
				WHERE ID = IN_TRANSACTION_ID
			)
		WHEN IN_STATE_CODE = 248
			THEN (
				SELECT CONFIRMED_AT
				FROM WSTE_CLCT_TRMT_TRANSACTION
				WHERE ID = IN_TRANSACTION_ID
			)
		WHEN IN_STATE_CODE = 246
			THEN (
				SELECT CONFIRMED_AT
				FROM WSTE_CLCT_TRMT_TRANSACTION
				WHERE ID = IN_TRANSACTION_ID
			)
		WHEN IN_STATE_CODE = 250
			THEN (
				SELECT MAX_DECISION_AT
				FROM WSTE_CLCT_TRMT_TRANSACTION
				WHERE ID = IN_TRANSACTION_ID
			)
		WHEN IN_STATE_CODE = 251
			THEN (
				SELECT ACCEPT_ASK_END_AT
				FROM WSTE_CLCT_TRMT_TRANSACTION
				WHERE ID = IN_TRANSACTION_ID
			)
		WHEN IN_STATE_CODE = 252
			THEN (
				SELECT MAX_DECISION_AT
				FROM WSTE_CLCT_TRMT_TRANSACTION
				WHERE ID = IN_TRANSACTION_ID
			)
		ELSE
			(
				SELECT UPDATED_AT
				FROM WSTE_CLCT_TRMT_TRANSACTION
				WHERE ID = IN_TRANSACTION_ID
			)
	END INTO OUT_DISPLAY_TIME;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_set_invisible_bidding`(
	IN IN_USER_ID					BIGINT,
	IN IN_COLLECTOR_BIDDING_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_set_invisible_bidding
Input param 	: 2개
Job 			: 수거자가 자신의 bidding을 화면에서 보이지 않도록 처리한다.
Update 			: 2022.04.04
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	
	DECLARE VAR_BIDDING_EXISTS					INT						DEFAULT NULL;	
	DECLARE VAR_COLLECTOR_SITE_ID				BIGINT					DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;		  

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/	
		SELECT COUNT(ID) INTO VAR_BIDDING_EXISTS
        FROM COLLECTOR_BIDDING
        WHERE ID = IN_COLLECTOR_BIDDING_ID;
        IF VAR_BIDDING_EXISTS = 1 THEN
        /*투찰한 내역이 존재하는 경우 정상처리한다.*/
			SELECT A.COLLECTOR_ID
            INTO VAR_COLLECTOR_SITE_ID
			FROM COLLECTOR_BIDDING
			WHERE ID = IN_COLLECTOR_BIDDING_ID;
            
            SELECT AFFILIATED_SITE, CLASS INTO VAR_USER_SITE_ID, VAR_USER_CLASS
            FROM USERS
            WHERE ID = IN_USER_ID;
            IF VAR_COLLECTOR_SITE_ID = VAR_USER_SITE_ID THEN
            /*사용자가 수거자 소속인 경우에는 정상처리한다.*/
				IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
                /*사용자에게 권한이 있는 경우 정상처리한다.*/
					UPDATE COLLECTOR_BIDDING
					SET 
						BIDDING_VISIBLE = FALSE,
						BIDDING_VISIBLE_CHANGED_AT = VAR_REG_DT,
						UPDATED_AT = VAR_REG_DT
					WHERE ID = IN_COLLECTOR_BIDDING_ID;
                ELSE
                /*사용자에게 권한이 없는 경우 예외처리한다.*/
					SET rtn_val = 36203;
					SET msg_txt = 'users are not authorized';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사용자가 수거자 소속이 아닌 경우에는 예외처리한다.*/
				SET rtn_val = 36202;
				SET msg_txt = 'user does not belong to the collector';
				SIGNAL SQLSTATE '23000';
            END IF;
        ELSE
        /*투찰한 내역이 존재하지 않는 경우 예외처리한다.*/
			SET rtn_val = 36201;
			SET msg_txt = 'No bidding history';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_set_invisible_order`(
	IN IN_USER_ID					BIGINT,
	IN IN_COLLECTOR_BIDDING_ID		BIGINT
)
BEGIN

/*
Procedure Name 	: sp_set_visible_order
Input param 	: 3개
Job 			: 배출자가 삭제처리한 오더에 대하여 수거자가 자신의 화면에 나타나지 않게 한다. 수거자(사업자, 개인은 안됨)에게만 가능한 서비스임
Update 			: 2022.04.04
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;
	DECLARE VAR_BIDDING_EXISTS					INT						DEFAULT NULL;	
	DECLARE VAR_COLLECTOR_SITE_ID				BIGINT					DEFAULT NULL;	
	DECLARE VAR_DISPOSER_ORDER_ID				BIGINT					DEFAULT NULL;		
	DECLARE VAR_ORDER_DELETED					TINYINT					DEFAULT NULL;		
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;			
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;			
	DECLARE VAR_BIDDING_STATE_CODE				INT						DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_req_current_time(VAR_REG_DT);
    
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/	
		SELECT COUNT(ID) INTO VAR_BIDDING_EXISTS
        FROM COLLECTOR_BIDDING
        WHERE ID = IN_COLLECTOR_BIDDING_ID;
        IF VAR_BIDDING_EXISTS = 1 THEN
        /*투찰한 내역이 존재하는 경우 정상처리한다.*/
			SELECT A.COLLECTOR_ID, A.DISPOSAL_ORDER_ID, B.IS_DELETED
            INTO VAR_COLLECTOR_SITE_ID, VAR_DISPOSER_ORDER_ID, VAR_ORDER_DELETED
			FROM COLLECTOR_BIDDING A 
            LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSAL_ORDER_ID = B.ID
			WHERE A.ID = IN_COLLECTOR_BIDDING_ID;
            
            SELECT AFFILIATED_SITE, CLASS INTO VAR_USER_SITE_ID, VAR_USER_CLASS
            FROM USERS
            WHERE ID = IN_USER_ID;
            IF VAR_COLLECTOR_SITE_ID = VAR_USER_SITE_ID THEN
            /*사용자가 수거자 소속인 경우에는 정상처리한다.*/
				IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
                /*사용자에게 권한이 있는 경우 정상처리한다.*/
					IF VAR_ORDER_DELETED = TRUE THEN
                    /*배출자가 자신의 오더를 삭제한 경우 정상처리한다.*/
						UPDATE COLLECTOR_BIDDING
						SET 
							ORDER_VISIBLE = FALSE,
							ORDER_VISIBLE_CHANGED_AT = VAR_REG_DT,
							UPDATED_AT = VAR_REG_DT
						WHERE ID = IN_COLLECTOR_BIDDING_ID;
                        IF ROW_COUNT() = 1 THEN
                        /*데이타베이스에 성공적으로 반영된 경우에는 정상처리한다.*/
							SET rtn_val = 0;
							SET msg_txt = 'success';
                        ELSE
                        /*데이타베이스에 성공적으로 반영되지 않은 경우에는 예외처리한다.*/
							SET rtn_val = 36106;
							SET msg_txt = 'update not applied to the database';
							SIGNAL SQLSTATE '23000';
                        END IF;
                    ELSE
                    /*배출자가 자신의 오더를 삭제하지 않은 경우 예외처리한다.*/
						SELECT STATE_CODE INTO VAR_BIDDING_STATE_CODE
                        FROM V_BIDDING_STATE
                        WHERE COLLECTOR_BIDDING_ID = IN_COLLECTOR_BIDDING_ID;
                        IF VAR_BIDDING_STATE_CODE IN (203, 213, 214, 230, 231, 232) THEN
                        /*현재 상태가 나열된 상태에 포함된 경우에는 정상처리한다.*/
							UPDATE COLLECTOR_BIDDING
							SET 
								ORDER_VISIBLE = FALSE,
								ORDER_VISIBLE_CHANGED_AT = VAR_REG_DT,
								UPDATED_AT = VAR_REG_DT
							WHERE ID = IN_COLLECTOR_BIDDING_ID;
							IF ROW_COUNT() = 1 THEN
							/*데이타베이스에 성공적으로 반영된 경우에는 정상처리한다.*/
								SET rtn_val = 0;
								SET msg_txt = 'success';
							ELSE
							/*데이타베이스에 성공적으로 반영되지 않은 경우에는 예외처리한다.*/
								SET rtn_val = 36105;
								SET msg_txt = 'update not applied to the database';
								SIGNAL SQLSTATE '23000';
							END IF;
                        ELSE
                        /*현재 상태가 나열된 상태에 포함되지 않은 경우에는 예외처리한다.*/
							SET rtn_val = 36104;
							SET msg_txt = 'bidding can not be invisible';
							SIGNAL SQLSTATE '23000';
                        END IF;
                    END IF;
                ELSE
                /*사용자에게 권한이 없는 경우 예외처리한다.*/
					SET rtn_val = 36103;
					SET msg_txt = 'users are not authorized';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
            /*사용자가 수거자 소속이 아닌 경우에는 예외처리한다.*/
				SET rtn_val = 36102;
				SET msg_txt = 'user does not belong to the collector';
				SIGNAL SQLSTATE '23000';
            END IF;
        ELSE
        /*투찰한 내역이 존재하지 않는 경우 예외처리한다.*/
			SET rtn_val = 36101;
			SET msg_txt = 'No bidding history';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_set_site_undeleted`(
	IN IN_REPORT_ID					BIGINT
)
BEGIN
	DECLARE VAR_USER_ID							BIGINT					DEFAULT NULL;
	DECLARE VAR_SITE_ID							BIGINT					DEFAULT NULL;
    DECLARE VAR_ORDER_ID						BIGINT					DEFAULT NULL;
    DECLARE VAR_TARGET_ID						BIGINT					DEFAULT NULL;
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	
    
    CALL sp_req_current_time(VAR_REG_DT);
    
    SELECT DISPOSER_ORDER_ID, DISPOSER_SITE_ID, COLLECTOR_SITE_ID, DISPOSER_MANAGER_ID
    INTO VAR_ORDER_ID, VAR_SITE_ID, VAR_TARGET_ID, VAR_USER_ID
    FROM TRANSACTION_REPORT
    WHERE ID = IN_REPORT_ID;
    
    UPDATE REGISTERED_SITE
    SET 
		ACTIVE = FALSE,
        UPDATED_AT = VAR_REG_DT
    WHERE
		USER_ID = VAR_USER_ID AND
        SITE_ID = VAR_SITE_ID AND
        TARGET_ID = VAR_TARGET_ID AND
        ACTIVE = TRUE AND
        REGISTER_TYPE = 2;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_setup_first_place_schedule`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
	IN IN_REG_DT					DATETIME,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN
	DECLARE MAX_SELECTION_DURATION				VARCHAR(255)			DEFAULT NULL;	
	DECLARE VAR_MAX_SELECT_AT					DATETIME				DEFAULT NULL;	
	DECLARE VAR_MAX_DECISION_AT					DATETIME				DEFAULT NULL;
	DECLARE VAR_MAX_SELECT2_AT					DATETIME				DEFAULT NULL;
	DECLARE VAR_MAX_DECISION2_AT				DATETIME				DEFAULT NULL;
	DECLARE VAR_FIRST_PLACE						BIGINT					DEFAULT NULL;	
	DECLARE VAR_SECOND_PLACE					BIGINT					DEFAULT NULL;		
    
	CALL sp_req_policy_direction(
	/*수거자가 배출자의 최종입찰선정에 응답을 할 수 있는 최대의 시간으로서 배출자의 최종낙찰자선정일로부터의 기간을 반환받는다(단위:시간)*/
		'max_selection_duration',
		MAX_SELECTION_DURATION
	);
	SET VAR_MAX_SELECT_AT = IN_REG_DT;
	SET VAR_MAX_DECISION_AT = ADDTIME(
							IN_REG_DT, 
							CONCAT(
								CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
								':00:00'
							)
						);
						
	SET VAR_MAX_SELECT2_AT = ADDTIME(
							VAR_MAX_DECISION_AT, 
							CONCAT(
								CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
								':00:00'
							)
						);
						
	SET VAR_MAX_DECISION2_AT = ADDTIME(
							VAR_MAX_DECISION_AT, 
							CONCAT(
								CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
								':00:00'
							)
						);
	
	UPDATE SITE_WSTE_DISPOSAL_ORDER
	SET 
		MAX_SELECT_AT				= VAR_MAX_SELECT_AT,
		MAX_SELECT2_AT				= VAR_MAX_SELECT2_AT,
		COLLECTOR_MAX_DECISION_AT 	= VAR_MAX_DECISION_AT,  
		COLLECTOR_MAX_DECISION2_AT 	= VAR_MAX_DECISION2_AT ,
		UPDATED_AT 		= IN_REG_DT
	WHERE ID 			= IN_DISPOSER_ORDER_ID;
    
    IF ROW_COUNT() = 1 THEN
		SELECT FIRST_PLACE, SECOND_PLACE INTO VAR_FIRST_PLACE, VAR_SECOND_PLACE
		FROM SITE_WSTE_DISPOSAL_ORDER
		WHERE ID = IN_DISPOSER_ORDER_ID;
		
		IF VAR_FIRST_PLACE IS NOT NULL THEN
			UPDATE COLLECTOR_BIDDING 
			SET MAX_DECISION_AT = VAR_MAX_DECISION_AT
			WHERE ID = VAR_FIRST_PLACE;
            IF ROW_COUNT() = 1 THEN
				IF VAR_SECOND_PLACE IS NOT NULL THEN
					UPDATE COLLECTOR_BIDDING 
					SET MAX_DECISION_AT = VAR_MAX_DECISION2_AT
					WHERE ID = VAR_SECOND_PLACE;
					IF ROW_COUNT() = 1 THEN
						SET rtn_val 		= 0;
						SET msg_txt 		= 'success-sp_setup_first_place_schedule-1';
					ELSE
						SET rtn_val 		= 35703;
						SET msg_txt 		= 'second place record update failed';
					END IF;
				ELSE
					SET rtn_val 		= 0;
					SET msg_txt 		= 'success-sp_setup_first_place_schedule-2';
				END IF;
            ELSE
				SET rtn_val 		= 35702;
				SET msg_txt 		= 'first place record update failed';
            END IF;
		ELSE
			SET rtn_val 		= 0;
			SET msg_txt 		= 'success-sp_setup_first_place_schedule-3';
		END IF;		
    ELSE
		SET rtn_val 		= 35701;
		SET msg_txt 		= 'emitter record update failed';
    END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_setup_second_place_schedule`(
	IN IN_DISPOSER_ORDER_ID			BIGINT,
	IN IN_REG_DT					DATETIME,
    OUT rtn_val						INT,
    OUT msg_txt						VARCHAR(200)
)
BEGIN
	DECLARE VAR_COLLECTOR_MAX_DECISION_AT		VARCHAR(255)			DEFAULT NULL;	
	DECLARE MAX_SELECTION_DURATION				VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_MAX_SELECT2_AT					DATETIME				DEFAULT NULL;	
	DECLARE VAR_MAX_DECISION2_AT				DATETIME				DEFAULT NULL;
	DECLARE VAR_SECOND_PLACE					BIGINT					DEFAULT NULL;	
    
	SELECT COLLECTOR_MAX_DECISION_AT 
	INTO VAR_COLLECTOR_MAX_DECISION_AT
	FROM SITE_WSTE_DISPOSAL_ORDER
	WHERE ID = IN_DISPOSER_ORDER_ID;
	
	IF VAR_COLLECTOR_MAX_DECISION_AT <= NOW() THEN
		CALL sp_req_policy_direction(
		/*수거자가 배출자의 최종입찰선정에 응답을 할 수 있는 최대의 시간으로서 배출자의 최종낙찰자선정일로부터의 기간을 반환받는다(단위:시간)*/
			'max_selection_duration',
			MAX_SELECTION_DURATION
		);
				
		SET VAR_MAX_SELECT2_AT = IN_REG_DT;			
		SET VAR_MAX_DECISION2_AT = ADDTIME(
								IN_REG_DT, 
								CONCAT(
									CAST(MAX_SELECTION_DURATION AS UNSIGNED), 
									':00:00'
								)
							);
							
		UPDATE SITE_WSTE_DISPOSAL_ORDER
		SET 
			MAX_SELECT2_AT				= VAR_MAX_SELECT2_AT,
			COLLECTOR_MAX_DECISION2_AT 	= VAR_MAX_DECISION2_AT ,
			UPDATED_AT					= IN_REG_DT
		WHERE ID 						= IN_DISPOSER_ORDER_ID;
        
        IF ROW_COUNT() = 1 THEN
			SELECT SECOND_PLACE INTO VAR_SECOND_PLACE
			FROM SITE_WSTE_DISPOSAL_ORDER
			WHERE ID = IN_DISPOSER_ORDER_ID;
			
			IF VAR_SECOND_PLACE IS NOT NULL THEN
				UPDATE COLLECTOR_BIDDING 
				SET MAX_DECISION_AT = VAR_MAX_DECISION2_AT
				WHERE ID = VAR_SECOND_PLACE;
                IF ROW_COUNT() = 1 THEN
					SET rtn_val 		= 0;
					SET msg_txt 		= 'success-sp_setup_second_place_schedule-1';
                ELSE
					SET rtn_val 		= 35603;
					SET msg_txt 		= 'collector record update failed';
                END IF;
			ELSE
				SET rtn_val 		= 0;
				SET msg_txt 		= 'success-sp_setup_second_place_schedule-2';
			END IF;
        ELSE
			SET rtn_val 		= 35602;
			SET msg_txt 		= 'emitter record update failed';
        END IF;
	ELSE
		SET rtn_val 		= 35601;
		SET msg_txt 		= 'No. 1 site has rights';
	END IF;

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_stat_contact_path`(
	IN IN_PARAMS			JSON
)
BEGIN
    DECLARE rtn_val			INT DEFAULT 0;
    DECLARE msg_txt			VARCHAR(200) DEFAULT NULL;
    DECLARE VAR_REG_DT		DATETIME DEFAULT NOW();
    DECLARE VAR_STAT_INFO	JSON DEFAULT NULL;
	SELECT JSON_OBJECT(
		'MEASURE_DATE'	, VAR_REG_DT,
        'STAT'			, JSON_OBJECT(
			'CONTACT_PATH'	, B.NAME,
			'COUNT'			, COUNT(B.ID)
		)
	)
	INTO VAR_STAT_INFO
	FROM MEMBER_CONTACT_PATH A 
    LEFT JOIN CONTACT_PATH B ON A.CONTACT_PATH = B.ID
    GROUP BY B.NAME;  
	CALL sp_return_results(rtn_val, msg_txt, VAR_STAT_INFO);

END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_toggle_notice`(
	IN IN_USER_ID					BIGINT,
    IN IN_NOTICE					TINYINT
)
BEGIN

/*
Procedure Name 	: sp_toggle_notice
Input param 	: 2개
Job 			: NOTICE 알림 토글
Update 			: 2022.03.14
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(VAR_REG_DT);
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
		CALL sp_req_current_time(VAR_REG_DT);
		UPDATE USERS SET NOTICE_ENABLED = IN_NOTICE, UPDATED_AT = VAR_REG_DT WHERE ID = IN_USER_ID;
		IF ROW_COUNT() = 1 THEN
			SET rtn_val 		= 0;
			SET msg_txt 		= 'success';
			SELECT JSON_ARRAYAGG(JSON_OBJECT(
				'ID', IN_USER_ID,
				'NOTICE_ENABLED', IN_NOTICE
			)) INTO json_data;
		ELSE
			SELECT JSON_ARRAYAGG(JSON_OBJECT(
				'ID'					, ID, 
				'NOTICE_ENABLED'		, NOTICE_ENABLED
			)) 
			INTO json_data 
			FROM USERS
			WHERE ID = IN_USER_ID;
			SET rtn_val 		= 33501;
			SET msg_txt 		= 'Notice status update failed';
			SIGNAL SQLSTATE '23000';
		END IF;
    END IF;
    
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_toggle_push`(
	IN IN_USER_ID				BIGINT,
    IN IN_PUSH					TINYINT
)
BEGIN

/*
Procedure Name 	: sp_update_push
Input param 	: 2개
Job 			: PUSH 알림 토글
Update 			: 2022.03.14
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(VAR_REG_DT);
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
		CALL sp_req_current_time(VAR_REG_DT);
		UPDATE USERS SET PUSH_ENABLED = IN_PUSH, UPDATED_AT = VAR_REG_DT WHERE ID = IN_USER_ID;
		IF ROW_COUNT() = 1 THEN
			SELECT JSON_ARRAYAGG(JSON_OBJECT(
				'ID'			, IN_USER_ID,
				'PUSH_ENABLED'	, IN_PUSH
			)) INTO json_data;
		ELSE
			SELECT JSON_ARRAYAGG(JSON_OBJECT(
				'ID'			, ID, 
				'PUSH_ENABLED'	, PUSH_ENABLED
			)) 
			INTO json_data 
			FROM USERS
			WHERE ID = IN_USER_ID;
			SET rtn_val 		= 33401;
			SET msg_txt 		= 'Push status update failed';
			SIGNAL SQLSTATE '23000';
		END IF;
    END IF;
    
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_avatar`(
	IN IN_USER_ID				BIGINT,
    IN IN_AVATAR_PATH			VARCHAR(255)
)
BEGIN

/*
Procedure Name 	: sp_create_avatar
Input param 	: 2개
Job 			: AVATAR 변경하기
Update 			: 2022.03.14
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
		CALL sp_req_current_time(VAR_REG_DT);
		UPDATE USERS 
        SET 
			AVATAR_PATH = IN_AVATAR_PATH, 
			UPDATED_AT = VAR_REG_DT 
		WHERE ID = IN_USER_ID;
		IF ROW_COUNT() = 0 THEN 
			SET rtn_val 		= 33301;
			SET msg_txt 		= 'Avatar update failure';
			SET json_data 		= NULL;
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
		SIGNAL SQLSTATE '23000';
    END IF;
    
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_comp_wste_cls`(
	IN IN_USER_REG_ID	VARCHAR(50),		/*입력값 : 사용자 아이디*/
	IN IN_COMP_ID		BIGINT,				/*입력값 : 사업자 고유등록번호*/
	IN IN_WSTE_CLS		VARCHAR(200),		/*입력값 : 폐기물 구분 코드(ARRAY)*/
	IN IN_REG_DT		DATETIME,			/*입력값 : 입력시간*/
    OUT rtn_val			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 		VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_update_comp_wste_cls
Input param 	: 4개
Output param 	: 2개
Job 			: 수거자 등의 사업자가 관리가능한 폐기물 대구분 코드(ARRAY)를 풀어서 개별적인 INSERT 실행
				: 이 프로시저는 nested procedure로서 이 프로시저를 실행하기 전에 사용자, 사업자, 사용자권한에 대한 유효성 검사를 진행한 후 실행시켜야 한다.
Update 			: 2022.01.10
Version			: 0.0.1
AUTHOR 			: Leo Nam

향후 IN_WSTE_CLS를 현재 list타입에서 json타입으로 로직변경해야 함
*/

	SET @WSTE_CLS_LIST = IN_WSTE_CLS;
    SET @IN_COUNT = 0;
    SET @LIST_COUNT = 0;
    SET @INSERTED_ROW = 0;
    
	SET rtn_val = -1;
	SET msg_txt = 'Nothing happend';
    
    IF IN_WSTE_CLS IS NOT NULL THEN
    /*입력받은 데이타 리스트에 무엇인가 존재하는 경우*/
		CALL sp_count_items_in_list(IN_WSTE_CLS, @NUMBER_OF_ITEMS);
        /*입력받은 데이타에 등록된 리스트가 존재하는 경우*/
		DELETE FROM COMP_WSTE_CLS_MATCH WHERE COMP_ID = IN_COMP_ID;
		
		WHILE (LOCATE(',', @WSTE_CLS_LIST) > 0) DO
			SET @WSTE_CLS = SUBSTRING(@WSTE_CLS_LIST, 1, LOCATE(',', @WSTE_CLS_LIST) - 1);
			SET @WSTE_CLS_LIST = SUBSTRING(@WSTE_CLS_LIST, LOCATE(',', @WSTE_CLS_LIST) + 1);        
			INSERT INTO COMP_WSTE_CLS_MATCH(COMP_ID, WSTE_CLS_CODE) VALUES(IN_COMP_ID, @WSTE_CLS);
			
			SET @INSERTED_ROW = @INSERTED_ROW + ROW_COUNT();
			SET @IN_COUNT = @IN_COUNT + 1;
		END WHILE;
		INSERT INTO COMP_WSTE_CLS_MATCH(COMP_ID, WSTE_CLS_CODE) VALUES(IN_COMP_ID, @WSTE_CLS_LIST);
		SET @INSERTED_ROW = @INSERTED_ROW + ROW_COUNT();	
		SET @IN_COUNT = @IN_COUNT + 1;		
		
		IF @INSERTED_ROW = @NUMBER_OF_ITEMS THEN
			SET rtn_val = 0;
			SET msg_txt = 'Succeeded in changing the waste classification code';
		ELSE
			SET rtn_val = 21001;
			SET msg_txt = 'The number of input data and the number of data input do not match';
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_company`(
	IN IN_USER_ID 				BIGINT,				/*입력값 : 관리자아이디(USERS.ID)*/
    IN IN_COMP_ID 				BIGINT,				/*입력값 : 사업자 고유식별 번호*/
    IN IN_COMP_NAME 			VARCHAR(100),		/*입력값 : 사업자 상호*/
    IN IN_REP_NAME 				VARCHAR(50),		/*입력값 : 대표자 이름*/
    IN IN_KIKCD_B_CODE 			VARCHAR(10),		/*입력값 : 사무실 소재지 시군구 법정동코드로서 10자리 코드*/
    IN IN_ADDR 					VARCHAR(255),		/*입력값 : 사무실 소재지 상세주소*/
    IN IN_CONTACT 				VARCHAR(100),		/*입력값 : 사무실 연락처*/
    IN IN_TRMT_BIZ_CODE 		VARCHAR(4),			/*입력값 : 사업자 분류코드로서 WSTE_TRMT_BIZ에 등록된 종류별 코드임*/
    IN IN_BIZ_REG_CODE 			VARCHAR(12),		/*입력값 : 사업자번호*/
    IN IN_PERMIT_REG_CODE 		VARCHAR(100),		/*입력값 : 허가증 또는 신고증명서번호*/
    IN IN_BIZ_REG_IMG_PATH 		VARCHAR(200),		/*입력값 : 사업자등록증 저장 경로*/
    IN IN_PERMIT_REG_IMG_PATH 	VARCHAR(200)		/*입력값 : 허가증 또는 신고증명서 저장경로*/
    )
BEGIN

/*
Procedure Name 	: sp_update_company
Input param 	: 12개
Job 			: COMPANY테이블에 대한 정보 수정
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.29
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	
	DECLARE VAR_PERMISSION						INT						DEFAULT NULL;	
	DECLARE VAR_HEAD_OFFICE						TINYINT					DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    CALL sp_req_company_exists(
		IN_COMP_ID, 
        TRUE, 
		rtn_val, 
		msg_txt
    );
    /*체크할 사업자등록번호로 등록된 사업자가 존재하는지 체크한 후 존재한다면 1, 그렇지 않으면 0을 반환하게 됨*/
    
    IF rtn_val = 0 THEN 
    /*같은 사업자등록번호를 가진 사업자가 존재하는 경우에는 정상처리 진행한다.*/ 
        CALL sp_req_user_exists_by_id(
			IN_USER_ID, 
            TRUE, 
			rtn_val, 
			msg_txt
        );
        
        IF rtn_val = 0 THEN
        /*사업자 정보에 대한 변경요청을 한 사용자가 존재하는 경우에는 정상처리함*/
			CALL sp_req_super_permission_by_userid(
				IN_USER_ID, 
                IN_COMP_ID, 
                VAR_PERMISSION,
                VAR_HEAD_OFFICE
            );
            IF VAR_PERMISSION IN (1, 2, 3, 5) THEN
			/*등록을 요청하는 사용자(IN_USER_ID)가 시스템 관리자(1, 2)인 경우, 모회사의 관리자가 자회사의 정보를 입력하는 경우(3), 자신이 속한 사업에 대한 정보를 입력하는 경우(5)로서 정상처리 진행한다.*/
				UPDATE COMPANY 
				SET 
					COMP_NAME 			= IN_COMP_NAME, 
					REP_NAME 			= IN_REP_NAME, 
					KIKCD_B_CODE 		= IN_KIKCD_B_CODE, 
					ADDR 				= IN_ADDR, 
					CONTACT 			= IN_CONTACT, 
					TRMT_BIZ_CODE 		= IN_TRMT_BIZ_CODE, 
					BIZ_REG_CODE 		= IN_BIZ_REG_CODE, 
					PERMIT_REG_CODE 	= IN_PERMIT_REG_CODE, 
					BIZ_REG_IMG_PATH 	= IN_BIZ_REG_IMG_PATH, 
					PERMIT_REG_IMG_PATH = IN_PERMIT_REG_IMG_PATH, 
					UPDATED_AT 			= VAR_REG_DT 
				WHERE ID 				= IN_COMP_ID;
				/*변경사항을 적용한다.*/
				
				IF ROW_COUNT() = 0 THEN
				/*저장이 되지 않은 경우에는 예외처리한다.*/
					SET rtn_val = 20401;
					SET msg_txt = 'Business information has not changed';
					SIGNAL SQLSTATE '23000';
				ELSE
					SET rtn_val = 0;
					SET msg_txt = 'Business information is updated successfully';
				END IF;
			ELSE
            /*권한이 없는 경우에는 예외처리한다.*/
				SET rtn_val = 20402;
				SET msg_txt = 'No right to change business information';
				SIGNAL SQLSTATE '23000';
            END IF;
		ELSE
        /*사업자 정보에 대한 변경요청을 한 사용자가 존재하지 않는 계정인 경우에는 예외 처리함*/
			SIGNAL SQLSTATE '23000';
        END IF;
	ELSE  
    /*같은 사업자등록번호를 가진 사업자가 존재하지 않는 경우에는 예외처리한다.*/
        SIGNAL SQLSTATE '23000';
	END IF;
	COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_company_permit_info`(
	IN IN_USER_ID 				BIGINT,				/*입력값 : 관리자아이디(USERS.ID)*/
    IN IN_COMP_ID 				BIGINT,				/*입력값 : 사업자 고유식별 번호*/
    IN IN_TRMT_BIZ_CODE 		VARCHAR(4),			/*입력값 : 사업자 분류코드로서 WSTE_TRMT_BIZ에 등록된 종류별 코드임*/
    IN IN_PERMIT_REG_CODE 		VARCHAR(100),		/*입력값 : 수거자 등으로 등록할 등록 또는 신고번호*/
    IN IN_PERMIT_REG_IMG_PATH 	VARCHAR(100),		/*입력값 : 수거자 등으로 등록할 등록증 또는 신고증명서의 업로드 경로*/
	IN IN_WSTE_CLS				VARCHAR(200),		/*입력값 : 폐기물 구분 코드(ARRAY)*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(100)		/*출력값 : 처리결과 문자열*/
    )
BEGIN

/*
Procedure Name 	: sp_update_company_permit_info
Input param 	: 6개
Output param 	: 2개
Job 			: 수거자등으로 등록할 사업자의 정보를 업데이트 처리한다.
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.29
Version			: 0.0.2
AUTHOR 			: Leo Nam

향후 IN_WSTE_CLS를 현재 list타입에서 json타입으로 로직변경해야 함
*/
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
	END;        
	START TRANSACTION;	
    
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    CALL sp_req_company_exists(
		IN_COMP_ID, 
        TRUE, 
		rtn_val, 
		msg_txt
    );
    /*체크할 사업자등록번호로 등록된 사업자가 존재하는지 체크한 후 존재한다면 1, 그렇지 않으면 0을 반환하게 됨*/
    
    IF rtn_val = 0 THEN  
    /*사업자가 존재하는 경우에는 정상처리 진행한다.*/         
        CALL sp_req_user_exists_by_id(
			IN_USER_ID, 
            TRUE, 
			rtn_val, 
			msg_txt
        );
        /*IN_USER_ID가 이미 등록되어 있는 사용자인지 체크한다. 등록되어 있는 경우에는 @USER_EXISTS = 1, 그렇지 않은 경우에는 @USER_EXISTS = 0을 반환한다.*/
        IF rtn_val = 0 THEN
        /*사업자 정보에 대한 변경요청을 한 사용자가 존재하는 경우에는 정상처리함*/
			UPDATE COMPANY 
			SET 
				TRMT_BIZ_CODE 		= IN_TRMT_BIZ_CODE, 
				PERMIT_REG_CODE 	= IN_PERMIT_REG_CODE, 
				PERMIT_REG_IMG_PATH = IN_PERMIT_REG_IMG_PATH, 
				UPDATED_AT 			= VAR_REG_DT 
			WHERE ID 				= IN_COMP_ID;
			/*변경사항을 적용한다.*/
			
			IF ROW_COUNT() = 0 THEN
				SET rtn_val = 20901;
				SET msg_txt = 'Business information not updated';
			END IF;
		ELSE
        /*사업자 정보에 대한 변경요청을 한 사용자가 존재하지 않는 계정인 경우에는 예외 처리함*/
			SET rtn_val = rtn_val;
			SET msg_txt = msg_txt;
			SIGNAL SQLSTATE '23000';
        END IF;
	ELSE 
    /*사업자가 존재하지 않는 경우에는 예외처리한다.*/
        SIGNAL SQLSTATE '23000';
	END IF;
    COMMIT;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_company_permit_info_without_handler`(
	IN IN_USER_REG_ID			VARCHAR(50),		/*입력값 : 관리자아이디*/
    IN IN_COMP_ID 				BIGINT,				/*입력값 : 사업자 고유식별 번호*/
    IN IN_TRMT_BIZ_CODE 		VARCHAR(4),			/*입력값 : 사업자 분류코드로서 WSTE_TRMT_BIZ에 등록된 종류별 코드임*/
    IN IN_PERMIT_REG_CODE 		VARCHAR(100),		/*입력값 : 수거자 등으로 등록할 등록 또는 신고번호*/
    IN IN_PERMIT_REG_IMG_PATH 	VARCHAR(100),		/*입력값 : 수거자 등으로 등록할 등록증 또는 신고증명서의 업로드 경로*/
	IN IN_WSTE_CLS				VARCHAR(200),		/*입력값 : 폐기물 구분 코드(ARRAY)*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(100)		/*출력값 : 처리결과 문자열*/
    )
BEGIN

/*
Procedure Name 	: sp_update_company_permit_info_without_handler
Input param 	: 6개
Output param 	: 2개
Job 			: 수거자등으로 등록할 사업자의 정보를 업데이트 처리한다.
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.15
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	
    
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    CALL sp_req_company_exists(
		IN_COMP_ID, 
        TRUE, 
        @COMP_EXISTS
    );
    /*체크할 사업자등록번호로 등록된 사업자가 존재하는지 체크한 후 존재한다면 1, 그렇지 않으면 0을 반환하게 됨*/
    
    IF @COMP_EXISTS = 0 THEN
    /*사업자가 존재하는 경우에는 정상처리 진행한다.*/         
        CALL sp_req_user_exists(
			IN_USER_REG_ID, 
            TRUE, 
			@rtn_val, 
			@msg_txt
        );
        /*IN_USER_REG_ID가 이미 등록되어 있는 사용자인지 체크한다. 등록되어 있는 경우에는 @USER_EXISTS = 1, 그렇지 않은 경우에는 @USER_EXISTS = 0을 반환한다.*/
        
        IF @rtn_val = 0 THEN
        /*사업자 정보에 대한 변경요청을 한 사용자가 존재하는 경우에는 정상처리함*/
			UPDATE COMPANY 
			SET 
				TRMT_BIZ_CODE 		= IN_TRMT_BIZ_CODE, 
				PERMIT_REG_CODE 	= IN_PERMIT_REG_CODE, 
				PERMIT_REG_IMG_PATH = IN_PERMIT_REG_IMG_PATH, 
				UPDATED_AT 			= VAR_REG_DT 
			WHERE ID 				= IN_COMP_ID;
			/*변경사항을 적용한다.*/
			
			IF ROW_COUNT() = 1 THEN
			/*저장이 되지 않은 경우에는 예외처리한다.*/
				SET rtn_val = 0;
				SET msg_txt = 'Success';
			ELSE
				SET rtn_val = 27702;
				SET msg_txt = 'Business information not updated';
			END IF;
		ELSE
        /*사업자 정보에 대한 변경요청을 한 사용자가 존재하지 않는 계정인 경우에는 예외 처리함*/
			SET rtn_val = @rtn_val;
			SET msg_txt = @msg_txt;
        END IF;
	ELSE  
    /*사업자가 존재하지 않는 경우에는 예외처리한다.*/
		SET rtn_val = 27701;
        SET msg_txt = 'No company exists';
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_notice`(
	IN IN_USER_ID				BIGINT,
    IN IN_NOTICE				TINYINT
)
BEGIN

/*
Procedure Name 	: sp_update_notice
Input param 	: 2개
Job 			: NOTICE 알림 토글
Update 			: 2022.03.14
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;		
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(VAR_REG_DT);
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
		CALL sp_req_current_time(VAR_REG_DT);
        SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID FROM USERS WHERE ID = IN_USER_ID;
        IF  VAR_USER_SITE_ID = 0 THEN
        /*개인 사용자인 경우*/
			UPDATE USERS SET NOTICE_ENABLED = IN_NOTICE AND UPDATED_AT = VAR_REG_DT WHERE ID = IN_USER_ID;
			IF ROW_COUNT() = 1 THEN
				SELECT JSON_ARRAYAGG(JSON_OBJECT(
					'ID', IN_USER_ID,
					'NOTICE_ENABLED', IN_NOTICE
				)) INTO json_data;
			ELSE
				SELECT JSON_ARRAYAGG(JSON_OBJECT(
					'ID'					, ID, 
					'NOTICE_ENABLED'		, NOTICE_ENABLED
				)) 
				INTO json_data 
				FROM USERS
                WHERE ID = IN_USER_ID;
				SET rtn_val 		= 33503;
				SET msg_txt 		= 'Notice status update failed';
				SIGNAL SQLSTATE '23000';
			END IF;
        ELSE
        /*사업자의 관리자인 경우*/
			SELECT CLASS INTO VAR_USER_CLASS FROM USERS WHERE ID = IN_USER_ID;
            IF VAR_USER_CLASS = 201 THEN
				UPDATE COMP_SITE SET NOTICE_ENABLED = IN_NOTICE AND UPDATED_AT = VAR_REG_DT WHERE ID = VAR_USER_SITE_ID;
                IF ROW_COUNT() = 1 THEN
					SELECT JSON_ARRAYAGG(JSON_OBJECT(
						'SITE_ID', VAR_USER_SITE_ID,
						'NOTICE_ENABLED', IN_NOTICE
					)) INTO json_data;
                ELSE
					SELECT JSON_ARRAYAGG(JSON_OBJECT(
						'SITE_ID'				, ID, 
						'NOTICE_ENABLED'		, NOTICE_ENABLED
					)) 
					INTO json_data 
					FROM COMP_SITE
					WHERE ID = VAR_USER_SITE_ID;
					SET rtn_val 		= 33502;
					SET msg_txt 		= 'Notice status update failed';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
				SELECT JSON_ARRAYAGG(JSON_OBJECT(
					'SITE_ID', VAR_USER_SITE_ID,
					'NOTICE_ENABLED', IN_NOTICE
				)) INTO json_data;
				SET rtn_val 		= 33501;
				SET msg_txt 		= 'No permission';
				SIGNAL SQLSTATE '23000';
            END IF;
        END IF;
    END IF;
    
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_post`(
	IN IN_USER_ID 				BIGINT,				/*입력값 : 관리자아이디(USERS.ID)*/
    IN IN_POST_ID 				BIGINT,				/*입력값 : 글 등록번호*/
    IN IN_SUBJECTS 				VARCHAR(255),		/*입력값 : 제목*/
    IN IN_CONTENTS 				TEXT				/*입력값 : 내용*/
    )
BEGIN

/*
Procedure Name 	: sp_update_post
Input param 	: 4개
Job 			: POST 수정
Update 			: 2022.03.13
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
	CALL sp_req_user_exists_by_id(
		IN_USER_ID, 
		TRUE, 
		rtn_val, 
		msg_txt
	);
	
	IF rtn_val = 0 THEN
	/*사용자가 존재하는 경우에는 정상처리함*/
		CALL sp_req_user_own_post(
			IN_USER_ID, 
			IN_POST_ID, 
			rtn_val,
			msg_txt
		);
		IF rtn_val = 0 THEN
		/*사용자가 포스트에 대한 작성자인 경우 정상처리한다.*/
			UPDATE POSTS 
			SET 
				SUBJECTS 			= IN_SUBJECTS, 
				CONTENTS 			= IN_CONTENTS,
                UPDATED_AT			= VAR_REG_DT
			WHERE ID 				= IN_POST_ID;
			/*변경사항을 적용한다.*/
			
			IF ROW_COUNT() = 0 THEN
			/*저장이 되지 않은 경우에는 예외처리한다.*/
				SET rtn_val = 32801;
				SET msg_txt = 'Post has not changed';
				SIGNAL SQLSTATE '23000';
			ELSE
				SET rtn_val = 0;
				SET msg_txt = 'success';
			END IF;
		ELSE
		/*사용자가 포스트에 대한 작성자가 아닌 경우 예외처리한다.*/
			SIGNAL SQLSTATE '23000';
		END IF;
	ELSE
	/*사사용자가 존재하지 않는 경우에는 예외처리함*/
		SIGNAL SQLSTATE '23000';
	END IF;
	COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_push`(
	IN IN_USER_ID				BIGINT,
    IN IN_PUSH					TINYINT
)
BEGIN

/*
Procedure Name 	: sp_update_push
Input param 	: 2개
Job 			: PUSH 알림 토글
Update 			: 2022.03.14
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;	
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(VAR_REG_DT);
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
		CALL sp_req_current_time(VAR_REG_DT);
        SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID FROM USERS WHERE ID = IN_USER_ID;
        IF  VAR_USER_SITE_ID = 0 THEN
        /*개인 사용자인 경우*/
			UPDATE USERS SET PUSH_ENABLED = IN_PUSH AND UPDATED_AT = VAR_REG_DT WHERE ID = IN_USER_ID;
			IF ROW_COUNT() = 1 THEN
				SELECT JSON_ARRAYAGG(JSON_OBJECT(
					'ID', IN_USER_ID,
					'PUSH_ENABLED', IN_PUSH
				)) INTO json_data;
			ELSE
				SELECT JSON_ARRAYAGG(JSON_OBJECT(
					'ID'					, ID, 
					'PUSH_ENABLED'			, PUSH_ENABLED
				)) 
				INTO json_data 
				FROM USERS
                WHERE ID = IN_USER_ID;
				SET rtn_val 		= 33403;
				SET msg_txt 		= 'Push status update failed';
				SIGNAL SQLSTATE '23000';
			END IF;
        ELSE
        /*사업자의 관리자인 경우*/
			SELECT CLASS INTO VAR_USER_CLASS FROM USERS WHERE ID = IN_USER_ID;
            IF VAR_USER_CLASS = 201 THEN
				UPDATE COMP_SITE SET PUSH_ENABLED = IN_PUSH AND UPDATED_AT = VAR_REG_DT WHERE ID = VAR_USER_SITE_ID;
                IF ROW_COUNT() = 1 THEN
					SELECT JSON_ARRAYAGG(JSON_OBJECT(
						'SITE_ID', VAR_USER_SITE_ID,
						'PUSH_ENABLED', IN_PUSH
					)) INTO json_data;
                ELSE
					SELECT JSON_ARRAYAGG(JSON_OBJECT(
						'SITE_ID'				, ID, 
						'PUSH_ENABLED'			, PUSH_ENABLED
					)) 
					INTO json_data 
					FROM COMP_SITE
					WHERE ID = VAR_USER_SITE_ID;
					SET rtn_val 		= 33402;
					SET msg_txt 		= 'Push status update failed';
					SIGNAL SQLSTATE '23000';
                END IF;
            ELSE
				SELECT JSON_ARRAYAGG(JSON_OBJECT(
					'SITE_ID', VAR_USER_SITE_ID,
					'PUSH_ENABLED', IN_PUSH
				)) INTO json_data;
				SET rtn_val 		= 33401;
				SET msg_txt 		= 'No permission';
				SIGNAL SQLSTATE '23000';
            END IF;
        END IF;
    END IF;
    
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_refresh_token`(
	IN IN_USER_ID			BIGINT,
    IN IN_REFRESH_TOKEN		VARCHAR(200)
)
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
        SET json_data = NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;
	START TRANSACTION;
    /*트랜잭션 시작*/
    
    CALL sp_req_current_time(VAR_REG_DT);
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
		UPDATE USERS 
        SET 
			JWT = IN_REFRESH_TOKEN ,
            UPDATED_AT = VAR_REG_DT
        WHERE ID = IN_USER_ID;
        IF ROW_COUNT() = 1 THEN
			SET rtn_val = 0;
			SET msg_txt = 'success';
        ELSE
			SET rtn_val = 29801;
			SET msg_txt = 'Failed to save refresh token';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
		SIGNAL SQLSTATE '23000';
    END IF;
	COMMIT;
	SET json_data = NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_site_configuration`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 사용자 고유등록번호(USERS.ID)*/
    IN IN_SITE_ID				BIGINT,				/*입력값 : 사이트 고유등록번호(COMP_SITE.ID)*/
    IN IN_KEY					VARCHAR(20),		/*입력값 : 변경하고자 하는 환경설정키(PUSH, NOTICE, COLLECTOR)*/
    IN IN_VALUE					TINYINT			/*입력값 : 변경하고자 하는 환경설정키의 값*/
)
BEGIN
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;	
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;	
	DECLARE VAR_IS_ABLE_TO_UPDATE				TINYINT					DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  	
    
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
	CALL sp_req_user_exists_by_id(
    /*DISPOSER가 존재하면서 활성화된 상태인지 검사한다.*/
		IN_USER_ID,
        TRUE,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 유효한 경우에는 정상처리한다.*/
		CALL sp_req_site_id_of_user_reg_id(
        /*사용자가 소속하고 있는 사이트의 고유등록번호를 반환한다.*/
			IN_USER_ID,
            VAR_USER_SITE_ID,
			rtn_val,
			msg_txt
        );
		IF VAR_USER_SITE_ID IS NOT NULL THEN
		/*사이트가 유효한 경우*/
			IF VAR_USER_SITE_ID = IN_SITE_ID THEN
			/*사이트가 사용자가 소속하고 있는 사이트인 경우*/
				CALL sp_req_user_class_by_user_reg_id(
				/*사용자의 권한을 반환한다.*/
					IN_USER_ID,
					VAR_USER_CLASS
				);
				IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
				/*사용자가 권한이 있는 경우*/
					IF IN_KEY = 'COLLECTOR' THEN
						CALL sp_req_is_site_collector(
						/*사이트가 수집운반등의 허가가 있는지 검사한다.*/
							IN_SITE_ID,
							rtn_val,
							msg_txt
						);
						IF rtn_val = 0 THEN
						/*사이트가 수집운반업의 허가를 가지고 있는 경우*/
							SET VAR_IS_ABLE_TO_UPDATE = TRUE;
						ELSE
						/*사이트가 수집운반업의 허가를 가지고 있지 않은 경우 예외처리한다.*/
							SET VAR_IS_ABLE_TO_UPDATE = FALSE;
						END IF;
					ELSE
						SET VAR_IS_ABLE_TO_UPDATE = TRUE;
					END IF;
					
					IF VAR_IS_ABLE_TO_UPDATE = TRUE THEN
					/*설정변경권한이 있는 경우*/
						SET @SQL_STMT = CONCAT('UPDATE SITE_CONFIGURATION SET ', IN_KEY, ' = ', IN_VALUE, ', UPDATED_AT = ', VAR_REG_DT);
						PREPARE dquery FROM @SQL_STMT;
						EXECUTE dquery;
						IF ROW_COUNT() = 1 THEN
						/*데이타를 성공적으로 변경한 경우*/
							SET rtn_val = 0;
							SET msg_txt = 'Data change success';
						ELSE
						/*데이타 변경에 실패한 경우 예외처리한다.*/
							SET rtn_val = 25901;
							SET msg_txt = 'Failed to change data';
							SIGNAL SQLSTATE '23000';
						END IF;
					ELSE
					/*설정변경권한이 없는 경우 예외처리한다.*/
						SET rtn_val = 25902;
						SET msg_txt = 'No permission to change environment settings';
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*사용자가 권한이 없는 경우 예외처리한다.*/
					SET rtn_val = 25903;
					SET msg_txt = 'User does not have permission to change configuration settings';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*사이트가 사용자가 소속하고 있지 않은 사이트인 경우 예외처리한다.*/
				SET rtn_val = 25904;
				SET msg_txt = 'User is not a member of the site';
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
		/*사이트가 존재하지 않거나 유효하지 않은 경우*/
			SIGNAL SQLSTATE '23000';
		END IF;   
    ELSE
    /*사용자가 유효하지 않은 경우에는 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;  
    
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_site_permit_info`(
	IN IN_USER_ID 						BIGINT,				/*입력값 : 관리자 고유등록번호*/
	IN IN_SITE_ID 						BIGINT,				/*입력값 : 사업자 고유식별 번호*/
	IN IN_WSTE_LIST						JSON,				/*입력값 : 폐기물 구분 코드(JSON)*/
	IN IN_TRMT_BIZ_CODE					VARCHAR(4),			/*입력값 : 사이트 업종구분*/
	IN IN_PERMIT_REG_CODE				VARCHAR(100),		/*입력값 : 사이트 업종구분*/
	IN In_PERMIT_REG_IMG_PATH			VARCHAR(200)		/*입력값 : 사이트 업종구분*/
    )
BEGIN

/*
Procedure Name 	: sp_update_site_permit_info
Input param 	: 6개
Job 			: 수거자등으로 등록할 사업자의 사이트 정보를 업데이트 처리한다.
Update 			: 2022.02.11
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
	
    CALL sp_update_site_permit_info_without_handler(
		IN_USER_ID,
		IN_SITE_ID,
		IN_WSTE_LIST,
		IN_TRMT_BIZ_CODE,
		IN_PERMIT_REG_CODE,
		In_PERMIT_REG_IMG_PATH,
		rtn_val,
		msg_txt
    );
    
    IF rtn_val > 0 THEN
	/*사이트 정보변경에 실패한 경우*/
		SIGNAL SQLSTATE '23000';
    END IF;
	COMMIT;
		/*SET rtn_val = 0;*/
		SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_site_permit_info_without_handler`(
	IN IN_USER_ID 						BIGINT,				/*입력값 : 관리자 고유등록번호*/
	IN IN_SITE_ID 						BIGINT,				/*입력값 : 사업자 고유식별 번호*/
	IN IN_WSTE_LIST						JSON,				/*입력값 : 폐기물 구분 코드(JSON)*/
	IN IN_TRMT_BIZ_CODE					VARCHAR(4),			/*입력값 : 사이트 업종구분*/
	IN IN_PERMIT_REG_CODE				VARCHAR(100),		/*입력값 : 사이트 업종구분*/
	IN IN_PERMIT_REG_IMG_PATH			VARCHAR(200),		/*입력값 : 사이트 업종구분*/
	OUT rtn_val 						INT,				/*출력값 : 처리결과 반환값*/
	OUT msg_txt 						VARCHAR(100)		/*출력값 : 처리결과 문자열*/
	)
BEGIN

/*
Procedure Name 	: sp_update_site_permit_info_without_handler
Input param 	: 6개
Output param 	: 2개
Job 			: 수거자등으로 등록할 사업자의 사이트 정보를 업데이트 처리한다.
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.02.11
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	
	DECLARE VAR_COMP_ID							BIGINT					DEFAULT NULL;	
	DECLARE VAR_PERMISSION						INT						DEFAULT NULL;	
	DECLARE VAR_IS_USER_SITE_HEAD_OFFICE		TINYINT					DEFAULT NULL;	
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;	
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    CALL sp_req_site_exists(
		IN_SITE_ID,
        TRUE,
        rtn_val,
        msg_txt
	);
    /*사이트가 존재하는지 체크한 후 존재한다면 0, 그렇지 않으면 예외코드를 반환하게 됨*/
    
    IF rtn_val = 0 THEN
    /*사이트가 존재하는 경우에는 정상처리 진행한다.*/   	
		CALL sp_req_comp_id_of_site(
			IN_SITE_ID,
			VAR_COMP_ID
		);
		
		CALL sp_req_super_permission_by_userid(
			IN_USER_ID,
			VAR_COMP_ID,
			VAR_PERMISSION,
			VAR_IS_USER_SITE_HEAD_OFFICE,
			rtn_val,
			msg_txt
		);
		
		CALL sp_req_user_class_by_user_reg_id(
			IN_USER_ID,
			VAR_USER_CLASS
		);
		
		CALL sp_req_site_id_of_user_reg_id(
			IN_USER_ID,
			VAR_USER_SITE_ID,
            rtn_val,
            msg_txt
		);
        
        IF rtn_val = 0 THEN
        /*사용자가 소속한 사이트가 존재하는 경우 정상처리한다.*/		
			IF VAR_PERMISSION = 1 OR VAR_PERMISSION = 2 OR ((VAR_PERMISSION = 3 OR VAR_PERMISSION = 5) AND VAR_IS_USER_SITE_HEAD_OFFICE = TRUE) OR (VAR_USER_CLASS = 201 AND VAR_USER_SITE_ID = IN_SITE_ID) THEN
			/*사이트의 모든 정보에 대한 접근 권한이 있는 경우*/   
            /*현재 업체 등록시 영업대상 폐기물에 대한 정보는 입력받고 있지 않고 있으므로 아래 sp_update_site_wste_cls은 실행을 멈춤 폐기물 정보에 대한 유효성 검사를 강화함으로써 아래의 프로시저가 에러를 발생시키게 되고 이에따라서 아래의 모든 프로세스가 실행되지 않았음. 2022.07.15 <= 허가증 이미지가 등록되지 않는 문제가 있었음
				CALL sp_update_site_wste_cls(
					IN_SITE_ID, 
					IN_WSTE_LIST, 
					VAR_REG_DT, 
					rtn_val, 
					msg_txt
				);
				*/
                SET rtn_val = 0;
				IF rtn_val = 0 THEN
				/*사이트에서 관리되는 폐기물 코드에 대한 업데이트를 성공하였다면 정상처리 진행한다.*/
					UPDATE COMP_SITE 
					SET 
						TRMT_BIZ_CODE 			= IN_TRMT_BIZ_CODE, 
						PERMIT_REG_CODE 		= IN_PERMIT_REG_CODE, 
						PERMIT_REG_IMG_PATH 	= IN_PERMIT_REG_IMG_PATH, 
						UPDATED_AT 				= VAR_REG_DT 
					WHERE ID 					= IN_SITE_ID;
						
					IF ROW_COUNT() = 0 THEN
						SET rtn_val = 22502;
						SET msg_txt = 'Fail to apply changes to the site';
					ELSE
						SET rtn_val = 0;
						SET msg_txt = 'Business information is updated successfully';
					END IF;
				END IF;
			ELSE
			/*사이트 정보에 대한 수정권한이 없는 경우*/
				SET rtn_val = 22503;
				SET msg_txt = 'No right to edit the site';
			END IF;
        END IF;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_site_wste_cls`(
	IN IN_SITE_ID			BIGINT,				/*입력값 : 사이트 고유등록번호*/
	IN IN_WSTE_LIST			JSON,				/*입력값 : 폐기물 구분 코드(JSON)*/
	IN IN_REG_DT			DATETIME,			/*입력값 : 입력시간*/
    OUT rtn_val				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 			VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_update_site_wste_cls
Input param 	: 3개
Output param 	: 2개
Job 			: 수거자 등의 사업자가 관리가능한 폐기물 대구분 코드(JSON)를 풀어서 개별적인 INSERT 실행
Update 			: 2022.02.11
Version			: 0.0.3
AUTHOR 			: Leo Nam
*/
    
    DECLARE vRowCount INT DEFAULT 0;
    DECLARE endOfRow TINYINT DEFAULT FALSE;
    
    DECLARE CUR_WSTE_CODE 		VARCHAR(8);
    DECLARE CUR_WSTE_APPEARANCE INT;
    
    DECLARE WSTE_CODE_CURSOR CURSOR FOR 
	SELECT WSTE_CODE, WSTE_APPEARANCE
    FROM JSON_TABLE(IN_WSTE_LIST, "$[*]" COLUMNS(
    /*JSON 데이타에서 사용하는 KEY와 VALUE 타입*/
		WSTE_CODE		 		VARCHAR(8)						PATH "$.WSTE_CODE",
		WSTE_APPEARANCE			INT			 					PATH "$.WSTE_APPEARANCE"
	)) AS WSTE_LIST;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    SET rtn_val = 0;
    SET msg_txt = 'success';
	OPEN WSTE_CODE_CURSOR;	
	cloop: LOOP
		FETCH WSTE_CODE_CURSOR 
        INTO 
			CUR_WSTE_CODE,
			CUR_WSTE_APPEARANCE;   
        
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
        
        IF WSTE_CLS_CODE IS NOT NULL AND WSTE_APPEARANCE IS NOT NULL THEN
			INSERT INTO 
			SITE_WSTE_CLS_MATCH(
				SITE_ID, 
				WSTE_CLS_CODE, 
				WSTE_APPEARANCE,
				CREATED_AT,
				UPDATED_AT
			)
			VALUES(
				IN_SITE_ID, 
				CUR_WSTE_CODE, 
				CUR_WSTE_APPEARANCE,
				IN_REG_DT, 
				IN_REG_DT
			);
			
			IF ROW_COUNT() = 0 THEN
				SET rtn_val = 22601;
				SET msg_txt = 'Failed to enter waste information';
				LEAVE cloop;
			ELSE
				SET rtn_val = 0;
				SET msg_txt = 'Success';
			END IF;
        END IF;
	END LOOP;   
	CLOSE WSTE_CODE_CURSOR;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_site_wste_lists`(
	IN IN_WSTE_LISTS				VARCHAR(255),				/*폐기물 리스트*/
    OUT rtn_val 					INT,						/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_update_site_wste_lists
Input param 	: 2개
Output param 	: 2개
Job 			: 파라미터로 받은 리스트(폐기물 리스트)를 사이트(IN_SITE)의 폐기물 리스트(WSTE_SITE_MATCH)로 업데이트 해준다. 기존 폐기물 리스트(WSTE_SITE_MATCH)가 있다면 모두 삭제(ACTIVE = FALSE) 처리후 등록한다.
Update 			: 2022.01.10
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_IN_ARRAY						VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_ITEM							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_LIST_COUNT						INT						DEFAULT 0;
	DECLARE VAR_SEPERATOR						VARCHAR(10)				DEFAULT 0;
    
	SET VAR_IN_ARRAY = IN_WSTE_LISTS;
    SET VAR_ITEM = NULL;
    SET VAR_SEPERATOR = ',' COLLATE utf8mb4_unicode_ci;
    /*리스트의 아이템을 분리하는 식별자로서 comma(,)를 사용하는 것으로 정의함. 식별자는 언제든지 변경가능함*/
    
    IF VAR_IN_ARRAY IS NULL OR VAR_IN_ARRAY = '' THEN
		SET VAR_LIST_COUNT = 0;
    ELSE
		SET VAR_LIST_COUNT = 1;
		WHILE (LOCATE(VAR_SEPERATOR, VAR_IN_ARRAY) > 0) DO
			SET VAR_ITEM = SUBSTRING(VAR_IN_ARRAY, 1, LOCATE(VAR_SEPERATOR, VAR_IN_ARRAY) - 1);
			SET VAR_IN_ARRAY = SUBSTRING(VAR_IN_ARRAY, LOCATE(VAR_SEPERATOR, VAR_IN_ARRAY) + 1);   
			SET VAR_LIST_COUNT = VAR_LIST_COUNT + 1;
		END WHILE;
    END IF;
    
    SET rtn_val = VAR_LIST_COUNT;
    SET msg_txt = VAR_IN_ARRAY;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_site_wste_lists_without_handler`(
	IN IN_USER_REG_ID				VARCHAR(255),				/*폐기물 리스트를 업데이트 하려고 하는 사용자의 고유등록번호(USERS.ID)*/
	IN IN_WSTE_LISTS				VARCHAR(255),				/*폐기물 리스트*/
	IN IN_SITE_ID					BIGINT,						/*폐기물의 종류를 업데이트할 사이트의 고유등록번호(COMP_SITE.ID)*/
	IN IN_REG_DT					DATETIME,					/*자료등록 및 변경일자*/
    OUT rtn_val 					INT,						/*출력값 : 처리결과 반환값*/
    OUT msg_txt 					VARCHAR(200)				/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_update_site_wste_lists_without_handler
Input param 	: 4개
Output param 	: 2개
Job 			: 파라미터로 받은 리스트(폐기물 리스트)를 사이트(IN_SITE)의 폐기물 리스트(WSTE_SITE_MATCH)로 업데이트 해준다. 기존 폐기물 리스트(WSTE_SITE_MATCH)가 있다면 모두 삭제(ACTIVE = FALSE) 처리후 등록한다.
Update 			: 2022.01.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_IN_ARRAY						VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_ITEM							VARCHAR(255)			DEFAULT NULL;
	DECLARE VAR_SEPERATOR						VARCHAR(10)				DEFAULT 0;

	SET VAR_IN_ARRAY = IN_WSTE_LISTS;
    SET VAR_ITEM = NULL;
    SET VAR_SEPERATOR = ',' COLLATE utf8mb4_unicode_ci;
    /*리스트의 아이템을 분리하는 식별자로서 comma(,)를 사용하는 것으로 정의함. 식별자는 언제든지 변경가능함*/
    
    IF VAR_IN_ARRAY IS NULL OR VAR_IN_ARRAY = '' THEN
    /*입력받은 ARRAY가 비어 있거나 또는 NULL인 경우에는 예외처리한다.*/
		SET rtn_val = 22301;
		SET msg_txt = 'No waste information';
    ELSE
    /*입력받은 ARRAY가 비어 있지 않은 경우*/
		UPDATE WSTE_SITE_MATCH SET ACTIVE = FALSE, UPDATED_AT = IN_REG_DT WHERE SITE_ID = IN_SITE_ID AND ACTIVE = TRUE;
        /*이전에 등록되어 있는 폐기물 리스트를 모두 삭제(ACTIVE = FALSE)처리한다.*/
        
		myloop : WHILE (LOCATE(VAR_SEPERATOR, VAR_IN_ARRAY) > 0) DO
			SET VAR_ITEM = SUBSTRING(VAR_IN_ARRAY, 1, LOCATE(VAR_SEPERATOR, VAR_IN_ARRAY) - 1);
			SET VAR_IN_ARRAY = SUBSTRING(VAR_IN_ARRAY, LOCATE(VAR_SEPERATOR, VAR_IN_ARRAY) + 1);   
            INSERT INTO WSTE_SITE_MATCH(SITE_ID, WSTE_CODE, ACTIVE, CREATED_AT, UPDATED_AT) VALUES(IN_SITE_ID, VAR_ITEM, TRUE, IN_REG_DT, IN_REG_DT);
            /*ARRAY에서 폐기물 아이템을 하나 받아서 WSTE_SITE_MATCH에 입력한다.*/
            IF ROW_COUNT() = 0 THEN
            /*폐기물 정보 입력에 실패한 경우 예외처리하면서 WHILE 조건문을 빠져 나간다.*/
				SET rtn_val = 22302;
				SET msg_txt = 'Failed to enter waste information';
				LEAVE myloop;
                /*WHILE 조건문을 빠져 나간다.*/
			ELSE
				SET rtn_val = 0;
				SET msg_txt = 'Success';
            END IF;
		END WHILE;
		INSERT INTO WSTE_SITE_MATCH(SITE_ID, WSTE_CODE, ACTIVE, CREATED_AT, UPDATED_AT) VALUES(IN_SITE_ID, VAR_IN_ARRAY, TRUE, IN_REG_DT, IN_REG_DT);
        /*마지막 남은 아이템을 WSTE_SITE_MATCH에 입력처리한다.*/
		IF ROW_COUNT() = 0 THEN
		/*폐기물 정보 입력에 실패한 경우 예외처리한다.*/
			SET rtn_val = 22303;
			SET msg_txt = 'Failed to enter waste information';
		ELSE
			SET rtn_val = 0;
			SET msg_txt = 'Success';
		END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_user`(
    IN IN_USER_REG_ID					VARCHAR(100),		/*입력값 : 계정 정보를 업데이트 하는 사용자 JWT*/
    IN IN_TARGET_USER_REG_ID			VARCHAR(50),		/*입력값 : 변경할 사용자 아이디*/
    IN IN_PWD							VARCHAR(100),		/*입력값 : 변경할 사용자 암호*/
    IN IN_USER_NAME						VARCHAR(20),		/*입력값 : 변경할 사용자 이름*/
    IN IN_PHONE							VARCHAR(20),		/*입력값 : 변경할 사용자 등록 전화번호*/
    IN IN_BELONG_TO						BIGINT,				/*입력값 : 변경할 사용자 소속 사업자로서 어떤 사업자에도 소속되어 있지 않은 개인인 경우에는 0이며 특정 사업자에게 소속된 관리자인 사용자의 경우에는 소속 사업자의 고유번호(COMPANY.ID)가 등록됨*/
    IN IN_ACTIVE						TINYINT,			/*입력값 : 변경할 사용자의 계정 활성화 상태로서 TRUE인 경우에는 계정이 활성화 된 것이며 FALSE인 경우에는 비활성화인 상태로서 계정활성화 이후 트랜잭션이 가능함*/
    IN IN_CLASS							INT					/*입력값 : 변경할 사용자의 권한을 구분하는 클래스로서 USERS_CLASS.ID 값을 참조함*/
)
BEGIN

/*
Procedure Name 	: sp_update_user
Input param 	: 8개
Job 			: 개인회원이 본인의 정보를 수정하는 경우에는 본인의 암호(PWD), 이름(USER_NAME), 전화번호(PHONE)를 수정할 수 있음
				: 사업자의 super user(member.admin:201)가 하부 조직에 편성된 사용자에 대한 정보를 수정하는 경우에는 소속사업자 고유번호(BELONG_TO), ACTIVE(활성여부), CLASS(권한등급)을 수정할 수 있음
				: 업데이트가 발생하는 경우에는 LOG정책에 따라 로그처리됨
TIME_ZONE 		: UTC + 09:00 처리하여 시간을 수동입력하였음
Update 			: 2022.01.30
Version			: 0.0.4
AUTHOR 			: Leo Nam
*/

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET @json_data 		= NULL;
		CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(@REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    call sp_req_usr_validation(IN_USER_REG_ID, @rtn_val, @msg_txt);
    IF @state_code > 0 THEN
    /*정보변경을 요청하는 사용자가 인증되지 않은 사용자인 경우*/
		SIGNAL SQLSTATE '23000';
    ELSE   
    /*정보변경을 요청하는 사용자가 인증된 사용자인 경우*/ 
		CALL sp_req_user_management_rights(IN_USER_REG_ID, IN_TARGET_USER_REG_ID, JOB, @IS_UPDATOR_ABLE_TO_UPDATE);
		/*IN_USER_REG_ID가 IN_TARGET_USER_REG_ID에 대하여 UPDATE할 권한이 있는지 체크한 후 권한이 있다면 TRUE, 권한이 없다면 FALSE를 @permission을 통하여 반환함*/
		
		IF @IS_UPDATOR_ABLE_TO_UPDATE = FALSE THEN
		/*정보변경을 시도하는 사용자(UPDATOR)가 정보변경의 권한이 없는 사용자인 경우*/
			SIGNAL SQLSTATE '23000';
		ELSE
		/*정보변경을 시도하는 사용자(UPDATOR)가 정보변경의 권한이 있는 사용자인 경우*/
		/*sys.admin(@permission = 1) : 모든 사용자의 정보에 대한 변경권한을 가짐*/
		/*모회사관리자(@permission = 2) : 모회사를 비롯한 하위조직에 대한 모든 사용자의 정보에 대한 변경권한을 가짐*/
		/*사업자관리자(@permission = 3) : 사업자관리자가 속한 모든 사용자의 정보에 대한 변경권한을 가짐*/
			
			call sp_get_user(IN_TARGET_USER_REG_ID, @REG_ID, @PWD, @USER_NAME, @PHONE, @BELONG_TO, @ACTIVE, @CLASS, @CLASS_NM);
			/*변경전 사용자 정보를 불러온다.*/
			
			IF IN_USER_REG_ID <> IN_TARGET_USER_REG_ID THEN
			/*사용자 정보를 수정하는 사용자가 본인의 정보를 수정하지 않는 경우*/   
				UPDATE USERS SET BELONG_TO = IN_BELONG_TO, ACTIVE = IN_ACTIVE, CLASS = IN_CLASS, UPDATED_AT = @REG_DT WHERE JWT = IN_TARGET_USER_REG_ID;
				/*사업자의 super user(member.admin:201)가 다른 사용자의 정보를 변경하는 경우에는 소속사업자와 활성여부, 권한만 변경할 수 있다.*/
				SELECT 
					COUNT(ID) INTO @CHK_COUNT 
				FROM USERS 
				WHERE 
					JWT		 	= IN_TARGET_USER_REG_ID AND 
					BELONG_TO 	= IN_BELONG_TO AND 
					ACTIVE 		= IN_ACTIVE AND 
					CLASS 		= IN_CLASS;
					
				IF @CHK_COUNT = 0 THEN
				/*변경이 적용되지 않은 경우*/
					SET @rtn_val = 20502;
					SET @msg_txt = 'failed to apply database changes';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*사용자 정보를 수정하는 사용자가 본인의 정보를 수정하는 경우*/
				UPDATE USERS SET PWD = IN_PWD, USER_NAME = IN_USER_NAME, PHONE = IN_PHONE, UPDATED_AT = @REG_DT WHERE JWT = IN_TARGET_USER_REG_ID;
				/*사용자가 본인의 정보를 수정하는 경우에는 암호와 본인이름, 핸드폰번호만 변경할 수 있다.*/
				SELECT 
					COUNT(ID) INTO @CHK_COUNT 
				FROM USERS 
				WHERE 
					JWT		 	= IN_TARGET_USER_REG_ID AND 
					PWD 		= IN_PWD AND 
					USER_NAME	= IN_USER_NAME AND 
					PHONE 		= IN_PHONE;
					
				IF @CHK_COUNT = 0 THEN
				/*변경이 적용되지 않은 경우*/
					SET @rtn_val = 20505;
					SET @msg_txt = 'member information updated fail';
					SIGNAL SQLSTATE '23000';
				END IF;
			END IF;
		END IF;
	END IF;
	COMMIT;
    
	SET @json_data 		= NULL;
	CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_user_name`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 작성자의 고유등록번호 (USERS.ID)*/
	IN IN_USER_NAME				VARCHAR(20)			/*입력값 : 사용자 이름*/
)
BEGIN

/*
Procedure Name 	: sp_update_user_name
Input param 	: 2개
Job 			: 사용자 이름 변경
Update 			: 2022.03.15
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다.*/
		UPDATE USERS SET USER_NAME = IN_USER_NAME WHERE ID = IN_USER_ID;
		IF ROW_COUNT() = 1 THEN
        /*변경에 성공한 경우*/
			SET rtn_val 		= 0;
			SET msg_txt 		= 'success';	
			SELECT JSON_ARRAYAGG(JSON_OBJECT(
				'ID', IN_USER_ID,
				'USER_NAME', IN_USER_NAME
			)) INTO json_data;		
        ELSE
		/*변경에 실패한 경우 예외처리한다*/
			SET rtn_val 		= 33901;
			SET msg_txt 		= 'user name update failed';	
			SIGNAL SQLSTATE '23000';
			SELECT JSON_ARRAYAGG(JSON_OBJECT(
				'ID', IN_USER_ID,
				'USER_NAME', USER_NAME
			)) INTO json_data
            FROM USERS WHERE ID = IN_USER_ID;
		END IF;
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SET json_data = NULL;
		SIGNAL SQLSTATE '23000';
		SELECT JSON_ARRAYAGG(JSON_OBJECT(
			'ID', IN_USER_ID,
			'USER_NAME', NULL
		)) INTO json_data;
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_update_wste_cls`(
	IN IN_USER_REG_ID	VARCHAR(50),		/*입력값 : 사용자 아이디*/
	IN IN_SITE_ID		BIGINT,				/*입력값 : 사이트 고유등록번호*/
	IN IN_WSTE_CLS		VARCHAR(200),		/*입력값 : 폐기물 구분 코드(ARRAY)*/
	IN IN_REG_DT		VARCHAR(200),		/*입력값 : 입력시간*/
    OUT rtn_val			INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 		VARCHAR(100)		/*출력값 : 처리결과 문자열*/
)
BEGIN

/*
Procedure Name 	: sp_update_wste_cls
Input param 	: 4개
Output param 	: 2개
Job 			: 수거자 등의 사업자가 관리가능한 폐기물 대구분 코드(ARRAY)를 풀어서 개별적인 INSERT 실행
				: 이 프로시저는 nested procedure로서 이 프로시저를 실행하기 전에 사용자, 사업자, 사용자권한에 대한 유효성 검사를 진행한 후 실행시켜야 한다.
Update 			: 2022.01.14
Version			: 0.0.2
AUTHOR 			: Leo Nam
CHANGE			: 사업자(COMPANY)중심에서 사이트(SITE)중심으로 이동
*/

	SET @WSTE_CLS_LIST = IN_WSTE_CLS;
    SET @IN_COUNT = 0;
    SET @INSERTED_ROW = 0;
    
    DELETE FROM SITE_WSTE_CLS_MATCH WHERE SITE_ID = IN_SITE_ID;
    
	WHILE (LOCATE(',', @WSTE_CLS_LIST) > 0) DO
		SET @WSTE_CLS = SUBSTRING(@WSTE_CLS_LIST, 1, LOCATE(',', @WSTE_CLS_LIST) - 1);
        SET @WSTE_CLS_LIST = SUBSTRING(@WSTE_CLS_LIST, LOCATE(',', @WSTE_CLS_LIST) + 1);        
        INSERT INTO SITE_WSTE_CLS_MATCH(SITE_ID, WSTE_CLS_CODE) VALUES(IN_SITE_ID, @WSTE_CLS);
        
		SET @INSERTED_ROW = @INSERTED_ROW + ROW_COUNT();
        SET @IN_COUNT = @IN_COUNT + 1;
    END WHILE;
    
	INSERT INTO SITE_WSTE_CLS_MATCH(SITE_ID, WSTE_CLS_CODE) VALUES(IN_SITE_ID, @WSTE_CLS_LIST);
	SET @INSERTED_ROW = @INSERTED_ROW + ROW_COUNT();
    
    IF @INSERTED_ROW < @IN_COUNT THEN
		SET rtn_val = 21001;
		SET msg_txt = 'Failed to change waste classification code';
	ELSE
		SET rtn_val = 0;
		SET msg_txt = 'Succeeded in changing the waste classification code';
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_upload_license`(
	IN IN_USER_ID			BIGINT,				/*입력값 : 사이트 등록자 아이디(USER.ID)*/
	IN IN_SITE_ID			BIGINT,				/*입력값 : 사이트 등록 아이디(COMP_SITE.ID)*/
	IN IN_LICENSE_PATH		VARCHAR(200)		/*입력값 : 허가증 저장경로*/
)
BEGIN

/*
Procedure Name 	: sp_upload_license
Input param 	: 2개
Job 			: 허가증 개별 등록
Update 			: 2022.03.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_REG_DT							DATETIME				DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;	
	DECLARE VAR_PERMIT_REG_IMG_PATH				VARCHAR(255)			DEFAULT NULL;	
	DECLARE VAR_LICENSE_CONFIRMED				TINYINT					DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data 		= NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(VAR_REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,			/*사이트를 개설하려는 자의 고유등록번호*/
        TRUE,					/*ACTIVE가 TRUE인 상태(활성화 상태)인 사용자에 한정*/
		rtn_val,
		msg_txt
    );
    
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우*/
		CALL sp_req_site_id_of_user_reg_id(
        /*사용자가 소속한 사이트의 고유등록번호를 반환한다.*/
			IN_USER_ID,
            VAR_USER_SITE_ID,
			rtn_val,
			msg_txt
        );
        IF rtn_val = 0 THEN
			IF VAR_USER_SITE_ID = IN_SITE_ID THEN
				SELECT B.PERMIT_REG_IMG_PATH, B.LICENSE_CONFIRMED
				INTO VAR_PERMIT_REG_IMG_PATH, VAR_LICENSE_CONFIRMED
				FROM USERS A 
				LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID
				WHERE A.ID = IN_USER_ID;
				UPDATE COMP_SITE SET PERMIT_REG_IMG_PATH = IN_LICENSE_PATH, UPDATED_AT = VAR_REG_DT WHERE ID = IN_SITE_ID;
				IF ROW_COUNT() = 1 THEN
					IF IN_LICENSE_PATH IS NULL THEN
					/*허가증 이미지 경로가 NULL이 아닌 경우에는 허가증 변경(등록)으로 간주하고 변경(등록)처리한다.*/
						UPDATE COMP_SITE SET CONFIRMED = FALSE WHERE ID = IN_SITE_ID;
						IF ROW_COUNT() = 0 THEN
							SET rtn_val 		= 34504;
							SET msg_txt 		= 'Failed to delete the license';
							SIGNAL SQLSTATE '23000';
						END IF;
					END IF;
				ELSE
					SET rtn_val 		= 34501;
					SET msg_txt 		= 'Failed to save the License image path';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
				SET rtn_val 		= 34502;
				SET msg_txt 		= 'User is not part of the site';
				SIGNAL SQLSTATE '23000';
			END IF;
        ELSE
			SIGNAL SQLSTATE '23000';
        END IF;
	ELSE
    /*사용자가 존재하지 않는 경우*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET json_data 		= NULL;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_upload_license_old`(
	IN IN_USER_ID			BIGINT,				/*입력값 : 사이트 등록자 아이디(USER.ID)*/
	IN IN_SITE_ID			BIGINT,				/*입력값 : 사이트 등록 아이디(COMP_SITE.ID)*/
	IN IN_LICENSE_PATH		VARCHAR(200)		/*입력값 : 허가증 저장경로*/
)
BEGIN

/*
Procedure Name 	: sp_upload_license
Input param 	: 2개
Job 			: 허가증 개별 등록
Update 			: 2022.03.23
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET @json_data 		= NULL;
		CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
    CALL sp_req_current_time(@REG_DT);
    /*UTC 표준시에 9시간을 추가하여 ASIA/SEOUL 시간으로 변경한 시간값을 현재 시간으로 정한다.*/
    
    CALL sp_req_user_exists_by_id(
		IN_USER_ID,			/*사이트를 개설하려는 자의 고유등록번호*/
        TRUE,					/*ACTIVE가 TRUE인 상태(활성화 상태)인 사용자에 한정*/
		@rtn_val,
		@msg_txt
    );
    
    IF @rtn_val = 0 THEN
    /*사용자가 존재하는 경우*/
		CALL sp_req_site_id_of_user_reg_id(
        /*사용자가 소속한 사이트의 고유등록번호를 반환한다.*/
			IN_USER_ID,
            @USER_SITE_ID,
			@rtn_val,
			@msg_txt
        );
        IF @rtn_val = 0 THEN
			IF @USER_SITE_ID = IN_SITE_ID THEN
				SELECT B.PERMIT_REG_IMG_PATH, B.LICENSE_CONFIRMED
				INTO @PERMIT_REG_IMG_PATH, @LICENSE_CONFIRMED
				FROM USERS A 
				LEFT JOIN COMP_SITE B ON A.AFFILIATED_SITE = B.ID
				WHERE A.ID = IN_USER_ID;
                IF @PERMIT_REG_IMG_PATH IS NULL AND @LICENSE_CONFIRMED = FALSE THEN
                /*허가증 이미지가 존재하지 않거나 허가증이 CS로부터 확인이 되지 않은 경우에는 허가증 업데이트가 가능하도록 처리함*/
					UPDATE COMP_SITE SET PERMIT_REG_IMG_PATH = IN_LICENSE_PATH, UPDATED_AT = @REG_DT WHERE ID = IN_SITE_ID;
					IF ROW_COUNT() = 1 THEN
						IF IN_LICENSE_PATH IS NULL THEN
						/*허가증 이미지 경로가 NULL이 아닌 경우에는 허가증 변경(등록)으로 간주하고 변경(등록)처리한다.*/
							UPDATE COMP_SITE SET CONFIRMED = FALSE WHERE ID = IN_SITE_ID;
							IF ROW_COUNT() = 1 THEN
								SET @rtn_val 		= 0;
								SET @msg_txt 		= 'Success';
							ELSE
								SET @rtn_val 		= 34504;
								SET @msg_txt 		= 'Failed to delete the license';
								SIGNAL SQLSTATE '23000';
							END IF;
						ELSE
							SET @rtn_val 		= 0;
							SET @msg_txt 		= 'Success';
						END IF;
					ELSE
						SET @rtn_val 		= 34501;
						SET @msg_txt 		= 'Failed to save the License image path';
						SIGNAL SQLSTATE '23000';
					END IF;
                ELSE
                /*그 이외의 경우에는 허가증 업데이트에 대한 예외처리해야 함*/
					SET @rtn_val 		= 34503;
					SET @msg_txt 		= 'license already registered';
					SIGNAL SQLSTATE '23000';
                END IF;
			ELSE
				SET @rtn_val 		= 34502;
				SET @msg_txt 		= 'User is not part of the site';
				SIGNAL SQLSTATE '23000';
			END IF;
        ELSE
			SIGNAL SQLSTATE '23000';
        END IF;
	ELSE
    /*사용자가 존재하지 않는 경우*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	SET @json_data 		= NULL;
	CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_write_anonymous_question`(
	IN IN_PHONE					VARCHAR(20),		/*입력값 : 전화번호*/
	IN IN_EMAIL					VARCHAR(50),		/*입력값 : 이메일*/
	IN IN_CONTENTS				TEXT,				/*입력값 : 내용*/
	IN IN_SUB_CATEGORY			INT					/*입력값 : 서브카테고리가 있는 경우 사용(현재는 문의사항에만 존재)*/    
)
BEGIN

/*
Procedure Name 	: sp_write_anonymous_question
Input param 	: 4개
Job 			: 비회원 문의사항 작성
Update 			: 2022.02.16
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    IF IN_PHONE IS NOT NULL THEN
		IF IN_EMAIL IS NOT NULL THEN
			CALL sp_write_anonymous_question_without_handler(
				IN_PHONE,
				IN_EMAIL,
				IN_CONTENTS,
				IN_SUB_CATEGORY,
				rtn_val,
				msg_txt,
				json_data
			);
			IF rtn_val > 0 THEN
			/*공지사항 작성에 실패한 경우 예외처리한다*/
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
			SET json_data = NULL;
			SET rtn_val 		= 34401;
			SET msg_txt 		= 'Email should not be empty';
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
		SET json_data = NULL;
		SET rtn_val 		= 34402;
		SET msg_txt 		= 'Phone number should not be empty';
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_write_anonymous_question_without_handler`(
	IN IN_PHONE					VARCHAR(20),		/*입력값 : 전화번호*/
	IN IN_EMAIL					VARCHAR(50),		/*입력값 : 이메일*/
	IN IN_CONTENTS				TEXT,				/*입력값 : 내용*/
	IN IN_SUB_CATEGORY			INT,				/*입력값 : 서브카테고리가 있는 경우 사용(현재는 문의사항에만 존재)*/    
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(100),		/*출력값 : 처리결과 문자열*/
    OUT json_data 				JSON
)
BEGIN

/*
Procedure Name 	: sp_write_anonymous_question_without_handler
Input param 	: 5개
Job 			: 비회원의 문의사항작성
Update 			: 2022.03.19
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_LAST_INSERT_ID					BIGINT					DEFAULT NULL;
	
	CALL sp_insert_post(
		NULL,	
		NULL,
		IN_CONTENTS,
		0,
		3,
		IN_SUB_CATEGORY,
		0,
		NULL,
		NULL,
		IN_PHONE,
		IN_EMAIL,
		rtn_val,
		msg_txt,
		VAR_LAST_INSERT_ID
	);
	IF rtn_val = 0 THEN
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'LAST_ID', VAR_LAST_INSERT_ID
			)
		) 
		INTO json_data;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_write_notice`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 작성자의 고유등록번호 (USERS.ID)*/
	IN IN_SUBJECT				VARCHAR(255),		/*입력값 : 제목*/
	IN IN_CONTENTS				TEXT				/*입력값 : 내용*/
    /*추후 리뷰작성에 관한 사용자권한을 구분하여야 함. 해당 DISPOSER_ORDER에 관련된 사용자만이 리뷰를 작성할 수 있도록 해야 함*/
)
BEGIN

/*
Procedure Name 	: sp_write_notice
Input param 	: 5개
Job 			: 사용자들이 posting을 한다.
Update 			: 2022.03.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET @json_data 		= NULL;
		CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	SET @PUSH_CATEGORY_ID = 32;
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        @rtn_val,
        @msg_txt
    );
                SET @msg_txt = 'HELLO4';
    IF @rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다.*/
                SET @msg_txt = 'HELLO3';
		SELECT CLASS INTO @USER_CLASS FROM USERS WHERE ID = IN_USER_ID;
		IF @USER_CLASS < 200 THEN
		/*사용자가 치움시스템관리자인 경우에는 리뷰작성가능*/	
			CALL sp_write_notice_without_handler(
				IN_USER_ID,
				IN_SUBJECT,
				IN_CONTENTS,
				@rtn_val,
				@msg_txt,
				@last_id
			);
                SET @msg_txt = 'HELLO2';
			IF @rtn_val = 0 THEN
			/*공지사항 작성에 실패한 경우 예외처리한다*/
				CALL sp_push_system_notice(
					IN_SUBJECT,
					@last_id,
					@PUSH_CATEGORY_ID,
					@json_data,
					@rtn_val,
					@msg_txt
				);
				IF @rtn_val > 0 THEN
					SIGNAL SQLSTATE '23000';
                SET @msg_txt = 'HELLO11';
				END IF;
            ELSE
				SIGNAL SQLSTATE '23000';
			END IF;
		ELSE
		/*사용자가 치움시스템관리자가 아닌 경우에는 예외처리한다*/
			SET @rtn_val = 34201;
			SET @msg_txt = 'Chium Service aministrators use only';
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(@rtn_val, @msg_txt, @json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_write_notice_without_handler`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 작성자의 고유등록번호 (USERS.ID)*/
	IN IN_SUBJECT				VARCHAR(255),		/*입력값 : 제목*/
	IN IN_CONTENTS				TEXT,				/*입력값 : 내용*/
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(100),		/*출력값 : 처리결과 문자열*/
    OUT last_id 				BIGINT
)
BEGIN

/*
Procedure Name 	: sp_write_notice_without_handler
Input param 	: 3개
Job 			: 공지작성
Update 			: 2022.03.18
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_LAST_INSERT_ID					BIGINT					DEFAULT NULL;
	
	CALL sp_insert_post(
		IN_USER_ID,	
		IN_SUBJECT,
		IN_CONTENTS,
		0,
		1,
		NULL,
		0,
		NULL,
		NULL,
		NULL,
		NULL,
		rtn_val,
		msg_txt,
		VAR_LAST_INSERT_ID
	);
	IF rtn_val = 0 THEN
		SET last_id = VAR_LAST_INSERT_ID;
	ELSE
	/*posting이 비정상적으로 종료된 경우 예외처리한다.*/
		SET last_id = NULL;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_write_post`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 작성자의 고유등록번호 (USERS.ID)*/
	IN IN_SUBJECT				VARCHAR(255),		/*입력값 : 제목*/
	IN IN_CONTENTS				TEXT,				/*입력값 : 내용*/
	IN IN_SITE_ID				BIGINT,				/*입력값 : 게시판 소유자(COMP_SITE.ID)*/
	IN IN_CATEGORY				INT,				/*입력값 : 게시판 종류(1: 공지사항, 2: 업무게시판, 3: 문의사항, 4: 리뷰)*/   
	IN IN_SUB_CATEGORY			INT,				/*입력값 : 서브카테고리가 있는 경우 사용(현재는 문의사항에만 존재)*/    
	IN IN_PID					BIGINT,				/*입력값 : 댓글의 경우에는 원글의 번호이며 원글인 경우에는 0*/    
	IN IN_RATING				FLOAT				/*입력값 : 리뷰작성시 입력되는 평점*/    
)
BEGIN

/*
Procedure Name 	: sp_write_post
Input param 	: 6개
Job 			: 사용자들이 posting을 한다.
Update 			: 2022.02.16
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;		
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;	
	DECLARE VAR_LAST_INSERT_ID					BIGINT					DEFAULT NULL;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다.*/
        CALL sp_req_user_class_by_user_reg_id(
			IN_USER_ID,
            VAR_USER_CLASS
        );
        IF IN_CATEGORY IS NOT NULL THEN
			IF IN_CATEGORY = 1 THEN
			/*게시판의 종류가 공지사항인 경우*/
				IF VAR_USER_CLASS = 101 OR VAR_USER_CLASS = 201 THEN
				/*사용자에게 글 작성 권한이 있는 경우 정상처리한다.*/
					CALL sp_req_site_id_of_user_reg_id(
						IN_USER_ID,
						VAR_USER_SITE_ID,
						rtn_val,
						msg_txt
					);
					IF rtn_val = 0 THEN
						IF IN_SITE_ID = VAR_USER_SITE_ID THEN
						/*사용자가 사이트의 소속관리자인 경우 정상처리한다.*/
							CALL sp_insert_post(
								IN_USER_ID,	
								IN_SUBJECT,
								IN_CONTENTS,
								IN_SITE_ID,
								IN_CATEGORY,
								IN_SUB_CATEGORY,
								IN_PID,
								IN_RATING,
								NULL,
								NULL,
								NULL,
								rtn_val,
								msg_txt,
								VAR_LAST_INSERT_ID
							);
							IF rtn_val = 0 THEN
								SELECT JSON_ARRAYAGG(
									JSON_OBJECT(
										'LAST_ID', VAR_LAST_INSERT_ID
									)
								) 
								INTO json_data;
							ELSE
							/*posting이 비정상적으로 종료된 경우 예외처리한다.*/
								SET json_data = NULL;
							END IF;
						ELSE
						/*사용자가 사이트의 소속관리자가 아닌 경우 예외처리한다.*/
							SET json_data = NULL;
							SET rtn_val = 30307;
							SET msg_txt = 'User is not part of the site';
							SIGNAL SQLSTATE '23000';
						END IF;
					ELSE
						SET json_data = NULL;
						SET rtn_val = 30306;
						SET msg_txt = 'Site does not exist';
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*사용자에게 글 작성 권한이 없는 경우 예외처리한다.*/
					SET json_data = NULL;
					SET rtn_val = 30305;
					SET msg_txt = 'User does not have permission to write notices';
					SIGNAL SQLSTATE '23000';
				END IF;
			ELSE
			/*게시판의 종류가 공지사항이 아닌 경우*/
				IF IN_CATEGORY = 2 THEN
				/*게시판의 종류가 업무게시판인 경우*/
					CALL sp_req_site_id_of_user_reg_id(
						IN_USER_ID,
						VAR_USER_SITE_ID,
						rtn_val,
						msg_txt
					);
					IF rtn_val = 0 THEN
						IF IN_SITE_ID = VAR_USER_SITE_ID THEN
						/*사용자가 사이트의 소속관리자인 경우 정상처리한다.*/
							CALL sp_insert_post(
								IN_USER_ID,	
								IN_SUBJECT,
								IN_CONTENTS,
								IN_SITE_ID,
								IN_CATEGORY,
								IN_SUB_CATEGORY,
								IN_PID,
								IN_RATING,
								NULL,
								NULL,
								NULL,
								rtn_val,
								msg_txt,
								VAR_LAST_INSERT_ID
							);
							IF rtn_val = 0 THEN
								SELECT JSON_ARRAYAGG(
									JSON_OBJECT(
										'LAST_ID', VAR_LAST_INSERT_ID
									)
								) 
								INTO json_data;
							ELSE
							/*posting이 비정상적으로 종료된 경우 예외처리한다.*/
								SET json_data = NULL;
							END IF;
						ELSE
						/*사용자가 사이트의 소속관리자가 아닌 경우 예외처리한다.*/
							SET json_data = NULL;
							SET rtn_val = 30304;
							SET msg_txt = 'User is not part of the site';
							SIGNAL SQLSTATE '23000';
						END IF;
					ELSE
						SET json_data = NULL;
						SET rtn_val = 30303;
						SET msg_txt = 'Site does not exist';
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
					/*게시판의 종류가 문의사항이거나 리뷰인 경우*/
						CALL sp_insert_post(
							IN_USER_ID,	
							IN_SUBJECT,
							IN_CONTENTS,
							IN_SITE_ID,
							IN_CATEGORY,
							IN_SUB_CATEGORY,
							IN_PID,
							IN_RATING,
							NULL,
							NULL,
							NULL,
							rtn_val,
							msg_txt,
							VAR_LAST_INSERT_ID
						);
						IF rtn_val = 0 THEN
							SELECT JSON_ARRAYAGG(
								JSON_OBJECT(
									'LAST_ID', VAR_LAST_INSERT_ID
								)
							) 
							INTO json_data;
						ELSE
						/*posting이 비정상적으로 종료된 경우 예외처리한다.*/
							SET json_data = NULL;
						END IF;
				END IF;
			END IF;
        ELSE
			SET json_data = NULL;
			SET rtn_val = 30302;
			SET msg_txt = 'Bulletin board does not exist';
			SIGNAL SQLSTATE '23000';
        END IF;
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SET json_data = NULL;
		SET rtn_val = 30301;
		SET msg_txt = 'user not found';
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_write_question`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 작성자의 고유등록번호 (USERS.ID)*/
	IN IN_CONTENTS				TEXT,				/*입력값 : 내용*/
	IN IN_PID					BIGINT,				/*입력값 : 댓글의 경우에는 원글의 번호이며 원글인 경우에는 0*/   
	IN IN_SUB_CATEGORY			INT					/*입력값 : 서브카테고리가 있는 경우 사용(현재는 문의사항에만 존재)*/    
)
BEGIN

/*
Procedure Name 	: sp_write_question
Input param 	: 4개
Job 			: 문의사항 작성
Update 			: 2022.02.16
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다.*/
		CALL sp_write_question_without_handler(
			IN_USER_ID,
			IN_CONTENTS,
			IN_PID,
			IN_SUB_CATEGORY,
			rtn_val,
			msg_txt,
			json_data
		);
		IF rtn_val > 0 THEN
		/*공지사항 작성에 실패한 경우 예외처리한다*/
			SIGNAL SQLSTATE '23000';
		END IF;
    ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SET json_data = NULL;
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_write_question_without_handler`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 작성자의 고유등록번호 (USERS.ID)*/
	IN IN_CONTENTS				TEXT,				/*입력값 : 내용*/
	IN IN_PID					BIGINT,				/*입력값 : 댓글의 경우에는 원글의 번호이며 원글인 경우에는 0*/    
	IN IN_SUB_CATEGORY			INT,				/*입력값 : 서브카테고리가 있는 경우 사용(현재는 문의사항에만 존재)*/    
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(100),		/*출력값 : 처리결과 문자열*/
    OUT json_data 				JSON
)
BEGIN

/*
Procedure Name 	: sp_write_question_without_handler
Input param 	: 5개
Job 			: 문의사항작성
Update 			: 2022.02.16
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_LAST_INSERT_ID					BIGINT					DEFAULT NULL;
	
	CALL sp_insert_post(
		IN_USER_ID,	
		NULL,
		IN_CONTENTS,
		0,
		3,
		IN_SUB_CATEGORY,
		IN_PID,
		NULL,
		NULL,
		NULL,
		NULL,
		rtn_val,
		msg_txt,
		VAR_LAST_INSERT_ID
	);
	IF rtn_val = 0 THEN
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'LAST_ID', VAR_LAST_INSERT_ID
			)
		) 
		INTO json_data;
	ELSE
	/*posting이 비정상적으로 종료된 경우 예외처리한다.*/
		SET json_data = NULL;
	END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_write_review`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 작성자의 고유등록번호 (USERS.ID)*/
	IN IN_CONTENTS				TEXT,				/*입력값 : 내용*/
	IN IN_SITE_ID				BIGINT,				/*입력값 : 게시판 소유자(COMP_SITE.ID)*/
	IN IN_PID					BIGINT,				/*입력값 : 댓글의 경우에는 원글의 번호이며 원글인 경우에는 0*/    
	IN IN_RATING				FLOAT,				/*입력값 : 리뷰작성시 입력되는 평점*/    
	IN IN_DISPOSER_ORDER_ID		BIGINT				/*입력값 : 리뷰를 작성할 입찰등록번호*/    
    /*추후 리뷰작성에 관한 사용자권한을 구분하여야 함. 해당 DISPOSER_ORDER에 관련된 사용자만이 리뷰를 작성할 수 있도록 해야 함*/
)
BEGIN

/*
Procedure Name 	: sp_write_post
Input param 	: 5개
Job 			: 사용자들이 posting을 한다.
Update 			: 2022.02.16
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE rtn_val								INT						DEFAULT 0;
	DECLARE msg_txt								VARCHAR(200)			DEFAULT 'success';
	DECLARE json_data							JSON					DEFAULT NULL;	
	DECLARE VAR_PUSH_CATEGORY_ID				INT						DEFAULT 27;	
	DECLARE VAR_REPORT_EXISTS					INT						DEFAULT 0;	
	DECLARE VAR_CONFIRMED						TINYINT					DEFAULT NULL;	
	DECLARE VAR_DISPOSER_SITE_ID				BIGINT					DEFAULT NULL;	
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;	
	DECLARE VAR_USER_CLASS						INT						DEFAULT NULL;	
	DECLARE VAR_DISPOSER_ID						BIGINT					DEFAULT NULL;	

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		SET json_data = NULL;
		CALL sp_return_results(rtn_val, msg_txt, json_data);
	END;        
	START TRANSACTION;							
    /*트랜잭션 시작*/  
    
	SET VAR_PUSH_CATEGORY_ID = 27;
	CALL sp_req_user_exists_by_id(
		IN_USER_ID,
        TRUE,
        rtn_val,
        msg_txt
    );
    IF rtn_val = 0 THEN
    /*사용자가 존재하는 경우 정상처리한다.*/
		SELECT COUNT(ID) INTO VAR_REPORT_EXISTS
		FROM TRANSACTION_REPORT 
		WHERE 
			DISPOSER_ORDER_ID = IN_DISPOSER_ORDER_ID AND
			COLLECTOR_SITE_ID = IN_SITE_ID;
		IF VAR_REPORT_EXISTS = 1 THEN
		/*리포트가 존재하는 경우 정상처리한다.*/
			SELECT CONFIRMED, DISPOSER_SITE_ID INTO VAR_CONFIRMED, VAR_DISPOSER_SITE_ID
			FROM TRANSACTION_REPORT 
			WHERE 
				DISPOSER_ORDER_ID = IN_DISPOSER_ORDER_ID AND
				COLLECTOR_SITE_ID = IN_SITE_ID;
			/*IF VAR_CONFIRMED = TRUE THEN*/
			/*폐기물 처리작업이 완료된 경우에는 정상처리한다.*/  
				SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID FROM USERS WHERE ID = IN_USER_ID;
				IF VAR_USER_SITE_ID > 0 THEN
				/*사용자가 사업자의 소속인 경우*/
					IF VAR_DISPOSER_SITE_ID = VAR_USER_SITE_ID THEN
					/*사용자가 배출자 소속인 경우 정상처리한다.*/
						SELECT CLASS INTO VAR_USER_CLASS
						FROM USERS
						WHERE ID = IN_USER_ID;
						IF VAR_USER_CLASS = 201 OR VAR_USER_CLASS = 202 THEN
						/*사용자에게 리뷰를 작성할 권한이 있는 경우 정상처리한다.*/
							CALL sp_write_review_without_handler(
								IN_USER_ID,
								IN_CONTENTS,
								IN_SITE_ID,
								IN_PID,
								IN_RATING,
								IN_DISPOSER_ORDER_ID,
								rtn_val,
								msg_txt,
								json_data
							);
							IF rtn_val = 0 THEN
								CALL sp_push_disposer_write_review(
									IN_USER_ID,
									IN_DISPOSER_ORDER_ID,
									IN_SITE_ID,
									VAR_PUSH_CATEGORY_ID,
									json_data,
									rtn_val,
									msg_txt
								);
								IF rtn_val > 0 THEN
									SIGNAL SQLSTATE '23000';
								END IF;
							ELSE
							/*공지사항 작성에 실패한 경우 예외처리한다*/
								SET rtn_val = 33806;
								SET msg_txt = 'Failed to write a review';
								SIGNAL SQLSTATE '23000';
							END IF;
						ELSE
						/*사용자에게 리뷰를 작성할 권한이 없는 경우 예외처리한다.*/
							SET rtn_val = 33806;
							SET msg_txt = 'user is not authorized to write a review';
							SIGNAL SQLSTATE '23000';
						END IF;
					ELSE
					/*사용자가 배출자 소속이 아닌 경우 예외처리한다.*/
						SET rtn_val = 33805;
						SET msg_txt = 'user does not belong to the emitter';
						SIGNAL SQLSTATE '23000';
					END IF;
				ELSE
				/*사용자가 개인인 경우*/
					SELECT DISPOSER_ID INTO VAR_DISPOSER_ID
                    FROM SITE_WSTE_DISPOSAL_ORDER
                    WHERE ID = IN_DISPOSER_ORDER_ID;
                    IF VAR_DISPOSER_ID = IN_USER_ID THEN
                    /*배출자와 사용자가 동일한 경우 정상처리한다.*/
						CALL sp_write_review_without_handler(
							IN_USER_ID,
							IN_CONTENTS,
							IN_SITE_ID,
							IN_PID,
							IN_RATING,
							IN_DISPOSER_ORDER_ID,
							rtn_val,
							msg_txt,
							json_data
						);
						IF rtn_val = 0 THEN
							CALL sp_push_disposer_write_review(
								IN_USER_ID,
								IN_DISPOSER_ORDER_ID,
								IN_SITE_ID,
								VAR_PUSH_CATEGORY_ID,
								json_data,
								rtn_val,
								msg_txt
							);
							IF rtn_val > 0 THEN
								SIGNAL SQLSTATE '23000';
							END IF;
						ELSE
						/*공지사항 작성에 실패한 경우 예외처리한다*/
							SET rtn_val = 33804;
							SET msg_txt = 'Failed to write a review';
							SIGNAL SQLSTATE '23000';
						END IF;
                    ELSE
                    /*배출자와 사용자가 동일하지 않은 경우 예외처리한다.*/
						SET rtn_val = 33803;
						SET msg_txt = 'user is not the diposer';
						SIGNAL SQLSTATE '23000';
                    END IF;
				END IF;
			/*ELSE*/
			/*폐기물 처리작업이 완료되지 않은 경우에는 예외처리한다.*/
			/*	SET rtn_val = 33802;
				SET msg_txt = 'transaction does not completed';
				SIGNAL SQLSTATE '23000';
			END IF;*/
		ELSE
		/*리포트가 존재하지 않는 경우 예외처리한다.*/
			SET rtn_val = 33801;
			SET msg_txt = 'transaction report does not exist';
			SIGNAL SQLSTATE '23000';
		END IF;
	ELSE
    /*사용자가 존재하지 않는 경우 예외처리한다.*/
		SIGNAL SQLSTATE '23000';
    END IF;
    COMMIT;
	CALL sp_return_results(rtn_val, msg_txt, json_data);
END$$
DELIMITER ;

DELIMITER $$
CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_write_review_without_handler`(
	IN IN_USER_ID				BIGINT,				/*입력값 : 작성자의 고유등록번호 (USERS.ID)*/
	IN IN_CONTENTS				TEXT,				/*입력값 : 내용*/
	IN IN_SITE_ID				BIGINT,				/*입력값 : 게시판 소유자(COMP_SITE.ID)*/
	IN IN_PID					BIGINT,				/*입력값 : 댓글의 경우에는 원글의 번호이며 원글인 경우에는 0*/    
	IN IN_RATING				FLOAT,				/*입력값 : 리뷰작성시 입력되는 평점*/  
	IN IN_DISPOSER_ORDER_ID		BIGINT,				/*입력값 : 리뷰를 작성할 입찰등록번호*/      
    OUT rtn_val 				INT,				/*출력값 : 처리결과 반환값*/
    OUT msg_txt 				VARCHAR(100),		/*출력값 : 처리결과 문자열*/
    OUT json_data 				JSON
)
BEGIN

/*
Procedure Name 	: sp_write_review_without_handler
Input param 	: 5개
Job 			: 리뷰작성
Update 			: 2022.02.16
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/
	DECLARE VAR_USER_SITE_ID					BIGINT					DEFAULT NULL;	
	DECLARE VAR_REVIEW_EXISTS					INT						DEFAULT NULL;	
	DECLARE VAR_LAST_INSERT_ID					BIGINT					DEFAULT NULL;
    
	SELECT AFFILIATED_SITE INTO VAR_USER_SITE_ID
    FROM USERS
    WHERE ID = IN_USER_ID;
    
    IF VAR_USER_SITE_ID = 0 THEN
    /*작성자가 개인인 경우*/
		SELECT COUNT(ID) INTO VAR_REVIEW_EXISTS
        FROM POSTS
        WHERE 
			CREATOR_ID = IN_USER_ID AND
            SITE_ID = IN_SITE_ID AND
            DISPOSER_ORDER_ID = IN_DISPOSER_ORDER_ID AND
            DELETED = FALSE;
    ELSE
    /*작성자가 사업자인 경우에는 소속사이트의 아이디로 등록된 리뷰가 존재하는 경우에는 리뷰를 본인이 리뷰를 작성하지 않았더라도 리뷰를 작성한 것으로 본다*/
		SELECT COUNT(A.ID) INTO VAR_REVIEW_EXISTS
        FROM POSTS A
        LEFT JOIN USERS B ON A.CREATOR_ID = B.ID
        WHERE 
			B.AFFILIATED_SITE = VAR_USER_SITE_ID AND
            A.SITE_ID = IN_SITE_ID AND
            A.DISPOSER_ORDER_ID = IN_DISPOSER_ORDER_ID AND
            A.DELETED = FALSE;
    END IF;
    
    IF VAR_REVIEW_EXISTS = 0 THEN
    /*이전에 리뷰를 작성하지 않은 경우에는 정상처리한다.*/
		CALL sp_insert_post(
			IN_USER_ID,	
			NULL,
			IN_CONTENTS,
			IN_SITE_ID,
			4,
			NULL,
			IN_PID,
			IN_RATING,
			IN_DISPOSER_ORDER_ID,
			NULL,
			NULL,
			rtn_val,
			msg_txt,
			VAR_LAST_INSERT_ID
		);
		IF rtn_val = 0 THEN
			SELECT JSON_ARRAYAGG(
				JSON_OBJECT(
					'LAST_ID', VAR_LAST_INSERT_ID
				)
			) 
			INTO json_data;
		ELSE
		/*posting이 비정상적으로 종료된 경우 예외처리한다.*/
			SET json_data = NULL;
		END IF;
    ELSE
    /*이전에 리뷰를 작성한 경우에는 예외처리한다.*/
		SET json_data = NULL;
		SET rtn_val = 39701;
		SET msg_txt = 'you or your site already registered the review';
    END IF;
END$$
DELIMITER ;
