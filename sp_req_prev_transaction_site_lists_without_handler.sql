CREATE DEFINER=`chiumdb`@`%` PROCEDURE `sp_req_prev_transaction_site_lists_without_handler`(
	IN IN_USER_ID			BIGINT,				/*입력값 : 사용자 등록번호(USERS.ID)*/
    IN IN_USER_SITE_ID		BIGINT,	
    OUT rtn_val				INT,
    OUT msg_txt				VARCHAR(200),
    OUT OUT_SITE_LISTS		JSON
)
BEGIN

/*
Procedure Name 	: sp_req_prev_transaction_site_lists_without_handler
Input param 	: 3개
Job 			: 이전거래 이력이 있는 사이트를 반환한다.
Update 			: 2022.05.09
Version			: 0.0.1
AUTHOR 			: Leo Nam
*/

    DECLARE vRowCount 							INT DEFAULT 0;
    DECLARE endOfRow 							TINYINT DEFAULT FALSE;  
    DECLARE CUR_COLLECTOR_SITE_ID				BIGINT;
    DECLARE CUR_COUNT_OF_TRANSACTION			INT;
    DECLARE TEMP_CURSOR		 					CURSOR FOR 
	SELECT 
		A.COLLECTOR_SITE_ID,
        COUNT(A.COLLECTOR_SITE_ID)
    FROM TRANSACTION_REPORT A 
    LEFT JOIN SITE_WSTE_DISPOSAL_ORDER B ON A.DISPOSER_ORDER_ID = B.ID
    LEFT JOIN USERS C ON B.SITE_ID = C.AFFILIATED_SITE
    LEFT JOIN USERS D ON B.DISPOSER_ID = D.ID
    LEFT JOIN COMP_SITE E ON A.COLLECTOR_SITE_ID = E.ID
	WHERE 
		A.CONFIRMED = TRUE AND
        B.CLOSE_AT <= NOW() AND
        IF (B.SITE_ID = 0, D.ID = IN_USER_ID, C.ID = IN_USER_ID) AND
        (C.CLASS = 201 OR C.CLASS = 202) AND
        C.ACTIVE = TRUE AND
        E.ACTIVE = TRUE AND/*
        IF (B.SITE_ID = 0, 
			A.COLLECTOR_SITE_ID NOT IN (SELECT TARGET_ID FROM REGISTERED_SITE WHERE USER_ID = IN_USER_ID), 
			A.COLLECTOR_SITE_ID NOT IN (SELECT TARGET_ID FROM REGISTERED_SITE WHERE SITE_ID = B.SITE_ID)
		) AND*/
        A.COLLECTOR_SITE_ID NOT IN (
			SELECT TARGET_ID 
            FROM REGISTERED_SITE 
            WHERE 
				IF(IN_USER_SITE_ID = 0,
					USER_ID = IN_USER_ID,
                    SITE_ID = IN_USER_SITE_ID
				) AND
                REGISTER_TYPE = 2 AND
                ACTIVE = TRUE
        )
	GROUP BY 
		A.DISPOSER_SITE_ID, A.COLLECTOR_SITE_ID;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE;
    
	CREATE TEMPORARY TABLE IF NOT EXISTS PREV_TRANSACTION_SITE_LIST_TEMP (
		COLLECTOR_SITE_ID				BIGINT,
		CATEGORY						TINYINT,
		COUNT_OF_TRANSACTION			INT,
		REPORT_CONFIRMED_AT				DATETIME,
        COLLECTOR_INFO					JSON
	);        
	
	OPEN TEMP_CURSOR;	
	cloop: LOOP
		FETCH TEMP_CURSOR 
		INTO 
			CUR_COLLECTOR_SITE_ID,
			CUR_COUNT_OF_TRANSACTION;
		
		SET vRowCount = vRowCount + 1;
		IF endOfRow THEN
			LEAVE cloop;
		END IF;
		
		INSERT INTO 
		PREV_TRANSACTION_SITE_LIST_TEMP(
			COLLECTOR_SITE_ID,
			CATEGORY,
			COUNT_OF_TRANSACTION
		)
		VALUES(
			CUR_COLLECTOR_SITE_ID,
			FALSE,
			CUR_COUNT_OF_TRANSACTION
		);		
        
        CALL sp_get_site_info(
			CUR_COLLECTOR_SITE_ID,
            @COLLECTOR_INFO
        );
        
        CALL sp_get_last_report_confirmed_at(
			IN_USER_ID,
			CUR_COLLECTOR_SITE_ID,
            @REPORT_CONFIRMED_AT
        );
        
		UPDATE PREV_TRANSACTION_SITE_LIST_TEMP 
        SET 
			COLLECTOR_INFO 			= @COLLECTOR_INFO,
			REPORT_CONFIRMED_AT 	= @REPORT_CONFIRMED_AT
		WHERE COLLECTOR_SITE_ID		= CUR_COLLECTOR_SITE_ID;
	END LOOP;   
	CLOSE TEMP_CURSOR;
    
    IF vRowCount = 0 THEN
		SET rtn_val 				= 29701;
		SET msg_txt 				= 'No data found';
		SET OUT_SITE_LISTS 				= NULL;
    ELSE
		SET rtn_val 				= 0;
		SET msg_txt 				= 'Success';	
		SELECT JSON_ARRAYAGG(
			JSON_OBJECT(
				'COLLECTOR_SITE_ID'				, COLLECTOR_SITE_ID, 
				'CATEGORY'						, CATEGORY,
				'COUNT_OF_TRANSACTION'			, COUNT_OF_TRANSACTION,
				'REPORT_CONFIRMED_AT'			, REPORT_CONFIRMED_AT,
				'COLLECTOR_INFO'				, COLLECTOR_INFO
			)
		) 
		INTO OUT_SITE_LISTS 
		FROM PREV_TRANSACTION_SITE_LIST_TEMP;
    END IF; 
	DROP TABLE IF EXISTS PREV_TRANSACTION_SITE_LIST_TEMP;
END